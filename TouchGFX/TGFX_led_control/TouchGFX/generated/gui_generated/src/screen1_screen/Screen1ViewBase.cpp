/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLUEFON_TOGGLE_ID));
    add(image1);

    toggleButton.setXY(171, 111);
    toggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_OFF_NORMAL_ID));
    toggleButton.setAction(buttonCallback);
    add(toggleButton);

    gauge_test.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_BACKGROUNDS_DARK_FILLED_ID));
    gauge_test.setPosition(339, 76, 120, 120);
    gauge_test.setCenter(60, 60);
    gauge_test.setStartEndAngle(-119, 122);
    gauge_test.setRange(0, 100);
    gauge_test.setValue(50);
    gauge_test.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
    gauge_test.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_NEEDLES_ROUGH_ID, 5, 33);
    gauge_test.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge_test.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge_test.setArcVisible();
    gauge_testPainter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_FILLERS_SWOOP_ID));
    gauge_test.getArc().setPainter(gauge_testPainter);
    gauge_test.getArc().setRadius(50);
    gauge_test.getArc().setLineWidth(49);
    gauge_test.getArc().setCapPrecision(180);
    gauge_test.setArcPosition(12, 12, 95, 71);
    add(gauge_test);

    buttonUp.setXY(21, 26);
    buttonUp.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DROP_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DROP_UP_50_50_000000_SVG_ID));
    buttonUp.setIconXY(30, 0);
    buttonUp.setAction(buttonCallback);
    add(buttonUp);

    buttonDown.setXY(21, 196);
    buttonDown.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DROP_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DROP_DOWN_50_50_000000_SVG_ID));
    buttonDown.setIconXY(30, 0);
    buttonDown.setAction(buttonCallback);
    add(buttonDown);

    GLabel.setPosition(339, 197, 120, 49);
    GLabel.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    GLabel.setLinespacing(0);
    Unicode::snprintf(GLabelBuffer, GLABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XH9D).getText());
    GLabel.setWildcard(GLabelBuffer);
    GLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YUC8));
    add(GLabel);
}

Screen1ViewBase::~Screen1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton)
    {
        //InteractionLED
        //When toggleButton clicked call virtual function
        //Call ToggleLED
        ToggleLED();
    }
    if (&src == &buttonUp)
    {
        //Interaction1
        //When buttonUp clicked call virtual function
        //Call GuageUp
        GuageUp();
    }
    if (&src == &buttonDown)
    {
        //Interaction2
        //When buttonDown clicked call virtual function
        //Call GuageDown
        GuageDown();
    }
}
