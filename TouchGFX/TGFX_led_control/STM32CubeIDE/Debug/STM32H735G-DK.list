
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b44  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000152c  08017e14  08017e14  00027e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08019340  08019340  00029340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080194e8  080194e8  000294e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  08019500  08019500  00029500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08019510  08019510  000ad1a0  2**0
                  CONTENTS
  7 .ARM          00000000  08019510  08019510  000ad1a0  2**0
                  CONTENTS
  8 .preinit_array 00000000  08019510  08019510  000ad1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08019510  08019510  00029510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08019524  08019524  00029524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  24000000  0801952c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00006c04  24000110  0801963c  00030110  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  24006d14  0801963c  00036d14  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000ad1a0  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 0006d1a0  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000a8203  00000000  00000000  000ad1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000127be  00000000  00000000  001553d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002cd0  00000000  00000000  00167b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004438  00000000  00000000  0016a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00042afc  00000000  00000000  0016ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004f992  00000000  00000000  001b1794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00181bc5  00000000  00000000  00201126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00382ceb  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000867c  00000000  00000000  00382dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00029298  00000000  00000000  0038b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000110 	.word	0x24000110
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017dfc 	.word	0x08017dfc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000114 	.word	0x24000114
 800030c:	08017dfc 	.word	0x08017dfc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80003b0:	4901      	ldr	r1, [pc, #4]	; (80003b8 <vApplicationIdleHook+0x8>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	f008 be02 	b.w	8008fbc <vTaskSetApplicationTaskTag>
 80003b8:	08001659 	.word	0x08001659

080003bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f007 f9a3 	bl	800770a <osDelay>
  for(;;)
 80003c4:	e7fb      	b.n	80003be <StartDefaultTask+0x2>
	...

080003c8 <SystemClock_Config>:
{
 80003c8:	b510      	push	{r4, lr}
 80003ca:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003cc:	224c      	movs	r2, #76	; 0x4c
 80003ce:	2100      	movs	r1, #0
 80003d0:	a809      	add	r0, sp, #36	; 0x24
 80003d2:	f016 fd7d 	bl	8016ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d6:	2220      	movs	r2, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	a801      	add	r0, sp, #4
 80003dc:	f016 fd78 	bl	8016ed0 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f005 fcbf 	bl	8005d64 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e6:	2300      	movs	r3, #0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <SystemClock_Config+0x90>)
 80003ec:	699a      	ldr	r2, [r3, #24]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80003f2:	619a      	str	r2, [r3, #24]
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	0491      	lsls	r1, r2, #18
 8000402:	d5fc      	bpl.n	80003fe <SystemClock_Config+0x36>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800040a:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 44;
 800040c:	212c      	movs	r1, #44	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000410:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800041c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 800041e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000422:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000424:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000428:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f005 fcd8 	bl	8005de0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2103      	movs	r1, #3
 8000432:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000434:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000436:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800043e:	2340      	movs	r3, #64	; 0x40
 8000440:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000444:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000448:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800044a:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800044e:	f005 ffe7 	bl	8006420 <HAL_RCC_ClockConfig>
}
 8000452:	b01c      	add	sp, #112	; 0x70
 8000454:	bd10      	pop	{r4, pc}
 8000456:	bf00      	nop
 8000458:	58024800 	.word	0x58024800

0800045c <PeriphCommonClock_Config>:
{
 800045c:	b500      	push	{lr}
 800045e:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000460:	2100      	movs	r1, #0
 8000462:	2298      	movs	r2, #152	; 0x98
 8000464:	a808      	add	r0, sp, #32
 8000466:	f016 fd33 	bl	8016ed0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800046a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800046e:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000470:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000472:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000476:	2205      	movs	r2, #5
 8000478:	2350      	movs	r3, #80	; 0x50
 800047a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800047e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000480:	e9cd 3304 	strd	r3, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000484:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800048a:	2320      	movs	r3, #32
 800048c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800048e:	f006 fa4d 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
}
 8000492:	b02f      	add	sp, #188	; 0xbc
 8000494:	f85d fb04 	ldr.w	pc, [sp], #4

08000498 <main>:
{
 8000498:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800049c:	b0a1      	sub	sp, #132	; 0x84

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800049e:	2210      	movs	r2, #16
 80004a0:	2100      	movs	r1, #0
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004a2:	f04f 5410 	mov.w	r4, #603979776	; 0x24000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004a6:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004a8:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004aa:	f016 fd11 	bl	8016ed0 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004ae:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 80004b0:	f003 fdac 	bl	800400c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004b4:	4bd5      	ldr	r3, [pc, #852]	; (800080c <main+0x374>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004b6:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004b8:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004bc:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004be:	e9cd 4314 	strd	r4, r3, [sp, #80]	; 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004c2:	4bd3      	ldr	r3, [pc, #844]	; (8000810 <main+0x378>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004c4:	2400      	movs	r4, #0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004c6:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004c8:	f003 fdbe 	bl	8004048 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004cc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004d0:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004d2:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004d6:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004d8:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80004dc:	f88d 504d 	strb.w	r5, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004e0:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004e4:	f003 fdb0 	bl	8004048 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004e8:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ea:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004ec:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004f0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80004f4:	2316      	movs	r3, #22
 80004f6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80004fa:	f240 1301 	movw	r3, #257	; 0x101
 80004fe:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000502:	f003 fda1 	bl	8004048 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000506:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800050a:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800050c:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000510:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000512:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000516:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000518:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800051c:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000520:	f003 fd92 	bl	8004048 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000524:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000526:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000528:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800052c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000530:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000534:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000538:	f003 fd86 	bl	8004048 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800053c:	4620      	mov	r0, r4
 800053e:	f003 fd73 	bl	8004028 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000542:	4bb4      	ldr	r3, [pc, #720]	; (8000814 <main+0x37c>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800054a:	d111      	bne.n	8000570 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800054c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000550:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000566:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800056c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000570:	4aa8      	ldr	r2, [pc, #672]	; (8000814 <main+0x37c>)
 8000572:	6953      	ldr	r3, [r2, #20]
 8000574:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000578:	d123      	bne.n	80005c2 <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800057a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000582:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000586:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800058a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800058e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000592:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000594:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000598:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a0:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80005a4:	d2f9      	bcs.n	800059a <main+0x102>
    } while(sets-- != 0U);
 80005a6:	3b20      	subs	r3, #32
 80005a8:	f113 0f20 	cmn.w	r3, #32
 80005ac:	d1f2      	bne.n	8000594 <main+0xfc>
 80005ae:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b2:	6953      	ldr	r3, [r2, #20]
 80005b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80005c2:	f003 fc7f 	bl	8003ec4 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2400      	movs	r4, #0
  SystemClock_Config();
 80005c8:	f7ff fefe 	bl	80003c8 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 80005ce:	f7ff ff45 	bl	800045c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	2214      	movs	r2, #20
 80005d4:	2100      	movs	r1, #0
 80005d6:	a813      	add	r0, sp, #76	; 0x4c
 80005d8:	f016 fc7a 	bl	8016ed0 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b8e      	ldr	r3, [pc, #568]	; (8000818 <main+0x380>)
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80005de:	f248 0108 	movw	r1, #32776	; 0x8008
 80005e2:	488e      	ldr	r0, [pc, #568]	; (800081c <main+0x384>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e8:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = RENDER_TIME_Pin;
 80005ec:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80005f0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 80005f8:	4d89      	ldr	r5, [pc, #548]	; (8000820 <main+0x388>)
  pLayerCfg.FBStartAdress = 0x70000000;
 80005fa:	f04f 0a05 	mov.w	sl, #5
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80005fe:	f04f 0b18 	mov.w	fp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000606:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800060a:	f002 0202 	and.w	r2, r2, #2
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000612:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800061a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800061e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000622:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800062e:	f042 0208 	orr.w	r2, r2, #8
 8000632:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000636:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800063a:	f002 0208 	and.w	r2, r2, #8
 800063e:	9202      	str	r2, [sp, #8]
 8000640:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000646:	f042 0210 	orr.w	r2, r2, #16
 800064a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800064e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000652:	f002 0210 	and.w	r2, r2, #16
 8000656:	9203      	str	r2, [sp, #12]
 8000658:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800065e:	f042 0201 	orr.w	r2, r2, #1
 8000662:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000666:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800066a:	f002 0201 	and.w	r2, r2, #1
 800066e:	9204      	str	r2, [sp, #16]
 8000670:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800067a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800067e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000682:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000686:	9205      	str	r2, [sp, #20]
 8000688:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800068e:	f042 0204 	orr.w	r2, r2, #4
 8000692:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000696:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800069a:	f002 0204 	and.w	r2, r2, #4
 800069e:	9206      	str	r2, [sp, #24]
 80006a0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006a6:	f042 0220 	orr.w	r2, r2, #32
 80006aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	9307      	str	r3, [sp, #28]
 80006ba:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80006bc:	f003 ffa2 	bl	8004604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006c6:	4857      	ldr	r0, [pc, #348]	; (8000824 <main+0x38c>)
 80006c8:	f003 ff9c 	bl	8004604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4855      	ldr	r0, [pc, #340]	; (8000828 <main+0x390>)
 80006d4:	f003 ff96 	bl	8004604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(UserLED2_GPIO_Port, UserLED2_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2104      	movs	r1, #4
 80006dc:	4853      	ldr	r0, [pc, #332]	; (800082c <main+0x394>)
 80006de:	f003 ff91 	bl	8004604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(UserLED1_GPIO_Port, UserLED1_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2108      	movs	r1, #8
 80006e6:	4851      	ldr	r0, [pc, #324]	; (800082c <main+0x394>)
 80006e8:	f003 ff8c 	bl	8004604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	484f      	ldr	r0, [pc, #316]	; (8000830 <main+0x398>)
 80006f2:	f003 ff87 	bl	8004604 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006fa:	a913      	add	r1, sp, #76	; 0x4c
 80006fc:	4847      	ldr	r0, [pc, #284]	; (800081c <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000706:	f003 fdf5 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 800070a:	a913      	add	r1, sp, #76	; 0x4c
 800070c:	4843      	ldr	r0, [pc, #268]	; (800081c <main+0x384>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	e9cd 9613 	strd	r9, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000718:	f003 fdec 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 800071c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	a913      	add	r1, sp, #76	; 0x4c
 8000722:	4840      	ldr	r0, [pc, #256]	; (8000824 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	e9cd 4815 	strd	r4, r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f003 fde2 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000730:	a913      	add	r1, sp, #76	; 0x4c
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800073c:	f003 fdda 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UserLED2_Pin|UserLED1_Pin;
 8000740:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	a913      	add	r1, sp, #76	; 0x4c
 8000744:	4839      	ldr	r0, [pc, #228]	; (800082c <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f003 fdd1 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000752:	a913      	add	r1, sp, #76	; 0x4c
 8000754:	4836      	ldr	r0, [pc, #216]	; (8000830 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	e9cd 4815 	strd	r4, r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800075e:	f003 fdc9 	bl	80042f4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000762:	4834      	ldr	r0, [pc, #208]	; (8000834 <main+0x39c>)
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <main+0x3a0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000766:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000768:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800076a:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800076c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000770:	f003 fc96 	bl	80040a0 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000774:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000778:	4830      	ldr	r0, [pc, #192]	; (800083c <main+0x3a4>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <main+0x3a8>)
  hdma2d.Init.OutputOffset = 0;
 800077c:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000780:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000784:	f003 fcec 	bl	8004160 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000788:	2234      	movs	r2, #52	; 0x34
 800078a:	4621      	mov	r1, r4
 800078c:	a813      	add	r0, sp, #76	; 0x4c
 800078e:	f016 fb9f 	bl	8016ed0 <memset>
  hltdc.Instance = LTDC;
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <main+0x3ac>)
  hltdc.Init.VerticalSync = 9;
 8000794:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000796:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000798:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 800079c:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 80007a0:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a2:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 80007a4:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007a8:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 80007ac:	2309      	movs	r3, #9
 80007ae:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 80007b2:	230b      	movs	r3, #11
 80007b4:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 80007b8:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80007be:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80007c2:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80007ca:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ce:	f004 fb4d 	bl	8004e6c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80007d2:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 80007d4:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 80007d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007dc:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007de:	971a      	str	r7, [sp, #104]	; 0x68
  pLayerCfg.WindowX0 = 0;
 80007e0:	9413      	str	r4, [sp, #76]	; 0x4c
  hospi1.Init.ChipSelectHighTime = 2;
 80007e2:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 80007e4:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
  pLayerCfg.Backcolor.Red = 0;
 80007e8:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  hospi1.Instance = OCTOSPI1;
 80007ec:	4d16      	ldr	r5, [pc, #88]	; (8000848 <main+0x3b0>)
  pLayerCfg.Alpha0 = 0;
 80007ee:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 80007f2:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 80007f6:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  pLayerCfg.FBStartAdress = 0x70000000;
 80007fa:	e9cd a11b 	strd	sl, r1, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 80007fe:	e9cd 2414 	strd	r2, r4, [sp, #80]	; 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000802:	a913      	add	r1, sp, #76	; 0x4c
 8000804:	4622      	mov	r2, r4
  hospi1.Init.FifoThreshold = 4;
 8000806:	f04f 0a04 	mov.w	sl, #4
 800080a:	e01f      	b.n	800084c <main+0x3b4>
 800080c:	03000012 	.word	0x03000012
 8000810:	01010001 	.word	0x01010001
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	58021800 	.word	0x58021800
 8000820:	240001c0 	.word	0x240001c0
 8000824:	58020400 	.word	0x58020400
 8000828:	58020c00 	.word	0x58020c00
 800082c:	58020800 	.word	0x58020800
 8000830:	58020000 	.word	0x58020000
 8000834:	24000134 	.word	0x24000134
 8000838:	58024c00 	.word	0x58024c00
 800083c:	24000158 	.word	0x24000158
 8000840:	52001000 	.word	0x52001000
 8000844:	50001000 	.word	0x50001000
 8000848:	24000268 	.word	0x24000268
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800084c:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000850:	f004 fbd7 	bl	8005002 <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000854:	4621      	mov	r1, r4
 8000856:	465a      	mov	r2, fp
 8000858:	a813      	add	r0, sp, #76	; 0x4c
 800085a:	f016 fb39 	bl	8016ed0 <memset>
  hospi1.Init.FifoThreshold = 4;
 800085e:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <main+0x518>)
  hospi1.Init.DeviceSize = 32;
 8000860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000864:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000866:	60ac      	str	r4, [r5, #8]
  hospi1.Init.Refresh = 0;
 8000868:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi1.Init.FifoThreshold = 4;
 800086a:	e9c5 3a00 	strd	r3, sl, [r5]
  hospi1.Init.DeviceSize = 32;
 800086e:	2320      	movs	r3, #32
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000870:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.DeviceSize = 32;
 8000874:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000878:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800087c:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 8000880:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hospi1.Init.MaxTran = 0;
 8000884:	e9c5 940d 	strd	r9, r4, [r5, #52]	; 0x34
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000888:	f004 fd48 	bl	800531c <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800088c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000890:	f241 3288 	movw	r2, #5000	; 0x1388
 8000894:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000896:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000898:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800089c:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 800089e:	9615      	str	r6, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80008a0:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 1;
 80008a2:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008a6:	f004 ffc1 	bl	800582c <HAL_OSPIM_Config>
  HAL_OSPI_DeInit(&hospi1);
 80008aa:	4628      	mov	r0, r5
 80008ac:	f004 fdaa 	bl	8005404 <HAL_OSPI_DeInit>
  BSP_OSPI_NOR_DeInit(0);
 80008b0:	4620      	mov	r0, r4
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80008b2:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  ospi_nor_int.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80008b6:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
  BSP_OSPI_NOR_DeInit(0);
 80008ba:	f002 ff5b 	bl	8003774 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 80008be:	a90e      	add	r1, sp, #56	; 0x38
 80008c0:	4620      	mov	r0, r4
 80008c2:	f003 f84b 	bl	800395c <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80008c6:	4620      	mov	r0, r4
 80008c8:	f002 ff1c 	bl	8003704 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80008cc:	465a      	mov	r2, fp
 80008ce:	4621      	mov	r1, r4
 80008d0:	a813      	add	r0, sp, #76	; 0x4c
 80008d2:	f016 fafd 	bl	8016ed0 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80008d6:	2210      	movs	r2, #16
 80008d8:	4621      	mov	r1, r4
 80008da:	a80a      	add	r0, sp, #40	; 0x28
 80008dc:	f016 faf8 	bl	8016ed0 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 80008e0:	2214      	movs	r2, #20
 80008e2:	4621      	mov	r1, r4
 80008e4:	a80e      	add	r0, sp, #56	; 0x38
 80008e6:	f016 faf3 	bl	8016ed0 <memset>
  hospi2.Instance = OCTOSPI2;
 80008ea:	4d32      	ldr	r5, [pc, #200]	; (80009b4 <main+0x51c>)
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <main+0x520>)
  hospi2.Init.ChipSelectBoundary = 23;
 80008ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008f2:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008f4:	60ac      	str	r4, [r5, #8]
  hospi2.Init.FifoThreshold = 4;
 80008f6:	e9c5 3a00 	strd	r3, sl, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80008fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hospi2.Init.DeviceSize = 24;
 80008fe:	e9c5 3b03 	strd	r3, fp, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000902:	2317      	movs	r3, #23
 8000904:	e9c5 130b 	strd	r1, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000908:	f44f 73c8 	mov.w	r3, #400	; 0x190
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 800090c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hospi2.Init.Refresh = 400;
 8000910:	63eb      	str	r3, [r5, #60]	; 0x3c
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000912:	e9c5 a405 	strd	sl, r4, [r5, #20]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000916:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800091a:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.MaxTran = 0;
 800091e:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000922:	f004 fcfb 	bl	800531c <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <main+0x524>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000928:	f241 3288 	movw	r2, #5000	; 0x1388
 800092c:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800092e:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000930:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000934:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000936:	9715      	str	r7, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000938:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 2;
 800093a:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800093e:	f004 ff75 	bl	800582c <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000942:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000944:	f241 3288 	movw	r2, #5000	; 0x1388
 8000948:	a90a      	add	r1, sp, #40	; 0x28
 800094a:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 800094c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000950:	960d      	str	r6, [sp, #52]	; 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000952:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000956:	f004 fdb7 	bl	80054c8 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800095a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800095e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000962:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000964:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000966:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800096a:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 800096c:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 800096e:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000970:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000972:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000974:	f004 fdce 	bl	8005514 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000978:	a908      	add	r1, sp, #32
 800097a:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800097c:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 800097e:	f004 fee1 	bl	8005744 <HAL_OSPI_MemoryMapped>
  MX_TouchGFX_Init();
 8000982:	f000 fc0f 	bl	80011a4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000986:	f000 fc0c 	bl	80011a2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 800098a:	f006 fe49 	bl	8007620 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800098e:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <main+0x528>)
 8000990:	4621      	mov	r1, r4
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0x52c>)
 8000994:	f006 fe70 	bl	8007678 <osThreadNew>
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <main+0x530>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0x534>)
 800099c:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099e:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <main+0x538>)
 80009a2:	f006 fe69 	bl	8007678 <osThreadNew>
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <main+0x53c>)
 80009a8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80009aa:	f006 fe4b 	bl	8007644 <osKernelStart>
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x516>
 80009b0:	52005000 	.word	0x52005000
 80009b4:	240002c4 	.word	0x240002c4
 80009b8:	5200a000 	.word	0x5200a000
 80009bc:	00010002 	.word	0x00010002
 80009c0:	08017e94 	.word	0x08017e94
 80009c4:	080003bd 	.word	0x080003bd
 80009c8:	24000130 	.word	0x24000130
 80009cc:	08017e70 	.word	0x08017e70
 80009d0:	080011b3 	.word	0x080011b3
 80009d4:	2400012c 	.word	0x2400012c

080009d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	6802      	ldr	r2, [r0, #0]
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80009dc:	429a      	cmp	r2, r3
 80009de:	d101      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80009e0:	f003 ba9e 	b.w	8003f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40001000 	.word	0x40001000

080009ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	4770      	bx	lr
	...

080009f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_MspInit+0x2c>)
{
 80009f2:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80009fe:	f042 0202 	orr.w	r2, r2, #2
 8000a02:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	f003 bab9 	b.w	8003f8c <HAL_NVIC_SetPriority>
 8000a1a:	bf00      	nop
 8000a1c:	58024400 	.word	0x58024400

08000a20 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000a20:	6802      	ldr	r2, [r0, #0]
{
 8000a22:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_CRC_MspInit+0x2c>)
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d10d      	bne.n	8000a46 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a46:	b002      	add	sp, #8
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	58024c00 	.word	0x58024c00

08000a50 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_DMA2D_MspInit+0x40>)
{
 8000a52:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000a54:	6802      	ldr	r2, [r0, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d117      	bne.n	8000a8a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000a64:	f042 0210 	orr.w	r2, r2, #16
 8000a68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a6c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a7a:	f003 fa87 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a7e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a80:	b003      	add	sp, #12
 8000a82:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a86:	f003 bab3 	b.w	8003ff0 <HAL_NVIC_EnableIRQ>
}
 8000a8a:	b003      	add	sp, #12
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a90:	52001000 	.word	0x52001000
 8000a94:	58024400 	.word	0x58024400

08000a98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a9c:	b0bc      	sub	sp, #240	; 0xf0
 8000a9e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2214      	movs	r2, #20
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	a809      	add	r0, sp, #36	; 0x24
 8000aa6:	f016 fa13 	bl	8016ed0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aaa:	22b8      	movs	r2, #184	; 0xb8
 8000aac:	2100      	movs	r1, #0
 8000aae:	a80e      	add	r0, sp, #56	; 0x38
 8000ab0:	f016 fa0e 	bl	8016ed0 <memset>
  if(hltdc->Instance==LTDC)
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	4b77      	ldr	r3, [pc, #476]	; (8000c94 <HAL_LTDC_MspInit+0x1fc>)
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f040 80e7 	bne.w	8000c8c <HAL_LTDC_MspInit+0x1f4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000abe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ac2:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac4:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ac6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000aca:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000ace:	2219      	movs	r2, #25
 8000ad0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ad4:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ad6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000ada:	231e      	movs	r3, #30
 8000adc:	931c      	str	r3, [sp, #112]	; 0x70
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae2:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae4:	f005 ff22 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	b108      	cbz	r0, 8000aee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000aea:	f7ff ff7f 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000af6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000afa:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	a909      	add	r1, sp, #36	; 0x24
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b00:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000b04:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b08:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000b0c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000b10:	f002 0208 	and.w	r2, r2, #8
 8000b14:	9201      	str	r2, [sp, #4]
 8000b16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b1c:	f042 0202 	orr.w	r2, r2, #2
 8000b20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b28:	f002 0202 	and.w	r2, r2, #2
 8000b2c:	9202      	str	r2, [sp, #8]
 8000b2e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b34:	f042 0208 	orr.w	r2, r2, #8
 8000b38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b40:	f002 0208 	and.w	r2, r2, #8
 8000b44:	9203      	str	r2, [sp, #12]
 8000b46:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b4c:	f042 0210 	orr.w	r2, r2, #16
 8000b50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b58:	f002 0210 	and.w	r2, r2, #16
 8000b5c:	9204      	str	r2, [sp, #16]
 8000b5e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b64:	f042 0201 	orr.w	r2, r2, #1
 8000b68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b70:	f002 0201 	and.w	r2, r2, #1
 8000b74:	9205      	str	r2, [sp, #20]
 8000b76:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b88:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b8c:	9206      	str	r2, [sp, #24]
 8000b8e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ba4:	9207      	str	r2, [sp, #28]
 8000ba6:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bac:	f042 0204 	orr.w	r2, r2, #4
 8000bb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb8:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	9308      	str	r3, [sp, #32]
 8000bc0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f003 fb91 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000bd2:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	a909      	add	r1, sp, #36	; 0x24
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd8:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be2:	f003 fb87 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000be6:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bea:	a909      	add	r1, sp, #36	; 0x24
 8000bec:	482d      	ldr	r0, [pc, #180]	; (8000ca4 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	f003 fb7c 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	a909      	add	r1, sp, #36	; 0x24
 8000c02:	4829      	ldr	r0, [pc, #164]	; (8000ca8 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000c08:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000c0e:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f003 fb70 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000c14:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	a909      	add	r1, sp, #36	; 0x24
 8000c1a:	4824      	ldr	r0, [pc, #144]	; (8000cac <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1c:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f003 fb65 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000c2a:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c2e:	a909      	add	r1, sp, #36	; 0x24
 8000c30:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c32:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c3c:	f003 fb5a 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c40:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	a909      	add	r1, sp, #36	; 0x24
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c46:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f003 fb50 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	a909      	add	r1, sp, #36	; 0x24
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c58:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f003 fb47 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c66:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c68:	a909      	add	r1, sp, #36	; 0x24
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c70:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c76:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c78:	f003 fb3c 	bl	80042f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000c7c:	4640      	mov	r0, r8
 8000c7e:	4622      	mov	r2, r4
 8000c80:	2105      	movs	r1, #5
 8000c82:	f003 f983 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000c86:	4640      	mov	r0, r8
 8000c88:	f003 f9b2 	bl	8003ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000c8c:	b03c      	add	sp, #240	; 0xf0
 8000c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c92:	bf00      	nop
 8000c94:	50001000 	.word	0x50001000
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58020000 	.word	0x58020000
 8000cac:	58021800 	.word	0x58021800
 8000cb0:	58021c00 	.word	0x58021c00
 8000cb4:	58020800 	.word	0x58020800

08000cb8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbc:	b091      	sub	sp, #68	; 0x44
 8000cbe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a80b      	add	r0, sp, #44	; 0x2c
 8000cc6:	f016 f903 	bl	8016ed0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	4a88      	ldr	r2, [pc, #544]	; (8000ef0 <HAL_OSPI_MspInit+0x238>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f040 80b0 	bne.w	8000e34 <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000cd4:	4a87      	ldr	r2, [pc, #540]	; (8000ef4 <HAL_OSPI_MspInit+0x23c>)
 8000cd6:	6813      	ldr	r3, [r2, #0]
 8000cd8:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000cda:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000cdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000cde:	d10c      	bne.n	8000cfa <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000ce0:	4b85      	ldr	r3, [pc, #532]	; (8000ef8 <HAL_OSPI_MspInit+0x240>)
 8000ce2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000ce6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000cea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000cfe:	2403      	movs	r4, #3
 8000d00:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	a90b      	add	r1, sp, #44	; 0x2c
 8000d08:	487c      	ldr	r0, [pc, #496]	; (8000efc <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d10:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d14:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000d1c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000d20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d38:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000d3c:	9202      	str	r2, [sp, #8]
 8000d3e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d44:	f042 0208 	orr.w	r2, r2, #8
 8000d48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d50:	f002 0208 	and.w	r2, r2, #8
 8000d54:	9203      	str	r2, [sp, #12]
 8000d56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d5c:	f042 0210 	orr.w	r2, r2, #16
 8000d60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d68:	f002 0210 	and.w	r2, r2, #16
 8000d6c:	9204      	str	r2, [sp, #16]
 8000d6e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d80:	f002 0220 	and.w	r2, r2, #32
 8000d84:	9205      	str	r2, [sp, #20]
 8000d86:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d8c:	f042 0202 	orr.w	r2, r2, #2
 8000d90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	9306      	str	r3, [sp, #24]
 8000d9e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000da8:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f003 faa2 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8000db0:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	a90b      	add	r1, sp, #44	; 0x2c
 8000db4:	4852      	ldr	r0, [pc, #328]	; (8000f00 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000db6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f003 fa97 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc6:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc8:	484e      	ldr	r0, [pc, #312]	; (8000f04 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000dca:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd4:	f003 fa8e 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd8:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dda:	a90b      	add	r1, sp, #44	; 0x2c
 8000ddc:	4847      	ldr	r0, [pc, #284]	; (8000efc <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dde:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f003 fa83 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8000dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	a90b      	add	r1, sp, #44	; 0x2c
 8000df4:	4842      	ldr	r0, [pc, #264]	; (8000f00 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000df6:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f003 fa78 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e08:	a90b      	add	r1, sp, #44	; 0x2c
 8000e0a:	483f      	ldr	r0, [pc, #252]	; (8000f08 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000e0c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e16:	f003 fa6d 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000e1c:	483b      	ldr	r0, [pc, #236]	; (8000f0c <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e1e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e2a:	f003 fa63 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8000e2e:	b011      	add	sp, #68	; 0x44
 8000e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 8000e34:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <HAL_OSPI_MspInit+0x258>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d1f9      	bne.n	8000e2e <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <HAL_OSPI_MspInit+0x23c>)
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000e40:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000e44:	d10c      	bne.n	8000e60 <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <HAL_OSPI_MspInit+0x240>)
 8000e48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e4c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000e50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	9307      	str	r3, [sp, #28]
 8000e5e:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e62:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e66:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e68:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e6e:	4823      	ldr	r0, [pc, #140]	; (8000efc <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e72:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e76:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e7e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e82:	9208      	str	r2, [sp, #32]
 8000e84:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e96:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8000e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8000eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000eba:	e9cd 460e 	strd	r4, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec2:	f003 fa17 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eca:	a90b      	add	r1, sp, #44	; 0x2c
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8000ece:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed8:	f003 fa0c 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000edc:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000ee4:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eee:	e79c      	b.n	8000e2a <HAL_OSPI_MspInit+0x172>
 8000ef0:	52005000 	.word	0x52005000
 8000ef4:	24000320 	.word	0x24000320
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58021800 	.word	0x58021800
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	58021000 	.word	0x58021000
 8000f08:	58021400 	.word	0x58021400
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	5200a000 	.word	0x5200a000

08000f14 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_OSPI_MspDeInit+0xa0>)
{
 8000f16:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12a      	bne.n	8000f74 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_OSPI_MspDeInit+0xa4>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	3a01      	subs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <HAL_OSPI_MspDeInit+0xa8>)
 8000f28:	b92a      	cbnz	r2, 8000f36 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000f2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f2e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f32:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000f36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000f3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f3e:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f44:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000f48:	f003 faba 	bl	80044c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8000f4c:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <HAL_OSPI_MspDeInit+0xb0>)
 8000f52:	f003 fab5 	bl	80044c0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000f56:	2104      	movs	r1, #4
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_OSPI_MspDeInit+0xb4>)
 8000f5a:	f003 fab1 	bl	80044c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	481a      	ldr	r0, [pc, #104]	; (8000fcc <HAL_OSPI_MspDeInit+0xb8>)
 8000f64:	f003 faac 	bl	80044c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8000f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000f70:	f003 baa6 	b.w	80044c0 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_OSPI_MspDeInit+0xc0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11a      	bne.n	8000fb0 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_OSPI_MspDeInit+0xa4>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_OSPI_MspDeInit+0xa8>)
 8000f84:	b92a      	cbnz	r2, 8000f92 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000f86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f8a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000f96:	f641 4103 	movw	r1, #7171	; 0x1c03
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f9c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000fa0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000fa4:	f003 fa8c 	bl	80044c0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000fa8:	f241 011f 	movw	r1, #4127	; 0x101f
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <HAL_OSPI_MspDeInit+0xb8>)
 8000fae:	e7dd      	b.n	8000f6c <HAL_OSPI_MspDeInit+0x58>
}
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop
 8000fb4:	52005000 	.word	0x52005000
 8000fb8:	24000320 	.word	0x24000320
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58021800 	.word	0x58021800
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58021000 	.word	0x58021000
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	5200a000 	.word	0x5200a000

08000fd8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	280f      	cmp	r0, #15
{
 8000fda:	b510      	push	{r4, lr}
 8000fdc:	4604      	mov	r4, r0
 8000fde:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe0:	d902      	bls.n	8000fe8 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000fe4:	b00a      	add	sp, #40	; 0x28
 8000fe6:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fe8:	4601      	mov	r1, r0
 8000fea:	2200      	movs	r2, #0
 8000fec:	2036      	movs	r0, #54	; 0x36
 8000fee:	f002 ffcd 	bl	8003f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ff2:	2036      	movs	r0, #54	; 0x36
 8000ff4:	f002 fffc 	bl	8003ff0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ffa:	4669      	mov	r1, sp
 8000ffc:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000ffe:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_InitTick+0x88>)
 8001002:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800100e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101a:	f005 fb6d 	bl	80066f8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800101e:	9b07      	ldr	r3, [sp, #28]
 8001020:	b9c3      	cbnz	r3, 8001054 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001022:	f005 fb45 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001026:	4c0f      	ldr	r4, [pc, #60]	; (8001064 <HAL_InitTick+0x8c>)
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_InitTick+0x90>)
 800102a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800102c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001030:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_InitTick+0x94>)
 8001034:	fbb0 f0f3 	udiv	r0, r0, r3
 8001038:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800103a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800103c:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800103e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001040:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001044:	f006 faac 	bl	80075a0 <HAL_TIM_Base_Init>
 8001048:	2800      	cmp	r0, #0
 800104a:	d1ca      	bne.n	8000fe2 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 800104c:	4620      	mov	r0, r4
 800104e:	f006 f93f 	bl	80072d0 <HAL_TIM_Base_Start_IT>
 8001052:	e7c7      	b.n	8000fe4 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001054:	f005 fb2c 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 8001058:	0040      	lsls	r0, r0, #1
 800105a:	e7e4      	b.n	8001026 <HAL_InitTick+0x4e>
 800105c:	24000048 	.word	0x24000048
 8001060:	58024400 	.word	0x58024400
 8001064:	24000324 	.word	0x24000324
 8001068:	40001000 	.word	0x40001000
 800106c:	000f4240 	.word	0x000f4240

08001070 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001070:	4770      	bx	lr

08001072 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler>

08001074 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler>

08001076 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler>

08001078 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler>

0800107a <DebugMon_Handler>:
 800107a:	4770      	bx	lr

0800107c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800107c:	4801      	ldr	r0, [pc, #4]	; (8001084 <TIM6_DAC_IRQHandler+0x8>)
 800107e:	f006 b971 	b.w	8007364 <HAL_TIM_IRQHandler>
 8001082:	bf00      	nop
 8001084:	24000324 	.word	0x24000324

08001088 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001088:	4801      	ldr	r0, [pc, #4]	; (8001090 <LTDC_IRQHandler+0x8>)
 800108a:	f003 bf5d 	b.w	8004f48 <HAL_LTDC_IRQHandler>
 800108e:	bf00      	nop
 8001090:	240001c0 	.word	0x240001c0

08001094 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001094:	4801      	ldr	r0, [pc, #4]	; (800109c <DMA2D_IRQHandler+0x8>)
 8001096:	f003 b8a2 	b.w	80041de <HAL_DMA2D_IRQHandler>
 800109a:	bf00      	nop
 800109c:	24000158 	.word	0x24000158

080010a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80010a0:	2001      	movs	r0, #1
 80010a2:	4770      	bx	lr

080010a4 <_kill>:

int _kill(int pid, int sig)
{
 80010a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80010a6:	f015 fdbf 	bl	8016c28 <__errno>
 80010aa:	2316      	movs	r3, #22
 80010ac:	6003      	str	r3, [r0, #0]
	return -1;
}
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	bd08      	pop	{r3, pc}

080010b4 <_exit>:

void _exit (int status)
{
 80010b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80010b6:	f015 fdb7 	bl	8016c28 <__errno>
 80010ba:	2316      	movs	r3, #22
 80010bc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80010be:	e7fe      	b.n	80010be <_exit+0xa>

080010c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	460d      	mov	r5, r1
 80010c4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	460e      	mov	r6, r1
 80010c8:	1b73      	subs	r3, r6, r5
 80010ca:	429c      	cmp	r4, r3
 80010cc:	dc01      	bgt.n	80010d2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80010ce:	4620      	mov	r0, r4
 80010d0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80010d2:	f3af 8000 	nop.w
 80010d6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	e7f5      	b.n	80010c8 <_read+0x8>

080010dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	460d      	mov	r5, r1
 80010e0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	460e      	mov	r6, r1
 80010e4:	1b73      	subs	r3, r6, r5
 80010e6:	429c      	cmp	r4, r3
 80010e8:	dc01      	bgt.n	80010ee <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80010ea:	4620      	mov	r0, r4
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80010ee:	f816 0b01 	ldrb.w	r0, [r6], #1
 80010f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	e7f5      	b.n	80010e4 <_write+0x8>

080010f8 <_close>:

int _close(int file)
{
	return -1;
}
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001102:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001104:	604b      	str	r3, [r1, #4]
}
 8001106:	4770      	bx	lr

08001108 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001108:	2001      	movs	r0, #1
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800110c:	2000      	movs	r0, #0
 800110e:	4770      	bx	lr

08001110 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <_sbrk+0x30>)
{
 8001112:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001114:	6811      	ldr	r1, [r2, #0]
{
 8001116:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001118:	b909      	cbnz	r1, 800111e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <_sbrk+0x34>)
 800111c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	6810      	ldr	r0, [r2, #0]
 8001120:	4909      	ldr	r1, [pc, #36]	; (8001148 <_sbrk+0x38>)
 8001122:	4c0a      	ldr	r4, [pc, #40]	; (800114c <_sbrk+0x3c>)
 8001124:	4403      	add	r3, r0
 8001126:	1b09      	subs	r1, r1, r4
 8001128:	428b      	cmp	r3, r1
 800112a:	d906      	bls.n	800113a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800112c:	f015 fd7c 	bl	8016c28 <__errno>
 8001130:	230c      	movs	r3, #12
 8001132:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001134:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001138:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800113a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800113c:	e7fc      	b.n	8001138 <_sbrk+0x28>
 800113e:	bf00      	nop
 8001140:	24000370 	.word	0x24000370
 8001144:	24006d18 	.word	0x24006d18
 8001148:	24050000 	.word	0x24050000
 800114c:	00001000 	.word	0x00001000

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001154:	f002 fe60 	bl	8003e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115a:	e003      	b.n	8001164 <LoopCopyDataInit>

0800115c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800115e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001162:	3104      	adds	r1, #4

08001164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800116c:	d3f6      	bcc.n	800115c <CopyDataInit>
  ldr  r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001170:	e002      	b.n	8001178 <LoopFillZerobss>

08001172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001174:	f842 3b04 	str.w	r3, [r2], #4

08001178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800117c:	d3f9      	bcc.n	8001172 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800117e:	f015 fe61 	bl	8016e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f989 	bl	8000498 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 800118c:	0801952c 	.word	0x0801952c
  ldr  r0, =_sdata
 8001190:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001194:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 8001198:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 800119c:	24006d14 	.word	0x24006d14

080011a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC3_IRQHandler>

080011a2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80011a2:	4770      	bx	lr

080011a4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80011a4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80011a6:	f000 fd4d 	bl	8001c44 <touchgfx_components_init>
  touchgfx_init();
}
 80011aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80011ae:	f000 bcd9 	b.w	8001b64 <touchgfx_init>

080011b2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80011b2:	f000 bd49 	b.w	8001c48 <touchgfx_taskEntry>

080011b6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80011b6:	6840      	ldr	r0, [r0, #4]
    }
 80011b8:	4770      	bx	lr

080011ba <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80011ba:	6041      	str	r1, [r0, #4]
    }
 80011bc:	4770      	bx	lr
	...

080011c0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80011c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011c4:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80011c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011cc:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 80011d4:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80011d8:	430a      	orrs	r2, r1
 80011da:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	4770      	bx	lr
 80011e8:	e0001000 	.word	0xe0001000
 80011ec:	c5acce55 	.word	0xc5acce55

080011f0 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80011f0:	1a51      	subs	r1, r2, r1
 80011f2:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80011f6:	fbb1 f0f3 	udiv	r0, r1, r3
 80011fa:	4770      	bx	lr

080011fc <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80011fe:	6858      	ldr	r0, [r3, #4]
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e0001000 	.word	0xe0001000

08001208 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001208:	4770      	bx	lr

0800120a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
 800120e:	210c      	movs	r1, #12
 8001210:	f015 fcaa 	bl	8016b68 <_ZdlPvj>
 8001214:	4620      	mov	r0, r4
 8001216:	bd10      	pop	{r4, pc}

08001218 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001218:	6803      	ldr	r3, [r0, #0]
{
 800121a:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800121c:	691b      	ldr	r3, [r3, #16]
{
 800121e:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001220:	b131      	cbz	r1, 8001230 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001222:	4798      	blx	r3
 8001224:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	4418      	add	r0, r3
 800122c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 800122e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001230:	4798      	blx	r3
 8001232:	60a0      	str	r0, [r4, #8]
}
 8001234:	e7fb      	b.n	800122e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001236 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001236:	4770      	bx	lr

08001238 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 800123a:	2308      	movs	r3, #8
 800123c:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 800123e:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001240:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <_ZN20STM32TouchController4initEv+0x24>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <_ZN20STM32TouchController4initEv+0x28>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001250:	f002 fcfe 	bl	8003c50 <BSP_TS_Init>
}
 8001254:	b005      	add	sp, #20
 8001256:	f85d fb04 	ldr.w	pc, [sp], #4
 800125a:	bf00      	nop
 800125c:	24006a8a 	.word	0x24006a8a
 8001260:	24006a8c 	.word	0x24006a8c

08001264 <_ZN20STM32TouchControllerD0Ev>:
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	2104      	movs	r1, #4
 800126a:	f015 fc7d 	bl	8016b68 <_ZdlPvj>
 800126e:	4620      	mov	r0, r4
 8001270:	bd10      	pop	{r4, pc}

08001272 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001272:	b530      	push	{r4, r5, lr}
 8001274:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001276:	2000      	movs	r0, #0
{
 8001278:	460d      	mov	r5, r1
 800127a:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800127c:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 800127e:	9003      	str	r0, [sp, #12]
 8001280:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001284:	f002 fd66 	bl	8003d54 <BSP_TS_GetState>
 8001288:	b140      	cbz	r0, 800129c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800129a:	e7fe      	b.n	800129a <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800129c:	9801      	ldr	r0, [sp, #4]
 800129e:	b120      	cbz	r0, 80012aa <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 80012a0:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 80012a2:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 80012a4:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 80012a6:	9b03      	ldr	r3, [sp, #12]
 80012a8:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 80012aa:	b005      	add	sp, #20
 80012ac:	bd30      	pop	{r4, r5, pc}
	...

080012b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80012b0:	2803      	cmp	r0, #3
 80012b2:	d825      	bhi.n	8001300 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80012b4:	e8df f000 	tbb	[pc, r0]
 80012b8:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80012be:	2101      	movs	r1, #1
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	fab2 f282 	clz	r2, r2
 80012c8:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80012ca:	f003 b99b 	b.w	8004604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80012d0:	2108      	movs	r1, #8
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	0952      	lsrs	r2, r2, #5
 80012dc:	e7f5      	b.n	80012ca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 80012ee:	e7ec      	b.n	80012ca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	fab2 f282 	clz	r2, r2
 80012fc:	0952      	lsrs	r2, r2, #5
 80012fe:	e7f5      	b.n	80012ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	24000374 	.word	0x24000374
 8001308:	58020000 	.word	0x58020000
 800130c:	58021800 	.word	0x58021800
 8001310:	58020400 	.word	0x58020400

08001314 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001314:	2803      	cmp	r0, #3
 8001316:	d825      	bhi.n	8001364 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001318:	e8df f000 	tbb	[pc, r0]
 800131c:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001322:	2101      	movs	r1, #1
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	3a00      	subs	r2, #0
 800132a:	bf18      	it	ne
 800132c:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800132e:	f003 b969 	b.w	8004604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001334:	2108      	movs	r1, #8
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	3a00      	subs	r2, #0
 800133c:	bf18      	it	ne
 800133e:	2201      	movne	r2, #1
 8001340:	e7f5      	b.n	800132e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	3a00      	subs	r2, #0
 800134c:	bf18      	it	ne
 800134e:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 8001352:	e7ec      	b.n	800132e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	3a00      	subs	r2, #0
 800135e:	bf18      	it	ne
 8001360:	2201      	movne	r2, #1
 8001362:	e7f5      	b.n	8001350 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	24000374 	.word	0x24000374
 800136c:	58020000 	.word	0x58020000
 8001370:	58021800 	.word	0x58021800
 8001374:	58020400 	.word	0x58020400

08001378 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001378:	2803      	cmp	r0, #3
 800137a:	d811      	bhi.n	80013a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 800137c:	e8df f000 	tbb	[pc, r0]
 8001380:	0d090602 	.word	0x0d090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001384:	2101      	movs	r1, #1
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001388:	f003 b941 	b.w	800460e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800138c:	2108      	movs	r1, #8
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001390:	e7fa      	b.n	8001388 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
 8001398:	e7f6      	b.n	8001388 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800139a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139e:	e7fa      	b.n	8001396 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	58020000 	.word	0x58020000
 80013a8:	58021800 	.word	0x58021800
 80013ac:	58020400 	.word	0x58020400

080013b0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80013b0:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80013b2:	2803      	cmp	r0, #3
 80013b4:	d815      	bhi.n	80013e2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80013b6:	e8df f000 	tbb	[pc, r0]
 80013ba:	0a02      	.short	0x0a02
 80013bc:	110d      	.short	0x110d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80013be:	2101      	movs	r1, #1
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80013c2:	f003 f919 	bl	80045f8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80013c6:	1e43      	subs	r3, r0, #1
 80013c8:	4258      	negs	r0, r3
 80013ca:	4158      	adcs	r0, r3
 80013cc:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80013ce:	2108      	movs	r1, #8
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 80013d2:	e7f6      	b.n	80013c2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80013d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x40>)
 80013da:	e7f2      	b.n	80013c2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 80013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e0:	e7fa      	b.n	80013d8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>
    switch (id)
 80013e2:	2000      	movs	r0, #0
 80013e4:	e7ef      	b.n	80013c6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 80013e6:	bf00      	nop
 80013e8:	58020000 	.word	0x58020000
 80013ec:	58021800 	.word	0x58021800
 80013f0:	58020400 	.word	0x58020400

080013f4 <_ZN8touchgfx4GPIO4initEv>:
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	4d08      	ldr	r5, [pc, #32]	; (8001418 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80013f8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80013fa:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80013fc:	b2e0      	uxtb	r0, r4
 80013fe:	f7ff ffd7 	bl	80013b0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001402:	b118      	cbz	r0, 800140c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001408:	bf18      	it	ne
 800140a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 800140c:	3401      	adds	r4, #1
 800140e:	3504      	adds	r5, #4
 8001410:	2c05      	cmp	r4, #5
 8001412:	d1f3      	bne.n	80013fc <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001414:	bd70      	pop	{r4, r5, r6, pc}
 8001416:	bf00      	nop
 8001418:	24000374 	.word	0x24000374

0800141c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800141c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800141e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001422:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001426:	4770      	bx	lr

08001428 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001428:	2000      	movs	r0, #0
 800142a:	4770      	bx	lr

0800142c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800142c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800142e:	3900      	subs	r1, #0
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001432:	bf18      	it	ne
 8001434:	2101      	movne	r1, #1
 8001436:	7019      	strb	r1, [r3, #0]
    }
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	24006a8f 	.word	0x24006a8f

08001440 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr

08001444 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001444:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001446:	b10b      	cbz	r3, 800144c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001448:	4608      	mov	r0, r1
 800144a:	4718      	bx	r3
        }
    }
 800144c:	4770      	bx	lr

0800144e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 800144e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001452:	4770      	bx	lr

08001454 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001454:	6840      	ldr	r0, [r0, #4]
 8001456:	6803      	ldr	r3, [r0, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4718      	bx	r3

0800145c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800145c:	4770      	bx	lr
	...

08001460 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001464:	f000 fcc6 	bl	8001df4 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 800146a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	4620      	mov	r0, r4
 8001472:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001478:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 800147a:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 800147e:	f7ff ffb9 	bl	80013f4 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001482:	4628      	mov	r0, r5
 8001484:	f7ff fe9c 	bl	80011c0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001488:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800148a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 800148c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001490:	bd38      	pop	{r3, r4, r5, pc}
 8001492:	bf00      	nop
 8001494:	70060000 	.word	0x70060000
 8001498:	700c0000 	.word	0x700c0000

0800149c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800149c:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 800149e:	6803      	ldr	r3, [r0, #0]
{
 80014a0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a6:	4798      	blx	r3
    enableInterrupts();
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	4620      	mov	r0, r4
 80014ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014ae:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80014b0:	f000 f92a 	bl	8001708 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	4620      	mov	r0, r4
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 80014c4:	f003 f89e 	bl	8004604 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 80014d0:	f003 f898 	bl	8004604 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80014d4:	f000 f918 	bl	8001708 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	4620      	mov	r0, r4
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4798      	blx	r3
    for (;;)
 80014e0:	e7f8      	b.n	80014d4 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 80014e2:	bf00      	nop
 80014e4:	58020c00 	.word	0x58020c00
 80014e8:	58021800 	.word	0x58021800

080014ec <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80014ec:	b510      	push	{r4, lr}
 80014ee:	4604      	mov	r4, r0
        swapFrameBuffers();
 80014f0:	f009 fa28 	bl	800a944 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	4620      	mov	r0, r4
 80014f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 80014fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001500:	4718      	bx	r3

08001502 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001502:	f000 bc69 	b.w	8001dd8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001506 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001506:	f000 bc6d 	b.w	8001de4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

0800150c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800150c:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800150e:	f000 fc97 	bl	8001e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001512:	4910      	ldr	r1, [pc, #64]	; (8001554 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001514:	2300      	movs	r3, #0
 8001516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800151e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001522:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001526:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800152a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800152e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001530:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001534:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001536:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800153a:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800153c:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001540:	d2f9      	bcs.n	8001536 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001542:	3b20      	subs	r3, #32
 8001544:	f113 0f20 	cmn.w	r3, #32
 8001548:	d1f2      	bne.n	8001530 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 800154a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800154e:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001558:	f000 bc1a 	b.w	8001d90 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800155c <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800155c:	f000 bcb8 	b.w	8001ed0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001560 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001560:	f000 bca2 	b.w	8001ea8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001564 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001564:	f000 bc1e 	b.w	8001da4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001568 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001568:	f008 bc52 	b.w	8009e10 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800156c <_ZN11TouchGFXHALD0Ev>:
 800156c:	b510      	push	{r4, lr}
 800156e:	4604      	mov	r4, r0
 8001570:	2188      	movs	r1, #136	; 0x88
 8001572:	f015 faf9 	bl	8016b68 <_ZdlPvj>
 8001576:	4620      	mov	r0, r4
 8001578:	bd10      	pop	{r4, pc}

0800157a <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 800157a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800157e:	b11b      	cbz	r3, 8001588 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001580:	6840      	ldr	r0, [r0, #4]
 8001582:	6803      	ldr	r3, [r0, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4718      	bx	r3
    }
 8001588:	4618      	mov	r0, r3
 800158a:	4770      	bx	lr

0800158c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800158c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001592:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001594:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001598:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800159a:	428c      	cmp	r4, r1
 800159c:	d009      	beq.n	80015b2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800159e:	b93a      	cbnz	r2, 80015b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80015a0:	490a      	ldr	r1, [pc, #40]	; (80015cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80015a4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015a6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80015a8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80015aa:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015ac:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80015ae:	701a      	strb	r2, [r3, #0]
        }
    }
 80015b0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d0fc      	beq.n	80015b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015b6:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015ba:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80015bc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80015be:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80015c0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80015c2:	2200      	movs	r2, #0
 80015c4:	e7f3      	b.n	80015ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80015c6:	bf00      	nop
 80015c8:	24006a88 	.word	0x24006a88
 80015cc:	24006a86 	.word	0x24006a86
 80015d0:	24006a84 	.word	0x24006a84

080015d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	460d      	mov	r5, r1
 80015d8:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80015da:	b935      	cbnz	r5, 80015ea <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80015de:	f240 21d2 	movw	r1, #722	; 0x2d2
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80015e6:	f015 faed 	bl	8016bc4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80015ea:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80015ee:	3a00      	subs	r2, #0
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80015f2:	bf18      	it	ne
 80015f4:	2201      	movne	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80015f8:	6803      	ldr	r3, [r0, #0]
    }
 80015fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80015fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001602:	4718      	bx	r3
 8001604:	08017ef8 	.word	0x08017ef8
 8001608:	08017f30 	.word	0x08017f30
 800160c:	08017f7e 	.word	0x08017f7e
 8001610:	24006a8e 	.word	0x24006a8e

08001614 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001614:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	428b      	cmp	r3, r1
 800161c:	d803      	bhi.n	8001626 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	4293      	cmp	r3, r2
 8001624:	d905      	bls.n	8001632 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001628:	219e      	movs	r1, #158	; 0x9e
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800162e:	f015 fac9 	bl	8016bc4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001634:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001638:	801a      	strh	r2, [r3, #0]
    }
 800163a:	bd08      	pop	{r3, pc}
 800163c:	24006a84 	.word	0x24006a84
 8001640:	24006a86 	.word	0x24006a86
 8001644:	08017fc3 	.word	0x08017fc3
 8001648:	08018026 	.word	0x08018026
 800164c:	08017f7e 	.word	0x08017f7e
 8001650:	24006a8a 	.word	0x24006a8a
 8001654:	24006a8c 	.word	0x24006a8c

08001658 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001658:	4601      	mov	r1, r0
 800165a:	b508      	push	{r3, lr}
        return instance;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <IdleTaskHook+0x14>)
 800165e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001660:	b101      	cbz	r1, 8001664 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001662:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001664:	f009 f988 	bl	800a978 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001668:	2001      	movs	r0, #1
 800166a:	bd08      	pop	{r3, pc}
 800166c:	24006a90 	.word	0x24006a90

08001670 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001670:	2101      	movs	r1, #1
 8001672:	2200      	movs	r2, #0
{
 8001674:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001676:	4608      	mov	r0, r1
 8001678:	f006 f853 	bl	8007722 <osSemaphoreNew>
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800167e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001680:	b928      	cbnz	r0, 800168e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001684:	2128      	movs	r1, #40	; 0x28
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800168a:	f015 fa9b 	bl	8016bc4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	2001      	movs	r0, #1
 8001694:	f006 f8e2 	bl	800785c <osMessageQueueNew>
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800169a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800169c:	b918      	cbnz	r0, 80016a6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80016a4:	e7f0      	b.n	8001688 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80016a6:	bd08      	pop	{r3, pc}
 80016a8:	24000388 	.word	0x24000388
 80016ac:	08018144 	.word	0x08018144
 80016b0:	0801818d 	.word	0x0801818d
 80016b4:	080181bc 	.word	0x080181bc
 80016b8:	24000384 	.word	0x24000384
 80016bc:	08018214 	.word	0x08018214

080016c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f006 b875 	b.w	80077b6 <osSemaphoreAcquire>
 80016cc:	24000388 	.word	0x24000388

080016d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80016d0:	4b01      	ldr	r3, [pc, #4]	; (80016d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	f006 b89a 	b.w	800780c <osSemaphoreRelease>
 80016d8:	24000388 	.word	0x24000388

080016dc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80016de:	2100      	movs	r1, #0
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f006 b868 	b.w	80077b6 <osSemaphoreAcquire>
 80016e6:	bf00      	nop
 80016e8:	24000388 	.word	0x24000388

080016ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80016ec:	f7ff bff0 	b.w	80016d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080016f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80016f0:	2300      	movs	r3, #0
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80016f4:	4903      	ldr	r1, [pc, #12]	; (8001704 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80016f6:	461a      	mov	r2, r3
 80016f8:	6800      	ldr	r0, [r0, #0]
 80016fa:	f006 b8ea 	b.w	80078d2 <osMessageQueuePut>
 80016fe:	bf00      	nop
 8001700:	24000384 	.word	0x24000384
 8001704:	24000004 	.word	0x24000004

08001708 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001708:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800170a:	2300      	movs	r3, #0
 800170c:	4c07      	ldr	r4, [pc, #28]	; (800172c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800170e:	a901      	add	r1, sp, #4
 8001710:	461a      	mov	r2, r3
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	f006 f90d 	bl	8007932 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	2200      	movs	r2, #0
 800171e:	a901      	add	r1, sp, #4
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	f006 f906 	bl	8007932 <osMessageQueueGet>
}
 8001726:	b002      	add	sp, #8
 8001728:	bd10      	pop	{r4, pc}
 800172a:	bf00      	nop
 800172c:	24000384 	.word	0x24000384

08001730 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001730:	6803      	ldr	r3, [r0, #0]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	4718      	bx	r3

08001736 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001736:	2001      	movs	r0, #1
 8001738:	4770      	bx	lr

0800173a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800173a:	6803      	ldr	r3, [r0, #0]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	4718      	bx	r3

08001740 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001740:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001744:	4770      	bx	lr
	...

08001748 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800174e:	6003      	str	r3, [r0, #0]
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <_ZN8STM32DMAD1Ev+0x1c>)
 8001752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800175a:	f3bf 8f6f 	isb	sy
}
 800175e:	4770      	bx	lr
 8001760:	080183bc 	.word	0x080183bc
 8001764:	e000e100 	.word	0xe000e100

08001768 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001768:	b510      	push	{r4, lr}
 800176a:	4604      	mov	r4, r0
}
 800176c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001770:	f7ff ffea 	bl	8001748 <_ZN8STM32DMAD1Ev>
 8001774:	4620      	mov	r0, r4
 8001776:	f015 f9f7 	bl	8016b68 <_ZdlPvj>
 800177a:	4620      	mov	r0, r4
 800177c:	bd10      	pop	{r4, pc}
	...

08001780 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001782:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001784:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001788:	f042 0210 	orr.w	r2, r2, #16
 800178c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001790:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001794:	f002 0210 	and.w	r2, r2, #16
 8001798:	9201      	str	r2, [sp, #4]
 800179a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800179c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800179e:	f042 0210 	orr.w	r2, r2, #16
 80017a2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80017a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80017a6:	f022 0210 	bic.w	r2, r2, #16
 80017aa:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <_ZN8STM32DMA10initializeEv+0x44>)
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <_ZN8STM32DMA10initializeEv+0x48>)
 80017b0:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <_ZN8STM32DMA10initializeEv+0x4c>)
 80017b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017b8:	609a      	str	r2, [r3, #8]
}
 80017ba:	b002      	add	sp, #8
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	58024400 	.word	0x58024400
 80017c4:	24000158 	.word	0x24000158
 80017c8:	080017d1 	.word	0x080017d1
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <DMA2D_XferCpltCallback>:
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <DMA2D_XferCpltCallback+0xc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80017d6:	6803      	ldr	r3, [r0, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4718      	bx	r3
 80017dc:	24006a90 	.word	0x24006a90

080017e0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <_ZN8STM32DMAC1Ev+0x30>)
 80017e6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80017e8:	2600      	movs	r6, #0
 80017ea:	4625      	mov	r5, r4
 80017ec:	2260      	movs	r2, #96	; 0x60
 80017ee:	6060      	str	r0, [r4, #4]
 80017f0:	7226      	strb	r6, [r4, #8]
 80017f2:	7266      	strb	r6, [r4, #9]
 80017f4:	f845 3b20 	str.w	r3, [r5], #32
 80017f8:	4629      	mov	r1, r5
 80017fa:	f009 f9f9 	bl	800abf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80017fe:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001802:	60ee      	str	r6, [r5, #12]
 8001804:	3524      	adds	r5, #36	; 0x24
 8001806:	42ab      	cmp	r3, r5
 8001808:	d1fb      	bne.n	8001802 <_ZN8STM32DMAC1Ev+0x22>
}
 800180a:	4620      	mov	r0, r4
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	bf00      	nop
 8001810:	080183bc 	.word	0x080183bc

08001814 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001814:	b508      	push	{r3, lr}
    switch (format)
 8001816:	290b      	cmp	r1, #11
 8001818:	d80b      	bhi.n	8001832 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800181a:	e8df f001 	tbb	[pc, r1]
 800181e:	0612      	.short	0x0612
 8001820:	0a0a0a10 	.word	0x0a0a0a10
 8001824:	0808080a 	.word	0x0808080a
 8001828:	0808      	.short	0x0808
 800182a:	2001      	movs	r0, #1
}
 800182c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800182e:	2005      	movs	r0, #5
        break;
 8001830:	e7fc      	b.n	800182c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001834:	2166      	movs	r1, #102	; 0x66
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800183a:	f015 f9c3 	bl	8016bc4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800183e:	2000      	movs	r0, #0
 8001840:	e7f4      	b.n	800182c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001842:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001844:	e7f2      	b.n	800182c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001846:	bf00      	nop
 8001848:	08018256 	.word	0x08018256
 800184c:	08018271 	.word	0x08018271
 8001850:	080182bb 	.word	0x080182bb

08001854 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001854:	b508      	push	{r3, lr}
    switch (format)
 8001856:	290a      	cmp	r1, #10
 8001858:	d809      	bhi.n	800186e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800185a:	e8df f001 	tbb	[pc, r1]
 800185e:	0610      	.short	0x0610
 8001860:	0808080e 	.word	0x0808080e
 8001864:	06060608 	.word	0x06060608
 8001868:	06          	.byte	0x06
 8001869:	00          	.byte	0x00
 800186a:	2001      	movs	r0, #1
}
 800186c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001870:	2187      	movs	r1, #135	; 0x87
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001876:	f015 f9a5 	bl	8016bc4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800187a:	2000      	movs	r0, #0
 800187c:	e7f6      	b.n	800186c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800187e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001880:	e7f4      	b.n	800186c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001882:	bf00      	nop
 8001884:	08018256 	.word	0x08018256
 8001888:	08018311 	.word	0x08018311
 800188c:	080182bb 	.word	0x080182bb

08001890 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001894:	7f4f      	ldrb	r7, [r1, #29]
{
 8001896:	460c      	mov	r4, r1
 8001898:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800189a:	4639      	mov	r1, r7
 800189c:	f7ff ffba 	bl	8001814 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018a0:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80018a4:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018a6:	4648      	mov	r0, r9
 80018a8:	4641      	mov	r1, r8
 80018aa:	f7ff ffb3 	bl	8001814 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018ae:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018b0:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018b2:	4648      	mov	r0, r9
 80018b4:	f7ff ffce 	bl	8001854 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018b8:	8aa1      	ldrh	r1, [r4, #20]
 80018ba:	8b62      	ldrh	r2, [r4, #26]
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018c2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80018c4:	8b22      	ldrh	r2, [r4, #24]
 80018c6:	1a52      	subs	r2, r2, r1
 80018c8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018ca:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80018cc:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80018d2:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80018d6:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80018d8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80018da:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80018dc:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80018de:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80018e2:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80018e4:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80018e8:	d026      	beq.n	8001938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80018ea:	d810      	bhi.n	800190e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80018ec:	2920      	cmp	r1, #32
 80018ee:	ea45 0402 	orr.w	r4, r5, r2
 80018f2:	d062      	beq.n	80019ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80018f4:	2940      	cmp	r1, #64	; 0x40
 80018f6:	d060      	beq.n	80019ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d05e      	beq.n	80019ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80018fc:	432a      	orrs	r2, r5
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001900:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001902:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001906:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001908:	d05b      	beq.n	80019c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800190a:	4a30      	ldr	r2, [pc, #192]	; (80019cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800190c:	e040      	b.n	8001990 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800190e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001912:	d007      	beq.n	8001924 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001914:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001918:	d1f0      	bne.n	80018fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800191a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800191e:	f042 0209 	orr.w	r2, r2, #9
 8001922:	e003      	b.n	800192c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001924:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001928:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800192c:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 800192e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001930:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001932:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001934:	6158      	str	r0, [r3, #20]
 8001936:	e02a      	b.n	800198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001938:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800193a:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800193c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001940:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001942:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001944:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001946:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800194a:	7822      	ldrb	r2, [r4, #0]
 800194c:	b142      	cbz	r2, 8001960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800194e:	2a01      	cmp	r2, #1
 8001950:	d021      	beq.n	8001996 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001954:	f240 1101 	movw	r1, #257	; 0x101
 8001958:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800195a:	481f      	ldr	r0, [pc, #124]	; (80019d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800195c:	f015 f932 	bl	8016bc4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001960:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001962:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001964:	8861      	ldrh	r1, [r4, #2]
 8001966:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800196a:	3901      	subs	r1, #1
 800196c:	f022 0210 	bic.w	r2, r2, #16
 8001970:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001974:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	0692      	lsls	r2, r2, #26
 8001984:	d4fc      	bmi.n	8001980 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001986:	2210      	movs	r2, #16
 8001988:	609a      	str	r2, [r3, #8]
            if(blend)
 800198a:	2800      	cmp	r0, #0
 800198c:	d0bd      	beq.n	800190a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001990:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001996:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8001998:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800199c:	69d9      	ldr	r1, [r3, #28]
 800199e:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 80019a2:	bf18      	it	ne
 80019a4:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80019a6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80019aa:	f022 0210 	bic.w	r2, r2, #16
 80019ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80019b2:	f042 0210 	orr.w	r2, r2, #16
 80019b6:	61da      	str	r2, [r3, #28]
                break;
 80019b8:	e7dd      	b.n	8001976 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80019ba:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80019be:	61dc      	str	r4, [r3, #28]
 80019c0:	e7b7      	b.n	8001932 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80019c2:	f240 2201 	movw	r2, #513	; 0x201
 80019c6:	e7e3      	b.n	8001990 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80019c8:	52001000 	.word	0x52001000
 80019cc:	00010201 	.word	0x00010201
 80019d0:	0801835c 	.word	0x0801835c
 80019d4:	08018376 	.word	0x08018376
 80019d8:	080182bb 	.word	0x080182bb
 80019dc:	00020201 	.word	0x00020201

080019e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80019e4:	7f89      	ldrb	r1, [r1, #30]
 80019e6:	f7ff ff35 	bl	8001854 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80019ec:	8aa5      	ldrh	r5, [r4, #20]
 80019ee:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80019f0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80019f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80019f6:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80019f8:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80019fa:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80019fc:	6921      	ldr	r1, [r4, #16]
 80019fe:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001a02:	6826      	ldr	r6, [r4, #0]
 8001a04:	68e5      	ldr	r5, [r4, #12]
 8001a06:	2e08      	cmp	r6, #8
 8001a08:	d10d      	bne.n	8001a26 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001a0a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001a0c:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001a0e:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001a12:	7f20      	ldrb	r0, [r4, #28]
 8001a14:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001a18:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001a1c:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001a1e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001a20:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001a22:	601a      	str	r2, [r3, #0]
    }
}
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001a26:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001a28:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001a2a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001a2e:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001a30:	e7f7      	b.n	8001a22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001a32:	bf00      	nop
 8001a34:	52001000 	.word	0x52001000
 8001a38:	00010009 	.word	0x00010009
 8001a3c:	00020201 	.word	0x00020201
 8001a40:	00030201 	.word	0x00030201

08001a44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001a44:	2001      	movs	r0, #1
 8001a46:	4770      	bx	lr

08001a48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001a48:	200c      	movs	r0, #12
 8001a4a:	4770      	bx	lr

08001a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001a52:	3008      	adds	r0, #8
 8001a54:	4770      	bx	lr

08001a56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001a56:	230c      	movs	r3, #12
 8001a58:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001a5c:	3008      	adds	r0, #8
 8001a5e:	4770      	bx	lr

08001a60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001a60:	2001      	movs	r0, #1
 8001a62:	4770      	bx	lr

08001a64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001a64:	20e0      	movs	r0, #224	; 0xe0
 8001a66:	4770      	bx	lr

08001a68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001a68:	23e0      	movs	r3, #224	; 0xe0
 8001a6a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001a6e:	3008      	adds	r0, #8
 8001a70:	4770      	bx	lr

08001a72 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001a72:	23e0      	movs	r3, #224	; 0xe0
 8001a74:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001a78:	3008      	adds	r0, #8
 8001a7a:	4770      	bx	lr

08001a7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	4770      	bx	lr

08001a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001a80:	2010      	movs	r0, #16
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001a84:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001a88:	3008      	adds	r0, #8
 8001a8a:	4770      	bx	lr

08001a8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001a8c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001a90:	3008      	adds	r0, #8
 8001a92:	4770      	bx	lr

08001a94 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001a94:	4608      	mov	r0, r1
 8001a96:	f000 bbd9 	b.w	800224c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08001a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	6003      	str	r3, [r0, #0]
 8001aa4:	f007 ff0b 	bl	80098be <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	bd10      	pop	{r4, pc}
 8001aac:	08018474 	.word	0x08018474

08001ab0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	f7ff fff2 	bl	8001a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ab8:	2114      	movs	r1, #20
 8001aba:	4620      	mov	r0, r4
 8001abc:	f015 f854 	bl	8016b68 <_ZdlPvj>
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	bd10      	pop	{r4, pc}

08001ac4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001ac6:	b510      	push	{r4, lr}
 8001ac8:	4604      	mov	r4, r0
 8001aca:	6003      	str	r3, [r0, #0]
 8001acc:	f007 fef7 	bl	80098be <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	08018440 	.word	0x08018440

08001ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	f7ff fff2 	bl	8001ac4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ae0:	21e8      	movs	r1, #232	; 0xe8
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f015 f840 	bl	8016b68 <_ZdlPvj>
 8001ae8:	4620      	mov	r0, r4
 8001aea:	bd10      	pop	{r4, pc}

08001aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001aee:	b510      	push	{r4, lr}
 8001af0:	4604      	mov	r4, r0
 8001af2:	6003      	str	r3, [r0, #0]
 8001af4:	f007 fee3 	bl	80098be <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001af8:	4620      	mov	r0, r4
 8001afa:	bd10      	pop	{r4, pc}
 8001afc:	0801840c 	.word	0x0801840c

08001b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	f7ff fff2 	bl	8001aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001b08:	2118      	movs	r1, #24
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f015 f82c 	bl	8016b68 <_ZdlPvj>
 8001b10:	4620      	mov	r0, r4
 8001b12:	bd10      	pop	{r4, pc}

08001b14 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_ZN12FrontendHeapD1Ev+0x24>)
 8001b16:	b510      	push	{r4, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	6003      	str	r3, [r0, #0]
 8001b1c:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8001b20:	f7ff ffbc 	bl	8001a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001b24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001b28:	f7ff ffcc 	bl	8001ac4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001b2c:	f104 0014 	add.w	r0, r4, #20
 8001b30:	f7ff ffdc 	bl	8001aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001b34:	4620      	mov	r0, r4
 8001b36:	bd10      	pop	{r4, pc}
 8001b38:	080184a8 	.word	0x080184a8

08001b3c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001b3c:	b508      	push	{r3, lr}
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <__tcf_0+0xc>)
 8001b40:	f7ff ffe8 	bl	8001b14 <_ZN12FrontendHeapD1Ev>
 8001b44:	bd08      	pop	{r3, pc}
 8001b46:	bf00      	nop
 8001b48:	24000390 	.word	0x24000390

08001b4c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	f7ff ffe0 	bl	8001b14 <_ZN12FrontendHeapD1Ev>
 8001b54:	f44f 7122 	mov.w	r1, #648	; 0x288
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f015 f805 	bl	8016b68 <_ZdlPvj>
 8001b5e:	4620      	mov	r0, r4
 8001b60:	bd10      	pop	{r4, pc}
	...

08001b64 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001b68:	f000 fa0a 	bl	8001f80 <_ZN14BitmapDatabase11getInstanceEv>
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	4605      	mov	r5, r0
 8001b70:	f000 fa0a 	bl	8001f88 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001b74:	4623      	mov	r3, r4
 8001b76:	4601      	mov	r1, r0
 8001b78:	4622      	mov	r2, r4
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	9400      	str	r4, [sp, #0]
 8001b7e:	f00c fee5 	bl	800e94c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <touchgfx_init+0xb4>)
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001b86:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001b88:	4d25      	ldr	r5, [pc, #148]	; (8001c20 <touchgfx_init+0xbc>)
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f000 fdea 	bl	8002764 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001b90:	4824      	ldr	r0, [pc, #144]	; (8001c24 <touchgfx_init+0xc0>)
 8001b92:	f00c fd93 	bl	800e6bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001b96:	782b      	ldrb	r3, [r5, #0]
 8001b98:	f3bf 8f5b 	dmb	ish
 8001b9c:	07db      	lsls	r3, r3, #31
 8001b9e:	d435      	bmi.n	8001c0c <touchgfx_init+0xa8>
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f014 ffe3 	bl	8016b6c <__cxa_guard_acquire>
 8001ba6:	b388      	cbz	r0, 8001c0c <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001ba8:	4c1f      	ldr	r4, [pc, #124]	; (8001c28 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <touchgfx_init+0xc8>)
 8001bac:	f504 7696 	add.w	r6, r4, #300	; 0x12c
 8001bb0:	f104 0014 	add.w	r0, r4, #20
 8001bb4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001bb8:	f504 778a 	add.w	r7, r4, #276	; 0x114
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	6060      	str	r0, [r4, #4]
 8001bc0:	f8c4 8008 	str.w	r8, [r4, #8]
 8001bc4:	60e7      	str	r7, [r4, #12]
 8001bc6:	6126      	str	r6, [r4, #16]
 8001bc8:	f007 fe7a 	bl	80098c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <touchgfx_init+0xcc>)
 8001bce:	4640      	mov	r0, r8
 8001bd0:	6163      	str	r3, [r4, #20]
 8001bd2:	f007 fe75 	bl	80098c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <touchgfx_init+0xd0>)
 8001bd8:	4638      	mov	r0, r7
 8001bda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bdc:	f007 fe70 	bl	80098c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <touchgfx_init+0xd4>)
 8001be2:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8001be6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001bea:	f000 fe29 	bl	8002840 <_ZN5ModelC1Ev>
 8001bee:	4622      	mov	r2, r4
 8001bf0:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f000 fe19 	bl	800282c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f000 fb26 	bl	800224c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001c00:	480e      	ldr	r0, [pc, #56]	; (8001c3c <touchgfx_init+0xd8>)
 8001c02:	f014 fffd 	bl	8016c00 <atexit>
 8001c06:	4628      	mov	r0, r5
 8001c08:	f014 ffbc 	bl	8016b84 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <touchgfx_init+0xdc>)
}
 8001c0e:	b002      	add	sp, #8
 8001c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001c14:	f7ff bc24 	b.w	8001460 <_ZN11TouchGFXHAL10initializeEv>
 8001c18:	24006aec 	.word	0x24006aec
 8001c1c:	24001444 	.word	0x24001444
 8001c20:	2400038c 	.word	0x2400038c
 8001c24:	24000008 	.word	0x24000008
 8001c28:	24000390 	.word	0x24000390
 8001c2c:	080184a8 	.word	0x080184a8
 8001c30:	0801840c 	.word	0x0801840c
 8001c34:	08018440 	.word	0x08018440
 8001c38:	08018474 	.word	0x08018474
 8001c3c:	08001b3d 	.word	0x08001b3d
 8001c40:	240013bc 	.word	0x240013bc

08001c44 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8001c44:	4770      	bx	lr
	...

08001c48 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001c48:	4801      	ldr	r0, [pc, #4]	; (8001c50 <touchgfx_taskEntry+0x8>)
 8001c4a:	f7ff bc27 	b.w	800149c <_ZN11TouchGFXHAL9taskEntryEv>
 8001c4e:	bf00      	nop
 8001c50:	240013bc 	.word	0x240013bc

08001c54 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001c54:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001c56:	4e26      	ldr	r6, [pc, #152]	; (8001cf0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
{
public:

    STM32TouchController() {}
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8001c5a:	4c27      	ldr	r4, [pc, #156]	; (8001cf8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8001c5c:	4630      	mov	r0, r6
static LCD24bpp display;
 8001c5e:	4d27      	ldr	r5, [pc, #156]	; (8001cfc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001c60:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001c62:	f7ff fdbd 	bl	80017e0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001c66:	4628      	mov	r0, r5
 8001c68:	f00f f88a 	bl	8010d80 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001c74:	4823      	ldr	r0, [pc, #140]	; (8001d04 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c76:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60
 8001c7a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001c7e:	671a      	str	r2, [r3, #112]	; 0x70
 8001c80:	60dc      	str	r4, [r3, #12]
 8001c82:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8001c86:	4920      	ldr	r1, [pc, #128]	; (8001d08 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 8001c88:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8001c8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001c90:	6759      	str	r1, [r3, #116]	; 0x74
 8001c92:	2101      	movs	r1, #1
 8001c94:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8001c98:	491c      	ldr	r1, [pc, #112]	; (8001d0c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8001c9a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001c9c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ca0:	8001      	strh	r1, [r0, #0]
 8001ca2:	481b      	ldr	r0, [pc, #108]	; (8001d10 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8001ca4:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001ca6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001caa:	481a      	ldr	r0, [pc, #104]	; (8001d14 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 8001cac:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001cb0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8001cb4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001cb8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8001cbc:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8001cc0:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cc4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8001cc8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8001ccc:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	8001      	strh	r1, [r0, #0]
 8001cd2:	4811      	ldr	r0, [pc, #68]	; (8001d18 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8001cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001cd8:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001cda:	4910      	ldr	r1, [pc, #64]	; (8001d1c <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        DISPLAY_ROTATION = rotate0;
 8001ce0:	700a      	strb	r2, [r1, #0]
 8001ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001ce6:	490e      	ldr	r1, [pc, #56]	; (8001d20 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8001cea:	6019      	str	r1, [r3, #0]
 8001cec:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
 8001cf0:	2400061c 	.word	0x2400061c
 8001cf4:	08017ee8 	.word	0x08017ee8
 8001cf8:	24000618 	.word	0x24000618
 8001cfc:	24001448 	.word	0x24001448
 8001d00:	240013bc 	.word	0x240013bc
 8001d04:	24006a84 	.word	0x24006a84
 8001d08:	01000001 	.word	0x01000001
 8001d0c:	24006a90 	.word	0x24006a90
 8001d10:	24006a8a 	.word	0x24006a8a
 8001d14:	24006a86 	.word	0x24006a86
 8001d18:	24006a8c 	.word	0x24006a8c
 8001d1c:	24006a88 	.word	0x24006a88
 8001d20:	08018074 	.word	0x08018074
 8001d24:	08017ec0 	.word	0x08017ec0

08001d28 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001d28:	4801      	ldr	r0, [pc, #4]	; (8001d30 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8001d2a:	f7ff bd0d 	b.w	8001748 <_ZN8STM32DMAD1Ev>
 8001d2e:	bf00      	nop
 8001d30:	2400061c 	.word	0x2400061c

08001d34 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8001d34:	2000      	movs	r0, #0
 8001d36:	4770      	bx	lr

08001d38 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8001d38:	8081      	strh	r1, [r0, #4]
    }
 8001d3a:	4770      	bx	lr

08001d3c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8001d3c:	80c1      	strh	r1, [r0, #6]
    }
 8001d3e:	4770      	bx	lr

08001d40 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8001d40:	8101      	strh	r1, [r0, #8]
    }
 8001d42:	4770      	bx	lr

08001d44 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8001d44:	8141      	strh	r1, [r0, #10]
    }
 8001d46:	4770      	bx	lr

08001d48 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8001d48:	4770      	bx	lr

08001d4a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8001d4a:	4770      	bx	lr

08001d4c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8001d4c:	4770      	bx	lr

08001d4e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8001d50:	4770      	bx	lr

08001d52 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8001d52:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8001d54:	88c4      	ldrh	r4, [r0, #6]
 8001d56:	6803      	ldr	r3, [r0, #0]
 8001d58:	1b12      	subs	r2, r2, r4
 8001d5a:	8884      	ldrh	r4, [r0, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	1b09      	subs	r1, r1, r4
 8001d60:	b212      	sxth	r2, r2
    }
 8001d62:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8001d66:	b209      	sxth	r1, r1
 8001d68:	4718      	bx	r3

08001d6a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8001d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8001d7a:	6010      	str	r0, [r2, #0]
    }
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8001d7e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001d82:	b11a      	cbz	r2, 8001d8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8001d84:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8001d88:	b102      	cbz	r2, 8001d8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8001d8a:	6018      	str	r0, [r3, #0]
        }
    }
 8001d8c:	4770      	bx	lr
	...

08001d90 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001d92:	2290      	movs	r2, #144	; 0x90
 8001d94:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8001d98:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001da4:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001da6:	490a      	ldr	r1, [pc, #40]	; (8001dd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001da8:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001daa:	480a      	ldr	r0, [pc, #40]	; (8001dd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001db6:	6911      	ldr	r1, [r2, #16]
 8001db8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001dbc:	3901      	subs	r1, #1
 8001dbe:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001dc2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001dca:	4770      	bx	lr
 8001dcc:	50001000 	.word	0x50001000
 8001dd0:	240014a4 	.word	0x240014a4
 8001dd4:	240014a2 	.word	0x240014a2

08001dd8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001dda:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001dde:	4770      	bx	lr
 8001de0:	50001000 	.word	0x50001000

08001de4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001de6:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001de8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dee:	4770      	bx	lr
 8001df0:	50001000 	.word	0x50001000

08001df4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4604      	mov	r4, r0
    HAL::initialize();
 8001df8:	f008 f85f 	bl	8009eba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001e00:	f00a f8bc 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
 8001e04:	4601      	mov	r1, r0
 8001e06:	4620      	mov	r0, r4
 8001e08:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001e10:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001e14:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001e18:	2300      	movs	r3, #0
 8001e1a:	46ac      	mov	ip, r5
}
 8001e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001e20:	4760      	bx	ip
 8001e22:	bf00      	nop
 8001e24:	70060000 	.word	0x70060000

08001e28 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8001e28:	f008 b82e 	b.w	8009e88 <_ZN8touchgfx3HAL10beginFrameEv>

08001e2c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8001e2c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001e30:	b113      	cbz	r3, 8001e38 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8001e32:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001e38:	f008 b832 	b.w	8009ea0 <_ZN8touchgfx3HAL8endFrameEv>
 8001e3c:	240014a0 	.word	0x240014a0

08001e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8001e40:	f007 bfec 	b.w	8009e1c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08001e44 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001e44:	f008 b947 	b.w	800a0d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08001e48 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8001e48:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001e4c:	b112      	cbz	r2, 8001e54 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8001e4e:	6803      	ldr	r3, [r0, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4718      	bx	r3
    }
 8001e54:	4770      	bx	lr
	...

08001e58 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8001e5a:	6953      	ldr	r3, [r2, #20]
 8001e5c:	03db      	lsls	r3, r3, #15
{
 8001e5e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001e60:	d51e      	bpl.n	8001ea0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e68:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001e6c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e70:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e74:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e78:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001e7c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e7e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e82:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e84:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001e88:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e8a:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001e8e:	d2f9      	bcs.n	8001e84 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8001e90:	3b20      	subs	r3, #32
 8001e92:	f113 0f20 	cmn.w	r3, #32
 8001e96:	d1f2      	bne.n	8001e7e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8001e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e9c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001eaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001edc:	609a      	str	r2, [r3, #8]
}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8001ee4:	b510      	push	{r4, lr}
        return instance;
 8001ee6:	4c14      	ldr	r4, [pc, #80]	; (8001f38 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	b323      	cbz	r3, 8001f36 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_LTDC_LineEventCallback+0x58>)
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_LTDC_LineEventCallback+0x5c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	8811      	ldrh	r1, [r2, #0]
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d113      	bne.n	8001f20 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_LTDC_LineEventCallback+0x60>)
 8001efa:	8819      	ldrh	r1, [r3, #0]
 8001efc:	f003 f8ae 	bl	800505c <HAL_LTDC_ProgramLineEvent>
 8001f00:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001f02:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001f06:	3301      	adds	r3, #1
 8001f08:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001f0c:	f7ff fbf0 	bl	80016f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f008 fd17 	bl	800a944 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8001f16:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001f1c:	f7ff b9c8 	b.w	80012b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001f20:	f003 f89c 	bl	800505c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001f24:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8001f26:	6803      	ldr	r3, [r0, #0]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001f2c:	2000      	movs	r0, #0
    }
 8001f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001f32:	f7ff b9ef 	b.w	8001314 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	24006a90 	.word	0x24006a90
 8001f3c:	50001000 	.word	0x50001000
 8001f40:	240014a4 	.word	0x240014a4
 8001f44:	240014a2 	.word	0x240014a2

08001f48 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001f48:	4770      	bx	lr

08001f4a <_ZN23ApplicationFontProviderD0Ev>:
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	2104      	movs	r1, #4
 8001f50:	f014 fe0a 	bl	8016b68 <_ZdlPvj>
 8001f54:	4620      	mov	r0, r4
 8001f56:	bd10      	pop	{r4, pc}

08001f58 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001f58:	2901      	cmp	r1, #1
{
 8001f5a:	b508      	push	{r3, lr}
    switch (typography)
 8001f5c:	d006      	beq.n	8001f6c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001f5e:	2902      	cmp	r1, #2
 8001f60:	d008      	beq.n	8001f74 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001f62:	b959      	cbnz	r1, 8001f7c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001f64:	f000 fc3c 	bl	80027e0 <_ZN17TypedTextDatabase8getFontsEv>
 8001f68:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001f6a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001f6c:	f000 fc38 	bl	80027e0 <_ZN17TypedTextDatabase8getFontsEv>
 8001f70:	6840      	ldr	r0, [r0, #4]
 8001f72:	e7fa      	b.n	8001f6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001f74:	f000 fc34 	bl	80027e0 <_ZN17TypedTextDatabase8getFontsEv>
 8001f78:	6880      	ldr	r0, [r0, #8]
 8001f7a:	e7f6      	b.n	8001f6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	e7f4      	b.n	8001f6a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001f80 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001f80:	4800      	ldr	r0, [pc, #0]	; (8001f84 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001f82:	4770      	bx	lr
 8001f84:	080184c8 	.word	0x080184c8

08001f88 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001f88:	2003      	movs	r0, #3
 8001f8a:	4770      	bx	lr

08001f8c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001f8c:	b513      	push	{r0, r1, r4, lr}
 8001f8e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001f90:	b151      	cbz	r1, 8001fa8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8001f96:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001f98:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001f9c:	689c      	ldr	r4, [r3, #8]
 8001f9e:	f10d 0303 	add.w	r3, sp, #3
 8001fa2:	47a0      	blx	r4
        return glyph;
    }
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd10      	pop	{r4, pc}
            return 0;
 8001fa8:	4608      	mov	r0, r1
 8001faa:	e7fb      	b.n	8001fa4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001fac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001fac:	89c0      	ldrh	r0, [r0, #14]
 8001fae:	4770      	bx	lr

08001fb0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001fb0:	8a00      	ldrh	r0, [r0, #16]
 8001fb2:	4770      	bx	lr

08001fb4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001fb4:	88c0      	ldrh	r0, [r0, #6]
 8001fb6:	4770      	bx	lr

08001fb8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001fb8:	8880      	ldrh	r0, [r0, #4]
 8001fba:	4770      	bx	lr

08001fbc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001fbc:	7a80      	ldrb	r0, [r0, #10]
    }
 8001fbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001fc2:	4770      	bx	lr

08001fc4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001fc4:	7a80      	ldrb	r0, [r0, #10]
    }
 8001fc6:	09c0      	lsrs	r0, r0, #7
 8001fc8:	4770      	bx	lr

08001fca <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8001fca:	4770      	bx	lr

08001fcc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8001fcc:	4770      	bx	lr

08001fce <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001fce:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8001fd2:	6808      	ldr	r0, [r1, #0]
 8001fd4:	6849      	ldr	r1, [r1, #4]
 8001fd6:	c303      	stmia	r3!, {r0, r1}
    }
 8001fd8:	4770      	bx	lr

08001fda <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8001fda:	4770      	bx	lr

08001fdc <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8001fdc:	4770      	bx	lr

08001fde <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8001fde:	6041      	str	r1, [r0, #4]
    }
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8001fe6:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8001fea:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001ff4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8001ff8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	080020a5 	.word	0x080020a5

08002004 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002004:	2301      	movs	r3, #1
 8002006:	7203      	strb	r3, [r0, #8]
    }
 8002008:	4770      	bx	lr

0800200a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800200a:	4770      	bx	lr

0800200c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800200c:	4770      	bx	lr

0800200e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800200e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002010:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002012:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002014:	68c2      	ldr	r2, [r0, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	1054      	asrs	r4, r2, #1
 800201a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800201e:	07d2      	lsls	r2, r2, #31
 8002020:	bf48      	it	mi
 8002022:	590a      	ldrmi	r2, [r1, r4]
    }
 8002024:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002028:	bf48      	it	mi
 800202a:	58d3      	ldrmi	r3, [r2, r3]
 800202c:	4718      	bx	r3

0800202e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800202e:	6843      	ldr	r3, [r0, #4]
 8002030:	b12b      	cbz	r3, 800203e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002032:	6883      	ldr	r3, [r0, #8]
 8002034:	b92b      	cbnz	r3, 8002042 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002036:	68c0      	ldr	r0, [r0, #12]
 8002038:	f000 0001 	and.w	r0, r0, #1
 800203c:	4770      	bx	lr
 800203e:	4618      	mov	r0, r3
 8002040:	4770      	bx	lr
 8002042:	2001      	movs	r0, #1
    }
 8002044:	4770      	bx	lr

08002046 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002046:	b510      	push	{r4, lr}
 8002048:	4604      	mov	r4, r0
 800204a:	210c      	movs	r1, #12
 800204c:	f014 fd8c 	bl	8016b68 <_ZdlPvj>
 8002050:	4620      	mov	r0, r4
 8002052:	bd10      	pop	{r4, pc}

08002054 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	2110      	movs	r1, #16
 800205a:	f014 fd85 	bl	8016b68 <_ZdlPvj>
 800205e:	4620      	mov	r0, r4
 8002060:	bd10      	pop	{r4, pc}

08002062 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002062:	b510      	push	{r4, lr}
 8002064:	4604      	mov	r4, r0
 8002066:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800206a:	f014 fd7d 	bl	8016b68 <_ZdlPvj>
 800206e:	4620      	mov	r0, r4
 8002070:	bd10      	pop	{r4, pc}

08002072 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002072:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002074:	f009 ff82 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 800207c:	f00a bbc8 	b.w	800c810 <_ZN8touchgfx11Application10invalidateEv>

08002080 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002080:	b510      	push	{r4, lr}
 8002082:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002084:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002088:	b158      	cbz	r0, 80020a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4798      	blx	r3
 8002090:	b138      	cbz	r0, 80020a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002092:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80020a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80020a8:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80020ac:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80020ae:	68a8      	ldr	r0, [r5, #8]
 80020b0:	6803      	ldr	r3, [r0, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4798      	blx	r3
 80020b6:	28df      	cmp	r0, #223	; 0xdf
 80020b8:	d805      	bhi.n	80020c6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80020bc:	21a3      	movs	r1, #163	; 0xa3
 80020be:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80020c0:	4846      	ldr	r0, [pc, #280]	; (80021dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80020c2:	f014 fd7f 	bl	8016bc4 <__assert_func>
 80020c6:	6868      	ldr	r0, [r5, #4]
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4798      	blx	r3
 80020ce:	280f      	cmp	r0, #15
 80020d0:	d803      	bhi.n	80020da <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80020d4:	21a4      	movs	r1, #164	; 0xa4
 80020d6:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80020d8:	e7f2      	b.n	80020c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80020da:	68e8      	ldr	r0, [r5, #12]
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4798      	blx	r3
 80020e2:	280b      	cmp	r0, #11
 80020e4:	d803      	bhi.n	80020ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80020e8:	21a5      	movs	r1, #165	; 0xa5
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80020ec:	e7e8      	b.n	80020c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 80020ee:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80021ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80020f2:	f009 ff43 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80020f6:	3004      	adds	r0, #4
 80020f8:	f009 ff65 	bl	800bfc6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80020fc:	f8d9 0000 	ldr.w	r0, [r9]
 8002100:	b110      	cbz	r0, 8002108 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8002102:	6803      	ldr	r3, [r0, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4798      	blx	r3
    if (*currentTrans)
 8002108:	f8d9 0000 	ldr.w	r0, [r9]
 800210c:	b110      	cbz	r0, 8002114 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4798      	blx	r3
    if (*currentScreen)
 8002114:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80021f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 8002118:	f8d8 0000 	ldr.w	r0, [r8]
 800211c:	b110      	cbz	r0, 8002124 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4798      	blx	r3
    if (*currentPresenter)
 8002124:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002128:	b110      	cbz	r0, 8002130 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800212a:	6803      	ldr	r3, [r0, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4798      	blx	r3
    if (*currentScreen)
 8002130:	f8d8 0000 	ldr.w	r0, [r8]
 8002134:	b110      	cbz	r0, 800213c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4798      	blx	r3
    if (*currentPresenter)
 800213c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002140:	b110      	cbz	r0, 8002148 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002148:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800214a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800214c:	f04f 0b00 	mov.w	fp, #0
 8002150:	6803      	ldr	r3, [r0, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	4798      	blx	r3
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002158:	4604      	mov	r4, r0
 800215a:	f8c0 b004 	str.w	fp, [r0, #4]
 800215e:	6003      	str	r3, [r0, #0]
 8002160:	4659      	mov	r1, fp
 8002162:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002166:	68a8      	ldr	r0, [r5, #8]
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	4798      	blx	r3
 800216e:	4606      	mov	r6, r0
 8002170:	f000 fbd2 	bl	8002918 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002174:	6868      	ldr	r0, [r5, #4]
 8002176:	4659      	mov	r1, fp
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	4798      	blx	r3
 800217e:	4605      	mov	r5, r0
 8002180:	4631      	mov	r1, r6
 8002182:	f000 fb6f 	bl	8002864 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002186:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800218a:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800218e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002192:	b1e5      	cbz	r5, 80021ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 8002194:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002196:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800219a:	4630      	mov	r0, r6
 800219c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800219e:	f8c5 a008 	str.w	sl, [r5, #8]
 80021a2:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80021a4:	63f5      	str	r5, [r6, #60]	; 0x3c
 80021a6:	4798      	blx	r3
    newPresenter->activate();
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	4628      	mov	r0, r5
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80021b0:	4621      	mov	r1, r4
 80021b2:	4630      	mov	r0, r6
 80021b4:	f00b fb7a 	bl	800d8ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	4620      	mov	r0, r4
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	4798      	blx	r3
    newTransition->invalidate();
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	4620      	mov	r0, r4
 80021c4:	695b      	ldr	r3, [r3, #20]
}
 80021c6:	b001      	add	sp, #4
 80021c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021cc:	4718      	bx	r3
    model->bind(newPresenter);
 80021ce:	462b      	mov	r3, r5
 80021d0:	e7e1      	b.n	8002196 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 80021d2:	bf00      	nop
 80021d4:	08018504 	.word	0x08018504
 80021d8:	08018592 	.word	0x08018592
 80021dc:	08018696 	.word	0x08018696
 80021e0:	080186dd 	.word	0x080186dd
 80021e4:	08018780 	.word	0x08018780
 80021e8:	08018890 	.word	0x08018890
 80021ec:	24006ad0 	.word	0x24006ad0
 80021f0:	24006acc 	.word	0x24006acc

080021f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	4604      	mov	r4, r0
 80021f8:	460d      	mov	r5, r1
 80021fa:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 80021fc:	f009 ff84 	bl	800c108 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
          pendingScreenTransitionCallback(0)
 8002202:	2100      	movs	r1, #0
        instance = this;
 8002204:	601c      	str	r4, [r3, #0]
      model(m)
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 8002208:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
        return instance;
 800220c:	4d0d      	ldr	r5, [pc, #52]	; (8002244 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	6828      	ldr	r0, [r5, #0]
        : pobject(0), pmemfun(0)
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8002214:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8002218:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800221c:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800221e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800222c:	b10a      	cbz	r2, 8002232 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3e>
 800222e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002230:	b900      	cbnz	r0, 8002234 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
        return instance->lcdRef;
 8002232:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002234:	f00f fe55 	bl	8011ee2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002238:	4620      	mov	r0, r4
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	24006adc 	.word	0x24006adc
 8002240:	08018844 	.word	0x08018844
 8002244:	24006a90 	.word	0x24006a90
 8002248:	0801882c 	.word	0x0801882c

0800224c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800224e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002252:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002256:	2300      	movs	r3, #0
 8002258:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 800225c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002260:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	080020a5 	.word	0x080020a5

0800226c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800226c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800226e:	4770      	bx	lr

08002270 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002270:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002272:	4770      	bx	lr

08002274 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002274:	4770      	bx	lr

08002276 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002276:	888b      	ldrh	r3, [r1, #4]
 8002278:	69c0      	ldr	r0, [r0, #28]
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	680a      	ldr	r2, [r1, #0]
 800227e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002282:	4410      	add	r0, r2
 8002284:	4770      	bx	lr

08002286 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002286:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002288:	b1c2      	cbz	r2, 80022bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800228a:	7b13      	ldrb	r3, [r2, #12]
 800228c:	b1b3      	cbz	r3, 80022bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800228e:	7b54      	ldrb	r4, [r2, #13]
 8002290:	7ad2      	ldrb	r2, [r2, #11]
 8002292:	0224      	lsls	r4, r4, #8
 8002294:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002298:	4314      	orrs	r4, r2
 800229a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800229c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800229e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80022a2:	8813      	ldrh	r3, [r2, #0]
 80022a4:	428b      	cmp	r3, r1
 80022a6:	d102      	bne.n	80022ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80022a8:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80022ac:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80022ae:	d805      	bhi.n	80022bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80022b0:	3801      	subs	r0, #1
 80022b2:	3204      	adds	r2, #4
 80022b4:	b280      	uxth	r0, r0
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d1f3      	bne.n	80022a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80022ba:	e7f7      	b.n	80022ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80022bc:	2000      	movs	r0, #0
 80022be:	e7f5      	b.n	80022ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080022c0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	4604      	mov	r4, r0
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	f014 fc4f 	bl	8016b68 <_ZdlPvj>
 80022ca:	4620      	mov	r0, r4
 80022cc:	bd10      	pop	{r4, pc}
	...

080022d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80022d0:	b530      	push	{r4, r5, lr}
 80022d2:	b08b      	sub	sp, #44	; 0x2c
 80022d4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80022d6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 80022da:	9508      	str	r5, [sp, #32]
 80022dc:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80022e0:	9507      	str	r5, [sp, #28]
 80022e2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80022e6:	9506      	str	r5, [sp, #24]
 80022e8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80022ec:	9505      	str	r5, [sp, #20]
 80022ee:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80022f2:	9504      	str	r5, [sp, #16]
 80022f4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80022f8:	9503      	str	r5, [sp, #12]
 80022fa:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80022fe:	9502      	str	r5, [sp, #8]
 8002300:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002304:	9501      	str	r5, [sp, #4]
 8002306:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800230a:	9500      	str	r5, [sp, #0]
 800230c:	f00a ff28 	bl	800d160 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002312:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002318:	61e3      	str	r3, [r4, #28]
 800231a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800231c:	6223      	str	r3, [r4, #32]
 800231e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002320:	6263      	str	r3, [r4, #36]	; 0x24
 8002322:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002324:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002326:	b00b      	add	sp, #44	; 0x2c
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	bf00      	nop
 800232c:	080188b4 	.word	0x080188b4

08002330 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002330:	4770      	bx	lr

08002332 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002332:	4770      	bx	lr

08002334 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002334:	4770      	bx	lr

08002336 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002336:	4770      	bx	lr

08002338 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002338:	4770      	bx	lr

0800233a <_ZN15Screen1ViewBase9ToggleLEDEv>:
     * Virtual Action Handlers
     */
    virtual void ToggleLED()
    {
        // Override and implement this function in Screen1
    }
 800233a:	4770      	bx	lr

0800233c <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800233c:	4770      	bx	lr

0800233e <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800233e:	4770      	bx	lr

08002340 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002340:	4770      	bx	lr

08002342 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002342:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002344:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002346:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002348:	68c2      	ldr	r2, [r0, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	1055      	asrs	r5, r2, #1
 800234e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002352:	07d2      	lsls	r2, r2, #31
 8002354:	bf48      	it	mi
 8002356:	5962      	ldrmi	r2, [r4, r5]
    }
 8002358:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800235a:	bf48      	it	mi
 800235c:	58d3      	ldrmi	r3, [r2, r3]
 800235e:	4718      	bx	r3

08002360 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8002360:	6843      	ldr	r3, [r0, #4]
 8002362:	b12b      	cbz	r3, 8002370 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8002364:	6883      	ldr	r3, [r0, #8]
 8002366:	b92b      	cbnz	r3, 8002374 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002368:	68c0      	ldr	r0, [r0, #12]
 800236a:	f000 0001 	and.w	r0, r0, #1
 800236e:	4770      	bx	lr
 8002370:	4618      	mov	r0, r3
 8002372:	4770      	bx	lr
 8002374:	2001      	movs	r0, #1
    }
 8002376:	4770      	bx	lr

08002378 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002378:	b510      	push	{r4, lr}
 800237a:	4604      	mov	r4, r0
 800237c:	2110      	movs	r1, #16
 800237e:	f014 fbf3 	bl	8016b68 <_ZdlPvj>
 8002382:	4620      	mov	r0, r4
 8002384:	bd10      	pop	{r4, pc}

08002386 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002386:	b510      	push	{r4, lr}
 8002388:	4604      	mov	r4, r0
}
 800238a:	21e0      	movs	r1, #224	; 0xe0
 800238c:	f014 fbec 	bl	8016b68 <_ZdlPvj>
 8002390:	4620      	mov	r0, r4
 8002392:	bd10      	pop	{r4, pc}

08002394 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton)
 8002394:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8002398:	428a      	cmp	r2, r1
 800239a:	d102      	bne.n	80023a2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //InteractionLED
        //When toggleButton clicked call virtual function
        //Call ToggleLED
        ToggleLED();
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	4718      	bx	r3
    }
}
 80023a2:	4770      	bx	lr

080023a4 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80023a4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80023a6:	b570      	push	{r4, r5, r6, lr}
 80023a8:	4604      	mov	r4, r0
        setX(x);
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80023ac:	4615      	mov	r5, r2
        setX(x);
 80023ae:	4798      	blx	r3
        setY(y);
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80023b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80023bc:	4718      	bx	r3
	...

080023c0 <_ZN8touchgfx6WidgetC1Ev>:
 80023c0:	2200      	movs	r2, #0
 80023c2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80023c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 80023ca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80023ce:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80023d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d6:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 80023d8:	4a01      	ldr	r2, [pc, #4]	; (80023e0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80023da:	6002      	str	r2, [r0, #0]
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	08018914 	.word	0x08018914

080023e4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80023e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e8:	4604      	mov	r4, r0
        : presenter(0)
 80023ea:	2500      	movs	r5, #0
 80023ec:	f00b f8b2 	bl	800d554 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <_ZN15Screen1ViewBaseC1Ev+0x138>)
 80023f2:	4626      	mov	r6, r4
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80023f4:	4629      	mov	r1, r5
 80023f6:	2226      	movs	r2, #38	; 0x26
 80023f8:	63e5      	str	r5, [r4, #60]	; 0x3c
 80023fa:	f846 3b40 	str.w	r3, [r6], #64
 80023fe:	4630      	mov	r0, r6
 8002400:	f014 fd66 	bl	8016ed0 <memset>
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff ffdb 	bl	80023c0 <_ZN8touchgfx6WidgetC1Ev>
 800240a:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <_ZN15Screen1ViewBaseC1Ev+0x13c>)
 8002410:	f04f 08ff 	mov.w	r8, #255	; 0xff
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002414:	f64f 79ff 	movw	r9, #65535	; 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002418:	2226      	movs	r2, #38	; 0x26
 800241a:	4629      	mov	r1, r5
 800241c:	6423      	str	r3, [r4, #64]	; 0x40
 800241e:	f884 8066 	strb.w	r8, [r4, #102]	; 0x66
 8002422:	4638      	mov	r0, r7
        : color(col)
 8002424:	66a5      	str	r5, [r4, #104]	; 0x68
        touchable = touch;
 8002426:	f04f 0a01 	mov.w	sl, #1
 800242a:	f8ad 9004 	strh.w	r9, [sp, #4]
 800242e:	f014 fd4f 	bl	8016ed0 <memset>
 8002432:	4638      	mov	r0, r7
 8002434:	f7ff ffc4 	bl	80023c0 <_ZN8touchgfx6WidgetC1Ev>
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <_ZN15Screen1ViewBaseC1Ev+0x140>)
 800243a:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
 800243e:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8002442:	66e3      	str	r3, [r4, #108]	; 0x6c
    {
        Image::setBitmap(bmp);
 8002444:	a901      	add	r1, sp, #4
        : Widget(), bitmap(bmp), alpha(255)
 8002446:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        Image::setBitmap(bmp);
 800244a:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 800244c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8002450:	f008 fcfd 	bl	800ae4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002454:	4629      	mov	r1, r5
 8002456:	2226      	movs	r2, #38	; 0x26
 8002458:	4640      	mov	r0, r8
 800245a:	f014 fd39 	bl	8016ed0 <memset>
 800245e:	4640      	mov	r0, r8
 8002460:	f7ff ffae 	bl	80023c0 <_ZN8touchgfx6WidgetC1Ev>
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <_ZN15Screen1ViewBaseC1Ev+0x144>)
        setXY(x, y);
 8002466:	462a      	mov	r2, r5
 8002468:	4629      	mov	r1, r5
 800246a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800246e:	4630      	mov	r0, r6
        : pobject(pObject), pmemfun(pmemfun_1)
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <_ZN15Screen1ViewBaseC1Ev+0x148>)
 8002472:	f8a4 90c6 	strh.w	r9, [r4, #198]	; 0xc6
 8002476:	f8a4 90c8 	strh.w	r9, [r4, #200]	; 0xc8
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800247a:	f884 90ca 	strb.w	r9, [r4, #202]	; 0xca
 800247e:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002482:	f104 0904 	add.w	r9, r4, #4
 8002486:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 800248a:	f884 50c4 	strb.w	r5, [r4, #196]	; 0xc4
        touchable = touch;
 800248e:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
 8002492:	e9c4 3434 	strd	r3, r4, [r4, #208]	; 0xd0
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <_ZN15Screen1ViewBaseC1Ev+0x14c>)
 8002498:	e9c4 3536 	strd	r3, r5, [r4, #216]	; 0xd8
        setXY(x, y);
 800249c:	f7ff ff82 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80024a0:	4630      	mov	r0, r6
 80024a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80024a6:	f7ff fc4b 	bl	8001d40 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80024aa:	4630      	mov	r0, r6
 80024ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80024b0:	f7ff fc48 	bl	8001d44 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80024b4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80024b8:	4631      	mov	r1, r6
 80024ba:	4648      	mov	r0, r9
 80024bc:	66a3      	str	r3, [r4, #104]	; 0x68
 80024be:	f007 fa13 	bl	80098e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 80024c2:	462a      	mov	r2, r5
 80024c4:	4629      	mov	r1, r5
 80024c6:	4638      	mov	r0, r7
 80024c8:	f7ff ff6c 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
 80024cc:	2302      	movs	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLUEFON_TOGGLE_ID));
 80024ce:	a901      	add	r1, sp, #4
 80024d0:	4638      	mov	r0, r7
 80024d2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80024d6:	f008 fcba 	bl	800ae4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80024da:	4639      	mov	r1, r7
 80024dc:	4648      	mov	r0, r9
 80024de:	f007 fa03 	bl	80098e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    toggleButton.setXY(171, 111);
 80024e2:	4640      	mov	r0, r8
 80024e4:	226f      	movs	r2, #111	; 0x6f
 80024e6:	21ab      	movs	r1, #171	; 0xab
 80024e8:	f7ff ff5c 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80024ec:	aa01      	add	r2, sp, #4
 80024ee:	4669      	mov	r1, sp
 80024f0:	4640      	mov	r0, r8
        originalPressed = bitmapPressed;
 80024f2:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 80024f6:	f8ad a000 	strh.w	sl, [sp]
 80024fa:	f8ad 5004 	strh.w	r5, [sp, #4]
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80024fe:	f008 fbfb 	bl	800acf8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButton.setAction(buttonCallback);
 8002502:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8002506:	4648      	mov	r0, r9
 8002508:	4641      	mov	r1, r8
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800250a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800250e:	f007 f9eb 	bl	80098e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002512:	4620      	mov	r0, r4
 8002514:	b002      	add	sp, #8
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251a:	bf00      	nop
 800251c:	08018994 	.word	0x08018994
 8002520:	08018e98 	.word	0x08018e98
 8002524:	08018f00 	.word	0x08018f00
 8002528:	08018e24 	.word	0x08018e24
 800252c:	0801897c 	.word	0x0801897c
 8002530:	08002395 	.word	0x08002395

08002534 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002534:	4770      	bx	lr
	...

08002538 <_Z23getFont_verdana_10_4bppv>:
{
 8002538:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800253a:	4d16      	ldr	r5, [pc, #88]	; (8002594 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 800253c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800253e:	782c      	ldrb	r4, [r5, #0]
 8002540:	f3bf 8f5b 	dmb	ish
 8002544:	f014 0401 	ands.w	r4, r4, #1
 8002548:	d120      	bne.n	800258c <_Z23getFont_verdana_10_4bppv+0x54>
 800254a:	4628      	mov	r0, r5
 800254c:	f014 fb0e 	bl	8016b6c <__cxa_guard_acquire>
 8002550:	b1e0      	cbz	r0, 800258c <_Z23getFont_verdana_10_4bppv+0x54>
 8002552:	233f      	movs	r3, #63	; 0x3f
 8002554:	2201      	movs	r2, #1
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002558:	9309      	str	r3, [sp, #36]	; 0x24
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <_Z23getFont_verdana_10_4bppv+0x64>)
 800255c:	4810      	ldr	r0, [pc, #64]	; (80025a0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800255e:	9308      	str	r3, [sp, #32]
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002562:	940a      	str	r4, [sp, #40]	; 0x28
 8002564:	9405      	str	r4, [sp, #20]
 8002566:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800256a:	2304      	movs	r3, #4
 800256c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002570:	230a      	movs	r3, #10
 8002572:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800257c:	f7ff fea8 	bl	80022d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8002582:	f014 fb3d 	bl	8016c00 <atexit>
 8002586:	4628      	mov	r0, r5
 8002588:	f014 fafc 	bl	8016b84 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800258e:	b00f      	add	sp, #60	; 0x3c
 8002590:	bd30      	pop	{r4, r5, pc}
 8002592:	bf00      	nop
 8002594:	240014a8 	.word	0x240014a8
 8002598:	080194b8 	.word	0x080194b8
 800259c:	080194e8 	.word	0x080194e8
 80025a0:	240014ac 	.word	0x240014ac
 80025a4:	080194f4 	.word	0x080194f4
 80025a8:	08002535 	.word	0x08002535

080025ac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80025ac:	4770      	bx	lr
	...

080025b0 <_Z23getFont_verdana_20_4bppv>:
{
 80025b0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80025b2:	4d16      	ldr	r5, [pc, #88]	; (800260c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80025b4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80025b6:	782c      	ldrb	r4, [r5, #0]
 80025b8:	f3bf 8f5b 	dmb	ish
 80025bc:	f014 0401 	ands.w	r4, r4, #1
 80025c0:	d120      	bne.n	8002604 <_Z23getFont_verdana_20_4bppv+0x54>
 80025c2:	4628      	mov	r0, r5
 80025c4:	f014 fad2 	bl	8016b6c <__cxa_guard_acquire>
 80025c8:	b1e0      	cbz	r0, 8002604 <_Z23getFont_verdana_20_4bppv+0x54>
 80025ca:	233f      	movs	r3, #63	; 0x3f
 80025cc:	2201      	movs	r2, #1
 80025ce:	4910      	ldr	r1, [pc, #64]	; (8002610 <_Z23getFont_verdana_20_4bppv+0x60>)
 80025d0:	9309      	str	r3, [sp, #36]	; 0x24
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_Z23getFont_verdana_20_4bppv+0x64>)
 80025d4:	4810      	ldr	r0, [pc, #64]	; (8002618 <_Z23getFont_verdana_20_4bppv+0x68>)
 80025d6:	9308      	str	r3, [sp, #32]
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <_Z23getFont_verdana_20_4bppv+0x6c>)
 80025da:	940a      	str	r4, [sp, #40]	; 0x28
 80025dc:	9405      	str	r4, [sp, #20]
 80025de:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80025e2:	2304      	movs	r3, #4
 80025e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80025e8:	2314      	movs	r3, #20
 80025ea:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80025f4:	f7ff fe6c 	bl	80022d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <_Z23getFont_verdana_20_4bppv+0x70>)
 80025fa:	f014 fb01 	bl	8016c00 <atexit>
 80025fe:	4628      	mov	r0, r5
 8002600:	f014 fac0 	bl	8016b84 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002606:	b00f      	add	sp, #60	; 0x3c
 8002608:	bd30      	pop	{r4, r5, pc}
 800260a:	bf00      	nop
 800260c:	240014d8 	.word	0x240014d8
 8002610:	080194c8 	.word	0x080194c8
 8002614:	080194ec 	.word	0x080194ec
 8002618:	240014dc 	.word	0x240014dc
 800261c:	080194f8 	.word	0x080194f8
 8002620:	080025ad 	.word	0x080025ad

08002624 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002624:	4770      	bx	lr
	...

08002628 <_Z23getFont_verdana_40_4bppv>:
{
 8002628:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800262a:	4d16      	ldr	r5, [pc, #88]	; (8002684 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800262c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800262e:	782c      	ldrb	r4, [r5, #0]
 8002630:	f3bf 8f5b 	dmb	ish
 8002634:	f014 0401 	ands.w	r4, r4, #1
 8002638:	d120      	bne.n	800267c <_Z23getFont_verdana_40_4bppv+0x54>
 800263a:	4628      	mov	r0, r5
 800263c:	f014 fa96 	bl	8016b6c <__cxa_guard_acquire>
 8002640:	b1e0      	cbz	r0, 800267c <_Z23getFont_verdana_40_4bppv+0x54>
 8002642:	233f      	movs	r3, #63	; 0x3f
 8002644:	2201      	movs	r2, #1
 8002646:	4910      	ldr	r1, [pc, #64]	; (8002688 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002648:	9309      	str	r3, [sp, #36]	; 0x24
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_Z23getFont_verdana_40_4bppv+0x64>)
 800264c:	4810      	ldr	r0, [pc, #64]	; (8002690 <_Z23getFont_verdana_40_4bppv+0x68>)
 800264e:	9308      	str	r3, [sp, #32]
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002652:	940a      	str	r4, [sp, #40]	; 0x28
 8002654:	9405      	str	r4, [sp, #20]
 8002656:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800265a:	2304      	movs	r3, #4
 800265c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002660:	2328      	movs	r3, #40	; 0x28
 8002662:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800266c:	f7ff fe30 	bl	80022d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002672:	f014 fac5 	bl	8016c00 <atexit>
 8002676:	4628      	mov	r0, r5
 8002678:	f014 fa84 	bl	8016b84 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <_Z23getFont_verdana_40_4bppv+0x68>)
 800267e:	b00f      	add	sp, #60	; 0x3c
 8002680:	bd30      	pop	{r4, r5, pc}
 8002682:	bf00      	nop
 8002684:	24001508 	.word	0x24001508
 8002688:	080194d8 	.word	0x080194d8
 800268c:	080194f0 	.word	0x080194f0
 8002690:	2400150c 	.word	0x2400150c
 8002694:	080194fc 	.word	0x080194fc
 8002698:	08002625 	.word	0x08002625

0800269c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800269c:	2000      	movs	r0, #0
 800269e:	4770      	bx	lr

080026a0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80026a0:	2000      	movs	r0, #0
 80026a2:	4770      	bx	lr

080026a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80026a4:	b40e      	push	{r1, r2, r3}
 80026a6:	b503      	push	{r0, r1, lr}
 80026a8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80026aa:	2100      	movs	r1, #0
{
 80026ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80026b0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80026b2:	f00a fb7d 	bl	800cdb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80026b6:	b002      	add	sp, #8
 80026b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026bc:	b003      	add	sp, #12
 80026be:	4770      	bx	lr

080026c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80026c0:	b40c      	push	{r2, r3}
 80026c2:	b507      	push	{r0, r1, r2, lr}
 80026c4:	ab04      	add	r3, sp, #16
 80026c6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80026ca:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80026cc:	f00a fb70 	bl	800cdb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80026d0:	b003      	add	sp, #12
 80026d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80026d6:	b002      	add	sp, #8
 80026d8:	4770      	bx	lr
	...

080026dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80026dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80026de:	b510      	push	{r4, lr}
 80026e0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80026e2:	b373      	cbz	r3, 8002742 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80026e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80026e6:	b92b      	cbnz	r3, 80026f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80026ea:	21c5      	movs	r1, #197	; 0xc5
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80026ee:	4819      	ldr	r0, [pc, #100]	; (8002754 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80026f0:	f014 fa68 	bl	8016bc4 <__assert_func>
            return buffer[pos];
 80026f4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80026f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80026fc:	b30b      	cbz	r3, 8002742 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80026fe:	f00b fda1 	bl	800e244 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002702:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002704:	2b01      	cmp	r3, #1
 8002706:	d803      	bhi.n	8002710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800270a:	21cb      	movs	r1, #203	; 0xcb
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800270e:	e7ee      	b.n	80026ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002710:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002712:	f640 103f 	movw	r0, #2367	; 0x93f
 8002716:	1c53      	adds	r3, r2, #1
 8002718:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800271a:	2b09      	cmp	r3, #9
 800271c:	4619      	mov	r1, r3
 800271e:	bf88      	it	hi
 8002720:	f1a3 010a 	subhi.w	r1, r3, #10
 8002724:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002728:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800272a:	4281      	cmp	r1, r0
 800272c:	d109      	bne.n	8002742 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800272e:	2b0a      	cmp	r3, #10
 8002730:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002734:	bf28      	it	cs
 8002736:	2300      	movcs	r3, #0
            return buffer[pos];
 8002738:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800273a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800273e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002740:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002742:	4620      	mov	r0, r4
}
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002748:	f00b bc7e 	b.w	800e048 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800274c:	080189c4 	.word	0x080189c4
 8002750:	080189cd 	.word	0x080189cd
 8002754:	08018a78 	.word	0x08018a78
 8002758:	08018ac2 	.word	0x08018ac2
 800275c:	08018ad0 	.word	0x08018ad0

08002760 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002760:	f00b bc3b 	b.w	800dfda <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002764 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002764:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002766:	bb18      	cbnz	r0, 80027b0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800276a:	4813      	ldr	r0, [pc, #76]	; (80027b8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4913      	ldr	r1, [pc, #76]	; (80027bc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002770:	b1b3      	cbz	r3, 80027a0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002772:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002774:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002776:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002778:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800277a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	441a      	add	r2, r3
 8002780:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002788:	f000 f82a 	bl	80027e0 <_ZN17TypedTextDatabase8getFontsEv>
 800278c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800278e:	f000 f825 	bl	80027dc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002794:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002798:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800279c:	8018      	strh	r0, [r3, #0]
    }
}
 800279e:	e007      	b.n	80027b0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80027a2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80027a6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80027aa:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80027ac:	2c00      	cmp	r4, #0
 80027ae:	d1e8      	bne.n	8002782 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80027b0:	bd38      	pop	{r3, r4, r5, pc}
 80027b2:	bf00      	nop
 80027b4:	24001538 	.word	0x24001538
 80027b8:	2400153c 	.word	0x2400153c
 80027bc:	24001540 	.word	0x24001540
 80027c0:	24001544 	.word	0x24001544
 80027c4:	24006ae0 	.word	0x24006ae0
 80027c8:	24006ae8 	.word	0x24006ae8
 80027cc:	24006ae4 	.word	0x24006ae4
 80027d0:	08019504 	.word	0x08019504
 80027d4:	08019500 	.word	0x08019500
 80027d8:	0801950c 	.word	0x0801950c

080027dc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80027dc:	2000      	movs	r0, #0
 80027de:	4770      	bx	lr

080027e0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80027e0:	4800      	ldr	r0, [pc, #0]	; (80027e4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80027e2:	4770      	bx	lr
 80027e4:	24001548 	.word	0x24001548

080027e8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80027e8:	b510      	push	{r4, lr}
};
 80027ea:	4c05      	ldr	r4, [pc, #20]	; (8002800 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80027ec:	f7ff fee0 	bl	80025b0 <_Z23getFont_verdana_20_4bppv>
};
 80027f0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80027f2:	f7ff ff19 	bl	8002628 <_Z23getFont_verdana_40_4bppv>
};
 80027f6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80027f8:	f7ff fe9e 	bl	8002538 <_Z23getFont_verdana_10_4bppv>
};
 80027fc:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	24001548 	.word	0x24001548

08002804 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002804:	4770      	bx	lr

08002806 <_ZN19FrontendApplicationD0Ev>:
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
 800280a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800280e:	f014 f9ab 	bl	8016b68 <_ZdlPvj>
 8002812:	4620      	mov	r0, r4
 8002814:	bd10      	pop	{r4, pc}

08002816 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002816:	b510      	push	{r4, lr}
 8002818:	4604      	mov	r4, r0
    {
        model.tick();
 800281a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800281e:	f000 f812 	bl	8002846 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002822:	4620      	mov	r0, r4
    }
 8002824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8002828:	f009 bc2a 	b.w	800c080 <_ZN8touchgfx11Application15handleTickEventEv>

0800282c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002830:	f7ff fce0 	bl	80021f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002834:	4b01      	ldr	r3, [pc, #4]	; (800283c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8002836:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8002838:	6023      	str	r3, [r4, #0]
}
 800283a:	bd10      	pop	{r4, pc}
 800283c:	08018bac 	.word	0x08018bac

08002840 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002840:	2200      	movs	r2, #0
 8002842:	6002      	str	r2, [r0, #0]
{

}
 8002844:	4770      	bx	lr

08002846 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002846:	4770      	bx	lr

08002848 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8002848:	4770      	bx	lr

0800284a <_ZThn4_N16Screen1PresenterD1Ev>:
 800284a:	3804      	subs	r0, #4
 800284c:	4770      	bx	lr

0800284e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800284e:	4770      	bx	lr

08002850 <_ZN16Screen1PresenterD0Ev>:
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
 8002854:	2110      	movs	r1, #16
 8002856:	f014 f987 	bl	8016b68 <_ZdlPvj>
 800285a:	4620      	mov	r0, r4
 800285c:	bd10      	pop	{r4, pc}

0800285e <_ZThn4_N16Screen1PresenterD0Ev>:
 800285e:	f1a0 0004 	sub.w	r0, r0, #4
 8002862:	e7f5      	b.n	8002850 <_ZN16Screen1PresenterD0Ev>

08002864 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8002864:	2200      	movs	r2, #0
    : view(v)
 8002866:	60c1      	str	r1, [r0, #12]
 8002868:	6082      	str	r2, [r0, #8]
 800286a:	4a04      	ldr	r2, [pc, #16]	; (800287c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800286c:	b510      	push	{r4, lr}
    : view(v)
 800286e:	f102 0408 	add.w	r4, r2, #8
 8002872:	3220      	adds	r2, #32
 8002874:	6004      	str	r4, [r0, #0]
 8002876:	6042      	str	r2, [r0, #4]
}
 8002878:	bd10      	pop	{r4, pc}
 800287a:	bf00      	nop
 800287c:	08018bf0 	.word	0x08018bf0

08002880 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8002880:	4770      	bx	lr
	...

08002884 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <_ZN11Screen1ViewD1Ev+0x10>)
 8002886:	b510      	push	{r4, lr}
 8002888:	4604      	mov	r4, r0
 800288a:	6003      	str	r3, [r0, #0]
 800288c:	f7ff fd56 	bl	800233c <_ZN15Screen1ViewBaseD1Ev>
 8002890:	4620      	mov	r0, r4
 8002892:	bd10      	pop	{r4, pc}
 8002894:	08018cd4 	.word	0x08018cd4

08002898 <_ZN11Screen1ViewD0Ev>:
 8002898:	b510      	push	{r4, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	f7ff fff2 	bl	8002884 <_ZN11Screen1ViewD1Ev>
 80028a0:	21e0      	movs	r1, #224	; 0xe0
 80028a2:	4620      	mov	r0, r4
 80028a4:	f014 f960 	bl	8016b68 <_ZdlPvj>
 80028a8:	4620      	mov	r0, r4
 80028aa:	bd10      	pop	{r4, pc}

080028ac <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 80028ac:	b508      	push	{r3, lr}
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b92b      	cbnz	r3, 80028c0 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 80028b6:	2187      	movs	r1, #135	; 0x87
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 80028bc:	f014 f982 	bl	8016bc4 <__assert_func>
        return bitmapId;
    }
 80028c0:	8800      	ldrh	r0, [r0, #0]
 80028c2:	bd08      	pop	{r3, pc}
 80028c4:	24006b18 	.word	0x24006b18
 80028c8:	08018c18 	.word	0x08018c18
 80028cc:	08018c54 	.word	0x08018c54
 80028d0:	08018c87 	.word	0x08018c87

080028d4 <_ZN11Screen1View9ToggleLEDEv>:


//Toggle LED function
//PC2 RED LED
//PC3 GRN LED
void Screen1View::ToggleLED(){
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4604      	mov	r4, r0
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
    {
        return up.getId() == originalPressed.getId();
 80028d8:	30c6      	adds	r0, #198	; 0xc6
 80028da:	f7ff ffe7 	bl	80028ac <_ZNK8touchgfx6Bitmap5getIdEv>
 80028de:	4605      	mov	r5, r0
 80028e0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80028e4:	f7ff ffe2 	bl	80028ac <_ZNK8touchgfx6Bitmap5getIdEv>
	if( toggleButton.getState() == true ){
 80028e8:	4285      	cmp	r5, r0
 80028ea:	d10b      	bne.n	8002904 <_ZN11Screen1View9ToggleLEDEv+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80028ec:	2201      	movs	r2, #1
 80028ee:	2108      	movs	r1, #8
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <_ZN11Screen1View9ToggleLEDEv+0x40>)
 80028f2:	f001 fe87 	bl	8004604 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80028f8:	2104      	movs	r1, #4
 80028fa:	4806      	ldr	r0, [pc, #24]	; (8002914 <_ZN11Screen1View9ToggleLEDEv+0x40>)
	}
}
 80028fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002900:	f001 be80 	b.w	8004604 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	2108      	movs	r1, #8
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <_ZN11Screen1View9ToggleLEDEv+0x40>)
 800290a:	f001 fe7b 	bl	8004604 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	e7f2      	b.n	80028f8 <_ZN11Screen1View9ToggleLEDEv+0x24>
 8002912:	bf00      	nop
 8002914:	58020800 	.word	0x58020800

08002918 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	f7ff fd62 	bl	80023e4 <_ZN15Screen1ViewBaseC1Ev>
 8002920:	4b01      	ldr	r3, [pc, #4]	; (8002928 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8002922:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8002924:	6023      	str	r3, [r4, #0]
}
 8002926:	bd10      	pop	{r4, pc}
 8002928:	08018cd4 	.word	0x08018cd4

0800292c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800292c:	f7ff bd07 	b.w	800233e <_ZN15Screen1ViewBase11setupScreenEv>

08002930 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002930:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002934:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8002938:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 800293a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800293c:	2305      	movs	r3, #5
 800293e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002940:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002944:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8002948:	4770      	bx	lr

0800294a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 800294a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800294e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8002950:	bf04      	itt	eq
 8002952:	2300      	moveq	r3, #0
 8002954:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8002958:	2000      	movs	r0, #0
 800295a:	4770      	bx	lr

0800295c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr

08002960 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002960:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002962:	6904      	ldr	r4, [r0, #16]
 8002964:	8900      	ldrh	r0, [r0, #8]
 8002966:	46a4      	mov	ip, r4
}
 8002968:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800296c:	4760      	bx	ip

0800296e <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800296e:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002970:	68c4      	ldr	r4, [r0, #12]
 8002972:	8900      	ldrh	r0, [r0, #8]
 8002974:	46a4      	mov	ip, r4
}
 8002976:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800297a:	4760      	bx	ip

0800297c <FT5336_GestureConfig>:
{
 800297c:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002980:	f100 0818 	add.w	r8, r0, #24
{
 8002984:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002986:	7809      	ldrb	r1, [r1, #0]
 8002988:	4640      	mov	r0, r8
 800298a:	f000 f8fb 	bl	8002b84 <ft5336_radian_value>
 800298e:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8002990:	f899 1004 	ldrb.w	r1, [r9, #4]
 8002994:	4640      	mov	r0, r8
 8002996:	f000 f901 	bl	8002b9c <ft5336_offset_left_right>
 800299a:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800299c:	f899 1008 	ldrb.w	r1, [r9, #8]
 80029a0:	4640      	mov	r0, r8
 80029a2:	f000 f907 	bl	8002bb4 <ft5336_offset_up_down>
 80029a6:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80029a8:	f899 100c 	ldrb.w	r1, [r9, #12]
 80029ac:	4640      	mov	r0, r8
 80029ae:	f000 f90d 	bl	8002bcc <ft5336_disatnce_left_right>
 80029b2:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80029b4:	f899 1010 	ldrb.w	r1, [r9, #16]
 80029b8:	4640      	mov	r0, r8
 80029ba:	f000 f913 	bl	8002be4 <ft5336_distance_up_down>
 80029be:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80029c0:	f899 1014 	ldrb.w	r1, [r9, #20]
 80029c4:	4640      	mov	r0, r8
 80029c6:	f000 f919 	bl	8002bfc <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 80029ca:	42c5      	cmn	r5, r0
}
 80029cc:	bf14      	ite	ne
 80029ce:	f04f 30ff 	movne.w	r0, #4294967295
 80029d2:	2000      	moveq	r0, #0
 80029d4:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

080029d8 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80029d8:	3018      	adds	r0, #24
 80029da:	f000 b927 	b.w	8002c2c <ft5336_chip_id>

080029de <FT5336_GetState>:
{
 80029de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80029e0:	f100 0518 	add.w	r5, r0, #24
{
 80029e4:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80029e6:	a901      	add	r1, sp, #4
 80029e8:	4628      	mov	r0, r5
 80029ea:	f000 f8be 	bl	8002b6a <ft5336_td_status>
 80029ee:	bb08      	cbnz	r0, 8002a34 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80029f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	bf98      	it	ls
 80029f8:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80029fa:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80029fc:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80029fe:	2103      	movs	r1, #3
 8002a00:	4628      	mov	r0, r5
 8002a02:	eb0d 0203 	add.w	r2, sp, r3
 8002a06:	f000 f89d 	bl	8002b44 <ft5336_read_reg>
 8002a0a:	b9b0      	cbnz	r0, 8002a3a <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8002a0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a1a:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8002a1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8002a20:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8002a22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60a3      	str	r3, [r4, #8]
}
 8002a30:	b003      	add	sp, #12
 8002a32:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	e7df      	b.n	80029fa <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002a3e:	e7f7      	b.n	8002a30 <FT5336_GetState+0x52>

08002a40 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002a40:	3018      	adds	r0, #24
 8002a42:	f000 b88d 	b.w	8002b60 <ft5336_gest_id>

08002a46 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8002a46:	2101      	movs	r1, #1
 8002a48:	3018      	adds	r0, #24
 8002a4a:	f000 b8e3 	b.w	8002c14 <ft5336_g_mode>

08002a4e <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	3018      	adds	r0, #24
 8002a52:	f000 b8df 	b.w	8002c14 <ft5336_g_mode>

08002a56 <FT5336_Init>:
{
 8002a56:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8002a58:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002a5c:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8002a5e:	b96b      	cbnz	r3, 8002a7c <FT5336_Init+0x26>
    pObj->IO.Init();
 8002a60:	6803      	ldr	r3, [r0, #0]
 8002a62:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fff2 	bl	8002a4e <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8002a6a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8002a6c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8002a70:	bf18      	it	ne
 8002a72:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8002a74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8002a78:	4240      	negs	r0, r0
}
 8002a7a:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8002a7c:	2000      	movs	r0, #0
  return ret;
 8002a7e:	e7fc      	b.n	8002a7a <FT5336_Init+0x24>

08002a80 <FT5336_ClearIT>:
 8002a80:	2000      	movs	r0, #0
 8002a82:	4770      	bx	lr

08002a84 <FT5336_GetMultiTouchState>:
{
 8002a84:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002a86:	f100 0518 	add.w	r5, r0, #24
{
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002a8e:	4628      	mov	r0, r5
 8002a90:	4669      	mov	r1, sp
 8002a92:	f000 f86a 	bl	8002b6a <ft5336_td_status>
 8002a96:	bb90      	cbnz	r0, 8002afe <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002a98:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	bf98      	it	ls
 8002aa0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002aa2:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002aa4:	231e      	movs	r3, #30
 8002aa6:	466a      	mov	r2, sp
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f000 f84a 	bl	8002b44 <ft5336_read_reg>
 8002ab0:	bb40      	cbnz	r0, 8002b04 <FT5336_GetMultiTouchState+0x80>
 8002ab2:	1d22      	adds	r2, r4, #4
 8002ab4:	466b      	mov	r3, sp
 8002ab6:	3418      	adds	r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ab8:	781d      	ldrb	r5, [r3, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002aba:	3306      	adds	r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002abc:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8002ac0:	0229      	lsls	r1, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8002ac2:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ac4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002ac8:	4331      	orrs	r1, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002aca:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ace:	f842 1b04 	str.w	r1, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002ad2:	4294      	cmp	r4, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002ad4:	f813 1c04 	ldrb.w	r1, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8002ad8:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002ada:	ea4f 2101 	mov.w	r1, r1, lsl #8
 8002ade:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002ae2:	ea41 0106 	orr.w	r1, r1, r6
 8002ae6:	6111      	str	r1, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8002ae8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8002aec:	6251      	str	r1, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8002aee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002af2:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8002af6:	64d1      	str	r1, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002af8:	d1de      	bne.n	8002ab8 <FT5336_GetMultiTouchState+0x34>
}
 8002afa:	b008      	add	sp, #32
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	e7ce      	b.n	8002aa2 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002b08:	e7f7      	b.n	8002afa <FT5336_GetMultiTouchState+0x76>
	...

08002b0c <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8002b0c:	b190      	cbz	r0, 8002b34 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8002b0e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002b10:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b12:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8002b14:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002b16:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8002b18:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b1a:	68ca      	ldr	r2, [r1, #12]
 8002b1c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b1e:	690a      	ldr	r2, [r1, #16]
 8002b20:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002b22:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8002b24:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8002b26:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <FT5336_RegisterBusIO+0x30>)
 8002b2a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <FT5336_RegisterBusIO+0x34>)
 8002b2e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8002b30:	b103      	cbz	r3, 8002b34 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8002b32:	4718      	bx	r3
}
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	08002961 	.word	0x08002961
 8002b40:	0800296f 	.word	0x0800296f

08002b44 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002b44:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002b46:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8002b4a:	46a4      	mov	ip, r4
}
 8002b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002b50:	4760      	bx	ip

08002b52 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002b52:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002b54:	6804      	ldr	r4, [r0, #0]
 8002b56:	6880      	ldr	r0, [r0, #8]
 8002b58:	46a4      	mov	ip, r4
}
 8002b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002b5e:	4760      	bx	ip

08002b60 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8002b60:	2301      	movs	r3, #1
{
 8002b62:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7ff bfed 	b.w	8002b44 <ft5336_read_reg>

08002b6a <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002b6a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8002b6c:	460a      	mov	r2, r1
{
 8002b6e:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8002b70:	2301      	movs	r3, #1
 8002b72:	2102      	movs	r1, #2
 8002b74:	f7ff ffe6 	bl	8002b44 <ft5336_read_reg>
  
  if(ret == 0)
 8002b78:	b918      	cbnz	r0, 8002b82 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8002b7a:	7823      	ldrb	r3, [r4, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8002b82:	bd10      	pop	{r4, pc}

08002b84 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b84:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8002b86:	2301      	movs	r3, #1
{
 8002b88:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8002b8c:	f10d 0207 	add.w	r2, sp, #7
 8002b90:	2191      	movs	r1, #145	; 0x91
 8002b92:	f7ff ffde 	bl	8002b52 <ft5336_write_reg>
}
 8002b96:	b003      	add	sp, #12
 8002b98:	f85d fb04 	ldr.w	pc, [sp], #4

08002b9c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b9c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8002b9e:	2301      	movs	r3, #1
{
 8002ba0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8002ba4:	f10d 0207 	add.w	r2, sp, #7
 8002ba8:	2192      	movs	r1, #146	; 0x92
 8002baa:	f7ff ffd2 	bl	8002b52 <ft5336_write_reg>
}
 8002bae:	b003      	add	sp, #12
 8002bb0:	f85d fb04 	ldr.w	pc, [sp], #4

08002bb4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bb4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8002bb6:	2301      	movs	r3, #1
{
 8002bb8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8002bbc:	f10d 0207 	add.w	r2, sp, #7
 8002bc0:	2193      	movs	r1, #147	; 0x93
 8002bc2:	f7ff ffc6 	bl	8002b52 <ft5336_write_reg>
}
 8002bc6:	b003      	add	sp, #12
 8002bc8:	f85d fb04 	ldr.w	pc, [sp], #4

08002bcc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bcc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8002bce:	2301      	movs	r3, #1
{
 8002bd0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8002bd4:	f10d 0207 	add.w	r2, sp, #7
 8002bd8:	2194      	movs	r1, #148	; 0x94
 8002bda:	f7ff ffba 	bl	8002b52 <ft5336_write_reg>
}
 8002bde:	b003      	add	sp, #12
 8002be0:	f85d fb04 	ldr.w	pc, [sp], #4

08002be4 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002be4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8002be6:	2301      	movs	r3, #1
{
 8002be8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8002bec:	f10d 0207 	add.w	r2, sp, #7
 8002bf0:	2195      	movs	r1, #149	; 0x95
 8002bf2:	f7ff ffae 	bl	8002b52 <ft5336_write_reg>
}
 8002bf6:	b003      	add	sp, #12
 8002bf8:	f85d fb04 	ldr.w	pc, [sp], #4

08002bfc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bfc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8002bfe:	2301      	movs	r3, #1
{
 8002c00:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8002c04:	f10d 0207 	add.w	r2, sp, #7
 8002c08:	2196      	movs	r1, #150	; 0x96
 8002c0a:	f7ff ffa2 	bl	8002b52 <ft5336_write_reg>
}
 8002c0e:	b003      	add	sp, #12
 8002c10:	f85d fb04 	ldr.w	pc, [sp], #4

08002c14 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8002c14:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8002c16:	2301      	movs	r3, #1
{
 8002c18:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8002c1c:	f10d 0207 	add.w	r2, sp, #7
 8002c20:	21a4      	movs	r1, #164	; 0xa4
 8002c22:	f7ff ff96 	bl	8002b52 <ft5336_write_reg>
}
 8002c26:	b003      	add	sp, #12
 8002c28:	f85d fb04 	ldr.w	pc, [sp], #4

08002c2c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002c2c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8002c2e:	2301      	movs	r3, #1
 8002c30:	21a8      	movs	r1, #168	; 0xa8
 8002c32:	f7ff bf87 	b.w	8002b44 <ft5336_read_reg>

08002c36 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8002c36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8002c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8002c42:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8002c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8002c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8002c56:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8002c5a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8002c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c60:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8002c64:	2000      	movs	r0, #0
 8002c66:	4770      	bx	lr

08002c68 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	b09a      	sub	sp, #104	; 0x68
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8002c70:	2100      	movs	r1, #0
{
 8002c72:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8002c74:	a806      	add	r0, sp, #24
 8002c76:	2250      	movs	r2, #80	; 0x50
 8002c78:	f014 f92a 	bl	8016ed0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8002c7c:	2214      	movs	r2, #20
 8002c7e:	2100      	movs	r1, #0
 8002c80:	a801      	add	r0, sp, #4
 8002c82:	f014 f925 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002c86:	b92d      	cbnz	r5, 8002c94 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8002c88:	2c01      	cmp	r4, #1
 8002c8a:	d159      	bne.n	8002d40 <MX25LM51245G_AutoPollingMemReady+0xd8>
  {
    return MX25LM51245G_ERROR;
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8002c90:	b01a      	add	sp, #104	; 0x68
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002c94:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002c96:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002c98:	9309      	str	r3, [sp, #36]	; 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002c9a:	f04f 0110 	mov.w	r1, #16
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2308      	moveq	r3, #8
 8002ca6:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002ca8:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002caa:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002cac:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002cae:	bf0c      	ite	eq
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	2310      	movne	r3, #16
 8002cb4:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8002cb6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8002cba:	bf08      	it	eq
 8002cbc:	2305      	moveq	r3, #5
 8002cbe:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002cc8:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8002cca:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002ccc:	bf0c      	ite	eq
 8002cce:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8002cd2:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002cd4:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002cd6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002cd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cdc:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002cde:	bf0c      	ite	eq
 8002ce0:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8002ce4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002ce8:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002cea:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002cec:	bf0c      	ite	eq
 8002cee:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8002cf2:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002cf4:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002cf6:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8002cfe:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002d00:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8002d02:	bf0c      	ite	eq
 8002d04:	2302      	moveq	r3, #2
 8002d06:	2301      	movne	r3, #1
 8002d08:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8002d0a:	bf0c      	ite	eq
 8002d0c:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8002d10:	2300      	movne	r3, #0
 8002d12:	9318      	str	r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d1c:	e9cd 3104 	strd	r3, r1, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d20:	a906      	add	r1, sp, #24
 8002d22:	f002 fb82 	bl	800542a <HAL_OSPI_Command>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d1b0      	bne.n	8002c8c <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	a901      	add	r1, sp, #4
 8002d30:	4630      	mov	r0, r6
 8002d32:	f002 fcb7 	bl	80056a4 <HAL_OSPI_AutoPolling>
 8002d36:	3800      	subs	r0, #0
 8002d38:	bf18      	it	ne
 8002d3a:	2001      	movne	r0, #1
 8002d3c:	4240      	negs	r0, r0
 8002d3e:	e7a7      	b.n	8002c90 <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e7a8      	b.n	8002c96 <MX25LM51245G_AutoPollingMemReady+0x2e>

08002d44 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	b096      	sub	sp, #88	; 0x58
 8002d48:	460c      	mov	r4, r1
 8002d4a:	4606      	mov	r6, r0
 8002d4c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2250      	movs	r2, #80	; 0x50
 8002d52:	a802      	add	r0, sp, #8
 8002d54:	f014 f8bc 	bl	8016ed0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8002d58:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8002d5a:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8002d5c:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8002d60:	d104      	bne.n	8002d6c <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 8002d62:	b91d      	cbnz	r5, 8002d6c <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8002d68:	b016      	add	sp, #88	; 0x58
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8002d6c:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002d6e:	2c00      	cmp	r4, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8002d70:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002d72:	bf18      	it	ne
 8002d74:	2304      	movne	r3, #4
 8002d76:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002d78:	bf0c      	ite	eq
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	2310      	movne	r3, #16
 8002d7e:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8002d80:	d140      	bne.n	8002e04 <MX25LM51245G_EnableSTRMemoryMappedMode+0xc0>
 8002d82:	2d00      	cmp	r5, #0
 8002d84:	bf0c      	ite	eq
 8002d86:	230b      	moveq	r3, #11
 8002d88:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002d8a:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8002d8c:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002d94:	bf0c      	ite	eq
 8002d96:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d9a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8002d9e:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002da0:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002da2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8002da4:	bf0c      	ite	eq
 8002da6:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8002daa:	f44f 5340 	movne.w	r3, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002dae:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8002db0:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002db2:	bf0c      	ite	eq
 8002db4:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8002db8:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002dbc:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2308      	moveq	r3, #8
 8002dc2:	2306      	movne	r3, #6
 8002dc4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dc6:	f002 fb30 	bl	800542a <HAL_OSPI_Command>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d1ca      	bne.n	8002d64 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8002dd2:	b9d4      	cbnz	r4, 8002e0a <MX25LM51245G_EnableSTRMemoryMappedMode+0xc6>
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	bf18      	it	ne
 8002dd8:	2312      	movne	r3, #18
 8002dda:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8002ddc:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	a902      	add	r1, sp, #8
 8002de4:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8002de6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002de8:	f002 fb1f 	bl	800542a <HAL_OSPI_Command>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d1b9      	bne.n	8002d64 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8002df0:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8002df2:	4669      	mov	r1, sp
 8002df4:	4630      	mov	r0, r6
 8002df6:	f002 fca5 	bl	8005744 <HAL_OSPI_MemoryMapped>
 8002dfa:	3800      	subs	r0, #0
 8002dfc:	bf18      	it	ne
 8002dfe:	2001      	movne	r0, #1
 8002e00:	4240      	negs	r0, r0
 8002e02:	e7b1      	b.n	8002d68 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8002e04:	f64e 4313 	movw	r3, #60435	; 0xec13
 8002e08:	e7bf      	b.n	8002d8a <MX25LM51245G_EnableSTRMemoryMappedMode+0x46>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8002e0a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8002e0e:	e7e4      	b.n	8002dda <MX25LM51245G_EnableSTRMemoryMappedMode+0x96>

08002e10 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	b096      	sub	sp, #88	; 0x58
 8002e14:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8002e16:	224c      	movs	r2, #76	; 0x4c
 8002e18:	2100      	movs	r1, #0
 8002e1a:	a803      	add	r0, sp, #12
 8002e1c:	f014 f858 	bl	8016ed0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8002e20:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8002e22:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002e26:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8002e30:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8002e34:	2301      	movs	r3, #1
 8002e36:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8002e42:	f64e 6311 	movw	r3, #60945	; 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8002e46:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8002e4a:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8002e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002e52:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e56:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8002e5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e5e:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8002e60:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8002e62:	2306      	movs	r3, #6
 8002e64:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8002e68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e6c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e6e:	f002 fadc 	bl	800542a <HAL_OSPI_Command>
 8002e72:	b118      	cbz	r0, 8002e7c <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8002e78:	b016      	add	sp, #88	; 0x58
 8002e7a:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8002e7c:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8002e84:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8002e86:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8002e8a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e8e:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8002e90:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e92:	f002 faca 	bl	800542a <HAL_OSPI_Command>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d1ec      	bne.n	8002e74 <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8002e9a:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f002 fc50 	bl	8005744 <HAL_OSPI_MemoryMapped>
 8002ea4:	3800      	subs	r0, #0
 8002ea6:	bf18      	it	ne
 8002ea8:	2001      	movne	r0, #1
 8002eaa:	4240      	negs	r0, r0
 8002eac:	e7e4      	b.n	8002e78 <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

08002eae <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8002eae:	b570      	push	{r4, r5, r6, lr}
 8002eb0:	b09a      	sub	sp, #104	; 0x68
 8002eb2:	460d      	mov	r5, r1
 8002eb4:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8002eb6:	2100      	movs	r1, #0
{
 8002eb8:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8002eba:	a806      	add	r0, sp, #24
 8002ebc:	2250      	movs	r2, #80	; 0x50
 8002ebe:	f014 f807 	bl	8016ed0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8002ec2:	2214      	movs	r2, #20
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	a801      	add	r0, sp, #4
 8002ec8:	f014 f802 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002ecc:	b92d      	cbnz	r5, 8002eda <MX25LM51245G_WriteEnable+0x2c>
 8002ece:	2c01      	cmp	r4, #1
 8002ed0:	d169      	bne.n	8002fa6 <MX25LM51245G_WriteEnable+0xf8>
  {
    return MX25LM51245G_ERROR;
 8002ed2:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8002ed6:	b01a      	add	sp, #104	; 0x68
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002eda:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002edc:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002ede:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2308      	moveq	r3, #8
 8002eea:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002eec:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eee:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002ef0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	2310      	movne	r3, #16
 8002ef8:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8002efa:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8002efe:	bf08      	it	eq
 8002f00:	2306      	moveq	r3, #6
 8002f02:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f04:	f002 fa91 	bl	800542a <HAL_OSPI_Command>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d1e2      	bne.n	8002ed2 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 8002f12:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8002f18:	bf08      	it	eq
 8002f1a:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f1c:	a906      	add	r1, sp, #24
 8002f1e:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8002f20:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8002f22:	bf0c      	ite	eq
 8002f24:	2300      	moveq	r3, #0
 8002f26:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002f2a:	2c01      	cmp	r4, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8002f2c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002f2e:	bf0c      	ite	eq
 8002f30:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8002f34:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002f36:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002f38:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8002f3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f3e:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002f40:	bf0c      	ite	eq
 8002f42:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8002f46:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002f4a:	2c01      	cmp	r4, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002f4c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002f4e:	bf0c      	ite	eq
 8002f50:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8002f54:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002f56:	2d00      	cmp	r5, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002f58:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8002f60:	2c01      	cmp	r4, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002f62:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8002f64:	bf0c      	ite	eq
 8002f66:	2302      	moveq	r3, #2
 8002f68:	2301      	movne	r3, #1
 8002f6a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8002f6c:	bf0c      	ite	eq
 8002f6e:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8002f72:	2300      	movne	r3, #0
 8002f74:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f76:	f002 fa58 	bl	800542a <HAL_OSPI_Command>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d1a9      	bne.n	8002ed2 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 8002f7e:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002f80:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8002f82:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f84:	a901      	add	r1, sp, #4
 8002f86:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 8002f88:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f90:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	f002 fb84 	bl	80056a4 <HAL_OSPI_AutoPolling>
 8002f9c:	3800      	subs	r0, #0
 8002f9e:	bf18      	it	ne
 8002fa0:	2001      	movne	r0, #1
 8002fa2:	4240      	negs	r0, r0
 8002fa4:	e797      	b.n	8002ed6 <MX25LM51245G_WriteEnable+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e798      	b.n	8002edc <MX25LM51245G_WriteEnable+0x2e>

08002faa <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8002faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fac:	b095      	sub	sp, #84	; 0x54
 8002fae:	460d      	mov	r5, r1
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2250      	movs	r2, #80	; 0x50
 8002fb8:	4668      	mov	r0, sp
{
 8002fba:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8002fbc:	f013 ff88 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002fc0:	b92d      	cbnz	r5, 8002fce <MX25LM51245G_WriteCfg2Register+0x24>
 8002fc2:	2c01      	cmp	r4, #1
 8002fc4:	d14a      	bne.n	800305c <MX25LM51245G_WriteCfg2Register+0xb2>
  {
    return MX25LM51245G_ERROR;
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8002fca:	b015      	add	sp, #84	; 0x54
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002fce:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002fd0:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002fd2:	9303      	str	r3, [sp, #12]
  s_command.Address            = WriteAddr;
 8002fd4:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2308      	moveq	r3, #8
 8002fda:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002fdc:	2d00      	cmp	r5, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002fde:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	2310      	movne	r3, #16
 8002fe6:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8002fe8:	f247 238d 	movw	r3, #29325	; 0x728d
 8002fec:	bf08      	it	eq
 8002fee:	2372      	moveq	r3, #114	; 0x72
 8002ff0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002ff2:	bf0c      	ite	eq
 8002ff4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002ff8:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002ffc:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002ffe:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003000:	bf0c      	ite	eq
 8003002:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8003006:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003008:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800300a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800300c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003010:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003012:	bf0c      	ite	eq
 8003014:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003018:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800301c:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800301e:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003020:	bf0c      	ite	eq
 8003022:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8003026:	2300      	movne	r3, #0
 8003028:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800302a:	b1cd      	cbz	r5, 8003060 <MX25LM51245G_WriteCfg2Register+0xb6>
 800302c:	2c01      	cmp	r4, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4669      	mov	r1, sp
 800303a:	4630      	mov	r0, r6
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800303c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800303e:	f002 f9f4 	bl	800542a <HAL_OSPI_Command>
 8003042:	2800      	cmp	r0, #0
 8003044:	d1bf      	bne.n	8002fc6 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	a91a      	add	r1, sp, #104	; 0x68
 800304c:	4630      	mov	r0, r6
 800304e:	f002 fa97 	bl	8005580 <HAL_OSPI_Transmit>
 8003052:	3800      	subs	r0, #0
 8003054:	bf18      	it	ne
 8003056:	2001      	movne	r0, #1
 8003058:	4240      	negs	r0, r0
 800305a:	e7b6      	b.n	8002fca <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800305c:	2301      	movs	r3, #1
 800305e:	e7b7      	b.n	8002fd0 <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003060:	2301      	movs	r3, #1
 8003062:	e7e7      	b.n	8003034 <MX25LM51245G_WriteCfg2Register+0x8a>

08003064 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b095      	sub	sp, #84	; 0x54
 8003068:	460d      	mov	r5, r1
 800306a:	4606      	mov	r6, r0
 800306c:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800306e:	2100      	movs	r1, #0
 8003070:	2250      	movs	r2, #80	; 0x50
 8003072:	4668      	mov	r0, sp
{
 8003074:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003076:	f013 ff2b 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800307a:	b92d      	cbnz	r5, 8003088 <MX25LM51245G_ReadCfg2Register+0x24>
 800307c:	2c01      	cmp	r4, #1
 800307e:	d153      	bne.n	8003128 <MX25LM51245G_ReadCfg2Register+0xc4>
  {
    return MX25LM51245G_ERROR;
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003084:	b015      	add	sp, #84	; 0x54
 8003086:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003088:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800308a:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800308c:	9303      	str	r3, [sp, #12]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003094:	bf0c      	ite	eq
 8003096:	2308      	moveq	r3, #8
 8003098:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800309a:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800309c:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800309e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80030a0:	bf0c      	ite	eq
 80030a2:	2300      	moveq	r3, #0
 80030a4:	2310      	movne	r3, #16
  s_command.Address            = ReadAddr;
 80030a6:	9706      	str	r7, [sp, #24]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80030a8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80030aa:	f247 138e 	movw	r3, #29070	; 0x718e
 80030ae:	bf08      	it	eq
 80030b0:	2371      	moveq	r3, #113	; 0x71
 80030b2:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80030b4:	bf0c      	ite	eq
 80030b6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80030ba:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80030be:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80030c0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80030c2:	bf0c      	ite	eq
 80030c4:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80030c8:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80030ca:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80030cc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80030ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80030d2:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80030d4:	bf0c      	ite	eq
 80030d6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80030da:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80030de:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80030e0:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80030e2:	bf0c      	ite	eq
 80030e4:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80030e8:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80030ea:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80030ec:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80030ee:	bf0c      	ite	eq
 80030f0:	2300      	moveq	r3, #0
 80030f2:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80030f4:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80030f6:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80030f8:	bf0c      	ite	eq
 80030fa:	2302      	moveq	r3, #2
 80030fc:	2301      	movne	r3, #1
 80030fe:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003100:	bf0c      	ite	eq
 8003102:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8003106:	2300      	movne	r3, #0
 8003108:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800310a:	f002 f98e 	bl	800542a <HAL_OSPI_Command>
 800310e:	2800      	cmp	r0, #0
 8003110:	d1b6      	bne.n	8003080 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003118:	4630      	mov	r0, r6
 800311a:	f002 fa71 	bl	8005600 <HAL_OSPI_Receive>
 800311e:	3800      	subs	r0, #0
 8003120:	bf18      	it	ne
 8003122:	2001      	movne	r0, #1
 8003124:	4240      	negs	r0, r0
 8003126:	e7ad      	b.n	8003084 <MX25LM51245G_ReadCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003128:	2301      	movs	r3, #1
 800312a:	e7ae      	b.n	800308a <MX25LM51245G_ReadCfg2Register+0x26>

0800312c <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	b094      	sub	sp, #80	; 0x50
 8003130:	460c      	mov	r4, r1
 8003132:	4606      	mov	r6, r0
 8003134:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003136:	2100      	movs	r1, #0
 8003138:	2250      	movs	r2, #80	; 0x50
 800313a:	4668      	mov	r0, sp
 800313c:	f013 fec8 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003140:	b9f4      	cbnz	r4, 8003180 <MX25LM51245G_ResetEnable+0x54>
 8003142:	2d01      	cmp	r5, #1
 8003144:	d01e      	beq.n	8003184 <MX25LM51245G_ResetEnable+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003146:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003148:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800314a:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003152:	bf0c      	ite	eq
 8003154:	2308      	moveq	r3, #8
 8003156:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003158:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800315a:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800315c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800315e:	bf0c      	ite	eq
 8003160:	2300      	moveq	r3, #0
 8003162:	2310      	movne	r3, #16
 8003164:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003166:	f246 6399 	movw	r3, #26265	; 0x6699
 800316a:	bf08      	it	eq
 800316c:	2366      	moveq	r3, #102	; 0x66
 800316e:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003170:	f002 f95b 	bl	800542a <HAL_OSPI_Command>
 8003174:	3800      	subs	r0, #0
 8003176:	bf18      	it	ne
 8003178:	2001      	movne	r0, #1
 800317a:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800317c:	b014      	add	sp, #80	; 0x50
 800317e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003180:	2304      	movs	r3, #4
 8003182:	e7e1      	b.n	8003148 <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	e7f8      	b.n	800317c <MX25LM51245G_ResetEnable+0x50>

0800318a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800318a:	b570      	push	{r4, r5, r6, lr}
 800318c:	b094      	sub	sp, #80	; 0x50
 800318e:	460c      	mov	r4, r1
 8003190:	4606      	mov	r6, r0
 8003192:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003194:	2100      	movs	r1, #0
 8003196:	2250      	movs	r2, #80	; 0x50
 8003198:	4668      	mov	r0, sp
 800319a:	f013 fe99 	bl	8016ed0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800319e:	b9f4      	cbnz	r4, 80031de <MX25LM51245G_ResetMemory+0x54>
 80031a0:	2d01      	cmp	r5, #1
 80031a2:	d01e      	beq.n	80031e2 <MX25LM51245G_ResetMemory+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80031a4:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80031a6:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80031a8:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80031b0:	bf0c      	ite	eq
 80031b2:	2308      	moveq	r3, #8
 80031b4:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80031b6:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031b8:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80031ba:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80031bc:	bf0c      	ite	eq
 80031be:	2300      	moveq	r3, #0
 80031c0:	2310      	movne	r3, #16
 80031c2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80031c4:	f649 1366 	movw	r3, #39270	; 0x9966
 80031c8:	bf08      	it	eq
 80031ca:	2399      	moveq	r3, #153	; 0x99
 80031cc:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031ce:	f002 f92c 	bl	800542a <HAL_OSPI_Command>
 80031d2:	3800      	subs	r0, #0
 80031d4:	bf18      	it	ne
 80031d6:	2001      	movne	r0, #1
 80031d8:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80031da:	b014      	add	sp, #80	; 0x50
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80031de:	2304      	movs	r3, #4
 80031e0:	e7e1      	b.n	80031a6 <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	e7f8      	b.n	80031da <MX25LM51245G_ResetMemory+0x50>

080031e8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <BSP_I2C4_DeInit+0x48>)
{
 80031ea:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	b90b      	cbnz	r3, 80031f4 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80031f0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80031f2:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80031f4:	3b01      	subs	r3, #1
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80031fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <BSP_I2C4_DeInit+0x4c>)
 8003202:	f001 f95d 	bl	80044c0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003206:	480b      	ldr	r0, [pc, #44]	; (8003234 <BSP_I2C4_DeInit+0x4c>)
 8003208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800320c:	f001 f958 	bl	80044c0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003212:	480a      	ldr	r0, [pc, #40]	; (800323c <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8003214:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8003218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003220:	f001 fb7d 	bl	800491e <HAL_I2C_DeInit>
 8003224:	2800      	cmp	r0, #0
 8003226:	d0e3      	beq.n	80031f0 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8003228:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800322c:	e7e1      	b.n	80031f2 <BSP_I2C4_DeInit+0xa>
 800322e:	bf00      	nop
 8003230:	24001554 	.word	0x24001554
 8003234:	58021400 	.word	0x58021400
 8003238:	58024400 	.word	0x58024400
 800323c:	24001f5c 	.word	0x24001f5c

08003240 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003240:	2300      	movs	r3, #0
 8003242:	2201      	movs	r2, #1
{
 8003244:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8003246:	6041      	str	r1, [r0, #4]
{
 8003248:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800324a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800324c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8003250:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003254:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003258:	f001 fb0f 	bl	800487a <HAL_I2C_Init>
 800325c:	4601      	mov	r1, r0
 800325e:	b108      	cbz	r0, 8003264 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8003260:	2001      	movs	r0, #1
}
 8003262:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003264:	4620      	mov	r0, r4
 8003266:	f001 fd30 	bl	8004cca <HAL_I2CEx_ConfigAnalogFilter>
 800326a:	4601      	mov	r1, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1f7      	bne.n	8003260 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003270:	4620      	mov	r0, r4
 8003272:	f001 fd50 	bl	8004d16 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8003276:	3800      	subs	r0, #0
 8003278:	bf18      	it	ne
 800327a:	2001      	movne	r0, #1
 800327c:	e7f1      	b.n	8003262 <MX_I2C4_Init+0x22>
	...

08003280 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8003280:	4b9f      	ldr	r3, [pc, #636]	; (8003500 <BSP_I2C4_Init+0x280>)
 8003282:	48a0      	ldr	r0, [pc, #640]	; (8003504 <BSP_I2C4_Init+0x284>)
{
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8003288:	6003      	str	r3, [r0, #0]
{
 800328a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 800328c:	4b9e      	ldr	r3, [pc, #632]	; (8003508 <BSP_I2C4_Init+0x288>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	9200      	str	r2, [sp, #0]
 8003292:	3201      	adds	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	9b00      	ldr	r3, [sp, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 80c3 	bne.w	8003424 <BSP_I2C4_Init+0x1a4>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800329e:	f001 fd0f 	bl	8004cc0 <HAL_I2C_GetState>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f040 80be 	bne.w	8003424 <BSP_I2C4_Init+0x1a4>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80032a8:	4d98      	ldr	r5, [pc, #608]	; (800350c <BSP_I2C4_Init+0x28c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80032aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80032ae:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80032b0:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80032b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80032b6:	4896      	ldr	r0, [pc, #600]	; (8003510 <BSP_I2C4_Init+0x290>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80032b8:	f043 0320 	orr.w	r3, r3, #32
 80032bc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80032c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	930a      	str	r3, [sp, #40]	; 0x28
 80032ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80032cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80032d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80032dc:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80032e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80032e6:	2312      	movs	r3, #18
 80032e8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80032ec:	2302      	movs	r3, #2
 80032ee:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80032f2:	a90d      	add	r1, sp, #52	; 0x34
 80032f4:	f000 fffe 	bl	80042f4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80032f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80032fc:	a90d      	add	r1, sp, #52	; 0x34
 80032fe:	4884      	ldr	r0, [pc, #528]	; (8003510 <BSP_I2C4_Init+0x290>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003300:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003302:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003304:	f000 fff6 	bl	80042f4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8003308:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8003314:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	930c      	str	r3, [sp, #48]	; 0x30
 800331e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8003320:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003328:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800332c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003334:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003338:	f003 f9cc 	bl	80066d4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800333c:	2800      	cmp	r0, #0
 800333e:	d06b      	beq.n	8003418 <BSP_I2C4_Init+0x198>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003340:	4b74      	ldr	r3, [pc, #464]	; (8003514 <BSP_I2C4_Init+0x294>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003342:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003346:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800351c <BSP_I2C4_Init+0x29c>
 800334a:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800334e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003352:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003356:	0083      	lsls	r3, r0, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003358:	4601      	mov	r1, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800335a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800335e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003362:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
  if (tsdadel_min <= 0)
 8003366:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800336a:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800336e:	9a00      	ldr	r2, [sp, #0]
 8003370:	9302      	str	r3, [sp, #8]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003372:	4b69      	ldr	r3, [pc, #420]	; (8003518 <BSP_I2C4_Init+0x298>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003374:	4696      	mov	lr, r2
 8003376:	681b      	ldr	r3, [r3, #0]
{
 8003378:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800337a:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800337c:	f5bc 7faf 	cmp.w	ip, #350	; 0x15e
 8003380:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003382:	f106 0601 	add.w	r6, r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8003386:	d358      	bcc.n	800343a <BSP_I2C4_Init+0x1ba>
 8003388:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800338a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800338c:	45ab      	cmp	fp, r5
 800338e:	d850      	bhi.n	8003432 <BSP_I2C4_Init+0x1b2>
 8003390:	9c02      	ldr	r4, [sp, #8]
 8003392:	42ac      	cmp	r4, r5
 8003394:	d34d      	bcc.n	8003432 <BSP_I2C4_Init+0x1b2>
            if(presc != prev_presc)
 8003396:	4590      	cmp	r8, r2
 8003398:	d04b      	beq.n	8003432 <BSP_I2C4_Init+0x1b2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800339a:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800339e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80033a0:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80033a2:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80033a6:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80033a8:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80033ac:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80033b0:	d93c      	bls.n	800342c <BSP_I2C4_Init+0x1ac>
 80033b2:	4a59      	ldr	r2, [pc, #356]	; (8003518 <BSP_I2C4_Init+0x298>)
 80033b4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <BSP_I2C4_Init+0x298>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80033b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80033bc:	4957      	ldr	r1, [pc, #348]	; (800351c <BSP_I2C4_Init+0x29c>)
 80033be:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80033c0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80033c2:	9202      	str	r2, [sp, #8]
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80033c8:	9304      	str	r3, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80033ca:	0043      	lsls	r3, r0, #1
 80033cc:	f5c3 6b80 	rsb	fp, r3, #1024	; 0x400
 80033d0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80033d4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 80033d8:	f10b 0b01 	add.w	fp, fp, #1
 80033dc:	9408      	str	r4, [sp, #32]
 80033de:	9309      	str	r3, [sp, #36]	; 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80033e0:	9b04      	ldr	r3, [sp, #16]
 80033e2:	429f      	cmp	r7, r3
 80033e4:	d134      	bne.n	8003450 <BSP_I2C4_Init+0x1d0>
        if (idx < I2C_VALID_TIMING_NBR)
 80033e6:	2a7f      	cmp	r2, #127	; 0x7f
 80033e8:	d816      	bhi.n	8003418 <BSP_I2C4_Init+0x198>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80033ea:	2314      	movs	r3, #20
 80033ec:	435a      	muls	r2, r3
 80033ee:	4b4b      	ldr	r3, [pc, #300]	; (800351c <BSP_I2C4_Init+0x29c>)
 80033f0:	1899      	adds	r1, r3, r2
 80033f2:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80033f4:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80033f6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80033fa:	684b      	ldr	r3, [r1, #4]
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003402:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003404:	688b      	ldr	r3, [r1, #8]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800340c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800340e:	68cb      	ldr	r3, [r1, #12]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003414:	4323      	orrs	r3, r4
 8003416:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003418:	9900      	ldr	r1, [sp, #0]
 800341a:	483a      	ldr	r0, [pc, #232]	; (8003504 <BSP_I2C4_Init+0x284>)
 800341c:	f7ff ff10 	bl	8003240 <MX_I2C4_Init>
 8003420:	2800      	cmp	r0, #0
 8003422:	d169      	bne.n	80034f8 <BSP_I2C4_Init+0x278>
  int32_t ret = BSP_ERROR_NONE;
 8003424:	2000      	movs	r0, #0
}
 8003426:	b013      	add	sp, #76	; 0x4c
 8003428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342c:	4690      	mov	r8, r2
 800342e:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003432:	3701      	adds	r7, #1
 8003434:	440d      	add	r5, r1
 8003436:	2f10      	cmp	r7, #16
 8003438:	d1a8      	bne.n	800338c <BSP_I2C4_Init+0x10c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800343a:	2e10      	cmp	r6, #16
 800343c:	448c      	add	ip, r1
 800343e:	d19d      	bne.n	800337c <BSP_I2C4_Init+0xfc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003440:	3201      	adds	r2, #1
 8003442:	4401      	add	r1, r0
 8003444:	2a10      	cmp	r2, #16
 8003446:	d197      	bne.n	8003378 <BSP_I2C4_Init+0xf8>
 8003448:	f1be 0f00 	cmp.w	lr, #0
 800344c:	d1b1      	bne.n	80033b2 <BSP_I2C4_Init+0x132>
 800344e:	e7b2      	b.n	80033b6 <BSP_I2C4_Init+0x136>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003450:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003452:	f04f 0c00 	mov.w	ip, #0
 8003456:	9c08      	ldr	r4, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003458:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800345c:	441c      	add	r4, r3
 800345e:	ebab 0503 	sub.w	r5, fp, r3
 8003462:	9403      	str	r4, [sp, #12]
 8003464:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003466:	9d03      	ldr	r5, [sp, #12]
 8003468:	9401      	str	r4, [sp, #4]
 800346a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800346c:	441c      	add	r4, r3
 800346e:	9407      	str	r4, [sp, #28]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003470:	f240 5414 	movw	r4, #1300	; 0x514
 8003474:	f8cd c014 	str.w	ip, [sp, #20]
 8003478:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800347c:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003480:	42a5      	cmp	r5, r4
 8003482:	d92e      	bls.n	80034e2 <BSP_I2C4_Init+0x262>
 8003484:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8003488:	d22b      	bcs.n	80034e2 <BSP_I2C4_Init+0x262>
 800348a:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800348c:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003490:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003494:	1966      	adds	r6, r4, r5
 8003496:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800349a:	f206 1aa1 	addw	sl, r6, #417	; 0x1a1
 800349e:	f240 4412 	movw	r4, #1042	; 0x412
 80034a2:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80034a6:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80034aa:	45a2      	cmp	sl, r4
 80034ac:	d812      	bhi.n	80034d4 <BSP_I2C4_Init+0x254>
 80034ae:	f5b8 7f16 	cmp.w	r8, #600	; 0x258
 80034b2:	d30f      	bcc.n	80034d4 <BSP_I2C4_Init+0x254>
 80034b4:	4540      	cmp	r0, r8
 80034b6:	d20d      	bcs.n	80034d4 <BSP_I2C4_Init+0x254>
              error = -error;
 80034b8:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80034bc:	bf28      	it	cs
 80034be:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80034c0:	9c02      	ldr	r4, [sp, #8]
 80034c2:	45a2      	cmp	sl, r4
 80034c4:	d206      	bcs.n	80034d4 <BSP_I2C4_Init+0x254>
              I2c_valid_timing[count].scll = scll;
 80034c6:	9a05      	ldr	r2, [sp, #20]
              I2c_valid_timing[count].sclh = sclh;
 80034c8:	f8cd a008 	str.w	sl, [sp, #8]
              I2c_valid_timing[count].scll = scll;
 80034cc:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80034ce:	9a06      	ldr	r2, [sp, #24]
 80034d0:	60ca      	str	r2, [r1, #12]
 80034d2:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80034d4:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 80034d8:	eba9 0903 	sub.w	r9, r9, r3
 80034dc:	441e      	add	r6, r3
 80034de:	4498      	add	r8, r3
 80034e0:	d1db      	bne.n	800349a <BSP_I2C4_Init+0x21a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80034e2:	9c01      	ldr	r4, [sp, #4]
 80034e4:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80034e8:	441d      	add	r5, r3
 80034ea:	eba4 0403 	sub.w	r4, r4, r3
 80034ee:	9401      	str	r4, [sp, #4]
 80034f0:	d1be      	bne.n	8003470 <BSP_I2C4_Init+0x1f0>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80034f2:	3701      	adds	r7, #1
 80034f4:	3114      	adds	r1, #20
 80034f6:	e773      	b.n	80033e0 <BSP_I2C4_Init+0x160>
          ret = BSP_ERROR_BUS_FAILURE;
 80034f8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80034fc:	e793      	b.n	8003426 <BSP_I2C4_Init+0x1a6>
 80034fe:	bf00      	nop
 8003500:	58001c00 	.word	0x58001c00
 8003504:	24001f5c 	.word	0x24001f5c
 8003508:	24001554 	.word	0x24001554
 800350c:	58024400 	.word	0x58024400
 8003510:	58021400 	.word	0x58021400
 8003514:	3b9aca00 	.word	0x3b9aca00
 8003518:	24001f58 	.word	0x24001f58
 800351c:	24001558 	.word	0x24001558

08003520 <BSP_I2C4_WriteReg>:
{
 8003520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003522:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003526:	9200      	str	r2, [sp, #0]
 8003528:	460a      	mov	r2, r1
 800352a:	4601      	mov	r1, r0
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <BSP_I2C4_WriteReg+0x30>)
 800352e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003532:	2301      	movs	r3, #1
 8003534:	f001 fa0c 	bl	8004950 <HAL_I2C_Mem_Write>
 8003538:	b140      	cbz	r0, 800354c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <BSP_I2C4_WriteReg+0x30>)
 800353c:	f001 fbc3 	bl	8004cc6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003540:	2804      	cmp	r0, #4
 8003542:	bf0c      	ite	eq
 8003544:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003548:	f06f 0003 	mvnne.w	r0, #3
}
 800354c:	b004      	add	sp, #16
 800354e:	bd10      	pop	{r4, pc}
 8003550:	24001f5c 	.word	0x24001f5c

08003554 <BSP_I2C4_ReadReg>:
{
 8003554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003556:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800355a:	9200      	str	r2, [sp, #0]
 800355c:	460a      	mov	r2, r1
 800355e:	4601      	mov	r1, r0
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <BSP_I2C4_ReadReg+0x30>)
 8003562:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003566:	2301      	movs	r3, #1
 8003568:	f001 facc 	bl	8004b04 <HAL_I2C_Mem_Read>
 800356c:	b140      	cbz	r0, 8003580 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <BSP_I2C4_ReadReg+0x30>)
 8003570:	f001 fba9 	bl	8004cc6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003574:	2804      	cmp	r0, #4
 8003576:	bf0c      	ite	eq
 8003578:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800357c:	f06f 0003 	mvnne.w	r0, #3
}
 8003580:	b004      	add	sp, #16
 8003582:	bd10      	pop	{r4, pc}
 8003584:	24001f5c 	.word	0x24001f5c

08003588 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8003588:	f000 bcd6 	b.w	8003f38 <HAL_GetTick>

0800358c <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 800358c:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800358e:	4c21      	ldr	r4, [pc, #132]	; (8003614 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8003590:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003592:	4821      	ldr	r0, [pc, #132]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003594:	78a2      	ldrb	r2, [r4, #2]
 8003596:	7861      	ldrb	r1, [r4, #1]
 8003598:	f7ff fc89 	bl	8002eae <MX25LM51245G_WriteEnable>
 800359c:	b118      	cbz	r0, 80035a6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800359e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80035a2:	b005      	add	sp, #20
 80035a4:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 80035a6:	2303      	movs	r3, #3
 80035a8:	481b      	ldr	r0, [pc, #108]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035b0:	78a2      	ldrb	r2, [r4, #2]
 80035b2:	7861      	ldrb	r1, [r4, #1]
 80035b4:	f7ff fcf9 	bl	8002faa <MX25LM51245G_WriteCfg2Register>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d1f0      	bne.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80035bc:	78a2      	ldrb	r2, [r4, #2]
 80035be:	7861      	ldrb	r1, [r4, #1]
 80035c0:	4815      	ldr	r0, [pc, #84]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80035c2:	f7ff fc74 	bl	8002eae <MX25LM51245G_WriteEnable>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1e8      	bne.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80035cc:	2501      	movs	r5, #1
 80035ce:	4812      	ldr	r0, [pc, #72]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80035d0:	9500      	str	r5, [sp, #0]
 80035d2:	78a2      	ldrb	r2, [r4, #2]
 80035d4:	7861      	ldrb	r1, [r4, #1]
 80035d6:	f7ff fce8 	bl	8002faa <MX25LM51245G_WriteCfg2Register>
 80035da:	4604      	mov	r4, r0
 80035dc:	2800      	cmp	r0, #0
 80035de:	d1de      	bne.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80035e0:	2028      	movs	r0, #40	; 0x28
 80035e2:	f000 fcaf 	bl	8003f44 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80035e6:	4622      	mov	r2, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	480b      	ldr	r0, [pc, #44]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80035ec:	f7ff fb3c 	bl	8002c68 <MX25LM51245G_AutoPollingMemReady>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1d4      	bne.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80035f4:	ab03      	add	r3, sp, #12
 80035f6:	4602      	mov	r2, r0
 80035f8:	4629      	mov	r1, r5
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4603      	mov	r3, r0
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003600:	f7ff fd30 	bl	8003064 <MX25LM51245G_ReadCfg2Register>
 8003604:	2800      	cmp	r0, #0
 8003606:	d1ca      	bne.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8003608:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800360c:	42ab      	cmp	r3, r5
 800360e:	d0c8      	beq.n	80035a2 <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8003610:	e7c5      	b.n	800359e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8003612:	bf00      	nop
 8003614:	24001fb0 	.word	0x24001fb0
 8003618:	24001fb8 	.word	0x24001fb8

0800361c <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 800361c:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800361e:	4d27      	ldr	r5, [pc, #156]	; (80036bc <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8003620:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003622:	4c27      	ldr	r4, [pc, #156]	; (80036c0 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8003624:	78aa      	ldrb	r2, [r5, #2]
 8003626:	7869      	ldrb	r1, [r5, #1]
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff fc40 	bl	8002eae <MX25LM51245G_WriteEnable>
 800362e:	b118      	cbz	r0, 8003638 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003630:	f06f 0004 	mvn.w	r0, #4
}
 8003634:	b005      	add	sp, #20
 8003636:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8003638:	2303      	movs	r3, #3
 800363a:	78aa      	ldrb	r2, [r5, #2]
 800363c:	7869      	ldrb	r1, [r5, #1]
 800363e:	4620      	mov	r0, r4
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003646:	f7ff fcb0 	bl	8002faa <MX25LM51245G_WriteCfg2Register>
 800364a:	2800      	cmp	r0, #0
 800364c:	d1f0      	bne.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800364e:	78aa      	ldrb	r2, [r5, #2]
 8003650:	4620      	mov	r0, r4
 8003652:	7869      	ldrb	r1, [r5, #1]
 8003654:	f7ff fc2b 	bl	8002eae <MX25LM51245G_WriteEnable>
 8003658:	2800      	cmp	r0, #0
 800365a:	d1e9      	bne.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800365c:	2302      	movs	r3, #2
 800365e:	78aa      	ldrb	r2, [r5, #2]
 8003660:	7869      	ldrb	r1, [r5, #1]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4603      	mov	r3, r0
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff fc9f 	bl	8002faa <MX25LM51245G_WriteCfg2Register>
 800366c:	2800      	cmp	r0, #0
 800366e:	d1df      	bne.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003670:	2028      	movs	r0, #40	; 0x28
 8003672:	f000 fc67 	bl	8003f44 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800367a:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800367c:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800367e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003682:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003684:	f001 fe4a 	bl	800531c <HAL_OSPI_Init>
 8003688:	b9a8      	cbnz	r0, 80036b6 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800368a:	2201      	movs	r2, #1
 800368c:	4620      	mov	r0, r4
 800368e:	4611      	mov	r1, r2
 8003690:	f7ff faea 	bl	8002c68 <MX25LM51245G_AutoPollingMemReady>
 8003694:	2800      	cmp	r0, #0
 8003696:	d1cb      	bne.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003698:	ab03      	add	r3, sp, #12
 800369a:	2201      	movs	r2, #1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4611      	mov	r1, r2
 80036a0:	4603      	mov	r3, r0
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff fcde 	bl	8003064 <MX25LM51245G_ReadCfg2Register>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1c1      	bne.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 80036ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d0bf      	beq.n	8003634 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 80036b4:	e7bc      	b.n	8003630 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80036b6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80036ba:	e7bb      	b.n	8003634 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 80036bc:	24001fb0 	.word	0x24001fb0
 80036c0:	24001fb8 	.word	0x24001fb8

080036c4 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 80036c4:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <MX_OSPI_NOR_Init+0x3c>)
 80036c6:	2304      	movs	r3, #4
 80036c8:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 80036cc:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 80036ce:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 80036d0:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 80036d2:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 80036d4:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 80036d6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80036da:	684a      	ldr	r2, [r1, #4]
 80036dc:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80036de:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 80036e0:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80036e2:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80036e4:	68ca      	ldr	r2, [r1, #12]
 80036e6:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80036e8:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80036ec:	bf09      	itett	eq
 80036ee:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80036f2:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80036f4:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80036f6:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80036fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 80036fc:	f001 be0e 	b.w	800531c <HAL_OSPI_Init>
 8003700:	52005000 	.word	0x52005000

08003704 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8003704:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003706:	b998      	cbnz	r0, 8003730 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003708:	4c0b      	ldr	r4, [pc, #44]	; (8003738 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800370a:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800370c:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800370e:	b95b      	cbnz	r3, 8003728 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003710:	2201      	movs	r2, #1
 8003712:	480a      	ldr	r0, [pc, #40]	; (800373c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8003714:	f7ff fb16 	bl	8002d44 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8003718:	b110      	cbz	r0, 8003720 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800371a:	f06f 0004 	mvn.w	r0, #4
}
 800371e:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003720:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8003722:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003724:	7023      	strb	r3, [r4, #0]
 8003726:	e7fa      	b.n	800371e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8003728:	4804      	ldr	r0, [pc, #16]	; (800373c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 800372a:	f7ff fb71 	bl	8002e10 <MX25LM51245G_EnableDTRMemoryMappedMode>
 800372e:	e7f3      	b.n	8003718 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8003730:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003734:	e7f3      	b.n	800371e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8003736:	bf00      	nop
 8003738:	24001fb0 	.word	0x24001fb0
 800373c:	24001fb8 	.word	0x24001fb8

08003740 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8003740:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003742:	b950      	cbnz	r0, 800375a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8003744:	4c09      	ldr	r4, [pc, #36]	; (800376c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8003746:	7823      	ldrb	r3, [r4, #0]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d109      	bne.n	8003760 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 800374e:	f002 f828 	bl	80057a2 <HAL_OSPI_Abort>
 8003752:	b940      	cbnz	r0, 8003766 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003754:	2301      	movs	r3, #1
 8003756:	7023      	strb	r3, [r4, #0]
}
 8003758:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800375a:	f06f 0001 	mvn.w	r0, #1
 800375e:	e7fb      	b.n	8003758 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8003760:	f06f 001a 	mvn.w	r0, #26
 8003764:	e7f8      	b.n	8003758 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003766:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800376a:	e7f5      	b.n	8003758 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 800376c:	24001fb0 	.word	0x24001fb0
 8003770:	24001fb8 	.word	0x24001fb8

08003774 <BSP_OSPI_NOR_DeInit>:
{
 8003774:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003776:	2800      	cmp	r0, #0
 8003778:	d156      	bne.n	8003828 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800377a:	4c2d      	ldr	r4, [pc, #180]	; (8003830 <BSP_OSPI_NOR_DeInit+0xbc>)
 800377c:	7823      	ldrb	r3, [r4, #0]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d04b      	beq.n	800381a <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003782:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003788:	482a      	ldr	r0, [pc, #168]	; (8003834 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800378a:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800378c:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 800378e:	f000 fe97 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8003792:	2104      	movs	r1, #4
 8003794:	4828      	ldr	r0, [pc, #160]	; (8003838 <BSP_OSPI_NOR_DeInit+0xc4>)
 8003796:	f000 fe93 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	4827      	ldr	r0, [pc, #156]	; (800383c <BSP_OSPI_NOR_DeInit+0xc8>)
 800379e:	f000 fe8f 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 80037a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037a6:	4826      	ldr	r0, [pc, #152]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037a8:	f000 fe8a 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 80037ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037b0:	4823      	ldr	r0, [pc, #140]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037b2:	f000 fe85 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 80037b6:	2104      	movs	r1, #4
 80037b8:	4822      	ldr	r0, [pc, #136]	; (8003844 <BSP_OSPI_NOR_DeInit+0xd0>)
 80037ba:	f000 fe81 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 80037be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037c2:	481f      	ldr	r0, [pc, #124]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037c4:	f000 fe7c 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 80037c8:	2110      	movs	r1, #16
 80037ca:	481d      	ldr	r0, [pc, #116]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037cc:	f000 fe78 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 80037d0:	2120      	movs	r1, #32
 80037d2:	481b      	ldr	r0, [pc, #108]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037d4:	f000 fe74 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 80037d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037dc:	4817      	ldr	r0, [pc, #92]	; (800383c <BSP_OSPI_NOR_DeInit+0xc8>)
 80037de:	f000 fe6f 	bl	80044c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	4816      	ldr	r0, [pc, #88]	; (8003840 <BSP_OSPI_NOR_DeInit+0xcc>)
 80037e6:	f000 fe6b 	bl	80044c0 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 80037ec:	4817      	ldr	r0, [pc, #92]	; (800384c <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 80037ee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 80037f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 80037fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003806:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800380a:	f001 fdfb 	bl	8005404 <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800380e:	2800      	cmp	r0, #0
 8003810:	bf0c      	ite	eq
 8003812:	2000      	moveq	r0, #0
 8003814:	f06f 0003 	mvnne.w	r0, #3
}
 8003818:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800381a:	f7ff ff91 	bl	8003740 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800381e:	2800      	cmp	r0, #0
 8003820:	d0af      	beq.n	8003782 <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003822:	f06f 0004 	mvn.w	r0, #4
 8003826:	e7f7      	b.n	8003818 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8003828:	f06f 0001 	mvn.w	r0, #1
 800382c:	e7f4      	b.n	8003818 <BSP_OSPI_NOR_DeInit+0xa4>
 800382e:	bf00      	nop
 8003830:	24001fb0 	.word	0x24001fb0
 8003834:	58021400 	.word	0x58021400
 8003838:	58020400 	.word	0x58020400
 800383c:	58021800 	.word	0x58021800
 8003840:	58020c00 	.word	0x58020c00
 8003844:	58021000 	.word	0x58021000
 8003848:	58024400 	.word	0x58024400
 800384c:	24001fb8 	.word	0x24001fb8

08003850 <BSP_OSPI_NOR_ConfigFlash>:
{
 8003850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003854:	460d      	mov	r5, r1
 8003856:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003858:	2800      	cmp	r0, #0
 800385a:	d158      	bne.n	800390e <BSP_OSPI_NOR_ConfigFlash+0xbe>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800385c:	4c2f      	ldr	r4, [pc, #188]	; (800391c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 800385e:	7823      	ldrb	r3, [r4, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d057      	beq.n	8003914 <BSP_OSPI_NOR_ConfigFlash+0xc4>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8003864:	7863      	ldrb	r3, [r4, #1]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d148      	bne.n	80038fc <BSP_OSPI_NOR_ConfigFlash+0xac>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800386a:	2901      	cmp	r1, #1
 800386c:	78a2      	ldrb	r2, [r4, #2]
 800386e:	d109      	bne.n	8003884 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8003870:	4296      	cmp	r6, r2
 8003872:	d107      	bne.n	8003884 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003874:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003876:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8003878:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800387a:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800387c:	70a6      	strb	r6, [r4, #2]
}
 800387e:	b004      	add	sp, #16
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003884:	4f26      	ldr	r7, [pc, #152]	; (8003920 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8003886:	2101      	movs	r1, #1
 8003888:	4638      	mov	r0, r7
 800388a:	f7ff fb10 	bl	8002eae <MX25LM51245G_WriteEnable>
 800388e:	4603      	mov	r3, r0
 8003890:	bb88      	cbnz	r0, 80038f6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8003892:	f88d 000c 	strb.w	r0, [sp, #12]
    reg[1] = 0;
 8003896:	f88d 000d 	strb.w	r0, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800389a:	9000      	str	r0, [sp, #0]
 800389c:	4638      	mov	r0, r7
 800389e:	78a2      	ldrb	r2, [r4, #2]
 80038a0:	7861      	ldrb	r1, [r4, #1]
 80038a2:	f7ff fb82 	bl	8002faa <MX25LM51245G_WriteCfg2Register>
 80038a6:	4680      	mov	r8, r0
 80038a8:	bb28      	cbnz	r0, 80038f6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80038aa:	2028      	movs	r0, #40	; 0x28
 80038ac:	f000 fb4a 	bl	8003f44 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80038b0:	78a3      	ldrb	r3, [r4, #2]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d106      	bne.n	80038c4 <BSP_OSPI_NOR_ConfigFlash+0x74>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80038b6:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80038b8:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80038bc:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80038c0:	f001 fd2c 	bl	800531c <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80038c4:	2200      	movs	r2, #0
 80038c6:	4816      	ldr	r0, [pc, #88]	; (8003920 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 80038c8:	4611      	mov	r1, r2
 80038ca:	f7ff f9cd 	bl	8002c68 <MX25LM51245G_AutoPollingMemReady>
 80038ce:	b990      	cbnz	r0, 80038f6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80038d0:	ab03      	add	r3, sp, #12
 80038d2:	4602      	mov	r2, r0
 80038d4:	4601      	mov	r1, r0
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	4811      	ldr	r0, [pc, #68]	; (8003920 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 80038dc:	f7ff fbc2 	bl	8003064 <MX25LM51245G_ReadCfg2Register>
 80038e0:	b948      	cbnz	r0, 80038f6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 80038e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80038e6:	b933      	cbnz	r3, 80038f6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80038e8:	2d01      	cmp	r5, #1
 80038ea:	d1c3      	bne.n	8003874 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80038ec:	78a3      	ldrb	r3, [r4, #2]
 80038ee:	b94b      	cbnz	r3, 8003904 <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80038f0:	f7ff fe94 	bl	800361c <OSPI_NOR_EnterDOPIMode.constprop.0>
 80038f4:	e008      	b.n	8003908 <BSP_OSPI_NOR_ConfigFlash+0xb8>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80038f6:	f06f 0004 	mvn.w	r0, #4
 80038fa:	e7c0      	b.n	800387e <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80038fc:	2901      	cmp	r1, #1
 80038fe:	d1b9      	bne.n	8003874 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8003900:	2a00      	cmp	r2, #0
 8003902:	d1f5      	bne.n	80038f0 <BSP_OSPI_NOR_ConfigFlash+0xa0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8003904:	f7ff fe42 	bl	800358c <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8003908:	2800      	cmp	r0, #0
 800390a:	d1b8      	bne.n	800387e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 800390c:	e7b2      	b.n	8003874 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 800390e:	f06f 0001 	mvn.w	r0, #1
 8003912:	e7b4      	b.n	800387e <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8003914:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8003918:	e7b1      	b.n	800387e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 800391a:	bf00      	nop
 800391c:	24001fb0 	.word	0x24001fb0
 8003920:	24001fb8 	.word	0x24001fb8

08003924 <MX_OSPI_ClockConfig>:
{
 8003924:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
{
 800392a:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 800392c:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800392e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003930:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003934:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003936:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003938:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 800393a:	2305      	movs	r3, #5
 800393c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003940:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003942:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003944:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003948:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800394a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800394e:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003950:	f002 ffec 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
}
 8003954:	b02f      	add	sp, #188	; 0xbc
 8003956:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800395c <BSP_OSPI_NOR_Init>:
{
 800395c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003960:	460d      	mov	r5, r1
 8003962:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003964:	2800      	cmp	r0, #0
 8003966:	f040 8160 	bne.w	8003c2a <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800396a:	4eb1      	ldr	r6, [pc, #708]	; (8003c30 <BSP_OSPI_NOR_Init+0x2d4>)
 800396c:	7834      	ldrb	r4, [r6, #0]
 800396e:	2c00      	cmp	r4, #0
 8003970:	f040 8159 	bne.w	8003c26 <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8003974:	4baf      	ldr	r3, [pc, #700]	; (8003c34 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003976:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 800397a:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 800397e:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8003980:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003984:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003986:	48ac      	ldr	r0, [pc, #688]	; (8003c38 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8003988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003990:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003994:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003998:	9201      	str	r2, [sp, #4]
 800399a:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 800399c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800399e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a2:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 80039a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80039a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039aa:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 80039ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80039b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039bc:	f002 0220 	and.w	r2, r2, #32
 80039c0:	9202      	str	r2, [sp, #8]
 80039c2:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 80039c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039c8:	f042 0202 	orr.w	r2, r2, #2
 80039cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80039d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039d4:	f002 0202 	and.w	r2, r2, #2
 80039d8:	9203      	str	r2, [sp, #12]
 80039da:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 80039dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80039e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80039f0:	9204      	str	r2, [sp, #16]
 80039f2:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 80039f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a04:	f002 0208 	and.w	r2, r2, #8
 8003a08:	9205      	str	r2, [sp, #20]
 8003a0a:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8003a0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a10:	f042 0208 	orr.w	r2, r2, #8
 8003a14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a1c:	f002 0208 	and.w	r2, r2, #8
 8003a20:	9206      	str	r2, [sp, #24]
 8003a22:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8003a24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a28:	f042 0210 	orr.w	r2, r2, #16
 8003a2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a34:	f002 0210 	and.w	r2, r2, #16
 8003a38:	9207      	str	r2, [sp, #28]
 8003a3a:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8003a3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a40:	f042 0208 	orr.w	r2, r2, #8
 8003a44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a4c:	f002 0208 	and.w	r2, r2, #8
 8003a50:	9208      	str	r2, [sp, #32]
 8003a52:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8003a54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a58:	f042 0208 	orr.w	r2, r2, #8
 8003a5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a64:	f002 0208 	and.w	r2, r2, #8
 8003a68:	9209      	str	r2, [sp, #36]	; 0x24
 8003a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8003a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a70:	f042 0208 	orr.w	r2, r2, #8
 8003a74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a7c:	f002 0208 	and.w	r2, r2, #8
 8003a80:	920a      	str	r2, [sp, #40]	; 0x28
 8003a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8003a84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a94:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003a98:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8003a9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003aa0:	f042 0208 	orr.w	r2, r2, #8
 8003aa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa8:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8003aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8003ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003ab6:	2340      	movs	r3, #64	; 0x40
 8003ab8:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8003abe:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003ac6:	f000 fc15 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003aca:	a911      	add	r1, sp, #68	; 0x44
 8003acc:	485b      	ldr	r0, [pc, #364]	; (8003c3c <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003ace:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003ad0:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8003ad2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003ad6:	f000 fc0d 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003ade:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8003ae0:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003ae2:	a911      	add	r1, sp, #68	; 0x44
 8003ae4:	4856      	ldr	r0, [pc, #344]	; (8003c40 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8003ae6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8003ae8:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003aea:	f000 fc03 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8003aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8003af2:	a911      	add	r1, sp, #68	; 0x44
 8003af4:	4853      	ldr	r0, [pc, #332]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8003af6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8003af8:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8003afa:	f000 fbfb 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8003b02:	a911      	add	r1, sp, #68	; 0x44
 8003b04:	484f      	ldr	r0, [pc, #316]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8003b06:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8003b08:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8003b0a:	f000 fbf3 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8003b0e:	a911      	add	r1, sp, #68	; 0x44
 8003b10:	484d      	ldr	r0, [pc, #308]	; (8003c48 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8003b12:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8003b14:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8003b16:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8003b18:	f000 fbec 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8003b20:	a911      	add	r1, sp, #68	; 0x44
 8003b22:	4848      	ldr	r0, [pc, #288]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8003b24:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8003b26:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8003b28:	f000 fbe4 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8003b2c:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8003b2e:	a911      	add	r1, sp, #68	; 0x44
 8003b30:	4844      	ldr	r0, [pc, #272]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8003b32:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8003b34:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8003b38:	f000 fbdc 	bl	80042f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8003b3c:	a911      	add	r1, sp, #68	; 0x44
 8003b3e:	4841      	ldr	r0, [pc, #260]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8003b40:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8003b42:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8003b46:	f000 fbd5 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8003b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8003b4e:	a911      	add	r1, sp, #68	; 0x44
 8003b50:	4839      	ldr	r0, [pc, #228]	; (8003c38 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8003b52:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8003b54:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8003b56:	f000 fbcd 	bl	80042f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8003b5a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8003b5c:	a911      	add	r1, sp, #68	; 0x44
 8003b5e:	4839      	ldr	r0, [pc, #228]	; (8003c44 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8003b60:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8003b62:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8003b66:	f000 fbc5 	bl	80042f4 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8003b6a:	a811      	add	r0, sp, #68	; 0x44
 8003b6c:	f7ff f863 	bl	8002c36 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8003b72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003b76:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b7a:	b10b      	cbz	r3, 8003b80 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003b7c:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8003b80:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8003b82:	4832      	ldr	r0, [pc, #200]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8003b84:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8003b86:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8003b88:	786b      	ldrb	r3, [r5, #1]
 8003b8a:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8003b8c:	f7ff feca 	bl	8003924 <MX_OSPI_ClockConfig>
 8003b90:	b120      	cbz	r0, 8003b9c <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003b92:	f06f 0003 	mvn.w	r0, #3
}
 8003b96:	b01b      	add	sp, #108	; 0x6c
 8003b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8003b9c:	a90d      	add	r1, sp, #52	; 0x34
 8003b9e:	482b      	ldr	r0, [pc, #172]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003ba0:	f7ff fd90 	bl	80036c4 <MX_OSPI_NOR_Init>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d1f3      	bne.n	8003b92 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003baa:	4601      	mov	r1, r0
 8003bac:	4827      	ldr	r0, [pc, #156]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003bae:	f7ff fabd 	bl	800312c <MX25LM51245G_ResetEnable>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	b110      	cbz	r0, 8003bbc <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bb6:	f06f 0004 	mvn.w	r0, #4
 8003bba:	e7ec      	b.n	8003b96 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4823      	ldr	r0, [pc, #140]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003bc0:	f7ff fae3 	bl	800318a <MX25LM51245G_ResetMemory>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1f5      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	481f      	ldr	r0, [pc, #124]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003bce:	f7ff faad 	bl	800312c <MX25LM51245G_ResetEnable>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003bd8:	2101      	movs	r1, #1
 8003bda:	481c      	ldr	r0, [pc, #112]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003bdc:	f7ff fad5 	bl	800318a <MX25LM51245G_ResetMemory>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1e8      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003be4:	2201      	movs	r2, #1
 8003be6:	4819      	ldr	r0, [pc, #100]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003be8:	4611      	mov	r1, r2
 8003bea:	f7ff fa9f 	bl	800312c <MX25LM51245G_ResetEnable>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1e1      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4815      	ldr	r0, [pc, #84]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	f7ff fac7 	bl	800318a <MX25LM51245G_ResetMemory>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d1da      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8003c00:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8003c02:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8003c04:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8003c06:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8003c08:	f000 f99c 	bl	8003f44 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c0c:	78b2      	ldrb	r2, [r6, #2]
 8003c0e:	7871      	ldrb	r1, [r6, #1]
 8003c10:	480e      	ldr	r0, [pc, #56]	; (8003c4c <BSP_OSPI_NOR_Init+0x2f0>)
 8003c12:	f7ff f829 	bl	8002c68 <MX25LM51245G_AutoPollingMemReady>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d1cd      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8003c1a:	786a      	ldrb	r2, [r5, #1]
 8003c1c:	7829      	ldrb	r1, [r5, #0]
 8003c1e:	f7ff fe17 	bl	8003850 <BSP_OSPI_NOR_ConfigFlash>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1c7      	bne.n	8003bb6 <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 8003c26:	2000      	movs	r0, #0
 8003c28:	e7b5      	b.n	8003b96 <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 8003c2a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003c2e:	e7b2      	b.n	8003b96 <BSP_OSPI_NOR_Init+0x23a>
 8003c30:	24001fb0 	.word	0x24001fb0
 8003c34:	58024400 	.word	0x58024400
 8003c38:	58021800 	.word	0x58021800
 8003c3c:	58020400 	.word	0x58020400
 8003c40:	58021400 	.word	0x58021400
 8003c44:	58020c00 	.word	0x58020c00
 8003c48:	58021000 	.word	0x58021000
 8003c4c:	24001fb8 	.word	0x24001fb8

08003c50 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	460c      	mov	r4, r1
 8003c56:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d163      	bne.n	8003d24 <BSP_TS_Init+0xd4>
 8003c5c:	680b      	ldr	r3, [r1, #0]
 8003c5e:	1e5a      	subs	r2, r3, #1
 8003c60:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8003c64:	d25e      	bcs.n	8003d24 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003c66:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003c68:	1e51      	subs	r1, r2, #1
 8003c6a:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 8003c6e:	d259      	bcs.n	8003d24 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf28      	it	cs
 8003c74:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003c76:	68e2      	ldr	r2, [r4, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d853      	bhi.n	8003d24 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003c7c:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003c7e:	4d2b      	ldr	r5, [pc, #172]	; (8003d2c <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8003c80:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003c82:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003c84:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003c88:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8003c8a:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <BSP_TS_Init+0xe0>)
 8003c8c:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <BSP_TS_Init+0xe4>)
 8003c90:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <BSP_TS_Init+0xe8>)
 8003c94:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <BSP_TS_Init+0xec>)
 8003c98:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <BSP_TS_Init+0xf0>)
 8003c9c:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003c9e:	f7fe ff35 	bl	8002b0c <FT5336_RegisterBusIO>
 8003ca2:	b128      	cbz	r0, 8003cb0 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8003ca4:	f04f 35ff 	mov.w	r5, #4294967295
}
 8003ca8:	4628      	mov	r0, r5
 8003caa:	b008      	add	sp, #32
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003cb0:	a901      	add	r1, sp, #4
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f7fe fe90 	bl	80029d8 <FT5336_ReadID>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d1f3      	bne.n	8003ca4 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	2b51      	cmp	r3, #81	; 0x51
 8003cc0:	d1f0      	bne.n	8003ca4 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003cc4:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 8003cc6:	4f20      	ldr	r7, [pc, #128]	; (8003d48 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003cc8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003d50 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 8003ccc:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003cce:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4798      	blx	r3
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1e3      	bne.n	8003ca4 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8003cdc:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003cde:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8003ce0:	4e1a      	ldr	r6, [pc, #104]	; (8003d4c <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003ce2:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8003ce4:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4798      	blx	r3
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	db0f      	blt.n	8003d1e <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003cfe:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003d00:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003d02:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003d04:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003d06:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003d08:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003d0a:	68e3      	ldr	r3, [r4, #12]
 8003d0c:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003d0e:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003d10:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003d12:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003d14:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003d16:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003d18:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003d1c:	e7c4      	b.n	8003ca8 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d1e:	f06f 0504 	mvn.w	r5, #4
 8003d22:	e7c1      	b.n	8003ca8 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d24:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8003d28:	e7be      	b.n	8003ca8 <BSP_TS_Init+0x58>
 8003d2a:	bf00      	nop
 8003d2c:	24002014 	.word	0x24002014
 8003d30:	08003281 	.word	0x08003281
 8003d34:	080031e9 	.word	0x080031e9
 8003d38:	08003555 	.word	0x08003555
 8003d3c:	08003521 	.word	0x08003521
 8003d40:	08003589 	.word	0x08003589
 8003d44:	2400000c 	.word	0x2400000c
 8003d48:	2400203c 	.word	0x2400203c
 8003d4c:	24002040 	.word	0x24002040
 8003d50:	24002068 	.word	0x24002068

08003d54 <BSP_TS_GetState>:
{
 8003d54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003d58:	460d      	mov	r5, r1
  if(Instance >= TS_INSTANCES_NBR)
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d153      	bne.n	8003e06 <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <BSP_TS_GetState+0xb8>)
 8003d60:	a901      	add	r1, sp, #4
 8003d62:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <BSP_TS_GetState+0xbc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6810      	ldr	r0, [r2, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	4798      	blx	r3
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	db47      	blt.n	8003e00 <BSP_TS_GetState+0xac>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d70:	4928      	ldr	r1, [pc, #160]	; (8003e14 <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
 8003d72:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d74:	698f      	ldr	r7, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003d76:	6a0e      	ldr	r6, [r1, #32]
    else if(state.TouchDetected != 0U)
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d03d      	beq.n	8003df8 <BSP_TS_GetState+0xa4>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003d7c:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003d80:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003d84:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 8003d88:	e9dd c302 	ldrd	ip, r3, [sp, #8]
        x_oriented = state.TouchY;
 8003d8c:	bf19      	ittee	ne
 8003d8e:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8003d90:	4664      	movne	r4, ip
      y_oriented = state.TouchY;
 8003d92:	461c      	moveq	r4, r3
      x_oriented = state.TouchX;
 8003d94:	4662      	moveq	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003d96:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003d9a:	bf1c      	itt	ne
 8003d9c:	f108 32ff 	addne.w	r2, r8, #4294967295
 8003da0:	eba2 020c 	subne.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003da4:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8003da8:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003dac:	bf18      	it	ne
 8003dae:	ebac 0403 	subne.w	r4, ip, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003db2:	680b      	ldr	r3, [r1, #0]
 8003db4:	4353      	muls	r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003db6:	684a      	ldr	r2, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8003db8:	6028      	str	r0, [r5, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003dba:	4362      	muls	r2, r4
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003dbc:	68cc      	ldr	r4, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003dbe:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003dc2:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003dc6:	42bb      	cmp	r3, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003dc8:	606b      	str	r3, [r5, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003dca:	60aa      	str	r2, [r5, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003dcc:	bf8c      	ite	hi
 8003dce:	eba3 0c07 	subhi.w	ip, r3, r7
 8003dd2:	eba7 0c03 	subls.w	ip, r7, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003dd6:	42b2      	cmp	r2, r6
 8003dd8:	bf8c      	ite	hi
 8003dda:	1b90      	subhi	r0, r2, r6
 8003ddc:	1ab0      	subls	r0, r6, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003dde:	4564      	cmp	r4, ip
 8003de0:	d301      	bcc.n	8003de6 <BSP_TS_GetState+0x92>
 8003de2:	4284      	cmp	r4, r0
 8003de4:	d205      	bcs.n	8003df2 <BSP_TS_GetState+0x9e>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8003de6:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8003de8:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8003dea:	2000      	movs	r0, #0
}
 8003dec:	b004      	add	sp, #16
 8003dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003df2:	e9c5 7601 	strd	r7, r6, [r5, #4]
 8003df6:	e7f8      	b.n	8003dea <BSP_TS_GetState+0x96>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003df8:	e9c5 0700 	strd	r0, r7, [r5]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003dfc:	60ae      	str	r6, [r5, #8]
 8003dfe:	e7f5      	b.n	8003dec <BSP_TS_GetState+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e00:	f06f 0004 	mvn.w	r0, #4
 8003e04:	e7f2      	b.n	8003dec <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 8003e06:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003e0a:	e7ef      	b.n	8003dec <BSP_TS_GetState+0x98>
 8003e0c:	24002068 	.word	0x24002068
 8003e10:	2400203c 	.word	0x2400203c
 8003e14:	24002040 	.word	0x24002040

08003e18 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <SystemInit+0x8c>)
 8003e1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <SystemInit+0x90>)
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d805      	bhi.n	8003e3e <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	f023 030f 	bic.w	r3, r3, #15
 8003e38:	f043 0307 	orr.w	r3, r3, #7
 8003e3c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <SystemInit+0x94>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <SystemInit+0x98>)
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e52:	4915      	ldr	r1, [pc, #84]	; (8003ea8 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8003e54:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e56:	680a      	ldr	r2, [r1, #0]
 8003e58:	0712      	lsls	r2, r2, #28
 8003e5a:	d505      	bpl.n	8003e68 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e5c:	680a      	ldr	r2, [r1, #0]
 8003e5e:	f022 020f 	bic.w	r2, r2, #15
 8003e62:	f042 0207 	orr.w	r2, r2, #7
 8003e66:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e68:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e6a:	4912      	ldr	r1, [pc, #72]	; (8003eb4 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8003e6c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003e6e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003e70:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003e72:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e74:	4910      	ldr	r1, [pc, #64]	; (8003eb8 <SystemInit+0xa0>)
 8003e76:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e78:	4910      	ldr	r1, [pc, #64]	; (8003ebc <SystemInit+0xa4>)
 8003e7a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e7e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e82:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003e8c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <SystemInit+0xa8>)
 8003e96:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <SystemInit+0x8c>)
 8003e9e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000ed00 	.word	0xe000ed00
 8003ea8:	52002000 	.word	0x52002000
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003eb4:	02020200 	.word	0x02020200
 8003eb8:	01ff0000 	.word	0x01ff0000
 8003ebc:	01010280 	.word	0x01010280
 8003ec0:	52004000 	.word	0x52004000

08003ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ec6:	2003      	movs	r0, #3
 8003ec8:	f000 f84e 	bl	8003f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ecc:	f002 fa08 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 8003ed0:	490f      	ldr	r1, [pc, #60]	; (8003f10 <HAL_Init+0x4c>)
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <HAL_Init+0x50>)
 8003ed4:	698b      	ldr	r3, [r1, #24]
 8003ed6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003eda:	5cd3      	ldrb	r3, [r2, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ee2:	698b      	ldr	r3, [r1, #24]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_Init+0x54>)
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	fa20 f303 	lsr.w	r3, r0, r3
 8003ef4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_Init+0x58>)
 8003ef8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003efa:	2000      	movs	r0, #0
 8003efc:	f7fd f86c 	bl	8000fd8 <HAL_InitTick>
 8003f00:	4604      	mov	r4, r0
 8003f02:	b918      	cbnz	r0, 8003f0c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f04:	f7fc fd74 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f08:	4620      	mov	r0, r4
 8003f0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f0c:	2401      	movs	r4, #1
 8003f0e:	e7fb      	b.n	8003f08 <HAL_Init+0x44>
 8003f10:	58024400 	.word	0x58024400
 8003f14:	08018d04 	.word	0x08018d04
 8003f18:	24000040 	.word	0x24000040
 8003f1c:	2400003c 	.word	0x2400003c

08003f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <HAL_IncTick+0x10>)
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_IncTick+0x14>)
 8003f24:	6811      	ldr	r1, [r2, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	440b      	add	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2400206c 	.word	0x2400206c
 8003f34:	24000044 	.word	0x24000044

08003f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <HAL_GetTick+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2400206c 	.word	0x2400206c

08003f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fff6 	bl	8003f38 <HAL_GetTick>
 8003f4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f4e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003f50:	bf1e      	ittt	ne
 8003f52:	4b04      	ldrne	r3, [pc, #16]	; (8003f64 <HAL_Delay+0x20>)
 8003f54:	781b      	ldrbne	r3, [r3, #0]
 8003f56:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f58:	f7ff ffee 	bl	8003f38 <HAL_GetTick>
 8003f5c:	1b43      	subs	r3, r0, r5
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	d3fa      	bcc.n	8003f58 <HAL_Delay+0x14>
  {
  }
}
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	24000044 	.word	0x24000044

08003f68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f68:	4907      	ldr	r1, [pc, #28]	; (8003f88 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f76:	0412      	lsls	r2, r2, #16
 8003f78:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003f84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8e:	b530      	push	{r4, r5, lr}
 8003f90:	68dc      	ldr	r4, [r3, #12]
 8003f92:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f96:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f9c:	2d04      	cmp	r5, #4
 8003f9e:	bf28      	it	cs
 8003fa0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa8:	bf8c      	ite	hi
 8003faa:	3c03      	subhi	r4, #3
 8003fac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fae:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8003fb2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	fa01 f104 	lsl.w	r1, r1, r4
 8003fc4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fcc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003fce:	db06      	blt.n	8003fde <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003fd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003fd8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003fdc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	f000 000f 	and.w	r0, r0, #15
 8003fe2:	4a02      	ldr	r2, [pc, #8]	; (8003fec <HAL_NVIC_SetPriority+0x60>)
 8003fe4:	5413      	strb	r3, [r2, r0]
 8003fe6:	e7f9      	b.n	8003fdc <HAL_NVIC_SetPriority+0x50>
 8003fe8:	e000ed00 	.word	0xe000ed00
 8003fec:	e000ed14 	.word	0xe000ed14

08003ff0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	db08      	blt.n	8004006 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	0942      	lsrs	r2, r0, #5
 8003ff8:	f000 001f 	and.w	r0, r0, #31
 8003ffc:	fa03 f000 	lsl.w	r0, r3, r0
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <HAL_NVIC_EnableIRQ+0x18>)
 8004002:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004006:	4770      	bx	lr
 8004008:	e000e100 	.word	0xe000e100

0800400c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800400c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <HAL_MPU_Disable+0x18>)
 8004012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004014:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_MPU_Enable+0x1c>)
 800402a:	f040 0001 	orr.w	r0, r0, #1
 800402e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004034:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800403a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800403e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004048:	7843      	ldrb	r3, [r0, #1]
 800404a:	4a14      	ldr	r2, [pc, #80]	; (800409c <HAL_MPU_ConfigRegion+0x54>)
{
 800404c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800404e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004052:	7801      	ldrb	r1, [r0, #0]
 8004054:	b1e9      	cbz	r1, 8004092 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004056:	6843      	ldr	r3, [r0, #4]
 8004058:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800405c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800405e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004060:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004062:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004066:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004068:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800406a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800406e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004070:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004074:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004076:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800407a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800407c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004080:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004082:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004086:	7a01      	ldrb	r1, [r0, #8]
 8004088:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800408c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004090:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004092:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004096:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800409a:	e7f9      	b.n	8004090 <HAL_MPU_ConfigRegion+0x48>
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040a0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040a2:	4604      	mov	r4, r0
 80040a4:	b908      	cbnz	r0, 80040aa <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80040a8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040aa:	7f43      	ldrb	r3, [r0, #29]
 80040ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040b0:	b913      	cbnz	r3, 80040b8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80040b2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80040b4:	f7fc fcb4 	bl	8000a20 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80040b8:	2302      	movs	r3, #2
 80040ba:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80040bc:	7923      	ldrb	r3, [r4, #4]
 80040be:	b9e3      	cbnz	r3, 80040fa <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <HAL_CRC_Init+0x70>)
 80040c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f022 0218 	bic.w	r2, r2, #24
 80040cc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80040ce:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80040d0:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80040d2:	b9d2      	cbnz	r2, 800410a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80040d8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80040da:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	6961      	ldr	r1, [r4, #20]
 80040e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040e4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80040e6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80040e8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80040f4:	2301      	movs	r3, #1
 80040f6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80040f8:	e7d6      	b.n	80040a8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80040fa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 f808 	bl	8004114 <HAL_CRCEx_Polynomial_Set>
 8004104:	2800      	cmp	r0, #0
 8004106:	d0e2      	beq.n	80040ce <HAL_CRC_Init+0x2e>
 8004108:	e7cd      	b.n	80040a6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800410a:	6922      	ldr	r2, [r4, #16]
 800410c:	e7e4      	b.n	80040d8 <HAL_CRC_Init+0x38>
 800410e:	bf00      	nop
 8004110:	04c11db7 	.word	0x04c11db7

08004114 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004114:	07cb      	lsls	r3, r1, #31
{
 8004116:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004118:	d50c      	bpl.n	8004134 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800411a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800411c:	3b01      	subs	r3, #1
 800411e:	d31c      	bcc.n	800415a <HAL_CRCEx_Polynomial_Set+0x46>
 8004120:	fa21 f403 	lsr.w	r4, r1, r3
 8004124:	07e4      	lsls	r4, r4, #31
 8004126:	d5f9      	bpl.n	800411c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8004128:	2a10      	cmp	r2, #16
 800412a:	d012      	beq.n	8004152 <HAL_CRCEx_Polynomial_Set+0x3e>
 800412c:	d804      	bhi.n	8004138 <HAL_CRCEx_Polynomial_Set+0x24>
 800412e:	b13a      	cbz	r2, 8004140 <HAL_CRCEx_Polynomial_Set+0x2c>
 8004130:	2a08      	cmp	r2, #8
 8004132:	d010      	beq.n	8004156 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8004134:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004136:	e00b      	b.n	8004150 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8004138:	2a18      	cmp	r2, #24
 800413a:	d1fb      	bne.n	8004134 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800413c:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800413e:	d8f9      	bhi.n	8004134 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004140:	6800      	ldr	r0, [r0, #0]
 8004142:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004144:	6883      	ldr	r3, [r0, #8]
 8004146:	f023 0318 	bic.w	r3, r3, #24
 800414a:	431a      	orrs	r2, r3
 800414c:	6082      	str	r2, [r0, #8]
 800414e:	2000      	movs	r0, #0
}
 8004150:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8004152:	2b07      	cmp	r3, #7
 8004154:	e7f3      	b.n	800413e <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8004156:	2b0f      	cmp	r3, #15
 8004158:	e7f1      	b.n	800413e <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800415a:	2a00      	cmp	r2, #0
 800415c:	d1ea      	bne.n	8004134 <HAL_CRCEx_Polynomial_Set+0x20>
 800415e:	e7ef      	b.n	8004140 <HAL_CRCEx_Polynomial_Set+0x2c>

08004160 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004160:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004162:	4604      	mov	r4, r0
 8004164:	2800      	cmp	r0, #0
 8004166:	d036      	beq.n	80041d6 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004168:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800416c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004170:	b91b      	cbnz	r3, 800417a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004172:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004176:	f7fc fc6b 	bl	8000a50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800417a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800417c:	69e0      	ldr	r0, [r4, #28]
 800417e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004180:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004188:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800418a:	6819      	ldr	r1, [r3, #0]
 800418c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004190:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800419a:	68a2      	ldr	r2, [r4, #8]
 800419c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 80041a0:	4302      	orrs	r2, r0
 80041a2:	f021 0101 	bic.w	r1, r1, #1
 80041a6:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041a8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80041aa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ae:	0c12      	lsrs	r2, r2, #16
 80041b0:	0412      	lsls	r2, r2, #16
 80041b2:	430a      	orrs	r2, r1
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80041b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041b8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80041bc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80041c0:	0552      	lsls	r2, r2, #21
 80041c2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041c6:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80041c8:	430a      	orrs	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041cc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041ce:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041d0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80041d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
 80041d8:	e7fc      	b.n	80041d4 <HAL_DMA2D_Init+0x74>

080041da <HAL_DMA2D_LineEventCallback>:
 80041da:	4770      	bx	lr

080041dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80041dc:	4770      	bx	lr

080041de <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041de:	6803      	ldr	r3, [r0, #0]
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041e2:	685e      	ldr	r6, [r3, #4]
{
 80041e4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041e6:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041e8:	07f2      	lsls	r2, r6, #31
 80041ea:	d514      	bpl.n	8004216 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041ec:	05e9      	lsls	r1, r5, #23
 80041ee:	d512      	bpl.n	8004216 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041f8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004200:	2201      	movs	r2, #1
 8004202:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004204:	2304      	movs	r3, #4
 8004206:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800420a:	2300      	movs	r3, #0
 800420c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004210:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004212:	b103      	cbz	r3, 8004216 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004214:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004216:	06b2      	lsls	r2, r6, #26
 8004218:	d516      	bpl.n	8004248 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800421a:	04ab      	lsls	r3, r5, #18
 800421c:	d514      	bpl.n	8004248 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004226:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004228:	2220      	movs	r2, #32
 800422a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800422c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004234:	2304      	movs	r3, #4
 8004236:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800423a:	2300      	movs	r3, #0
 800423c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004242:	b10b      	cbz	r3, 8004248 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004244:	4620      	mov	r0, r4
 8004246:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004248:	0730      	lsls	r0, r6, #28
 800424a:	d516      	bpl.n	800427a <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800424c:	0529      	lsls	r1, r5, #20
 800424e:	d514      	bpl.n	800427a <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004258:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800425a:	2208      	movs	r2, #8
 800425c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800425e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004266:	2304      	movs	r3, #4
 8004268:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800426c:	2300      	movs	r3, #0
 800426e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004274:	b10b      	cbz	r3, 800427a <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004276:	4620      	mov	r0, r4
 8004278:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800427a:	0772      	lsls	r2, r6, #29
 800427c:	d50b      	bpl.n	8004296 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800427e:	056b      	lsls	r3, r5, #21
 8004280:	d509      	bpl.n	8004296 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004282:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004284:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800428e:	2204      	movs	r2, #4
 8004290:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004292:	f7ff ffa2 	bl	80041da <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004296:	07b0      	lsls	r0, r6, #30
 8004298:	d514      	bpl.n	80042c4 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800429a:	05a9      	lsls	r1, r5, #22
 800429c:	d512      	bpl.n	80042c4 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042a8:	2202      	movs	r2, #2
 80042aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ae:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042b6:	2300      	movs	r3, #0
 80042b8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80042bc:	6a23      	ldr	r3, [r4, #32]
 80042be:	b10b      	cbz	r3, 80042c4 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042c0:	4620      	mov	r0, r4
 80042c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80042c4:	06f2      	lsls	r2, r6, #27
 80042c6:	d513      	bpl.n	80042f0 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80042c8:	04eb      	lsls	r3, r5, #19
 80042ca:	d511      	bpl.n	80042f0 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042cc:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042ce:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80042d8:	2210      	movs	r2, #16
 80042da:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042de:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80042e6:	2300      	movs	r3, #0
 80042e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042ec:	f7ff ff76 	bl	80041dc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80042f8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fa:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80044bc <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042fe:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004302:	680a      	ldr	r2, [r1, #0]
 8004304:	fa32 f503 	lsrs.w	r5, r2, r3
 8004308:	d102      	bne.n	8004310 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800430a:	b003      	add	sp, #12
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004310:	f04f 0e01 	mov.w	lr, #1
 8004314:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8004318:	ea1e 0202 	ands.w	r2, lr, r2
 800431c:	f000 80b9 	beq.w	8004492 <HAL_GPIO_Init+0x19e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004320:	684e      	ldr	r6, [r1, #4]
 8004322:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004326:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800432a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800432e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004332:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004334:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004338:	2f01      	cmp	r7, #1
 800433a:	d834      	bhi.n	80043a6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800433c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800433e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004342:	68cf      	ldr	r7, [r1, #12]
 8004344:	fa07 f708 	lsl.w	r7, r7, r8
 8004348:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800434c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800434e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004350:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004354:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8004358:	409f      	lsls	r7, r3
 800435a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800435e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004360:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004362:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004364:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004368:	688f      	ldr	r7, [r1, #8]
 800436a:	fa07 f708 	lsl.w	r7, r7, r8
 800436e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8004372:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004374:	d119      	bne.n	80043aa <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8004376:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800437a:	f003 0b07 	and.w	fp, r3, #7
 800437e:	f04f 0e0f 	mov.w	lr, #15
 8004382:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004386:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800438a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800438e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004392:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004396:	690f      	ldr	r7, [r1, #16]
 8004398:	fa07 f70b 	lsl.w	r7, r7, fp
 800439c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80043a0:	f8ca 7020 	str.w	r7, [sl, #32]
 80043a4:	e001      	b.n	80043aa <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a6:	2d03      	cmp	r5, #3
 80043a8:	d1da      	bne.n	8004360 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80043aa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043ac:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b8:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80043bc:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043be:	d068      	beq.n	8004492 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80043c4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043c8:	f003 0c03 	and.w	ip, r3, #3
 80043cc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d0:	f045 0502 	orr.w	r5, r5, #2
 80043d4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043dc:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80043e0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80043e4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80043e8:	f005 0502 	and.w	r5, r5, #2
 80043ec:	9501      	str	r5, [sp, #4]
 80043ee:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043f0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80043f4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043f8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043fc:	4d2e      	ldr	r5, [pc, #184]	; (80044b8 <HAL_GPIO_Init+0x1c4>)
 80043fe:	42a8      	cmp	r0, r5
 8004400:	d049      	beq.n	8004496 <HAL_GPIO_Init+0x1a2>
 8004402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004406:	42a8      	cmp	r0, r5
 8004408:	d047      	beq.n	800449a <HAL_GPIO_Init+0x1a6>
 800440a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800440e:	42a8      	cmp	r0, r5
 8004410:	d045      	beq.n	800449e <HAL_GPIO_Init+0x1aa>
 8004412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004416:	42a8      	cmp	r0, r5
 8004418:	d043      	beq.n	80044a2 <HAL_GPIO_Init+0x1ae>
 800441a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800441e:	42a8      	cmp	r0, r5
 8004420:	d041      	beq.n	80044a6 <HAL_GPIO_Init+0x1b2>
 8004422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004426:	42a8      	cmp	r0, r5
 8004428:	d03f      	beq.n	80044aa <HAL_GPIO_Init+0x1b6>
 800442a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800442e:	42a8      	cmp	r0, r5
 8004430:	d03d      	beq.n	80044ae <HAL_GPIO_Init+0x1ba>
 8004432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004436:	42a8      	cmp	r0, r5
 8004438:	d03b      	beq.n	80044b2 <HAL_GPIO_Init+0x1be>
 800443a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800443e:	42a8      	cmp	r0, r5
 8004440:	bf0c      	ite	eq
 8004442:	2509      	moveq	r5, #9
 8004444:	250a      	movne	r5, #10
 8004446:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800444a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800444e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004452:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8004454:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8004458:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800445a:	bf0c      	ite	eq
 800445c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800445e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8004464:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004466:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8004468:	bf0c      	ite	eq
 800446a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800446c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8004472:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004474:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8004478:	bf0c      	ite	eq
 800447a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800447c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800447e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8004480:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004484:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8004488:	bf54      	ite	pl
 800448a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800448c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800448e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8004492:	3301      	adds	r3, #1
 8004494:	e735      	b.n	8004302 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004496:	2500      	movs	r5, #0
 8004498:	e7d5      	b.n	8004446 <HAL_GPIO_Init+0x152>
 800449a:	2501      	movs	r5, #1
 800449c:	e7d3      	b.n	8004446 <HAL_GPIO_Init+0x152>
 800449e:	2502      	movs	r5, #2
 80044a0:	e7d1      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044a2:	2503      	movs	r5, #3
 80044a4:	e7cf      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044a6:	2504      	movs	r5, #4
 80044a8:	e7cd      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044aa:	2505      	movs	r5, #5
 80044ac:	e7cb      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044ae:	2506      	movs	r5, #6
 80044b0:	e7c9      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044b2:	2507      	movs	r5, #7
 80044b4:	e7c7      	b.n	8004446 <HAL_GPIO_Init+0x152>
 80044b6:	bf00      	nop
 80044b8:	58020000 	.word	0x58020000
 80044bc:	58024400 	.word	0x58024400

080044c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80044c4:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044c6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80045e8 <HAL_GPIO_DeInit+0x128>
 80044ca:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80045ec <HAL_GPIO_DeInit+0x12c>
 80044ce:	f8df a120 	ldr.w	sl, [pc, #288]	; 80045f0 <HAL_GPIO_DeInit+0x130>
 80044d2:	f8df b120 	ldr.w	fp, [pc, #288]	; 80045f4 <HAL_GPIO_DeInit+0x134>
  while ((GPIO_Pin >> position) != 0x00U)
 80044d6:	fa31 f302 	lsrs.w	r3, r1, r2
 80044da:	d101      	bne.n	80044e0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80044e0:	2301      	movs	r3, #1
 80044e2:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 80044e6:	ea1c 0601 	ands.w	r6, ip, r1
 80044ea:	d069      	beq.n	80045c0 <HAL_GPIO_DeInit+0x100>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80044ec:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80044f0:	f002 0703 	and.w	r7, r2, #3
 80044f4:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_GPIO_DeInit+0x124>)
 80044f8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80044fc:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044fe:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004500:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004504:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004508:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800450c:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004510:	d058      	beq.n	80045c4 <HAL_GPIO_DeInit+0x104>
 8004512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004516:	4298      	cmp	r0, r3
 8004518:	d056      	beq.n	80045c8 <HAL_GPIO_DeInit+0x108>
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	4298      	cmp	r0, r3
 8004520:	d054      	beq.n	80045cc <HAL_GPIO_DeInit+0x10c>
 8004522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004526:	4298      	cmp	r0, r3
 8004528:	d052      	beq.n	80045d0 <HAL_GPIO_DeInit+0x110>
 800452a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800452e:	4298      	cmp	r0, r3
 8004530:	d050      	beq.n	80045d4 <HAL_GPIO_DeInit+0x114>
 8004532:	4540      	cmp	r0, r8
 8004534:	d050      	beq.n	80045d8 <HAL_GPIO_DeInit+0x118>
 8004536:	4548      	cmp	r0, r9
 8004538:	d050      	beq.n	80045dc <HAL_GPIO_DeInit+0x11c>
 800453a:	4550      	cmp	r0, sl
 800453c:	d050      	beq.n	80045e0 <HAL_GPIO_DeInit+0x120>
 800453e:	4558      	cmp	r0, fp
 8004540:	bf0c      	ite	eq
 8004542:	2309      	moveq	r3, #9
 8004544:	230a      	movne	r3, #10
 8004546:	40bb      	lsls	r3, r7
 8004548:	4573      	cmp	r3, lr
 800454a:	d119      	bne.n	8004580 <HAL_GPIO_DeInit+0xc0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8004554:	ea27 0706 	bic.w	r7, r7, r6
 8004558:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800455c:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8004560:	ea27 0706 	bic.w	r7, r7, r6
 8004564:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8004568:	685f      	ldr	r7, [r3, #4]
 800456a:	ea27 0706 	bic.w	r7, r7, r6
 800456e:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004570:	681f      	ldr	r7, [r3, #0]
 8004572:	ea27 0606 	bic.w	r6, r7, r6
 8004576:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004578:	68a3      	ldr	r3, [r4, #8]
 800457a:	ea23 0305 	bic.w	r3, r3, r5
 800457e:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004580:	2503      	movs	r5, #3
 8004582:	0053      	lsls	r3, r2, #1
 8004584:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004586:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800458a:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800458e:	260f      	movs	r6, #15
 8004590:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004592:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004594:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004596:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004598:	fa22 f405 	lsr.w	r4, r2, r5
 800459c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80045a0:	6a25      	ldr	r5, [r4, #32]
 80045a2:	ea25 0606 	bic.w	r6, r5, r6
 80045a6:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045a8:	68c4      	ldr	r4, [r0, #12]
 80045aa:	ea24 0403 	bic.w	r4, r4, r3
 80045ae:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045b0:	6844      	ldr	r4, [r0, #4]
 80045b2:	ea24 040c 	bic.w	r4, r4, ip
 80045b6:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045b8:	6884      	ldr	r4, [r0, #8]
 80045ba:	ea24 0303 	bic.w	r3, r4, r3
 80045be:	6083      	str	r3, [r0, #8]
    position++;
 80045c0:	3201      	adds	r2, #1
 80045c2:	e788      	b.n	80044d6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80045c4:	2300      	movs	r3, #0
 80045c6:	e7be      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e7bc      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e7ba      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045d0:	2303      	movs	r3, #3
 80045d2:	e7b8      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045d4:	2304      	movs	r3, #4
 80045d6:	e7b6      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045d8:	2305      	movs	r3, #5
 80045da:	e7b4      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045dc:	2306      	movs	r3, #6
 80045de:	e7b2      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045e0:	2307      	movs	r3, #7
 80045e2:	e7b0      	b.n	8004546 <HAL_GPIO_DeInit+0x86>
 80045e4:	58020000 	.word	0x58020000
 80045e8:	58021400 	.word	0x58021400
 80045ec:	58021800 	.word	0x58021800
 80045f0:	58021c00 	.word	0x58021c00
 80045f4:	58022400 	.word	0x58022400

080045f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045f8:	6903      	ldr	r3, [r0, #16]
 80045fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80045fc:	bf14      	ite	ne
 80045fe:	2001      	movne	r0, #1
 8004600:	2000      	moveq	r0, #0
 8004602:	4770      	bx	lr

08004604 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004604:	b10a      	cbz	r2, 800460a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004606:	6181      	str	r1, [r0, #24]
  }
}
 8004608:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800460a:	0409      	lsls	r1, r1, #16
 800460c:	e7fb      	b.n	8004606 <HAL_GPIO_WritePin+0x2>

0800460e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800460e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004610:	ea01 0203 	and.w	r2, r1, r3
 8004614:	ea21 0103 	bic.w	r1, r1, r3
 8004618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800461c:	6181      	str	r1, [r0, #24]
}
 800461e:	4770      	bx	lr

08004620 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004620:	6803      	ldr	r3, [r0, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	0791      	lsls	r1, r2, #30
 8004626:	d501      	bpl.n	800462c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004628:	2200      	movs	r2, #0
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	07d2      	lsls	r2, r2, #31
 8004630:	d403      	bmi.n	800463a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	619a      	str	r2, [r3, #24]
  }
}
 800463a:	4770      	bx	lr

0800463c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800463c:	b530      	push	{r4, r5, lr}
 800463e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004640:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004644:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004646:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004648:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004650:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004652:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800465a:	ea20 0002 	bic.w	r0, r0, r2
 800465e:	4303      	orrs	r3, r0
 8004660:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004662:	bd30      	pop	{r4, r5, pc}
 8004664:	03ff63ff 	.word	0x03ff63ff

08004668 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8004668:	6803      	ldr	r3, [r0, #0]
{
 800466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800466e:	699c      	ldr	r4, [r3, #24]
{
 8004670:	4605      	mov	r5, r0
 8004672:	460f      	mov	r7, r1
 8004674:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004676:	f014 0410 	ands.w	r4, r4, #16
 800467a:	d070      	beq.n	800475e <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800467c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004682:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	0692      	lsls	r2, r2, #26
 800468a:	d462      	bmi.n	8004752 <I2C_IsErrorOccurred+0xea>
 800468c:	f1b8 0f00 	cmp.w	r8, #0
 8004690:	d036      	beq.n	8004700 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 8004692:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8004696:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800469c:	05d6      	lsls	r6, r2, #23
 800469e:	d505      	bpl.n	80046ac <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80046a4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80046a8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046aa:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046ac:	0551      	lsls	r1, r2, #21
 80046ae:	d505      	bpl.n	80046bc <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80046b4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ba:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046bc:	0592      	lsls	r2, r2, #22
 80046be:	d550      	bpl.n	8004762 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80046c4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046c8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7ff ffa8 	bl	8004620 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80046d0:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80046d2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80046d4:	6853      	ldr	r3, [r2, #4]
 80046d6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80046da:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80046de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80046e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80046ea:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80046ee:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80046fa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80046fe:	e032      	b.n	8004766 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8004700:	1c7a      	adds	r2, r7, #1
 8004702:	d0c0      	beq.n	8004686 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7ff fc18 	bl	8003f38 <HAL_GetTick>
 8004708:	1b80      	subs	r0, r0, r6
 800470a:	42b8      	cmp	r0, r7
 800470c:	d801      	bhi.n	8004712 <I2C_IsErrorOccurred+0xaa>
 800470e:	2f00      	cmp	r7, #0
 8004710:	d1b8      	bne.n	8004684 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004716:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800471a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800471c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800471e:	0400      	lsls	r0, r0, #16
 8004720:	d50a      	bpl.n	8004738 <I2C_IsErrorOccurred+0xd0>
 8004722:	0448      	lsls	r0, r1, #17
 8004724:	d408      	bmi.n	8004738 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8004726:	2a20      	cmp	r2, #32
 8004728:	d006      	beq.n	8004738 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004730:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004732:	f7ff fc01 	bl	8003f38 <HAL_GetTick>
 8004736:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0699      	lsls	r1, r3, #26
 800473e:	d4a1      	bmi.n	8004684 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004740:	f7ff fbfa 	bl	8003f38 <HAL_GetTick>
 8004744:	1b80      	subs	r0, r0, r6
 8004746:	2819      	cmp	r0, #25
 8004748:	d9f6      	bls.n	8004738 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800474c:	f04f 0801 	mov.w	r8, #1
 8004750:	e798      	b.n	8004684 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004752:	f1b8 0f00 	cmp.w	r8, #0
 8004756:	d19c      	bne.n	8004692 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004758:	2220      	movs	r2, #32
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	e799      	b.n	8004692 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	4620      	mov	r0, r4
 8004760:	e79a      	b.n	8004698 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004762:	2800      	cmp	r0, #0
 8004764:	d1b1      	bne.n	80046ca <I2C_IsErrorOccurred+0x62>
}
 8004766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800476a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800476a:	b570      	push	{r4, r5, r6, lr}
 800476c:	4604      	mov	r4, r0
 800476e:	460d      	mov	r5, r1
 8004770:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	079b      	lsls	r3, r3, #30
 8004778:	d501      	bpl.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800477a:	2000      	movs	r0, #0
}
 800477c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	4632      	mov	r2, r6
 8004780:	4629      	mov	r1, r5
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff ff70 	bl	8004668 <I2C_IsErrorOccurred>
 8004788:	b9c0      	cbnz	r0, 80047bc <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800478a:	1c6a      	adds	r2, r5, #1
 800478c:	d0f1      	beq.n	8004772 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478e:	f7ff fbd3 	bl	8003f38 <HAL_GetTick>
 8004792:	1b80      	subs	r0, r0, r6
 8004794:	42a8      	cmp	r0, r5
 8004796:	d801      	bhi.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004798:	2d00      	cmp	r5, #0
 800479a:	d1ea      	bne.n	8004772 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f013 0302 	ands.w	r3, r3, #2
 80047a4:	d1e5      	bne.n	8004772 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80047a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	f042 0220 	orr.w	r2, r2, #32
 80047b0:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	2220      	movs	r2, #32
 80047b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80047bc:	2001      	movs	r0, #1
 80047be:	e7dd      	b.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080047c0 <I2C_WaitOnFlagUntilTimeout>:
{
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	9f06      	ldr	r7, [sp, #24]
 80047c6:	4604      	mov	r4, r0
 80047c8:	4688      	mov	r8, r1
 80047ca:	4616      	mov	r6, r2
 80047cc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	6993      	ldr	r3, [r2, #24]
 80047d2:	ea38 0303 	bics.w	r3, r8, r3
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	42b3      	cmp	r3, r6
 80047de:	d001      	beq.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80047e0:	2000      	movs	r0, #0
 80047e2:	e01e      	b.n	8004822 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	1c6b      	adds	r3, r5, #1
 80047e6:	d0f3      	beq.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7ff fba6 	bl	8003f38 <HAL_GetTick>
 80047ec:	1bc0      	subs	r0, r0, r7
 80047ee:	42a8      	cmp	r0, r5
 80047f0:	d801      	bhi.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0x36>
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	d1eb      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	ea38 0303 	bics.w	r3, r8, r3
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	42b3      	cmp	r3, r6
 8004806:	d1e2      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800480a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004812:	2320      	movs	r3, #32
 8004814:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004818:	2300      	movs	r3, #0
 800481a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800481e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004826 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004826:	b570      	push	{r4, r5, r6, lr}
 8004828:	4604      	mov	r4, r0
 800482a:	460d      	mov	r5, r1
 800482c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	069b      	lsls	r3, r3, #26
 8004834:	d501      	bpl.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004836:	2000      	movs	r0, #0
}
 8004838:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800483a:	4632      	mov	r2, r6
 800483c:	4629      	mov	r1, r5
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff ff12 	bl	8004668 <I2C_IsErrorOccurred>
 8004844:	b9b0      	cbnz	r0, 8004874 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7ff fb77 	bl	8003f38 <HAL_GetTick>
 800484a:	1b80      	subs	r0, r0, r6
 800484c:	42a8      	cmp	r0, r5
 800484e:	d801      	bhi.n	8004854 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004850:	2d00      	cmp	r5, #0
 8004852:	d1ec      	bne.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f013 0320 	ands.w	r3, r3, #32
 800485c:	d1e7      	bne.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004860:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	f042 0220 	orr.w	r2, r2, #32
 8004868:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800486a:	2220      	movs	r2, #32
 800486c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8004874:	2001      	movs	r0, #1
 8004876:	e7df      	b.n	8004838 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004878 <HAL_I2C_MspInit>:
}
 8004878:	4770      	bx	lr

0800487a <HAL_I2C_Init>:
{
 800487a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800487c:	4604      	mov	r4, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	d04a      	beq.n	8004918 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004882:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004886:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800488a:	b91b      	cbnz	r3, 8004894 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800488c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004890:	f7ff fff2 	bl	8004878 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004894:	2324      	movs	r3, #36	; 0x24
 8004896:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048aa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048b4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b8:	2901      	cmp	r1, #1
 80048ba:	d124      	bne.n	8004906 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048c2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80048ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ce:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048d8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80048dc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048de:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048e4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048e6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004904:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800490a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800490c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800490e:	d1d8      	bne.n	80048c2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	e7d4      	b.n	80048c2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004918:	2001      	movs	r0, #1
 800491a:	e7f3      	b.n	8004904 <HAL_I2C_Init+0x8a>

0800491c <HAL_I2C_MspDeInit>:
 800491c:	4770      	bx	lr

0800491e <HAL_I2C_DeInit>:
{
 800491e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004920:	4604      	mov	r4, r0
 8004922:	b198      	cbz	r0, 800494c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004924:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004926:	2324      	movs	r3, #36	; 0x24
 8004928:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004934:	f7ff fff2 	bl	800491c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	2000      	movs	r0, #0
 800493a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800493c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004940:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004944:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800494a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800494c:	2001      	movs	r0, #1
 800494e:	e7fc      	b.n	800494a <HAL_I2C_DeInit+0x2c>

08004950 <HAL_I2C_Mem_Write>:
{
 8004950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004956:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800495a:	4604      	mov	r4, r0
 800495c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800495e:	2b20      	cmp	r3, #32
{
 8004960:	4616      	mov	r6, r2
 8004962:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004966:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800496a:	f040 80c6 	bne.w	8004afa <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800496e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004970:	b113      	cbz	r3, 8004978 <HAL_I2C_Mem_Write+0x28>
 8004972:	f1ba 0f00 	cmp.w	sl, #0
 8004976:	d106      	bne.n	8004986 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800497e:	2001      	movs	r0, #1
}
 8004980:	b003      	add	sp, #12
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004986:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800498a:	2b01      	cmp	r3, #1
 800498c:	f000 80b5 	beq.w	8004afa <HAL_I2C_Mem_Write+0x1aa>
 8004990:	f04f 0b01 	mov.w	fp, #1
 8004994:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004998:	f7ff face 	bl	8003f38 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800499c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800499e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049a0:	9000      	str	r0, [sp, #0]
 80049a2:	465a      	mov	r2, fp
 80049a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7ff ff09 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d1e5      	bne.n	800497e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b2:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049b4:	fa5f f289 	uxtb.w	r2, r9
 80049b8:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80049ba:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c0:	2340      	movs	r3, #64	; 0x40
 80049c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80049c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ca:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80049cc:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ce:	4b4c      	ldr	r3, [pc, #304]	; (8004b00 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80049d0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049da:	f7ff fe2f 	bl	800463c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049de:	462a      	mov	r2, r5
 80049e0:	4641      	mov	r1, r8
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff fec1 	bl	800476a <I2C_WaitOnTXISFlagUntilTimeout>
 80049e8:	bb18      	cbnz	r0, 8004a32 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ea:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ee:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049f0:	d115      	bne.n	8004a1e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049f2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049fa:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049fc:	4643      	mov	r3, r8
 80049fe:	9500      	str	r5, [sp, #0]
 8004a00:	f7ff fede 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	b9a8      	cbnz	r0, 8004a32 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2bff      	cmp	r3, #255	; 0xff
 8004a0c:	d815      	bhi.n	8004a3a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004a0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a14:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004a16:	b292      	uxth	r2, r2
 8004a18:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	e012      	b.n	8004a44 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a1e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a20:	4641      	mov	r1, r8
 8004a22:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	462a      	mov	r2, r5
 8004a28:	f7ff fe9f 	bl	800476a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2c:	b908      	cbnz	r0, 8004a32 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	e7df      	b.n	80049f2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a38:	e7a1      	b.n	800497e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a40:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a42:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a44:	4639      	mov	r1, r7
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fdf8 	bl	800463c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4641      	mov	r1, r8
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fe8a 	bl	800476a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d191      	bne.n	800497e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004a62:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004a64:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a6a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004a6c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004a6e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004a70:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004a72:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a76:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	b1b3      	cbz	r3, 8004aaa <HAL_I2C_Mem_Write+0x15a>
 8004a7c:	b9aa      	cbnz	r2, 8004aaa <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a7e:	4643      	mov	r3, r8
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	4620      	mov	r0, r4
 8004a84:	9500      	str	r5, [sp, #0]
 8004a86:	f7ff fe9b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f47f af77 	bne.w	800497e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2bff      	cmp	r3, #255	; 0xff
 8004a96:	d928      	bls.n	8004aea <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a98:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a9e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aa0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fdc9 	bl	800463c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1cc      	bne.n	8004a4c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff feb5 	bl	8004826 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f47f af5e 	bne.w	800497e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004ace:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004ad2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004ae0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ae4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004ae8:	e74a      	b.n	8004980 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004aea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004af2:	b292      	uxth	r2, r2
 8004af4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	e7d3      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8004afa:	2002      	movs	r0, #2
 8004afc:	e740      	b.n	8004980 <HAL_I2C_Mem_Write+0x30>
 8004afe:	bf00      	nop
 8004b00:	80002000 	.word	0x80002000

08004b04 <HAL_I2C_Mem_Read>:
{
 8004b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	2b20      	cmp	r3, #32
{
 8004b14:	4616      	mov	r6, r2
 8004b16:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004b1a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1e:	f040 80c9 	bne.w	8004cb4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8004b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b24:	b113      	cbz	r3, 8004b2c <HAL_I2C_Mem_Read+0x28>
 8004b26:	f1ba 0f00 	cmp.w	sl, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b30:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004b32:	2001      	movs	r0, #1
}
 8004b34:	b003      	add	sp, #12
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004b3a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	f000 80b8 	beq.w	8004cb4 <HAL_I2C_Mem_Read+0x1b0>
 8004b44:	f04f 0b01 	mov.w	fp, #1
 8004b48:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004b4c:	f7ff f9f4 	bl	8003f38 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b50:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004b52:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b54:	9000      	str	r0, [sp, #0]
 8004b56:	465a      	mov	r2, fp
 8004b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff fe2f 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d1e5      	bne.n	8004b32 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b66:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b68:	fa5f f289 	uxtb.w	r2, r9
 8004b6c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004b6e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004b7e:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004b82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7ff fd56 	bl	800463c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b90:	462a      	mov	r2, r5
 8004b92:	4641      	mov	r1, r8
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7ff fde8 	bl	800476a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b9a:	bb20      	cbnz	r0, 8004be6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ba2:	d116      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba4:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2140      	movs	r1, #64	; 0x40
 8004baa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bac:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bae:	4643      	mov	r3, r8
 8004bb0:	9500      	str	r5, [sp, #0]
 8004bb2:	f7ff fe05 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	b9b0      	cbnz	r0, 8004be6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_I2C_Mem_Read+0x1b8>)
 8004bc0:	d815      	bhi.n	8004bee <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004bc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	e012      	b.n	8004bf8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	462a      	mov	r2, r5
 8004bdc:	f7ff fdc5 	bl	800476a <I2C_WaitOnTXISFlagUntilTimeout>
 8004be0:	b908      	cbnz	r0, 8004be6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	e7de      	b.n	8004ba4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004bec:	e7a1      	b.n	8004b32 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bee:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bf6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff fd1e 	bl	800463c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c00:	4643      	mov	r3, r8
 8004c02:	2200      	movs	r2, #0
 8004c04:	2104      	movs	r1, #4
 8004c06:	4620      	mov	r0, r4
 8004c08:	9500      	str	r5, [sp, #0]
 8004c0a:	f7ff fdd9 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d18f      	bne.n	8004b32 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c18:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004c1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004c1e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004c20:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004c22:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004c26:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004c28:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004c2a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	b1b3      	cbz	r3, 8004c64 <HAL_I2C_Mem_Read+0x160>
 8004c36:	b9aa      	cbnz	r2, 8004c64 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c38:	4643      	mov	r3, r8
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	9500      	str	r5, [sp, #0]
 8004c40:	f7ff fdbe 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f47f af74 	bne.w	8004b32 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2bff      	cmp	r3, #255	; 0xff
 8004c50:	d928      	bls.n	8004ca4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c52:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c58:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c5a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff fcec 	bl	800463c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1c9      	bne.n	8004c00 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	4641      	mov	r1, r8
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff fdd8 	bl	8004826 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f af5b 	bne.w	8004b32 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	2120      	movs	r1, #32
 8004c80:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004c88:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004c8c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004c9a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c9e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004ca2:	e747      	b.n	8004b34 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004ca4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004caa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004cac:	b292      	uxth	r2, r2
 8004cae:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	e7d3      	b.n	8004c5c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8004cb4:	2002      	movs	r0, #2
 8004cb6:	e73d      	b.n	8004b34 <HAL_I2C_Mem_Read+0x30>
 8004cb8:	80002000 	.word	0x80002000
 8004cbc:	80002400 	.word	0x80002400

08004cc0 <HAL_I2C_GetState>:
  return hi2c->State;
 8004cc0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8004cc6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8004cc8:	4770      	bx	lr

08004cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cca:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ccc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	b2dc      	uxtb	r4, r3
 8004cd4:	d11d      	bne.n	8004d12 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d019      	beq.n	8004d12 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cde:	2324      	movs	r3, #36	; 0x24
 8004ce0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce4:	6803      	ldr	r3, [r0, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d04:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004d0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004d0e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004d10:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004d12:	2002      	movs	r0, #2
 8004d14:	e7fc      	b.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d16:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	b2dc      	uxtb	r4, r3
 8004d20:	d11c      	bne.n	8004d5c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d018      	beq.n	8004d5c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2a:	2324      	movs	r3, #36	; 0x24
 8004d2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d30:	6803      	ldr	r3, [r0, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d3a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d3c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d40:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d44:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004d58:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004d5a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	e7fc      	b.n	8004d5a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004d60 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d60:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d62:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d64:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d68:	3284      	adds	r2, #132	; 0x84
 8004d6a:	1883      	adds	r3, r0, r2
{
 8004d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d70:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d72:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d76:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d78:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d7c:	684c      	ldr	r4, [r1, #4]
 8004d7e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d82:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d86:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d8a:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d8c:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d8e:	68c5      	ldr	r5, [r0, #12]
 8004d90:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8004d94:	443d      	add	r5, r7
 8004d96:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d9a:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d9c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d9e:	68c5      	ldr	r5, [r0, #12]
 8004da0:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8004da4:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004da6:	689d      	ldr	r5, [r3, #8]
 8004da8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004dac:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dae:	688d      	ldr	r5, [r1, #8]
 8004db0:	68c7      	ldr	r7, [r0, #12]
 8004db2:	3501      	adds	r5, #1
 8004db4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004db8:	443d      	add	r5, r7
 8004dba:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004dbe:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dc0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004dc2:	691d      	ldr	r5, [r3, #16]
 8004dc4:	f025 0507 	bic.w	r5, r5, #7
 8004dc8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004dca:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004dcc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004dce:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004dd2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004dd6:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004dda:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004dde:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004de2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004de6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004dea:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004dec:	695d      	ldr	r5, [r3, #20]
 8004dee:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004df2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004df4:	694d      	ldr	r5, [r1, #20]
 8004df6:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004df8:	69dd      	ldr	r5, [r3, #28]
 8004dfa:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8004dfe:	f025 0507 	bic.w	r5, r5, #7
 8004e02:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e04:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004e08:	433d      	orrs	r5, r7
 8004e0a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e0c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e0e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e10:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e14:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e16:	b31e      	cbz	r6, 8004e60 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e18:	2e01      	cmp	r6, #1
 8004e1a:	d023      	beq.n	8004e64 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e1c:	1eb5      	subs	r5, r6, #2
 8004e1e:	2d02      	cmp	r5, #2
 8004e20:	d922      	bls.n	8004e68 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004e22:	2e07      	cmp	r6, #7
 8004e24:	bf0c      	ite	eq
 8004e26:	2502      	moveq	r5, #2
 8004e28:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e2a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004e2c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e30:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004e34:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e36:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004e38:	3407      	adds	r4, #7
 8004e3a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e3c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004e3e:	436e      	muls	r6, r5
 8004e40:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004e44:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e46:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004e48:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004e4c:	f024 0407 	bic.w	r4, r4, #7
 8004e50:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e52:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e54:	5883      	ldr	r3, [r0, r2]
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	5083      	str	r3, [r0, r2]
}
 8004e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004e60:	2504      	movs	r5, #4
 8004e62:	e7e2      	b.n	8004e2a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8004e64:	2503      	movs	r5, #3
 8004e66:	e7e0      	b.n	8004e2a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004e68:	2502      	movs	r5, #2
 8004e6a:	e7de      	b.n	8004e2a <LTDC_SetConfig+0xca>

08004e6c <HAL_LTDC_Init>:
{
 8004e6c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004e6e:	4604      	mov	r4, r0
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d063      	beq.n	8004f3c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e74:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004e78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e7c:	b91b      	cbnz	r3, 8004e86 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004e7e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004e82:	f7fb fe09 	bl	8000a98 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e86:	2302      	movs	r3, #2
 8004e88:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e94:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004e9c:	4302      	orrs	r2, r0
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ea2:	6920      	ldr	r0, [r4, #16]
 8004ea4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004ea6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ea8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004eaa:	4925      	ldr	r1, [pc, #148]	; (8004f40 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004eac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004eba:	69a0      	ldr	r0, [r4, #24]
 8004ebc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ebe:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004ec0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ece:	6a20      	ldr	r0, [r4, #32]
 8004ed0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ed4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	400a      	ands	r2, r1
 8004eda:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ee4:	4302      	orrs	r2, r0
 8004ee6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	4011      	ands	r1, r2
 8004eec:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004eee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ef6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004efe:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f02:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f06:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f0a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f0e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004f12:	430a      	orrs	r2, r1
 8004f14:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004f18:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f1c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	f042 0206 	orr.w	r2, r2, #6
 8004f26:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f30:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f32:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f36:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	e7fc      	b.n	8004f3a <HAL_LTDC_Init+0xce>
 8004f40:	f000f800 	.word	0xf000f800

08004f44 <HAL_LTDC_ErrorCallback>:
 8004f44:	4770      	bx	lr

08004f46 <HAL_LTDC_ReloadEventCallback>:
 8004f46:	4770      	bx	lr

08004f48 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f48:	6803      	ldr	r3, [r0, #0]
{
 8004f4a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f4c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8004f4e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f50:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f52:	0772      	lsls	r2, r6, #29
 8004f54:	d514      	bpl.n	8004f80 <HAL_LTDC_IRQHandler+0x38>
 8004f56:	0769      	lsls	r1, r5, #29
 8004f58:	d512      	bpl.n	8004f80 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5c:	f022 0204 	bic.w	r2, r2, #4
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f62:	2204      	movs	r2, #4
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f66:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8004f72:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f74:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004f78:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004f7c:	f7ff ffe2 	bl	8004f44 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004f80:	07b2      	lsls	r2, r6, #30
 8004f82:	d516      	bpl.n	8004fb2 <HAL_LTDC_IRQHandler+0x6a>
 8004f84:	07ab      	lsls	r3, r5, #30
 8004f86:	d514      	bpl.n	8004fb2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004f88:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8004f8a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8e:	f022 0202 	bic.w	r2, r2, #2
 8004f92:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004f94:	2202      	movs	r2, #2
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004f98:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004fae:	f7ff ffc9 	bl	8004f44 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004fb2:	07f0      	lsls	r0, r6, #31
 8004fb4:	d510      	bpl.n	8004fd8 <HAL_LTDC_IRQHandler+0x90>
 8004fb6:	07e9      	lsls	r1, r5, #31
 8004fb8:	d50e      	bpl.n	8004fd8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004fba:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8004fbc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8004fca:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004fcc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004fd0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004fd4:	f7fc ff86 	bl	8001ee4 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004fd8:	0732      	lsls	r2, r6, #28
 8004fda:	d511      	bpl.n	8005000 <HAL_LTDC_IRQHandler+0xb8>
 8004fdc:	072b      	lsls	r3, r5, #28
 8004fde:	d50f      	bpl.n	8005000 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004fe0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004fe2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe6:	f022 0208 	bic.w	r2, r2, #8
 8004fea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004fec:	2208      	movs	r2, #8
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ffc:	f7ff ffa3 	bl	8004f46 <HAL_LTDC_ReloadEventCallback>
}
 8005000:	bd70      	pop	{r4, r5, r6, pc}

08005002 <HAL_LTDC_ConfigLayer>:
{
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005006:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800500a:	4606      	mov	r6, r0
 800500c:	460f      	mov	r7, r1
 800500e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005010:	2b01      	cmp	r3, #1
 8005012:	f04f 0002 	mov.w	r0, #2
 8005016:	d01f      	beq.n	8005058 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005018:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800501a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800501e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005020:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005024:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005028:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800502c:	3438      	adds	r4, #56	; 0x38
 800502e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800503a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800503c:	4630      	mov	r0, r6
 800503e:	4662      	mov	r2, ip
 8005040:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005042:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005044:	f7ff fe8c 	bl	8004d60 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005048:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800504a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800504c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005050:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005054:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800505c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800505c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005060:	2b01      	cmp	r3, #1
 8005062:	f04f 0302 	mov.w	r3, #2
 8005066:	d012      	beq.n	800508e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005068:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800506c:	6803      	ldr	r3, [r0, #0]
 800506e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005078:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005082:	2301      	movs	r3, #1
 8005084:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005088:	2300      	movs	r3, #0
 800508a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800508e:	4618      	mov	r0, r3
}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	50001000 	.word	0x50001000

08005098 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800509c:	f7fe ff4c 	bl	8003f38 <HAL_GetTick>
 80050a0:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80050a2:	b144      	cbz	r4, 80050b6 <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80050a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d006      	beq.n	80050ba <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80050b0:	2300      	movs	r3, #0
 80050b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80050b6:	2001      	movs	r0, #1
 80050b8:	e015      	b.n	80050e6 <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80050c2:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	68d3      	ldr	r3, [r2, #12]
 80050d0:	f013 0301 	ands.w	r3, r3, #1
 80050d4:	d108      	bne.n	80050e8 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80050d6:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 80050d8:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80050da:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 80050dc:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 80050de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80050e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80050e8:	f7fe ff26 	bl	8003f38 <HAL_GetTick>
 80050ec:	1b40      	subs	r0, r0, r5
 80050ee:	2805      	cmp	r0, #5
 80050f0:	d9ec      	bls.n	80050cc <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80050f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f8:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 80050fa:	2300      	movs	r3, #0
 80050fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8005100:	2303      	movs	r3, #3
 8005102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 8005106:	e7d6      	b.n	80050b6 <HAL_MDMA_Abort+0x1e>

08005108 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800510c:	6804      	ldr	r4, [r0, #0]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005114:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8005116:	6883      	ldr	r3, [r0, #8]
 8005118:	b92b      	cbnz	r3, 8005126 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	684a      	ldr	r2, [r1, #4]
 800511e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005122:	4313      	orrs	r3, r2
 8005124:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005126:	680b      	ldr	r3, [r1, #0]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d150      	bne.n	80051ce <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800512c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8005130:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8005134:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8005138:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800513c:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8005140:	433b      	orrs	r3, r7
 8005142:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8005144:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005146:	b16b      	cbz	r3, 8005164 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8005148:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800514a:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800514e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8005150:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005152:	f8d2 c000 	ldr.w	ip, [r2]
 8005156:	433b      	orrs	r3, r7
 8005158:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 800515a:	433b      	orrs	r3, r7
 800515c:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8005160:	433b      	orrs	r3, r7
 8005162:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8005168:	f023 031f 	bic.w	r3, r3, #31
 800516c:	433b      	orrs	r3, r7
 800516e:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005170:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 8005174:	f1be 0f00 	cmp.w	lr, #0
 8005178:	d004      	beq.n	8005184 <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800517a:	680b      	ldr	r3, [r1, #0]
 800517c:	b913      	cbnz	r3, 8005184 <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800517e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005180:	3b01      	subs	r3, #1
 8005182:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8005184:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005186:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800518a:	2b00      	cmp	r3, #0
 800518c:	d07b      	beq.n	8005286 <OSPI_ConfigCmd+0x17e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800518e:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	d04a      	beq.n	800522e <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005198:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800519c:	f1be 0f00 	cmp.w	lr, #0
 80051a0:	d029      	beq.n	80051f6 <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80051a2:	ea4e 0303 	orr.w	r3, lr, r3
 80051a6:	6810      	ldr	r0, [r2, #0]
 80051a8:	ea43 0309 	orr.w	r3, r3, r9
 80051ac:	ea43 0308 	orr.w	r3, r3, r8
 80051b0:	ea43 030c 	orr.w	r3, r3, ip
 80051b4:	433b      	orrs	r3, r7
 80051b6:	4333      	orrs	r3, r6
 80051b8:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80051ba:	4333      	orrs	r3, r6
 80051bc:	4e42      	ldr	r6, [pc, #264]	; (80052c8 <OSPI_ConfigCmd+0x1c0>)
 80051be:	4006      	ands	r6, r0
 80051c0:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80051c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80051c4:	688b      	ldr	r3, [r1, #8]
 80051c6:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80051c8:	698b      	ldr	r3, [r1, #24]
 80051ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80051cc:	e044      	b.n	8005258 <OSPI_ConfigCmd+0x150>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80051ce:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80051d0:	bf01      	itttt	eq
 80051d2:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80051d6:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80051da:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80051de:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80051e2:	bf1f      	itttt	ne
 80051e4:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80051e8:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 80051ec:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 80051f0:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 80051f4:	e7a2      	b.n	800513c <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80051f6:	ea43 0309 	orr.w	r3, r3, r9
 80051fa:	f8d2 e000 	ldr.w	lr, [r2]
 80051fe:	ea43 0308 	orr.w	r3, r3, r8
 8005202:	f42e 5e7c 	bic.w	lr, lr, #16128	; 0x3f00
 8005206:	ea43 030c 	orr.w	r3, r3, ip
 800520a:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 800520e:	433b      	orrs	r3, r7
 8005210:	4333      	orrs	r3, r6
 8005212:	ea43 030e 	orr.w	r3, r3, lr
 8005216:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005218:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521e:	d1d1      	bne.n	80051c4 <OSPI_ConfigCmd+0xbc>
 8005220:	694b      	ldr	r3, [r1, #20]
 8005222:	2b08      	cmp	r3, #8
 8005224:	d1ce      	bne.n	80051c4 <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800522c:	e7c9      	b.n	80051c2 <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800522e:	f1be 0f00 	cmp.w	lr, #0
 8005232:	d014      	beq.n	800525e <OSPI_ConfigCmd+0x156>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005234:	ea4e 0303 	orr.w	r3, lr, r3
 8005238:	6810      	ldr	r0, [r2, #0]
 800523a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800523c:	ea43 0308 	orr.w	r3, r3, r8
 8005240:	ea43 030c 	orr.w	r3, r3, ip
 8005244:	f020 6c70 	bic.w	ip, r0, #251658240	; 0xf000000
 8005248:	4323      	orrs	r3, r4
 800524a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 800524e:	ea43 030c 	orr.w	r3, r3, ip
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005252:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8005254:	688b      	ldr	r3, [r1, #8]
 8005256:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005258:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800525a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800525e:	6814      	ldr	r4, [r2, #0]
 8005260:	ea43 0308 	orr.w	r3, r3, r8
 8005264:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8005268:	ea43 030c 	orr.w	r3, r3, ip
 800526c:	4323      	orrs	r3, r4
 800526e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005276:	d1ed      	bne.n	8005254 <OSPI_ConfigCmd+0x14c>
 8005278:	694b      	ldr	r3, [r1, #20]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d1ea      	bne.n	8005254 <OSPI_ConfigCmd+0x14c>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005284:	e7e5      	b.n	8005252 <OSPI_ConfigCmd+0x14a>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005286:	f1b9 0f00 	cmp.w	r9, #0
 800528a:	d018      	beq.n	80052be <OSPI_ConfigCmd+0x1b6>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800528c:	6815      	ldr	r5, [r2, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800528e:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005292:	f1be 0f00 	cmp.w	lr, #0
 8005296:	d00c      	beq.n	80052b2 <OSPI_ConfigCmd+0x1aa>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8005298:	ea4e 0309 	orr.w	r3, lr, r9
 800529c:	4303      	orrs	r3, r0
 800529e:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80052a0:	4333      	orrs	r3, r6
 80052a2:	4303      	orrs	r3, r0
 80052a4:	f025 6070 	bic.w	r0, r5, #251658240	; 0xf000000
 80052a8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80052ac:	4303      	orrs	r3, r0
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	e78a      	b.n	80051c8 <OSPI_ConfigCmd+0xc0>
 80052b2:	ea40 0309 	orr.w	r3, r0, r9
 80052b6:	f425 507c 	bic.w	r0, r5, #16128	; 0x3f00
 80052ba:	4333      	orrs	r3, r6
 80052bc:	e7f6      	b.n	80052ac <OSPI_ConfigCmd+0x1a4>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80052be:	2308      	movs	r3, #8
 80052c0:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 80052c2:	2001      	movs	r0, #1
 80052c4:	e7c9      	b.n	800525a <OSPI_ConfigCmd+0x152>
 80052c6:	bf00      	nop
 80052c8:	f0ffc0c0 	.word	0xf0ffc0c0

080052cc <OSPI_WaitFlagStateUntilTimeout>:
{
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80052d4:	4604      	mov	r4, r0
 80052d6:	460e      	mov	r6, r1
 80052d8:	4615      	mov	r5, r2
 80052da:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	6a13      	ldr	r3, [r2, #32]
 80052e0:	4233      	tst	r3, r6
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	d101      	bne.n	80052f0 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80052ec:	2000      	movs	r0, #0
 80052ee:	e012      	b.n	8005316 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80052f4:	d0f3      	beq.n	80052de <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fe fe1f 	bl	8003f38 <HAL_GetTick>
 80052fa:	1bc0      	subs	r0, r0, r7
 80052fc:	4540      	cmp	r0, r8
 80052fe:	d802      	bhi.n	8005306 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	d1ea      	bne.n	80052dc <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005306:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800530a:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800530c:	6523      	str	r3, [r4, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800530e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800531c <HAL_OSPI_Init>:
{
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	4604      	mov	r4, r0
 8005320:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005322:	f7fe fe09 	bl	8003f38 <HAL_GetTick>
 8005326:	4603      	mov	r3, r0
  if (hospi == NULL)
 8005328:	2c00      	cmp	r4, #0
 800532a:	d067      	beq.n	80053fc <HAL_OSPI_Init+0xe0>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800532c:	2000      	movs	r0, #0
 800532e:	6560      	str	r0, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005330:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8005332:	2e00      	cmp	r6, #0
 8005334:	d160      	bne.n	80053f8 <HAL_OSPI_Init+0xdc>
      HAL_OSPI_MspInit(hospi);
 8005336:	4620      	mov	r0, r4
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	f7fb fcbd 	bl	8000cb8 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 800533e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005340:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 8005346:	6825      	ldr	r5, [r4, #0]
 8005348:	4301      	orrs	r1, r0
 800534a:	69e0      	ldr	r0, [r4, #28]
 800534c:	68af      	ldr	r7, [r5, #8]
 800534e:	4301      	orrs	r1, r0
 8005350:	482b      	ldr	r0, [pc, #172]	; (8005400 <HAL_OSPI_Init+0xe4>)
  hospi->Timeout = Timeout;
 8005352:	65a2      	str	r2, [r4, #88]	; 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 8005354:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005356:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 8005358:	4301      	orrs	r1, r0
 800535a:	6920      	ldr	r0, [r4, #16]
 800535c:	3801      	subs	r0, #1
 800535e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005362:	6960      	ldr	r0, [r4, #20]
 8005364:	3801      	subs	r0, #1
 8005366:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800536a:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 800536c:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800536e:	68e9      	ldr	r1, [r5, #12]
 8005370:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005374:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005376:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005378:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800537a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800537c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005380:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005382:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005384:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005386:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005388:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800538a:	6829      	ldr	r1, [r5, #0]
 800538c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8005390:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005394:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005396:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005398:	2120      	movs	r1, #32
 800539a:	9200      	str	r2, [sp, #0]
 800539c:	4632      	mov	r2, r6
 800539e:	f7ff ff95 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80053a2:	bb48      	cbnz	r0, 80053f8 <HAL_OSPI_Init+0xdc>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053a8:	68d9      	ldr	r1, [r3, #12]
 80053aa:	3a01      	subs	r2, #1
 80053ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80053b0:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80053b2:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80053b4:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80053c0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80053c4:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80053c8:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80053cc:	432a      	orrs	r2, r5
 80053ce:	430a      	orrs	r2, r1
 80053d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80053dc:	69a2      	ldr	r2, [r4, #24]
 80053de:	2a02      	cmp	r2, #2
 80053e0:	d103      	bne.n	80053ea <HAL_OSPI_Init+0xce>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	f042 0202 	orr.w	r2, r2, #2
 80053e8:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 80053f4:	2302      	movne	r3, #2
 80053f6:	6523      	str	r3, [r4, #80]	; 0x50
}
 80053f8:	b005      	add	sp, #20
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80053fc:	2001      	movs	r0, #1
 80053fe:	e7fb      	b.n	80053f8 <HAL_OSPI_Init+0xdc>
 8005400:	f8e0f8f4 	.word	0xf8e0f8f4

08005404 <HAL_OSPI_DeInit>:
{
 8005404:	b510      	push	{r4, lr}
  if (hospi == NULL)
 8005406:	4604      	mov	r4, r0
 8005408:	b168      	cbz	r0, 8005426 <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 800540a:	6803      	ldr	r3, [r0, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	f022 0202 	bic.w	r2, r2, #2
 800541a:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 800541c:	f7fb fd7a 	bl	8000f14 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8005420:	2000      	movs	r0, #0
 8005422:	6520      	str	r0, [r4, #80]	; 0x50
}
 8005424:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8005426:	2001      	movs	r0, #1
 8005428:	e7fc      	b.n	8005424 <HAL_OSPI_DeInit+0x20>

0800542a <HAL_OSPI_Command>:
{
 800542a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	4616      	mov	r6, r2
 8005430:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005432:	f7fe fd81 	bl	8003f38 <HAL_GetTick>
  state = hospi->State;
 8005436:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8005438:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800543a:	2a02      	cmp	r2, #2
 800543c:	d107      	bne.n	800544e <HAL_OSPI_Command+0x24>
 800543e:	68e2      	ldr	r2, [r4, #12]
 8005440:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8005444:	d109      	bne.n	800545a <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005446:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005448:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800544a:	6563      	str	r3, [r4, #84]	; 0x54
 800544c:	e01f      	b.n	800548e <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800544e:	2a14      	cmp	r2, #20
 8005450:	d11f      	bne.n	8005492 <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8005452:	682a      	ldr	r2, [r5, #0]
 8005454:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005456:	2a01      	cmp	r2, #1
 8005458:	d8f5      	bhi.n	8005446 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800545a:	2200      	movs	r2, #0
 800545c:	2120      	movs	r1, #32
 800545e:	4620      	mov	r0, r4
 8005460:	9600      	str	r6, [sp, #0]
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	f7ff ff32 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005468:	b988      	cbnz	r0, 800548e <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800546a:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800546c:	4629      	mov	r1, r5
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff fe4a 	bl	8005108 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8005474:	b958      	cbnz	r0, 800548e <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8005476:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	b992      	cbnz	r2, 80054a2 <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800547c:	2201      	movs	r2, #1
 800547e:	2102      	movs	r1, #2
 8005480:	4620      	mov	r0, r4
 8005482:	9600      	str	r6, [sp, #0]
 8005484:	f7ff ff22 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	2202      	movs	r2, #2
 800548c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800548e:	b004      	add	sp, #16
 8005490:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8005492:	2a24      	cmp	r2, #36	; 0x24
 8005494:	d1d7      	bne.n	8005446 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8005496:	682a      	ldr	r2, [r5, #0]
 8005498:	f022 0202 	bic.w	r2, r2, #2
 800549c:	2a01      	cmp	r2, #1
 800549e:	d1d2      	bne.n	8005446 <HAL_OSPI_Command+0x1c>
 80054a0:	e7db      	b.n	800545a <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	b90b      	cbnz	r3, 80054aa <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80054a6:	2304      	movs	r3, #4
 80054a8:	e005      	b.n	80054b6 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80054ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054b0:	2b24      	cmp	r3, #36	; 0x24
 80054b2:	d0f8      	beq.n	80054a6 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80054b4:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80054b6:	6523      	str	r3, [r4, #80]	; 0x50
 80054b8:	e7e9      	b.n	800548e <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d1e7      	bne.n	800548e <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80054be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054c0:	2b14      	cmp	r3, #20
 80054c2:	d0f0      	beq.n	80054a6 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80054c4:	2324      	movs	r3, #36	; 0x24
 80054c6:	e7f6      	b.n	80054b6 <HAL_OSPI_Command+0x8c>

080054c8 <HAL_OSPI_HyperbusCfg>:
{
 80054c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054ca:	4604      	mov	r4, r0
 80054cc:	4616      	mov	r6, r2
 80054ce:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7fe fd32 	bl	8003f38 <HAL_GetTick>
  state = hospi->State;
 80054d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 80054d6:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80054d8:	3a01      	subs	r2, #1
 80054da:	2a01      	cmp	r2, #1
 80054dc:	d816      	bhi.n	800550c <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80054de:	2200      	movs	r2, #0
 80054e0:	2120      	movs	r1, #32
 80054e2:	4620      	mov	r0, r4
 80054e4:	9600      	str	r6, [sp, #0]
 80054e6:	f7ff fef1 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80054ea:	b968      	cbnz	r0, 8005508 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80054ec:	6822      	ldr	r2, [r4, #0]
 80054ee:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6829      	ldr	r1, [r5, #0]
 80054f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80054fa:	6869      	ldr	r1, [r5, #4]
 80054fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005500:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8005504:	2302      	movs	r3, #2
 8005506:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005508:	b002      	add	sp, #8
 800550a:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800550c:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800550e:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005510:	6563      	str	r3, [r4, #84]	; 0x54
 8005512:	e7f9      	b.n	8005508 <HAL_OSPI_HyperbusCfg+0x40>

08005514 <HAL_OSPI_HyperbusCmd>:
{
 8005514:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005516:	4604      	mov	r4, r0
 8005518:	4616      	mov	r6, r2
 800551a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800551c:	f7fe fd0c 	bl	8003f38 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8005520:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8005522:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8005524:	2a02      	cmp	r2, #2
 8005526:	d127      	bne.n	8005578 <HAL_OSPI_HyperbusCmd+0x64>
 8005528:	68e2      	ldr	r2, [r4, #12]
 800552a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800552e:	d123      	bne.n	8005578 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005530:	2200      	movs	r2, #0
 8005532:	2120      	movs	r1, #32
 8005534:	4620      	mov	r0, r4
 8005536:	9600      	str	r6, [sp, #0]
 8005538:	f7ff fec8 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800553c:	b9d0      	cbnz	r0, 8005574 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800553e:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8005540:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005548:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005550:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8005552:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8005554:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8005556:	692a      	ldr	r2, [r5, #16]
 8005558:	430a      	orrs	r2, r1
 800555a:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 800555e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8005562:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8005566:	68ea      	ldr	r2, [r5, #12]
 8005568:	3a01      	subs	r2, #1
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 800556c:	686a      	ldr	r2, [r5, #4]
 800556e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005570:	2304      	movs	r3, #4
 8005572:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005574:	b002      	add	sp, #8
 8005576:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005578:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800557a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800557c:	6563      	str	r3, [r4, #84]	; 0x54
 800557e:	e7f9      	b.n	8005574 <HAL_OSPI_HyperbusCmd+0x60>

08005580 <HAL_OSPI_Transmit>:
{
 8005580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005582:	460f      	mov	r7, r1
 8005584:	b085      	sub	sp, #20
 8005586:	4604      	mov	r4, r0
 8005588:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800558a:	f7fe fcd5 	bl	8003f38 <HAL_GetTick>
 800558e:	4603      	mov	r3, r0
  if (pData == NULL)
 8005590:	b91f      	cbnz	r7, 800559a <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005592:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8005594:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005596:	6563      	str	r3, [r4, #84]	; 0x54
 8005598:	e02e      	b.n	80055f8 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800559a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800559c:	2a04      	cmp	r2, #4
 800559e:	d12d      	bne.n	80055fc <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80055a0:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80055a2:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 80055a4:	6427      	str	r7, [r4, #64]	; 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80055a6:	3201      	adds	r2, #1
 80055a8:	64a2      	str	r2, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80055aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055ac:	6462      	str	r2, [r4, #68]	; 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80055ae:	6832      	ldr	r2, [r6, #0]
 80055b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055b4:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80055b6:	2201      	movs	r2, #1
 80055b8:	2104      	movs	r1, #4
 80055ba:	4620      	mov	r0, r4
 80055bc:	9500      	str	r5, [sp, #0]
 80055be:	9303      	str	r3, [sp, #12]
 80055c0:	f7ff fe84 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80055c4:	b9c0      	cbnz	r0, 80055f8 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80055c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      } while (hospi->XferCount > 0U);
 80055c8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 80055d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055d2:	3201      	adds	r2, #1
 80055d4:	6422      	str	r2, [r4, #64]	; 0x40
        hospi->XferCount--;
 80055d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055d8:	3a01      	subs	r2, #1
 80055da:	64a2      	str	r2, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 80055dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055de:	2a00      	cmp	r2, #0
 80055e0:	d1e9      	bne.n	80055b6 <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80055e2:	2201      	movs	r2, #1
 80055e4:	2102      	movs	r1, #2
 80055e6:	4620      	mov	r0, r4
 80055e8:	9500      	str	r5, [sp, #0]
 80055ea:	f7ff fe6f 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80055ee:	b918      	cbnz	r0, 80055f8 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80055f0:	2302      	movs	r3, #2
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80055f6:	6523      	str	r3, [r4, #80]	; 0x50
}
 80055f8:	b005      	add	sp, #20
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80055fc:	2310      	movs	r3, #16
 80055fe:	e7c9      	b.n	8005594 <HAL_OSPI_Transmit+0x14>

08005600 <HAL_OSPI_Receive>:
{
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	4604      	mov	r4, r0
 8005604:	b085      	sub	sp, #20
 8005606:	460f      	mov	r7, r1
 8005608:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800560a:	f7fe fc95 	bl	8003f38 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800560e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005610:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8005612:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8005614:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8005618:	b91f      	cbnz	r7, 8005622 <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800561a:	2308      	movs	r3, #8
      status = HAL_ERROR;
 800561c:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800561e:	6563      	str	r3, [r4, #84]	; 0x54
 8005620:	e034      	b.n	800568c <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005622:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005624:	2a04      	cmp	r2, #4
 8005626:	d13b      	bne.n	80056a0 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005628:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 800562a:	6427      	str	r7, [r4, #64]	; 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800562c:	3201      	adds	r2, #1
 800562e:	64a2      	str	r2, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8005630:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005632:	6462      	str	r2, [r4, #68]	; 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005634:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005636:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005638:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800563c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005640:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005644:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005646:	d123      	bne.n	8005690 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005648:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800564a:	2201      	movs	r2, #1
 800564c:	2106      	movs	r1, #6
 800564e:	4620      	mov	r0, r4
 8005650:	9600      	str	r6, [sp, #0]
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	f7ff fe3a 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005658:	b9c0      	cbnz	r0, 800568c <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800565a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800565e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      } while(hospi->XferCount > 0U);
 8005660:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005662:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8005664:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005666:	3201      	adds	r2, #1
 8005668:	6422      	str	r2, [r4, #64]	; 0x40
        hospi->XferCount--;
 800566a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800566c:	3a01      	subs	r2, #1
 800566e:	64a2      	str	r2, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8005670:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005672:	2a00      	cmp	r2, #0
 8005674:	d1e9      	bne.n	800564a <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005676:	2201      	movs	r2, #1
 8005678:	2102      	movs	r1, #2
 800567a:	4620      	mov	r0, r4
 800567c:	9600      	str	r6, [sp, #0]
 800567e:	f7ff fe25 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005682:	b918      	cbnz	r0, 800568c <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005684:	2302      	movs	r3, #2
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800568a:	6523      	str	r3, [r4, #80]	; 0x50
}
 800568c:	b005      	add	sp, #20
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005690:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8005694:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8005698:	d1d6      	bne.n	8005648 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800569a:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 800569e:	e7d4      	b.n	800564a <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80056a0:	2310      	movs	r3, #16
 80056a2:	e7bb      	b.n	800561c <HAL_OSPI_Receive+0x1c>

080056a4 <HAL_OSPI_AutoPolling>:
{
 80056a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	4616      	mov	r6, r2
 80056ac:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80056ae:	f7fe fc43 	bl	8003f38 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 80056b2:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80056b4:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 80056b6:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80056b8:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80056bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80056be:	2a04      	cmp	r2, #4
 80056c0:	d13c      	bne.n	800573c <HAL_OSPI_AutoPolling+0x98>
 80056c2:	68ea      	ldr	r2, [r5, #12]
 80056c4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80056c8:	d138      	bne.n	800573c <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80056ca:	9003      	str	r0, [sp, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2120      	movs	r1, #32
 80056d0:	4620      	mov	r0, r4
 80056d2:	9600      	str	r6, [sp, #0]
 80056d4:	f7ff fdfa 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80056d8:	bb28      	cbnz	r0, 8005726 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80056da:	6829      	ldr	r1, [r5, #0]
 80056dc:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80056de:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80056e0:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80056e4:	6869      	ldr	r1, [r5, #4]
 80056e6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80056ea:	6929      	ldr	r1, [r5, #16]
 80056ec:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80056f0:	6810      	ldr	r0, [r2, #0]
 80056f2:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 80056f6:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 80056fa:	4329      	orrs	r1, r5
 80056fc:	4301      	orrs	r1, r0
 80056fe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005702:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005704:	68e1      	ldr	r1, [r4, #12]
 8005706:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800570a:	d10f      	bne.n	800572c <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800570c:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800570e:	2201      	movs	r2, #1
 8005710:	2108      	movs	r1, #8
 8005712:	4620      	mov	r0, r4
 8005714:	9600      	str	r6, [sp, #0]
 8005716:	f7ff fdd9 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800571a:	b920      	cbnz	r0, 8005726 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	2208      	movs	r2, #8
 8005720:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8005722:	2302      	movs	r3, #2
 8005724:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005726:	b004      	add	sp, #16
 8005728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800572c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8005730:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8005734:	d1ea      	bne.n	800570c <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005736:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 800573a:	e7e8      	b.n	800570e <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800573c:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800573e:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005740:	6563      	str	r3, [r4, #84]	; 0x54
 8005742:	e7f0      	b.n	8005726 <HAL_OSPI_AutoPolling+0x82>

08005744 <HAL_OSPI_MemoryMapped>:
{
 8005744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800574a:	f7fe fbf5 	bl	8003f38 <HAL_GetTick>
 800574e:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005750:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005752:	2a04      	cmp	r2, #4
 8005754:	d121      	bne.n	800579a <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005756:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005758:	2120      	movs	r1, #32
 800575a:	4620      	mov	r0, r4
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	f7ff fdb4 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005764:	b9b8      	cbnz	r0, 8005796 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8005766:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8005768:	2388      	movs	r3, #136	; 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800576a:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800576c:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800576e:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8005770:	d108      	bne.n	8005784 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8005772:	686b      	ldr	r3, [r5, #4]
 8005774:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8005778:	2310      	movs	r3, #16
 800577a:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800577c:	6811      	ldr	r1, [r2, #0]
 800577e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005782:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8005784:	6813      	ldr	r3, [r2, #0]
 8005786:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800578a:	f023 0308 	bic.w	r3, r3, #8
 800578e:	4333      	orrs	r3, r6
 8005790:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8005794:	6013      	str	r3, [r2, #0]
}
 8005796:	b002      	add	sp, #8
 8005798:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800579a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800579c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800579e:	6563      	str	r3, [r4, #84]	; 0x54
 80057a0:	e7f9      	b.n	8005796 <HAL_OSPI_MemoryMapped+0x52>

080057a2 <HAL_OSPI_Abort>:
{
 80057a2:	b530      	push	{r4, r5, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7fe fbc6 	bl	8003f38 <HAL_GetTick>
 80057ac:	4603      	mov	r3, r0
  state = hospi->State;
 80057ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80057b0:	f012 0f0c 	tst.w	r2, #12
 80057b4:	d035      	beq.n	8005822 <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80057b6:	6821      	ldr	r1, [r4, #0]
 80057b8:	680a      	ldr	r2, [r1, #0]
 80057ba:	f012 0204 	ands.w	r2, r2, #4
 80057be:	d02b      	beq.n	8005818 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80057c0:	680a      	ldr	r2, [r1, #0]
 80057c2:	9003      	str	r0, [sp, #12]
 80057c4:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 80057c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80057ca:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 80057cc:	f7ff fc64 	bl	8005098 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	b108      	cbz	r0, 80057d8 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80057d4:	2204      	movs	r2, #4
 80057d6:	6562      	str	r2, [r4, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	6a11      	ldr	r1, [r2, #32]
 80057dc:	0689      	lsls	r1, r1, #26
 80057de:	d51d      	bpl.n	800581c <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80057e0:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80057e2:	4620      	mov	r0, r4
 80057e4:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80057e6:	f041 0102 	orr.w	r1, r1, #2
 80057ea:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80057ec:	2102      	movs	r1, #2
 80057ee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f7ff fd6a 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	b958      	cbnz	r0, 8005814 <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005800:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005802:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005804:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005806:	9200      	str	r2, [sp, #0]
 8005808:	4602      	mov	r2, r0
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff fd5e 	bl	80052cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005810:	b900      	cbnz	r0, 8005814 <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8005812:	6525      	str	r5, [r4, #80]	; 0x50
}
 8005814:	b005      	add	sp, #20
 8005816:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005818:	4610      	mov	r0, r2
 800581a:	e7dd      	b.n	80057d8 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 800581c:	2302      	movs	r3, #2
 800581e:	6523      	str	r3, [r4, #80]	; 0x50
 8005820:	e7f8      	b.n	8005814 <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005822:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005824:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005826:	6563      	str	r3, [r4, #84]	; 0x54
 8005828:	e7f4      	b.n	8005814 <HAL_OSPI_Abort+0x72>
	...

0800582c <HAL_OSPIM_Config>:
    other_instance = 0U;
 800582c:	4ba5      	ldr	r3, [pc, #660]	; (8005ac4 <HAL_OSPIM_Config+0x298>)
  if (hospi->Instance == OCTOSPI1)
 800582e:	6802      	ldr	r2, [r0, #0]
{
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8005834:	429a      	cmp	r2, r3
{
 8005836:	b08f      	sub	sp, #60	; 0x3c
    instance = 1U;
 8005838:	f04f 0501 	mov.w	r5, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800583c:	f04f 0700 	mov.w	r7, #0
    other_instance = 0U;
 8005840:	bf0b      	itete	eq
 8005842:	f04f 0801 	moveq.w	r8, #1
 8005846:	f04f 0800 	movne.w	r8, #0
 800584a:	2400      	moveq	r4, #0
 800584c:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800584e:	ab02      	add	r3, sp, #8
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005850:	f8df e278 	ldr.w	lr, [pc, #632]	; 8005acc <HAL_OSPIM_Config+0x2a0>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8005854:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8005ad0 <HAL_OSPIM_Config+0x2a4>
    if (instance_nb == 2U)
 8005858:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 800585a:	611f      	str	r7, [r3, #16]
    cfg->DQSPort    = 0U;
 800585c:	e9c3 7700 	strd	r7, r7, [r3]
    cfg->IOLowPort  = 0U;
 8005860:	e9c3 7702 	strd	r7, r7, [r3, #8]
    if (instance_nb == 2U)
 8005864:	f040 812a 	bne.w	8005abc <HAL_OSPIM_Config+0x290>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005868:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 800586c:	f012 0f01 	tst.w	r2, #1
 8005870:	bf0c      	ite	eq
 8005872:	464e      	moveq	r6, r9
 8005874:	f44f 7600 	movne.w	r6, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005878:	f04f 0c00 	mov.w	ip, #0
    {
      reg = OCTOSPIM->PCR[index];
 800587c:	eb0e 028c 	add.w	r2, lr, ip, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8005880:	f10c 0001 	add.w	r0, ip, #1
      reg = OCTOSPIM->PCR[index];
 8005884:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005886:	f012 0f01 	tst.w	r2, #1
 800588a:	d005      	beq.n	8005898 <HAL_OSPIM_Config+0x6c>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800588c:	ea82 0c06 	eor.w	ip, r2, r6
 8005890:	f01c 0f02 	tst.w	ip, #2
          cfg->ClkPort = index+1U;
 8005894:	bf08      	it	eq
 8005896:	6018      	streq	r0, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005898:	f012 0f10 	tst.w	r2, #16
 800589c:	d005      	beq.n	80058aa <HAL_OSPIM_Config+0x7e>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800589e:	ea82 0c06 	eor.w	ip, r2, r6
 80058a2:	f01c 0f20 	tst.w	ip, #32
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80058a6:	bf08      	it	eq
 80058a8:	6058      	streq	r0, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80058aa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80058ae:	d005      	beq.n	80058bc <HAL_OSPIM_Config+0x90>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80058b0:	ea82 0c06 	eor.w	ip, r2, r6
 80058b4:	f41c 7f00 	tst.w	ip, #512	; 0x200
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80058b8:	bf08      	it	eq
 80058ba:	6098      	streq	r0, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80058bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80058c0:	d00d      	beq.n	80058de <HAL_OSPIM_Config+0xb2>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80058c2:	ea82 0c06 	eor.w	ip, r2, r6
 80058c6:	f41c 2f80 	tst.w	ip, #262144	; 0x40000
 80058ca:	d108      	bne.n	80058de <HAL_OSPIM_Config+0xb2>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80058cc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80058d0:	bf0c      	ite	eq
 80058d2:	f440 3c80 	orreq.w	ip, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80058d6:	f040 7c80 	orrne.w	ip, r0, #16777216	; 0x1000000
 80058da:	f8c3 c00c 	str.w	ip, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80058de:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80058e2:	d00b      	beq.n	80058fc <HAL_OSPIM_Config+0xd0>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80058e4:	ea82 0c06 	eor.w	ip, r2, r6
 80058e8:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
 80058ec:	d106      	bne.n	80058fc <HAL_OSPIM_Config+0xd0>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80058ee:	0192      	lsls	r2, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80058f0:	bf54      	ite	pl
 80058f2:	f440 3280 	orrpl.w	r2, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80058f6:	f040 7280 	orrmi.w	r2, r0, #16777216	; 0x1000000
 80058fa:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80058fc:	2802      	cmp	r0, #2
 80058fe:	f04f 0c01 	mov.w	ip, #1
 8005902:	d1bb      	bne.n	800587c <HAL_OSPIM_Config+0x50>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005904:	2d02      	cmp	r5, #2
 8005906:	f103 0318 	add.w	r3, r3, #24
 800590a:	f040 80d5 	bne.w	8005ab8 <HAL_OSPIM_Config+0x28c>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800590e:	4a6d      	ldr	r2, [pc, #436]	; (8005ac4 <HAL_OSPIM_Config+0x298>)
 8005910:	6815      	ldr	r5, [r2, #0]
 8005912:	ea15 050c 	ands.w	r5, r5, ip
 8005916:	d004      	beq.n	8005922 <HAL_OSPIM_Config+0xf6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005918:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800591a:	4665      	mov	r5, ip
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005922:	4b69      	ldr	r3, [pc, #420]	; (8005ac8 <HAL_OSPIM_Config+0x29c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	07d0      	lsls	r0, r2, #31
 8005928:	f140 80ca 	bpl.w	8005ac0 <HAL_OSPIM_Config+0x294>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8005934:	f045 0302 	orr.w	r3, r5, #2
 8005938:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800593a:	ab0e      	add	r3, sp, #56	; 0x38
 800593c:	2018      	movs	r0, #24
 800593e:	fb00 3004 	mla	r0, r0, r4, r3
 8005942:	4b62      	ldr	r3, [pc, #392]	; (8005acc <HAL_OSPIM_Config+0x2a0>)
 8005944:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8005948:	3a01      	subs	r2, #1
 800594a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800594e:	6857      	ldr	r7, [r2, #4]
 8005950:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8005954:	6057      	str	r7, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	07d2      	lsls	r2, r2, #31
 800595a:	f140 80bd 	bpl.w	8005ad8 <HAL_OSPIM_Config+0x2ac>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8005966:	f1b8 0f00 	cmp.w	r8, #0
 800596a:	d02c      	beq.n	80059c6 <HAL_OSPIM_Config+0x19a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800596c:	9a08      	ldr	r2, [sp, #32]
 800596e:	3a01      	subs	r2, #1
 8005970:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005974:	6850      	ldr	r0, [r2, #4]
 8005976:	f040 0002 	orr.w	r0, r0, #2
 800597a:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800597c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597e:	b132      	cbz	r2, 800598e <HAL_OSPIM_Config+0x162>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8005980:	3a01      	subs	r2, #1
 8005982:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	f042 0220 	orr.w	r2, r2, #32
 800598c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800598e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005990:	b15b      	cbz	r3, 80059aa <HAL_OSPIM_Config+0x17e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8005992:	3b01      	subs	r3, #1
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800599e:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80059a8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80059aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059ac:	b15b      	cbz	r3, 80059c6 <HAL_OSPIM_Config+0x19a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80059ae:	3b01      	subs	r3, #1
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80059ba:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80059c4:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80059c6:	ab0e      	add	r3, sp, #56	; 0x38
 80059c8:	f04f 0918 	mov.w	r9, #24
 80059cc:	f8d1 c000 	ldr.w	ip, [r1]
 80059d0:	fb09 3908 	mla	r9, r9, r8, r3
 80059d4:	f859 ac30 	ldr.w	sl, [r9, #-48]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80059d8:	f859 0c20 	ldr.w	r0, [r9, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80059dc:	45d4      	cmp	ip, sl
 80059de:	f859 bc2c 	ldr.w	fp, [r9, #-44]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80059e2:	e9d1 7e01 	ldrd	r7, lr, [r1, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80059e6:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80059ea:	f000 80b3 	beq.w	8005b54 <HAL_OSPIM_Config+0x328>
 80059ee:	45bb      	cmp	fp, r7
 80059f0:	d00a      	beq.n	8005a08 <HAL_OSPIM_Config+0x1dc>
 80059f2:	f859 6c28 	ldr.w	r6, [r9, #-40]
 80059f6:	4576      	cmp	r6, lr
 80059f8:	d006      	beq.n	8005a08 <HAL_OSPIM_Config+0x1dc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80059fa:	f859 9c24 	ldr.w	r9, [r9, #-36]
 80059fe:	4591      	cmp	r9, r2
 8005a00:	d002      	beq.n	8005a08 <HAL_OSPIM_Config+0x1dc>
 8005a02:	4298      	cmp	r0, r3
 8005a04:	f040 80b9 	bne.w	8005b7a <HAL_OSPIM_Config+0x34e>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005a08:	f10a 39ff 	add.w	r9, sl, #4294967295
 8005a0c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005acc <HAL_OSPIM_Config+0x2a0>
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005a10:	ae0e      	add	r6, sp, #56	; 0x38
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005a12:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8005a16:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8005a1a:	f02b 0b01 	bic.w	fp, fp, #1
 8005a1e:	f8c9 b004 	str.w	fp, [r9, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005a22:	f04f 0918 	mov.w	r9, #24
 8005a26:	fb09 6908 	mla	r9, r9, r8, r6
 8005a2a:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_OSPIM_Config+0x21c>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005a34:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a38:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8005a3c:	f8d9 a004 	ldr.w	sl, [r9, #4]
 8005a40:	f02a 0a10 	bic.w	sl, sl, #16
 8005a44:	f8c9 a004 	str.w	sl, [r9, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005a48:	f04f 0918 	mov.w	r9, #24
 8005a4c:	ae0e      	add	r6, sp, #56	; 0x38
 8005a4e:	fb09 6808 	mla	r8, r9, r8, r6
 8005a52:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005ad4 <HAL_OSPIM_Config+0x2a8>
 8005a56:	f858 6c28 	ldr.w	r6, [r8, #-40]
 8005a5a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005a5e:	44d1      	add	r9, sl
 8005a60:	f8d9 a004 	ldr.w	sl, [r9, #4]
 8005a64:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8005a68:	f8c9 a004 	str.w	sl, [r9, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005a6c:	f858 8c24 	ldr.w	r8, [r8, #-36]
 8005a70:	f1b8 0f00 	cmp.w	r8, #0
 8005a74:	d00f      	beq.n	8005a96 <HAL_OSPIM_Config+0x26a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005a76:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a7a:	f008 0801 	and.w	r8, r8, #1
 8005a7e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005a82:	f108 48a4 	add.w	r8, r8, #1375731712	; 0x52000000
 8005a86:	f508 4834 	add.w	r8, r8, #46080	; 0xb400
 8005a8a:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8005a8e:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8005a92:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d06f      	beq.n	8005b7a <HAL_OSPIM_Config+0x34e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005a9a:	3801      	subs	r0, #1
 8005a9c:	f000 0001 	and.w	r0, r0, #1
 8005aa0:	0080      	lsls	r0, r0, #2
 8005aa2:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8005aa6:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8005aaa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005aae:	f028 7880 	bic.w	r8, r8, #16777216	; 0x1000000
 8005ab2:	f8c0 8004 	str.w	r8, [r0, #4]
 8005ab6:	e060      	b.n	8005b7a <HAL_OSPIM_Config+0x34e>
 8005ab8:	4605      	mov	r5, r0
 8005aba:	e6cd      	b.n	8005858 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8005abc:	2600      	movs	r6, #0
 8005abe:	e6db      	b.n	8005878 <HAL_OSPIM_Config+0x4c>
 8005ac0:	9501      	str	r5, [sp, #4]
 8005ac2:	e73a      	b.n	800593a <HAL_OSPIM_Config+0x10e>
 8005ac4:	52005000 	.word	0x52005000
 8005ac8:	5200a000 	.word	0x5200a000
 8005acc:	5200b400 	.word	0x5200b400
 8005ad0:	04040222 	.word	0x04040222
 8005ad4:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 8005ad8:	f850 2c30 	ldr.w	r2, [r0, #-48]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	f43f af72 	beq.w	80059c6 <HAL_OSPIM_Config+0x19a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005ae8:	6857      	ldr	r7, [r2, #4]
 8005aea:	f027 0701 	bic.w	r7, r7, #1
 8005aee:	6057      	str	r7, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005af0:	f850 2c2c 	ldr.w	r2, [r0, #-44]
 8005af4:	b132      	cbz	r2, 8005b04 <HAL_OSPIM_Config+0x2d8>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005af6:	3a01      	subs	r2, #1
 8005af8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	f022 0210 	bic.w	r2, r2, #16
 8005b02:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005b04:	2318      	movs	r3, #24
 8005b06:	aa0e      	add	r2, sp, #56	; 0x38
 8005b08:	fb03 2304 	mla	r3, r3, r4, r2
 8005b0c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8005b10:	b15b      	cbz	r3, 8005b2a <HAL_OSPIM_Config+0x2fe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005b12:	3b01      	subs	r3, #1
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005b1e:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b28:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005b2a:	2318      	movs	r3, #24
 8005b2c:	aa0e      	add	r2, sp, #56	; 0x38
 8005b2e:	fb03 2304 	mla	r3, r3, r4, r2
 8005b32:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f43f af45 	beq.w	80059c6 <HAL_OSPIM_Config+0x19a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005b48:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005b52:	e737      	b.n	80059c4 <HAL_OSPIM_Config+0x198>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005b54:	45bb      	cmp	fp, r7
 8005b56:	f47f af57 	bne.w	8005a08 <HAL_OSPIM_Config+0x1dc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005b5a:	f859 9c24 	ldr.w	r9, [r9, #-36]
 8005b5e:	4591      	cmp	r9, r2
 8005b60:	f47f af52 	bne.w	8005a08 <HAL_OSPIM_Config+0x1dc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005b64:	4298      	cmp	r0, r3
 8005b66:	f47f af4f 	bne.w	8005a08 <HAL_OSPIM_Config+0x1dc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005b6a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8005d58 <HAL_OSPIM_Config+0x52c>
 8005b6e:	f8d8 0000 	ldr.w	r0, [r8]
 8005b72:	f040 0001 	orr.w	r0, r0, #1
 8005b76:	f8c8 0000 	str.w	r0, [r8]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005b7a:	4877      	ldr	r0, [pc, #476]	; (8005d58 <HAL_OSPIM_Config+0x52c>)
 8005b7c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005b80:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005b84:	f8de 8004 	ldr.w	r8, [lr, #4]
 8005b88:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 8005b8c:	ea48 2844 	orr.w	r8, r8, r4, lsl #9
 8005b90:	f448 7880 	orr.w	r8, r8, #256	; 0x100
 8005b94:	f8ce 8004 	str.w	r8, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005b98:	6949      	ldr	r1, [r1, #20]
 8005b9a:	f101 3eff 	add.w	lr, r1, #4294967295
 8005b9e:	6801      	ldr	r1, [r0, #0]
 8005ba0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8005ba4:	458e      	cmp	lr, r1
 8005ba6:	d905      	bls.n	8005bb4 <HAL_OSPIM_Config+0x388>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8005bae:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8005bb2:	6001      	str	r1, [r0, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005bb4:	6801      	ldr	r1, [r0, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005bb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bba:	f402 3e80 	and.w	lr, r2, #65536	; 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005bbe:	f011 0f01 	tst.w	r1, #1
 8005bc2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005bc6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005bca:	4484      	add	ip, r0
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005bcc:	d063      	beq.n	8005c96 <HAL_OSPIM_Config+0x46a>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005bce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005bd2:	f024 0403 	bic.w	r4, r4, #3
 8005bd6:	f044 0401 	orr.w	r4, r4, #1
 8005bda:	f8cc 4004 	str.w	r4, [ip, #4]
      if (cfg->DQSPort != 0U)
 8005bde:	b147      	cbz	r7, 8005bf2 <HAL_OSPIM_Config+0x3c6>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005be0:	3f01      	subs	r7, #1
 8005be2:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8005be6:	6844      	ldr	r4, [r0, #4]
 8005be8:	f024 0430 	bic.w	r4, r4, #48	; 0x30
 8005bec:	f044 0410 	orr.w	r4, r4, #16
 8005bf0:	6044      	str	r4, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005bf2:	f1be 0f00 	cmp.w	lr, #0
 8005bf6:	d02e      	beq.n	8005c56 <HAL_OSPIM_Config+0x42a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	f002 0201 	and.w	r2, r2, #1
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8005c04:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8005c08:	6850      	ldr	r0, [r2, #4]
 8005c0a:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8005c0e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005c12:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c14:	b379      	cbz	r1, 8005c76 <HAL_OSPIM_Config+0x44a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005c16:	3b01      	subs	r3, #1
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005c22:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005c2c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005c30:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8005c32:	b125      	cbz	r5, 8005c3e <HAL_OSPIM_Config+0x412>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005c34:	4a49      	ldr	r2, [pc, #292]	; (8005d5c <HAL_OSPIM_Config+0x530>)
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	079b      	lsls	r3, r3, #30
 8005c42:	d504      	bpl.n	8005c4e <HAL_OSPIM_Config+0x422>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005c44:	4a46      	ldr	r2, [pc, #280]	; (8005d60 <HAL_OSPIM_Config+0x534>)
 8005c46:	6813      	ldr	r3, [r2, #0]
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
}
 8005c4e:	2000      	movs	r0, #0
 8005c50:	b00f      	add	sp, #60	; 0x3c
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	d0dc      	beq.n	8005c14 <HAL_OSPIM_Config+0x3e8>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005c5a:	3a01      	subs	r2, #1
 8005c5c:	f002 0201 	and.w	r2, r2, #1
 8005c60:	0092      	lsls	r2, r2, #2
 8005c62:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8005c66:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8005c6a:	6850      	ldr	r0, [r2, #4]
 8005c6c:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8005c70:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8005c74:	e7cd      	b.n	8005c12 <HAL_OSPIM_Config+0x3e6>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0db      	beq.n	8005c32 <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005c86:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8005c90:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005c94:	e7cc      	b.n	8005c30 <HAL_OSPIM_Config+0x404>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005c96:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8005c9a:	f028 0803 	bic.w	r8, r8, #3
 8005c9e:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
 8005ca2:	f048 0801 	orr.w	r8, r8, #1
 8005ca6:	f8cc 8004 	str.w	r8, [ip, #4]
      if (cfg->DQSPort != 0U)
 8005caa:	b157      	cbz	r7, 8005cc2 <HAL_OSPIM_Config+0x496>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005cac:	3f01      	subs	r7, #1
 8005cae:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8005cb2:	6847      	ldr	r7, [r0, #4]
 8005cb4:	f027 0730 	bic.w	r7, r7, #48	; 0x30
 8005cb8:	ea47 1744 	orr.w	r7, r7, r4, lsl #5
 8005cbc:	f047 0710 	orr.w	r7, r7, #16
 8005cc0:	6047      	str	r7, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005cc2:	f1be 0f00 	cmp.w	lr, #0
 8005cc6:	d021      	beq.n	8005d0c <HAL_OSPIM_Config+0x4e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005cc8:	3a01      	subs	r2, #1
 8005cca:	f002 0201 	and.w	r2, r2, #1
 8005cce:	0092      	lsls	r2, r2, #2
 8005cd0:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8005cd4:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8005cd8:	6850      	ldr	r0, [r2, #4]
 8005cda:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8005cde:	ea40 4084 	orr.w	r0, r0, r4, lsl #18
 8005ce2:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005ce6:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ce8:	b311      	cbz	r1, 8005d30 <HAL_OSPIM_Config+0x504>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005cea:	3b01      	subs	r3, #1
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005cf6:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005d00:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 8005d04:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005d08:	605c      	str	r4, [r3, #4]
 8005d0a:	e792      	b.n	8005c32 <HAL_OSPIM_Config+0x406>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	d0eb      	beq.n	8005ce8 <HAL_OSPIM_Config+0x4bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005d10:	3a01      	subs	r2, #1
 8005d12:	f002 0201 	and.w	r2, r2, #1
 8005d16:	0092      	lsls	r2, r2, #2
 8005d18:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8005d1c:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8005d20:	6850      	ldr	r0, [r2, #4]
 8005d22:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8005d26:	ea40 6084 	orr.w	r0, r0, r4, lsl #26
 8005d2a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8005d2e:	e7da      	b.n	8005ce6 <HAL_OSPIM_Config+0x4ba>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f43f af7e 	beq.w	8005c32 <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005d42:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8005d4c:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 8005d50:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8005d54:	e7d8      	b.n	8005d08 <HAL_OSPIM_Config+0x4dc>
 8005d56:	bf00      	nop
 8005d58:	5200b400 	.word	0x5200b400
 8005d5c:	52005000 	.word	0x52005000
 8005d60:	5200a000 	.word	0x5200a000

08005d64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d64:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005d66:	4d1d      	ldr	r5, [pc, #116]	; (8005ddc <HAL_PWREx_ConfigSupply+0x78>)
{
 8005d68:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005d6a:	68eb      	ldr	r3, [r5, #12]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d006      	beq.n	8005d82 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d74:	68e8      	ldr	r0, [r5, #12]
 8005d76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d7a:	1b00      	subs	r0, r0, r4
 8005d7c:	bf18      	it	ne
 8005d7e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d82:	68eb      	ldr	r3, [r5, #12]
 8005d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d88:	4303      	orrs	r3, r0
 8005d8a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8005d8c:	f7fe f8d4 	bl	8003f38 <HAL_GetTick>
 8005d90:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d92:	686b      	ldr	r3, [r5, #4]
 8005d94:	049b      	lsls	r3, r3, #18
 8005d96:	d508      	bpl.n	8005daa <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005d98:	f1a4 031d 	sub.w	r3, r4, #29
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d90c      	bls.n	8005dba <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005da0:	3c2d      	subs	r4, #45	; 0x2d
 8005da2:	2c01      	cmp	r4, #1
 8005da4:	d909      	bls.n	8005dba <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8005da6:	2000      	movs	r0, #0
 8005da8:	e7ea      	b.n	8005d80 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005daa:	f7fe f8c5 	bl	8003f38 <HAL_GetTick>
 8005dae:	1b80      	subs	r0, r0, r6
 8005db0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005db4:	d9ed      	bls.n	8005d92 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8005db6:	2001      	movs	r0, #1
 8005db8:	e7e2      	b.n	8005d80 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8005dba:	f7fe f8bd 	bl	8003f38 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005dbe:	4d07      	ldr	r5, [pc, #28]	; (8005ddc <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8005dc0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005dc2:	68eb      	ldr	r3, [r5, #12]
 8005dc4:	f003 0311 	and.w	r3, r3, #17
 8005dc8:	2b11      	cmp	r3, #17
 8005dca:	d0ec      	beq.n	8005da6 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dcc:	f7fe f8b4 	bl	8003f38 <HAL_GetTick>
 8005dd0:	1b00      	subs	r0, r0, r4
 8005dd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005dd6:	d9f4      	bls.n	8005dc2 <HAL_PWREx_ConfigSupply+0x5e>
 8005dd8:	e7ed      	b.n	8005db6 <HAL_PWREx_ConfigSupply+0x52>
 8005dda:	bf00      	nop
 8005ddc:	58024800 	.word	0x58024800

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de2:	4604      	mov	r4, r0
 8005de4:	b908      	cbnz	r0, 8005dea <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8005de6:	2001      	movs	r0, #1
 8005de8:	e07f      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dea:	6803      	ldr	r3, [r0, #0]
 8005dec:	07df      	lsls	r7, r3, #31
 8005dee:	d453      	bmi.n	8005e98 <HAL_RCC_OscConfig+0xb8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	079e      	lsls	r6, r3, #30
 8005df4:	f100 80a3 	bmi.w	8005f3e <HAL_RCC_OscConfig+0x15e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	06da      	lsls	r2, r3, #27
 8005dfc:	d51c      	bpl.n	8005e38 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfe:	4b98      	ldr	r3, [pc, #608]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005e00:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e02:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e04:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e08:	2a08      	cmp	r2, #8
 8005e0a:	d007      	beq.n	8005e1c <HAL_RCC_OscConfig+0x3c>
 8005e0c:	2a18      	cmp	r2, #24
 8005e0e:	f040 80e5 	bne.w	8005fdc <HAL_RCC_OscConfig+0x1fc>
 8005e12:	f001 0203 	and.w	r2, r1, #3
 8005e16:	2a01      	cmp	r2, #1
 8005e18:	f040 80e0 	bne.w	8005fdc <HAL_RCC_OscConfig+0x1fc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	05db      	lsls	r3, r3, #23
 8005e20:	d502      	bpl.n	8005e28 <HAL_RCC_OscConfig+0x48>
 8005e22:	69e3      	ldr	r3, [r4, #28]
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d1de      	bne.n	8005de6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e28:	4a8d      	ldr	r2, [pc, #564]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005e2a:	6a21      	ldr	r1, [r4, #32]
 8005e2c:	68d3      	ldr	r3, [r2, #12]
 8005e2e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005e32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005e36:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	0719      	lsls	r1, r3, #28
 8005e3c:	f100 80fb 	bmi.w	8006036 <HAL_RCC_OscConfig+0x256>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	069a      	lsls	r2, r3, #26
 8005e44:	f100 8121 	bmi.w	800608a <HAL_RCC_OscConfig+0x2aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	075d      	lsls	r5, r3, #29
 8005e4c:	d51e      	bpl.n	8005e8c <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8005e4e:	4d85      	ldr	r5, [pc, #532]	; (8006064 <HAL_RCC_OscConfig+0x284>)
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005e58:	f7fe f86e 	bl	8003f38 <HAL_GetTick>
 8005e5c:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e5e:	682b      	ldr	r3, [r5, #0]
 8005e60:	05da      	lsls	r2, r3, #23
 8005e62:	f140 8137 	bpl.w	80060d4 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	4d7d      	ldr	r5, [pc, #500]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f040 8139 	bne.w	80060e2 <HAL_RCC_OscConfig+0x302>
 8005e70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005e7c:	f7fe f85c 	bl	8003f38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e80:	4e77      	ldr	r6, [pc, #476]	; (8006060 <HAL_RCC_OscConfig+0x280>)
      tickstart = HAL_GetTick();
 8005e82:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e84:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005e86:	079b      	lsls	r3, r3, #30
 8005e88:	f140 8151 	bpl.w	800612e <HAL_RCC_OscConfig+0x34e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f040 8154 	bne.w	800613c <HAL_RCC_OscConfig+0x35c>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2000      	movs	r0, #0
 8005e96:	e028      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e98:	4b71      	ldr	r3, [pc, #452]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005e9a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ea2:	2a10      	cmp	r2, #16
 8005ea4:	d005      	beq.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
 8005ea6:	2a18      	cmp	r2, #24
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
 8005eaa:	f001 0203 	and.w	r2, r1, #3
 8005eae:	2a02      	cmp	r2, #2
 8005eb0:	d106      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	039d      	lsls	r5, r3, #14
 8005eb6:	d59b      	bpl.n	8005df0 <HAL_RCC_OscConfig+0x10>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d198      	bne.n	8005df0 <HAL_RCC_OscConfig+0x10>
 8005ebe:	e792      	b.n	8005de6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ec6:	d111      	bne.n	8005eec <HAL_RCC_OscConfig+0x10c>
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ece:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ed0:	f7fe f832 	bl	8003f38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ed4:	4e62      	ldr	r6, [pc, #392]	; (8006060 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8005ed6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ed8:	6833      	ldr	r3, [r6, #0]
 8005eda:	0398      	lsls	r0, r3, #14
 8005edc:	d488      	bmi.n	8005df0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ede:	f7fe f82b 	bl	8003f38 <HAL_GetTick>
 8005ee2:	1b40      	subs	r0, r0, r5
 8005ee4:	2864      	cmp	r0, #100	; 0x64
 8005ee6:	d9f7      	bls.n	8005ed8 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8005ee8:	2003      	movs	r0, #3
}
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eec:	4d5c      	ldr	r5, [pc, #368]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b99a      	cbnz	r2, 8005f1a <HAL_RCC_OscConfig+0x13a>
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f00:	f7fe f81a 	bl	8003f38 <HAL_GetTick>
 8005f04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	0399      	lsls	r1, r3, #14
 8005f0a:	f57f af71 	bpl.w	8005df0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0e:	f7fe f813 	bl	8003f38 <HAL_GetTick>
 8005f12:	1b80      	subs	r0, r0, r6
 8005f14:	2864      	cmp	r0, #100	; 0x64
 8005f16:	d9f6      	bls.n	8005f06 <HAL_RCC_OscConfig+0x126>
 8005f18:	e7e6      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f1a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_OscConfig+0x150>
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	e7cf      	b.n	8005ed0 <HAL_RCC_OscConfig+0xf0>
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3c:	e7f6      	b.n	8005f2c <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3e:	4b48      	ldr	r3, [pc, #288]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005f40:	68e1      	ldr	r1, [r4, #12]
 8005f42:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f44:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f46:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_OscConfig+0x174>
 8005f4c:	2a18      	cmp	r2, #24
 8005f4e:	d121      	bne.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
 8005f50:	0782      	lsls	r2, r0, #30
 8005f52:	d11f      	bne.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	075b      	lsls	r3, r3, #29
 8005f58:	d502      	bpl.n	8005f60 <HAL_RCC_OscConfig+0x180>
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	f43f af43 	beq.w	8005de6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f60:	4d3f      	ldr	r5, [pc, #252]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 8005f62:	682a      	ldr	r2, [r5, #0]
 8005f64:	f022 0219 	bic.w	r2, r2, #25
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8005f6c:	f7fd ffe4 	bl	8003f38 <HAL_GetTick>
 8005f70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f72:	682b      	ldr	r3, [r5, #0]
 8005f74:	075f      	lsls	r7, r3, #29
 8005f76:	d507      	bpl.n	8005f88 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f78:	686b      	ldr	r3, [r5, #4]
 8005f7a:	6922      	ldr	r2, [r4, #16]
 8005f7c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f84:	606b      	str	r3, [r5, #4]
 8005f86:	e737      	b.n	8005df8 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f88:	f7fd ffd6 	bl	8003f38 <HAL_GetTick>
 8005f8c:	1b80      	subs	r0, r0, r6
 8005f8e:	2802      	cmp	r0, #2
 8005f90:	d9ef      	bls.n	8005f72 <HAL_RCC_OscConfig+0x192>
 8005f92:	e7a9      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f94:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f96:	b181      	cbz	r1, 8005fba <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f98:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f9c:	4d30      	ldr	r5, [pc, #192]	; (8006060 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005fa2:	f7fd ffc9 	bl	8003f38 <HAL_GetTick>
 8005fa6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	0758      	lsls	r0, r3, #29
 8005fac:	d4e4      	bmi.n	8005f78 <HAL_RCC_OscConfig+0x198>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fae:	f7fd ffc3 	bl	8003f38 <HAL_GetTick>
 8005fb2:	1b80      	subs	r0, r0, r6
 8005fb4:	2802      	cmp	r0, #2
 8005fb6:	d9f7      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x1c8>
 8005fb8:	e796      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 8005fba:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fbe:	4e28      	ldr	r6, [pc, #160]	; (8006060 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_DISABLE();
 8005fc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005fc2:	f7fd ffb9 	bl	8003f38 <HAL_GetTick>
 8005fc6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	0759      	lsls	r1, r3, #29
 8005fcc:	f57f af14 	bpl.w	8005df8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7fd ffb2 	bl	8003f38 <HAL_GetTick>
 8005fd4:	1b40      	subs	r0, r0, r5
 8005fd6:	2802      	cmp	r0, #2
 8005fd8:	d9f6      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x1e8>
 8005fda:	e785      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fdc:	69e2      	ldr	r2, [r4, #28]
 8005fde:	b1c2      	cbz	r2, 8006012 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8005fe0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe2:	4d1f      	ldr	r5, [pc, #124]	; (8006060 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_ENABLE();
 8005fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fe8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005fea:	f7fd ffa5 	bl	8003f38 <HAL_GetTick>
 8005fee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	05df      	lsls	r7, r3, #23
 8005ff4:	d507      	bpl.n	8006006 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ff6:	68eb      	ldr	r3, [r5, #12]
 8005ff8:	6a22      	ldr	r2, [r4, #32]
 8005ffa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005ffe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006002:	60eb      	str	r3, [r5, #12]
 8006004:	e718      	b.n	8005e38 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006006:	f7fd ff97 	bl	8003f38 <HAL_GetTick>
 800600a:	1b80      	subs	r0, r0, r6
 800600c:	2802      	cmp	r0, #2
 800600e:	d9ef      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x210>
 8006010:	e76a      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8006012:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006014:	4e12      	ldr	r6, [pc, #72]	; (8006060 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_DISABLE();
 8006016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800601a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800601c:	f7fd ff8c 	bl	8003f38 <HAL_GetTick>
 8006020:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006022:	6833      	ldr	r3, [r6, #0]
 8006024:	05d8      	lsls	r0, r3, #23
 8006026:	f57f af07 	bpl.w	8005e38 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800602a:	f7fd ff85 	bl	8003f38 <HAL_GetTick>
 800602e:	1b40      	subs	r0, r0, r5
 8006030:	2802      	cmp	r0, #2
 8006032:	d9f6      	bls.n	8006022 <HAL_RCC_OscConfig+0x242>
 8006034:	e758      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006036:	6963      	ldr	r3, [r4, #20]
 8006038:	4d09      	ldr	r5, [pc, #36]	; (8006060 <HAL_RCC_OscConfig+0x280>)
 800603a:	b1ab      	cbz	r3, 8006068 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800603c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006044:	f7fd ff78 	bl	8003f38 <HAL_GetTick>
 8006048:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800604a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	f53f aef7 	bmi.w	8005e40 <HAL_RCC_OscConfig+0x60>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006052:	f7fd ff71 	bl	8003f38 <HAL_GetTick>
 8006056:	1b80      	subs	r0, r0, r6
 8006058:	2802      	cmp	r0, #2
 800605a:	d9f6      	bls.n	800604a <HAL_RCC_OscConfig+0x26a>
 800605c:	e744      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
 8006064:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8006068:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006070:	f7fd ff62 	bl	8003f38 <HAL_GetTick>
 8006074:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006076:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006078:	079f      	lsls	r7, r3, #30
 800607a:	f57f aee1 	bpl.w	8005e40 <HAL_RCC_OscConfig+0x60>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800607e:	f7fd ff5b 	bl	8003f38 <HAL_GetTick>
 8006082:	1b80      	subs	r0, r0, r6
 8006084:	2802      	cmp	r0, #2
 8006086:	d9f6      	bls.n	8006076 <HAL_RCC_OscConfig+0x296>
 8006088:	e72e      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800608a:	69a3      	ldr	r3, [r4, #24]
 800608c:	4d93      	ldr	r5, [pc, #588]	; (80062dc <HAL_RCC_OscConfig+0x4fc>)
 800608e:	b183      	cbz	r3, 80060b2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI48_ENABLE();
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006096:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006098:	f7fd ff4e 	bl	8003f38 <HAL_GetTick>
 800609c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800609e:	682b      	ldr	r3, [r5, #0]
 80060a0:	0498      	lsls	r0, r3, #18
 80060a2:	f53f aed1 	bmi.w	8005e48 <HAL_RCC_OscConfig+0x68>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060a6:	f7fd ff47 	bl	8003f38 <HAL_GetTick>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	2802      	cmp	r0, #2
 80060ae:	d9f6      	bls.n	800609e <HAL_RCC_OscConfig+0x2be>
 80060b0:	e71a      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80060ba:	f7fd ff3d 	bl	8003f38 <HAL_GetTick>
 80060be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	0499      	lsls	r1, r3, #18
 80060c4:	f57f aec0 	bpl.w	8005e48 <HAL_RCC_OscConfig+0x68>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060c8:	f7fd ff36 	bl	8003f38 <HAL_GetTick>
 80060cc:	1b80      	subs	r0, r0, r6
 80060ce:	2802      	cmp	r0, #2
 80060d0:	d9f6      	bls.n	80060c0 <HAL_RCC_OscConfig+0x2e0>
 80060d2:	e709      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d4:	f7fd ff30 	bl	8003f38 <HAL_GetTick>
 80060d8:	1b80      	subs	r0, r0, r6
 80060da:	2864      	cmp	r0, #100	; 0x64
 80060dc:	f67f aebf 	bls.w	8005e5e <HAL_RCC_OscConfig+0x7e>
 80060e0:	e702      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e2:	b9b3      	cbnz	r3, 8006112 <HAL_RCC_OscConfig+0x332>
 80060e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	672b      	str	r3, [r5, #112]	; 0x70
 80060f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060f2:	f023 0304 	bic.w	r3, r3, #4
 80060f6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80060f8:	f7fd ff1e 	bl	8003f38 <HAL_GetTick>
 80060fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006100:	0798      	lsls	r0, r3, #30
 8006102:	f57f aec3 	bpl.w	8005e8c <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd ff17 	bl	8003f38 <HAL_GetTick>
 800610a:	1b80      	subs	r0, r0, r6
 800610c:	42b8      	cmp	r0, r7
 800610e:	d9f6      	bls.n	80060fe <HAL_RCC_OscConfig+0x31e>
 8006110:	e6ea      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006112:	2b05      	cmp	r3, #5
 8006114:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006116:	d103      	bne.n	8006120 <HAL_RCC_OscConfig+0x340>
 8006118:	f043 0304 	orr.w	r3, r3, #4
 800611c:	672b      	str	r3, [r5, #112]	; 0x70
 800611e:	e6a7      	b.n	8005e70 <HAL_RCC_OscConfig+0x90>
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	672b      	str	r3, [r5, #112]	; 0x70
 8006126:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006128:	f023 0304 	bic.w	r3, r3, #4
 800612c:	e6a3      	b.n	8005e76 <HAL_RCC_OscConfig+0x96>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fd ff03 	bl	8003f38 <HAL_GetTick>
 8006132:	1b40      	subs	r0, r0, r5
 8006134:	42b8      	cmp	r0, r7
 8006136:	f67f aea5 	bls.w	8005e84 <HAL_RCC_OscConfig+0xa4>
 800613a:	e6d5      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800613c:	4d67      	ldr	r5, [pc, #412]	; (80062dc <HAL_RCC_OscConfig+0x4fc>)
 800613e:	692b      	ldr	r3, [r5, #16]
 8006140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006144:	2b18      	cmp	r3, #24
 8006146:	d07a      	beq.n	800623e <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_DISABLE();
 8006148:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800614a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800614c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006150:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006152:	d167      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
        tickstart = HAL_GetTick();
 8006154:	f7fd fef0 	bl	8003f38 <HAL_GetTick>
 8006158:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	0199      	lsls	r1, r3, #6
 800615e:	d45b      	bmi.n	8006218 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006160:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006162:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006164:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8006168:	f023 0303 	bic.w	r3, r3, #3
 800616c:	4313      	orrs	r3, r2
 800616e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006170:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006174:	62ab      	str	r3, [r5, #40]	; 0x28
 8006176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006178:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800617a:	3b01      	subs	r3, #1
 800617c:	3a01      	subs	r2, #1
 800617e:	025b      	lsls	r3, r3, #9
 8006180:	0412      	lsls	r2, r2, #16
 8006182:	b29b      	uxth	r3, r3
 8006184:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006188:	4313      	orrs	r3, r2
 800618a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800618c:	3a01      	subs	r2, #1
 800618e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006192:	4313      	orrs	r3, r2
 8006194:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006196:	3a01      	subs	r2, #1
 8006198:	0612      	lsls	r2, r2, #24
 800619a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800619e:	4313      	orrs	r3, r2
 80061a0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80061a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80061ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80061ba:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061c0:	f023 030c 	bic.w	r3, r3, #12
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	4313      	orrs	r3, r2
 80061d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80061ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061fc:	f7fd fe9c 	bl	8003f38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006200:	4d36      	ldr	r5, [pc, #216]	; (80062dc <HAL_RCC_OscConfig+0x4fc>)
        tickstart = HAL_GetTick();
 8006202:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	019a      	lsls	r2, r3, #6
 8006208:	f53f ae44 	bmi.w	8005e94 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620c:	f7fd fe94 	bl	8003f38 <HAL_GetTick>
 8006210:	1b00      	subs	r0, r0, r4
 8006212:	2802      	cmp	r0, #2
 8006214:	d9f6      	bls.n	8006204 <HAL_RCC_OscConfig+0x424>
 8006216:	e667      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fd fe8e 	bl	8003f38 <HAL_GetTick>
 800621c:	1b80      	subs	r0, r0, r6
 800621e:	2802      	cmp	r0, #2
 8006220:	d99b      	bls.n	800615a <HAL_RCC_OscConfig+0x37a>
 8006222:	e661      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8006224:	f7fd fe88 	bl	8003f38 <HAL_GetTick>
 8006228:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	019b      	lsls	r3, r3, #6
 800622e:	f57f ae31 	bpl.w	8005e94 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006232:	f7fd fe81 	bl	8003f38 <HAL_GetTick>
 8006236:	1b00      	subs	r0, r0, r4
 8006238:	2802      	cmp	r0, #2
 800623a:	d9f6      	bls.n	800622a <HAL_RCC_OscConfig+0x44a>
 800623c:	e654      	b.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800623e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006240:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006242:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006244:	f43f ae51 	beq.w	8005eea <HAL_RCC_OscConfig+0x10a>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006248:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800624e:	4281      	cmp	r1, r0
 8006250:	f47f adc9 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006254:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006258:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800625a:	428a      	cmp	r2, r1
 800625c:	f47f adc3 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006260:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006262:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8006266:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006268:	4291      	cmp	r1, r2
 800626a:	f47f adbc 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800626e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006270:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8006274:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006276:	4291      	cmp	r1, r2
 8006278:	f47f adb5 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800627c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800627e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8006282:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006284:	4291      	cmp	r1, r2
 8006286:	f47f adae 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800628a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800628c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006290:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006292:	4293      	cmp	r3, r2
 8006294:	f47f ada7 	bne.w	8005de6 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006298:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800629a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800629c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	f43f adf7 	beq.w	8005e94 <HAL_RCC_OscConfig+0xb4>
          __HAL_RCC_PLLFRACN_DISABLE();
 80062a6:	4d0d      	ldr	r5, [pc, #52]	; (80062dc <HAL_RCC_OscConfig+0x4fc>)
 80062a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80062b0:	f7fd fe42 	bl	8003f38 <HAL_GetTick>
 80062b4:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062b6:	f7fd fe3f 	bl	8003f38 <HAL_GetTick>
 80062ba:	42b0      	cmp	r0, r6
 80062bc:	d0fb      	beq.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80062c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80062ce:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80062d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	62eb      	str	r3, [r5, #44]	; 0x2c
 80062d8:	e5dc      	b.n	8005e94 <HAL_RCC_OscConfig+0xb4>
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400

080062e0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e0:	4b48      	ldr	r3, [pc, #288]	; (8006404 <HAL_RCC_GetSysClockFreq+0x124>)
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80062e8:	2a10      	cmp	r2, #16
{
 80062ea:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ec:	f000 8086 	beq.w	80063fc <HAL_RCC_GetSysClockFreq+0x11c>
 80062f0:	2a18      	cmp	r2, #24
 80062f2:	d00c      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x2e>
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	f040 8083 	bne.w	8006400 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4842      	ldr	r0, [pc, #264]	; (8006408 <HAL_RCC_GetSysClockFreq+0x128>)
 80062fe:	f012 0f20 	tst.w	r2, #32
 8006302:	d003      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800630a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800630c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800630e:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006310:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006312:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8006314:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006318:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800631c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800631e:	d0f5      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006320:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006324:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006328:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800632c:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006330:	4362      	muls	r2, r4
 8006332:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006336:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800633a:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800633c:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006340:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8006344:	d04c      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x100>
 8006346:	2902      	cmp	r1, #2
 8006348:	d03c      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0xe4>
 800634a:	2900      	cmp	r1, #0
 800634c:	d148      	bne.n	80063e0 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	0692      	lsls	r2, r2, #26
 8006352:	d527      	bpl.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <HAL_RCC_GetSysClockFreq+0x128>)
 8006358:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800635e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006364:	ee07 2a10 	vmov	s14, r2
 8006368:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800636c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006370:	ee06 3a90 	vmov	s13, r3
 8006374:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637c:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006380:	4b20      	ldr	r3, [pc, #128]	; (8006404 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006382:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800638c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800638e:	ee07 3a10 	vmov	s14, r3
 8006392:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006396:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800639a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800639e:	ee17 0a90 	vmov	r0, s15
 80063a2:	e7b3      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a10 	vmov	s14, r3
 80063ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063ba:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800640c <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063be:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80063c2:	e7dd      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a10 	vmov	s14, r3
 80063ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063da:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8006410 <HAL_RCC_GetSysClockFreq+0x130>
 80063de:	e7ee      	b.n	80063be <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e6:	ee07 3a10 	vmov	s14, r3
 80063ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063f6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8006414 <HAL_RCC_GetSysClockFreq+0x134>
 80063fa:	e7e0      	b.n	80063be <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063fc:	4806      	ldr	r0, [pc, #24]	; (8006418 <HAL_RCC_GetSysClockFreq+0x138>)
 80063fe:	e785      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8006400:	4806      	ldr	r0, [pc, #24]	; (800641c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006402:	e783      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x2c>
 8006404:	58024400 	.word	0x58024400
 8006408:	03d09000 	.word	0x03d09000
 800640c:	4c742400 	.word	0x4c742400
 8006410:	4bbebc20 	.word	0x4bbebc20
 8006414:	4a742400 	.word	0x4a742400
 8006418:	017d7840 	.word	0x017d7840
 800641c:	003d0900 	.word	0x003d0900

08006420 <HAL_RCC_ClockConfig>:
{
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006426:	4604      	mov	r4, r0
 8006428:	b910      	cbnz	r0, 8006430 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800642a:	2001      	movs	r0, #1
}
 800642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006430:	4a88      	ldr	r2, [pc, #544]	; (8006654 <HAL_RCC_ClockConfig+0x234>)
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	428b      	cmp	r3, r1
 800643a:	f0c0 8093 	bcc.w	8006564 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	075f      	lsls	r7, r3, #29
 8006442:	f100 809b 	bmi.w	800657c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006446:	071e      	lsls	r6, r3, #28
 8006448:	d50b      	bpl.n	8006462 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800644a:	4983      	ldr	r1, [pc, #524]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 800644c:	6966      	ldr	r6, [r4, #20]
 800644e:	69c8      	ldr	r0, [r1, #28]
 8006450:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006454:	4286      	cmp	r6, r0
 8006456:	d904      	bls.n	8006462 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006458:	69ca      	ldr	r2, [r1, #28]
 800645a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800645e:	4332      	orrs	r2, r6
 8006460:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	06d8      	lsls	r0, r3, #27
 8006464:	d50b      	bpl.n	800647e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006466:	497c      	ldr	r1, [pc, #496]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 8006468:	69a6      	ldr	r6, [r4, #24]
 800646a:	69c8      	ldr	r0, [r1, #28]
 800646c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8006470:	4286      	cmp	r6, r0
 8006472:	d904      	bls.n	800647e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006474:	69ca      	ldr	r2, [r1, #28]
 8006476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800647a:	4332      	orrs	r2, r6
 800647c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800647e:	0699      	lsls	r1, r3, #26
 8006480:	d50b      	bpl.n	800649a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006482:	4975      	ldr	r1, [pc, #468]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 8006484:	69e6      	ldr	r6, [r4, #28]
 8006486:	6a08      	ldr	r0, [r1, #32]
 8006488:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800648c:	4286      	cmp	r6, r0
 800648e:	d904      	bls.n	800649a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006490:	6a0a      	ldr	r2, [r1, #32]
 8006492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006496:	4332      	orrs	r2, r6
 8006498:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649a:	079a      	lsls	r2, r3, #30
 800649c:	d50b      	bpl.n	80064b6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800649e:	496e      	ldr	r1, [pc, #440]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 80064a0:	68e6      	ldr	r6, [r4, #12]
 80064a2:	6988      	ldr	r0, [r1, #24]
 80064a4:	f000 000f 	and.w	r0, r0, #15
 80064a8:	4286      	cmp	r6, r0
 80064aa:	d904      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ac:	698a      	ldr	r2, [r1, #24]
 80064ae:	f022 020f 	bic.w	r2, r2, #15
 80064b2:	4332      	orrs	r2, r6
 80064b4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b6:	07df      	lsls	r7, r3, #31
 80064b8:	d46e      	bmi.n	8006598 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	079e      	lsls	r6, r3, #30
 80064be:	f100 80a1 	bmi.w	8006604 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c2:	4964      	ldr	r1, [pc, #400]	; (8006654 <HAL_RCC_ClockConfig+0x234>)
 80064c4:	680a      	ldr	r2, [r1, #0]
 80064c6:	f002 020f 	and.w	r2, r2, #15
 80064ca:	42aa      	cmp	r2, r5
 80064cc:	f200 80a8 	bhi.w	8006620 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064d0:	0758      	lsls	r0, r3, #29
 80064d2:	f100 80b1 	bmi.w	8006638 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d6:	0719      	lsls	r1, r3, #28
 80064d8:	d50b      	bpl.n	80064f2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064da:	495f      	ldr	r1, [pc, #380]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 80064dc:	6965      	ldr	r5, [r4, #20]
 80064de:	69c8      	ldr	r0, [r1, #28]
 80064e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80064e4:	4285      	cmp	r5, r0
 80064e6:	d204      	bcs.n	80064f2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064e8:	69ca      	ldr	r2, [r1, #28]
 80064ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064ee:	432a      	orrs	r2, r5
 80064f0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	06da      	lsls	r2, r3, #27
 80064f4:	d50b      	bpl.n	800650e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064f6:	4958      	ldr	r1, [pc, #352]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 80064f8:	69a5      	ldr	r5, [r4, #24]
 80064fa:	69c8      	ldr	r0, [r1, #28]
 80064fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8006500:	4285      	cmp	r5, r0
 8006502:	d204      	bcs.n	800650e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006504:	69ca      	ldr	r2, [r1, #28]
 8006506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800650a:	432a      	orrs	r2, r5
 800650c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800650e:	069b      	lsls	r3, r3, #26
 8006510:	d50b      	bpl.n	800652a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006512:	4a51      	ldr	r2, [pc, #324]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 8006514:	69e0      	ldr	r0, [r4, #28]
 8006516:	6a11      	ldr	r1, [r2, #32]
 8006518:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800651c:	4288      	cmp	r0, r1
 800651e:	d204      	bcs.n	800652a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006520:	6a13      	ldr	r3, [r2, #32]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	4303      	orrs	r3, r0
 8006528:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800652a:	f7ff fed9 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 800652e:	494a      	ldr	r1, [pc, #296]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <HAL_RCC_ClockConfig+0x23c>)
 8006532:	698b      	ldr	r3, [r1, #24]
 8006534:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006538:	5cd3      	ldrb	r3, [r2, r3]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006540:	698b      	ldr	r3, [r1, #24]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	5cd3      	ldrb	r3, [r2, r3]
 8006548:	4a45      	ldr	r2, [pc, #276]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	fa20 f303 	lsr.w	r3, r0, r3
 8006552:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006554:	4b43      	ldr	r3, [pc, #268]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006556:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8006558:	4b43      	ldr	r3, [pc, #268]	; (8006668 <HAL_RCC_ClockConfig+0x248>)
}
 800655a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	f7fa bd3a 	b.w	8000fd8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006564:	6813      	ldr	r3, [r2, #0]
 8006566:	f023 030f 	bic.w	r3, r3, #15
 800656a:	430b      	orrs	r3, r1
 800656c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	428b      	cmp	r3, r1
 8006576:	f47f af58 	bne.w	800642a <HAL_RCC_ClockConfig+0xa>
 800657a:	e760      	b.n	800643e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800657c:	4936      	ldr	r1, [pc, #216]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 800657e:	6926      	ldr	r6, [r4, #16]
 8006580:	6988      	ldr	r0, [r1, #24]
 8006582:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006586:	4286      	cmp	r6, r0
 8006588:	f67f af5d 	bls.w	8006446 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800658c:	698a      	ldr	r2, [r1, #24]
 800658e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006592:	4332      	orrs	r2, r6
 8006594:	618a      	str	r2, [r1, #24]
 8006596:	e756      	b.n	8006446 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 800659a:	68a1      	ldr	r1, [r4, #8]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80065a2:	430a      	orrs	r2, r1
 80065a4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a6:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065a8:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065aa:	2a02      	cmp	r2, #2
 80065ac:	d11d      	bne.n	80065ea <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b2:	f43f af3a 	beq.w	800642a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4e28      	ldr	r6, [pc, #160]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b8:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065bc:	6933      	ldr	r3, [r6, #16]
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	4313      	orrs	r3, r2
 80065c4:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80065c6:	f7fd fcb7 	bl	8003f38 <HAL_GetTick>
 80065ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065cc:	6933      	ldr	r3, [r6, #16]
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065d4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80065d8:	f43f af6f 	beq.w	80064ba <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fd fcac 	bl	8003f38 <HAL_GetTick>
 80065e0:	1bc0      	subs	r0, r0, r7
 80065e2:	4540      	cmp	r0, r8
 80065e4:	d9f2      	bls.n	80065cc <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 80065e6:	2003      	movs	r0, #3
 80065e8:	e720      	b.n	800642c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ea:	2a03      	cmp	r2, #3
 80065ec:	d102      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80065f2:	e7de      	b.n	80065b2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065f4:	2a01      	cmp	r2, #1
 80065f6:	d102      	bne.n	80065fe <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80065fc:	e7d9      	b.n	80065b2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fe:	f013 0f04 	tst.w	r3, #4
 8006602:	e7d6      	b.n	80065b2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006604:	4914      	ldr	r1, [pc, #80]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 8006606:	68e6      	ldr	r6, [r4, #12]
 8006608:	6988      	ldr	r0, [r1, #24]
 800660a:	f000 000f 	and.w	r0, r0, #15
 800660e:	4286      	cmp	r6, r0
 8006610:	f4bf af57 	bcs.w	80064c2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	698a      	ldr	r2, [r1, #24]
 8006616:	f022 020f 	bic.w	r2, r2, #15
 800661a:	4332      	orrs	r2, r6
 800661c:	618a      	str	r2, [r1, #24]
 800661e:	e750      	b.n	80064c2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006620:	680a      	ldr	r2, [r1, #0]
 8006622:	f022 020f 	bic.w	r2, r2, #15
 8006626:	432a      	orrs	r2, r5
 8006628:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800662a:	680a      	ldr	r2, [r1, #0]
 800662c:	f002 020f 	and.w	r2, r2, #15
 8006630:	42aa      	cmp	r2, r5
 8006632:	f47f aefa 	bne.w	800642a <HAL_RCC_ClockConfig+0xa>
 8006636:	e74b      	b.n	80064d0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006638:	4907      	ldr	r1, [pc, #28]	; (8006658 <HAL_RCC_ClockConfig+0x238>)
 800663a:	6925      	ldr	r5, [r4, #16]
 800663c:	6988      	ldr	r0, [r1, #24]
 800663e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006642:	4285      	cmp	r5, r0
 8006644:	f4bf af47 	bcs.w	80064d6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006648:	698a      	ldr	r2, [r1, #24]
 800664a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800664e:	432a      	orrs	r2, r5
 8006650:	618a      	str	r2, [r1, #24]
 8006652:	e740      	b.n	80064d6 <HAL_RCC_ClockConfig+0xb6>
 8006654:	52002000 	.word	0x52002000
 8006658:	58024400 	.word	0x58024400
 800665c:	08018d04 	.word	0x08018d04
 8006660:	24000040 	.word	0x24000040
 8006664:	2400003c 	.word	0x2400003c
 8006668:	24000048 	.word	0x24000048

0800666c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800666c:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800666e:	4c0c      	ldr	r4, [pc, #48]	; (80066a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8006670:	f7ff fe36 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 8006674:	490b      	ldr	r1, [pc, #44]	; (80066a4 <HAL_RCC_GetHCLKFreq+0x38>)
 8006676:	69a3      	ldr	r3, [r4, #24]
 8006678:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800667c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800667e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006680:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006684:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006688:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800668c:	5ccb      	ldrb	r3, [r1, r3]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	fa22 f003 	lsr.w	r0, r2, r3
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006698:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800669a:	4b04      	ldr	r3, [pc, #16]	; (80066ac <HAL_RCC_GetHCLKFreq+0x40>)
 800669c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800669e:	bd10      	pop	{r4, pc}
 80066a0:	58024400 	.word	0x58024400
 80066a4:	08018d04 	.word	0x08018d04
 80066a8:	24000040 	.word	0x24000040
 80066ac:	2400003c 	.word	0x2400003c

080066b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066b2:	f7ff ffdb 	bl	800666c <HAL_RCC_GetHCLKFreq>
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066b8:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80066c0:	5cd3      	ldrb	r3, [r2, r3]
 80066c2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066c6:	40d8      	lsrs	r0, r3
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	58024400 	.word	0x58024400
 80066d0:	08018d04 	.word	0x08018d04

080066d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066d6:	f7ff ffc9 	bl	800666c <HAL_RCC_GetHCLKFreq>
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80066dc:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80066e4:	5cd3      	ldrb	r3, [r2, r3]
 80066e6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066ea:	40d8      	lsrs	r0, r3
 80066ec:	bd08      	pop	{r3, pc}
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
 80066f4:	08018d04 	.word	0x08018d04

080066f8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80066f8:	233f      	movs	r3, #63	; 0x3f
 80066fa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_RCC_GetClockConfig+0x4c>)
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	f002 0207 	and.w	r2, r2, #7
 8006704:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800670c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	f002 020f 	and.w	r2, r2, #15
 8006714:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800671c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006724:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800672c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006734:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <HAL_RCC_GetClockConfig+0x50>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	600b      	str	r3, [r1, #0]
}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	52002000 	.word	0x52002000

0800674c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800674e:	4c3a      	ldr	r4, [pc, #232]	; (8006838 <RCCEx_PLL2_Config+0xec>)
{
 8006750:	4606      	mov	r6, r0
 8006752:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b03      	cmp	r3, #3
 800675c:	d069      	beq.n	8006832 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006764:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006766:	f7fd fbe7 	bl	8003f38 <HAL_GetTick>
 800676a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	011a      	lsls	r2, r3, #4
 8006770:	d44b      	bmi.n	800680a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800677a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800677e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006780:	68b3      	ldr	r3, [r6, #8]
 8006782:	68f2      	ldr	r2, [r6, #12]
 8006784:	3b01      	subs	r3, #1
 8006786:	3a01      	subs	r2, #1
 8006788:	025b      	lsls	r3, r3, #9
 800678a:	0412      	lsls	r2, r2, #16
 800678c:	b29b      	uxth	r3, r3
 800678e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006792:	4313      	orrs	r3, r2
 8006794:	6872      	ldr	r2, [r6, #4]
 8006796:	3a01      	subs	r2, #1
 8006798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679c:	4313      	orrs	r3, r2
 800679e:	6932      	ldr	r2, [r6, #16]
 80067a0:	3a01      	subs	r2, #1
 80067a2:	0612      	lsls	r2, r2, #24
 80067a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80067a8:	4313      	orrs	r3, r2
 80067aa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ae:	6972      	ldr	r2, [r6, #20]
 80067b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067b4:	4313      	orrs	r3, r2
 80067b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ba:	69b2      	ldr	r2, [r6, #24]
 80067bc:	f023 0320 	bic.w	r3, r3, #32
 80067c0:	4313      	orrs	r3, r2
 80067c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067c6:	f023 0310 	bic.w	r3, r3, #16
 80067ca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067ce:	69f2      	ldr	r2, [r6, #28]
 80067d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80067d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80067dc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067e0:	f043 0310 	orr.w	r3, r3, #16
 80067e4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80067e8:	b9b5      	cbnz	r5, 8006818 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067f0:	4c11      	ldr	r4, [pc, #68]	; (8006838 <RCCEx_PLL2_Config+0xec>)
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067fa:	f7fd fb9d 	bl	8003f38 <HAL_GetTick>
 80067fe:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	d50f      	bpl.n	8006826 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8006806:	2000      	movs	r0, #0
 8006808:	e005      	b.n	8006816 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800680a:	f7fd fb95 	bl	8003f38 <HAL_GetTick>
 800680e:	1bc0      	subs	r0, r0, r7
 8006810:	2802      	cmp	r0, #2
 8006812:	d9ab      	bls.n	800676c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8006814:	2003      	movs	r0, #3
}
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8006818:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800681a:	bf0c      	ite	eq
 800681c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006820:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006824:	e7e3      	b.n	80067ee <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006826:	f7fd fb87 	bl	8003f38 <HAL_GetTick>
 800682a:	1b40      	subs	r0, r0, r5
 800682c:	2802      	cmp	r0, #2
 800682e:	d9e7      	bls.n	8006800 <RCCEx_PLL2_Config+0xb4>
 8006830:	e7f0      	b.n	8006814 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8006832:	2001      	movs	r0, #1
 8006834:	e7ef      	b.n	8006816 <RCCEx_PLL2_Config+0xca>
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400

0800683c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800683e:	4c3a      	ldr	r4, [pc, #232]	; (8006928 <RCCEx_PLL3_Config+0xec>)
{
 8006840:	4606      	mov	r6, r0
 8006842:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b03      	cmp	r3, #3
 800684c:	d069      	beq.n	8006922 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006854:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006856:	f7fd fb6f 	bl	8003f38 <HAL_GetTick>
 800685a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	009a      	lsls	r2, r3, #2
 8006860:	d44b      	bmi.n	80068fa <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006862:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800686a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800686e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006870:	68b3      	ldr	r3, [r6, #8]
 8006872:	68f2      	ldr	r2, [r6, #12]
 8006874:	3b01      	subs	r3, #1
 8006876:	3a01      	subs	r2, #1
 8006878:	025b      	lsls	r3, r3, #9
 800687a:	0412      	lsls	r2, r2, #16
 800687c:	b29b      	uxth	r3, r3
 800687e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006882:	4313      	orrs	r3, r2
 8006884:	6872      	ldr	r2, [r6, #4]
 8006886:	3a01      	subs	r2, #1
 8006888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688c:	4313      	orrs	r3, r2
 800688e:	6932      	ldr	r2, [r6, #16]
 8006890:	3a01      	subs	r2, #1
 8006892:	0612      	lsls	r2, r2, #24
 8006894:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006898:	4313      	orrs	r3, r2
 800689a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800689c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800689e:	6972      	ldr	r2, [r6, #20]
 80068a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068a4:	4313      	orrs	r3, r2
 80068a6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068aa:	69b2      	ldr	r2, [r6, #24]
 80068ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068b0:	4313      	orrs	r3, r2
 80068b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80068be:	69f2      	ldr	r2, [r6, #28]
 80068c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80068c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80068cc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80068d8:	b9b5      	cbnz	r5, 8006908 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068de:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068e0:	4c11      	ldr	r4, [pc, #68]	; (8006928 <RCCEx_PLL3_Config+0xec>)
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ea:	f7fd fb25 	bl	8003f38 <HAL_GetTick>
 80068ee:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	d50f      	bpl.n	8006916 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80068f6:	2000      	movs	r0, #0
 80068f8:	e005      	b.n	8006906 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068fa:	f7fd fb1d 	bl	8003f38 <HAL_GetTick>
 80068fe:	1bc0      	subs	r0, r0, r7
 8006900:	2802      	cmp	r0, #2
 8006902:	d9ab      	bls.n	800685c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8006904:	2003      	movs	r0, #3
}
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8006908:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800690a:	bf0c      	ite	eq
 800690c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006910:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006914:	e7e3      	b.n	80068de <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006916:	f7fd fb0f 	bl	8003f38 <HAL_GetTick>
 800691a:	1b40      	subs	r0, r0, r5
 800691c:	2802      	cmp	r0, #2
 800691e:	d9e7      	bls.n	80068f0 <RCCEx_PLL3_Config+0xb4>
 8006920:	e7f0      	b.n	8006904 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8006922:	2001      	movs	r0, #1
 8006924:	e7ef      	b.n	8006906 <RCCEx_PLL3_Config+0xca>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400

0800692c <HAL_RCCEx_PeriphCLKConfig>:
{
 800692c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006930:	6803      	ldr	r3, [r0, #0]
{
 8006932:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006934:	011c      	lsls	r4, r3, #4
 8006936:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800693a:	d509      	bpl.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800693c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800693e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006942:	d02c      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006944:	d811      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8006946:	b1e3      	cbz	r3, 8006982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694c:	d01f      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800694e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	05d8      	lsls	r0, r3, #23
 8006954:	f140 80d8 	bpl.w	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006958:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800695a:	2b04      	cmp	r3, #4
 800695c:	f200 80d3 	bhi.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8006960:	e8df f003 	tbb	[pc, r3]
 8006964:	27cb2922 	.word	0x27cb2922
 8006968:	27          	.byte	0x27
 8006969:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800696a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800696e:	d1ee      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006970:	4aab      	ldr	r2, [pc, #684]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006972:	2600      	movs	r6, #0
 8006974:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8006976:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006978:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800697c:	430b      	orrs	r3, r1
 800697e:	6513      	str	r3, [r2, #80]	; 0x50
 8006980:	e7e6      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006982:	4aa7      	ldr	r2, [pc, #668]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006984:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800698c:	e7f0      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800698e:	2102      	movs	r1, #2
 8006990:	3008      	adds	r0, #8
 8006992:	f7ff fedb 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006996:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8006998:	2800      	cmp	r0, #0
 800699a:	d1d9      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800699c:	e7e8      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800699e:	2102      	movs	r1, #2
 80069a0:	3028      	adds	r0, #40	; 0x28
 80069a2:	f7ff ff4b 	bl	800683c <RCCEx_PLL3_Config>
 80069a6:	e7f6      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a8:	4a9d      	ldr	r2, [pc, #628]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 80069b2:	4634      	mov	r4, r6
 80069b4:	e005      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069b6:	2100      	movs	r1, #0
 80069b8:	f105 0008 	add.w	r0, r5, #8
 80069bc:	f7ff fec6 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069c0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	f040 80a2 	bne.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069c8:	4a95      	ldr	r2, [pc, #596]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ca:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80069cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80069ce:	f023 0307 	bic.w	r3, r3, #7
 80069d2:	430b      	orrs	r3, r1
 80069d4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	0559      	lsls	r1, r3, #21
 80069da:	d510      	bpl.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4AClockSelection)
 80069dc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80069e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e4:	f000 80b4 	beq.w	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80069e8:	f200 8092 	bhi.w	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80a2 	beq.w	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80069f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069f6:	f000 80a4 	beq.w	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80069fa:	2601      	movs	r6, #1
 80069fc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	051a      	lsls	r2, r3, #20
 8006a02:	d510      	bpl.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a04:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8006a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a0c:	f000 80c8 	beq.w	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006a10:	f200 80a6 	bhi.w	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80b6 	beq.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a1e:	f000 80b8 	beq.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006a22:	2601      	movs	r6, #1
 8006a24:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	019b      	lsls	r3, r3, #6
 8006a2a:	d50d      	bpl.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8006a2c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f000 80d0 	beq.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a34:	f200 80bc 	bhi.w	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80bc 	beq.w	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	f000 80c2 	beq.w	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006a44:	2601      	movs	r6, #1
 8006a46:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	04df      	lsls	r7, r3, #19
 8006a4c:	d50f      	bpl.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006a4e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	f000 80e6 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8006a58:	f200 80c5 	bhi.w	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80d2 	beq.w	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a66:	f000 80d4 	beq.w	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8006a6a:	2601      	movs	r6, #1
 8006a6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	0498      	lsls	r0, r3, #18
 8006a72:	d50f      	bpl.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8006a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7a:	f000 80f4 	beq.w	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006a7e:	f200 80d9 	bhi.w	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80df 	beq.w	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	f000 80e4 	beq.w	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006a90:	2601      	movs	r6, #1
 8006a92:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	0459      	lsls	r1, r3, #17
 8006a98:	d510      	bpl.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x190>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a9a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	f000 8102 	beq.w	8006caa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006aa6:	f200 80e6 	bhi.w	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80ec 	beq.w	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab4:	f000 80f2 	beq.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8006ab8:	2601      	movs	r6, #1
 8006aba:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	041a      	lsls	r2, r3, #16
 8006ac0:	d50d      	bpl.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch (PeriphClkInit->FdcanClockSelection)
 8006ac2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac8:	f000 80f7 	beq.w	8006cba <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad0:	f000 8101 	beq.w	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80f5 	beq.w	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8006ada:	2601      	movs	r6, #1
 8006adc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	01db      	lsls	r3, r3, #7
 8006ae2:	f140 810f 	bpl.w	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    switch (PeriphClkInit->FmcClockSelection)
 8006ae6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	f200 8150 	bhi.w	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x462>
 8006aee:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006af2:	0100      	.short	0x0100
 8006af4:	014700fb 	.word	0x014700fb
 8006af8:	0100      	.short	0x0100
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006afa:	2100      	movs	r1, #0
 8006afc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006b00:	f7ff fe9c 	bl	800683c <RCCEx_PLL3_Config>
 8006b04:	e75c      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b06:	2601      	movs	r6, #1
 8006b08:	4634      	mov	r4, r6
 8006b0a:	e764      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8006b0c:	4626      	mov	r6, r4
 8006b0e:	e762      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b14:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006b18:	d003      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006b1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b1e:	f47f af6c 	bne.w	80069fa <HAL_RCCEx_PeriphCLKConfig+0xce>
    if (ret == HAL_OK)
 8006b22:	b9dc      	cbnz	r4, 8006b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b24:	4a3e      	ldr	r2, [pc, #248]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b26:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8006b2a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b2c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6593      	str	r3, [r2, #88]	; 0x58
 8006b34:	e763      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b36:	4a3a      	ldr	r2, [pc, #232]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006b40:	e7ef      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b42:	2100      	movs	r1, #0
 8006b44:	f105 0008 	add.w	r0, r5, #8
 8006b48:	f7ff fe00 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b4c:	4604      	mov	r4, r0
        break;
 8006b4e:	e7e8      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b50:	2100      	movs	r1, #0
 8006b52:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006b56:	f7ff fe71 	bl	800683c <RCCEx_PLL3_Config>
 8006b5a:	e7f7      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006b5c:	4626      	mov	r6, r4
 8006b5e:	e74e      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b64:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006b68:	d003      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8006b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b6e:	f47f af58 	bne.w	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if (ret == HAL_OK)
 8006b72:	b9dc      	cbnz	r4, 8006bac <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b76:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8006b7a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b7c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6593      	str	r3, [r2, #88]	; 0x58
 8006b84:	e74f      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b86:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006b90:	e7ef      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x246>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b92:	2100      	movs	r1, #0
 8006b94:	f105 0008 	add.w	r0, r5, #8
 8006b98:	f7ff fdd8 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b9c:	4604      	mov	r4, r0
        break;
 8006b9e:	e7e8      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x246>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006ba6:	f7ff fe49 	bl	800683c <RCCEx_PLL3_Config>
 8006baa:	e7f7      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x270>
 8006bac:	4626      	mov	r6, r4
 8006bae:	e73a      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch (PeriphClkInit->OspiClockSelection)
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	f47f af47 	bne.w	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if (ret == HAL_OK)
 8006bb6:	b9a4      	cbnz	r4, 8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006bb8:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bba:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8006bbc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006bbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bc6:	e73f      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006bd2:	e7f0      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	f105 0008 	add.w	r0, r5, #8
 8006bda:	f7ff fdb7 	bl	800674c <RCCEx_PLL2_Config>
 8006bde:	4604      	mov	r4, r0
        break;
 8006be0:	e7e9      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8006be2:	4626      	mov	r6, r4
 8006be4:	e730      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf0:	f47f af3b 	bne.w	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 8006bf4:	b9e4      	cbnz	r4, 8006c30 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bf8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8006bfa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6513      	str	r3, [r2, #80]	; 0x50
 8006c04:	e733      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c06:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006c10:	e7f0      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c12:	2100      	movs	r1, #0
 8006c14:	f105 0008 	add.w	r0, r5, #8
 8006c18:	f7ff fd98 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c1c:	4604      	mov	r4, r0
        break;
 8006c1e:	e7e9      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006c20:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c24:	2100      	movs	r1, #0
 8006c26:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006c2a:	f7ff fe07 	bl	800683c <RCCEx_PLL3_Config>
 8006c2e:	e7f5      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8006c30:	4626      	mov	r6, r4
 8006c32:	e71c      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c38:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c42:	f47f af25 	bne.w	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 8006c46:	b9a4      	cbnz	r4, 8006c72 <HAL_RCCEx_PeriphCLKConfig+0x346>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c48:	4a92      	ldr	r2, [pc, #584]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006c4a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006c4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006c4e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6513      	str	r3, [r2, #80]	; 0x50
 8006c56:	e71d      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x168>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	f105 0008 	add.w	r0, r5, #8
 8006c5e:	f7ff fd75 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c62:	4604      	mov	r4, r0
        break;
 8006c64:	e7ef      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c66:	2101      	movs	r1, #1
 8006c68:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006c6c:	f7ff fde6 	bl	800683c <RCCEx_PLL3_Config>
 8006c70:	e7f7      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006c72:	4626      	mov	r6, r4
 8006c74:	e70e      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c7a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c84:	f47f af18 	bne.w	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    if (ret == HAL_OK)
 8006c88:	b9ac      	cbnz	r4, 8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c8a:	4a82      	ldr	r2, [pc, #520]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006c8c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8006c90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006c92:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	e70f      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x190>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	f105 0008 	add.w	r0, r5, #8
 8006ca2:	f7ff fd53 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca6:	4604      	mov	r4, r0
        break;
 8006ca8:	e7ee      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006caa:	2101      	movs	r1, #1
 8006cac:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006cb0:	f7ff fdc4 	bl	800683c <RCCEx_PLL3_Config>
 8006cb4:	e7f7      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006cb6:	4626      	mov	r6, r4
 8006cb8:	e700      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x190>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cba:	4a76      	ldr	r2, [pc, #472]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006cbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8006cc4:	b974      	cbnz	r4, 8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc6:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006cc8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8006cca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ccc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6513      	str	r3, [r2, #80]	; 0x50
 8006cd4:	e703      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	f105 0008 	add.w	r0, r5, #8
 8006cdc:	f7ff fd36 	bl	800674c <RCCEx_PLL2_Config>
 8006ce0:	4604      	mov	r4, r0
        break;
 8006ce2:	e7ef      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8006ce4:	4626      	mov	r6, r4
 8006ce6:	e6fa      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1b2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce8:	4a6a      	ldr	r2, [pc, #424]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006cea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d14e      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x468>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cf6:	4a67      	ldr	r2, [pc, #412]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006cf8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8006cfa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006cfc:	f023 0303 	bic.w	r3, r3, #3
 8006d00:	430b      	orrs	r3, r1
 8006d02:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	025f      	lsls	r7, r3, #9
 8006d08:	d54e      	bpl.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d0a:	4f63      	ldr	r7, [pc, #396]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8006d14:	f7fd f910 	bl	8003f38 <HAL_GetTick>
 8006d18:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	05d8      	lsls	r0, r3, #23
 8006d1e:	d53b      	bpl.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if (ret == HAL_OK)
 8006d20:	2c00      	cmp	r4, #0
 8006d22:	d16d      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d24:	4b5b      	ldr	r3, [pc, #364]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006d26:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8006d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d2c:	4042      	eors	r2, r0
 8006d2e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8006d32:	d00b      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x420>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d36:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d3c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006d40:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d44:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006d48:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006d4a:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d4c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006d50:	d041      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d52:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8006d56:	494f      	ldr	r1, [pc, #316]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006d58:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d5c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006d60:	d14a      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8006d62:	6908      	ldr	r0, [r1, #16]
 8006d64:	4a4d      	ldr	r2, [pc, #308]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006d66:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8006d6a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8006d6e:	4302      	orrs	r2, r0
 8006d70:	610a      	str	r2, [r1, #16]
 8006d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d76:	4a47      	ldr	r2, [pc, #284]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006d78:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7e:	e013      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d80:	2102      	movs	r1, #2
 8006d82:	f105 0008 	add.w	r0, r5, #8
 8006d86:	f7ff fce1 	bl	800674c <RCCEx_PLL2_Config>
 8006d8a:	4604      	mov	r4, r0
        break;
 8006d8c:	e7b1      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch (PeriphClkInit->FmcClockSelection)
 8006d8e:	2601      	movs	r6, #1
 8006d90:	4634      	mov	r4, r6
 8006d92:	e7b7      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8006d94:	4626      	mov	r6, r4
 8006d96:	e7b5      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d98:	f7fd f8ce 	bl	8003f38 <HAL_GetTick>
 8006d9c:	eba0 0008 	sub.w	r0, r0, r8
 8006da0:	2864      	cmp	r0, #100	; 0x64
 8006da2:	d9ba      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        ret = HAL_TIMEOUT;
 8006da4:	2603      	movs	r6, #3
 8006da6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	07da      	lsls	r2, r3, #31
 8006dac:	d508      	bpl.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006dae:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d03d      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006db4:	d826      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006db6:	b35b      	cbz	r3, 8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d032      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006dbc:	2601      	movs	r6, #1
 8006dbe:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	079b      	lsls	r3, r3, #30
 8006dc4:	d54a      	bpl.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006dc6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d85d      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8006dcc:	e8df f003 	tbb	[pc, r3]
 8006dd0:	3e56383e 	.word	0x3e56383e
 8006dd4:	3e3e      	.short	0x3e3e
        tickstart = HAL_GetTick();
 8006dd6:	f7fd f8af 	bl	8003f38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dda:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>
        tickstart = HAL_GetTick();
 8006dde:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de0:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006de4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006de8:	0799      	lsls	r1, r3, #30
 8006dea:	d4b2      	bmi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dec:	f7fd f8a4 	bl	8003f38 <HAL_GetTick>
 8006df0:	1bc0      	subs	r0, r0, r7
 8006df2:	4548      	cmp	r0, r9
 8006df4:	d9f6      	bls.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8006df6:	e7d5      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x478>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006df8:	690a      	ldr	r2, [r1, #16]
 8006dfa:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006dfe:	e7b7      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8006e00:	4626      	mov	r6, r4
 8006e02:	e7d1      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e04:	f023 0208 	bic.w	r2, r3, #8
 8006e08:	2a20      	cmp	r2, #32
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006e0c:	2b18      	cmp	r3, #24
 8006e0e:	d1d5      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x490>
    if (ret == HAL_OK)
 8006e10:	b9a4      	cbnz	r4, 8006e3c <HAL_RCCEx_PeriphCLKConfig+0x510>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e12:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006e14:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8006e16:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006e18:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6553      	str	r3, [r2, #84]	; 0x54
 8006e20:	e7ce      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e22:	2101      	movs	r1, #1
 8006e24:	f105 0008 	add.w	r0, r5, #8
 8006e28:	f7ff fc90 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e2c:	4604      	mov	r4, r0
        break;
 8006e2e:	e7ef      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e30:	2101      	movs	r1, #1
 8006e32:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006e36:	f7ff fd01 	bl	800683c <RCCEx_PLL3_Config>
 8006e3a:	e7f7      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006e3c:	4626      	mov	r6, r4
 8006e3e:	e7bf      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e40:	2101      	movs	r1, #1
 8006e42:	f105 0008 	add.w	r0, r5, #8
 8006e46:	f7ff fc81 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e4a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8006e4c:	b9fc      	cbnz	r4, 8006e8e <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e4e:	4a11      	ldr	r2, [pc, #68]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006e50:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8006e52:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006e54:	f023 0307 	bic.w	r3, r3, #7
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	075f      	lsls	r7, r3, #29
 8006e60:	d52f      	bpl.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e62:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	f200 8173 	bhi.w	8007152 <HAL_RCCEx_PeriphCLKConfig+0x826>
 8006e6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e70:	0018001e 	.word	0x0018001e
 8006e74:	001e016b 	.word	0x001e016b
 8006e78:	001e001e 	.word	0x001e001e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006e82:	f7ff fcdb 	bl	800683c <RCCEx_PLL3_Config>
 8006e86:	e7e0      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e88:	2601      	movs	r6, #1
 8006e8a:	4634      	mov	r4, r6
 8006e8c:	e7e6      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x530>
 8006e8e:	4626      	mov	r6, r4
 8006e90:	e7e4      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x530>
 8006e92:	bf00      	nop
 8006e94:	58024400 	.word	0x58024400
 8006e98:	58024800 	.word	0x58024800
 8006e9c:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	f105 0008 	add.w	r0, r5, #8
 8006ea6:	f7ff fc51 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eaa:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	f040 8153 	bne.w	8007158 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eb2:	4aaa      	ldr	r2, [pc, #680]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006eb4:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8006eb8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006eba:	f023 0307 	bic.w	r3, r3, #7
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	0698      	lsls	r0, r3, #26
 8006ec6:	d510      	bpl.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ec8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed0:	f000 8160 	beq.w	8007194 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006ed4:	f200 8144 	bhi.w	8007160 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 814a 	beq.w	8007172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee2:	f000 8150 	beq.w	8007186 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8006ee6:	2601      	movs	r6, #1
 8006ee8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006eea:	682b      	ldr	r3, [r5, #0]
 8006eec:	0659      	lsls	r1, r3, #25
 8006eee:	d510      	bpl.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006ef0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	f000 816e 	beq.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006efc:	f200 8152 	bhi.w	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8158 	beq.w	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8006f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0a:	f000 815e 	beq.w	80071ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8006f0e:	2601      	movs	r6, #1
 8006f10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	061a      	lsls	r2, r3, #24
 8006f16:	d510      	bpl.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f18:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f20:	f000 817c 	beq.w	800721c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006f24:	f200 8160 	bhi.w	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8166 	beq.w	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	f000 816c 	beq.w	800720e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006f36:	2601      	movs	r6, #1
 8006f38:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	071b      	lsls	r3, r3, #28
 8006f3e:	d514      	bpl.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f40:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f48:	d107      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006f50:	f7ff fc74 	bl	800683c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8006f54:	2800      	cmp	r0, #0
 8006f56:	bf18      	it	ne
 8006f58:	2601      	movne	r6, #1
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f5a:	4a80      	ldr	r2, [pc, #512]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006f5c:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8006f60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	06df      	lsls	r7, r3, #27
 8006f6e:	d514      	bpl.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f70:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d107      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006f80:	f7ff fc5c 	bl	800683c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8006f84:	2800      	cmp	r0, #0
 8006f86:	bf18      	it	ne
 8006f88:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f8a:	4a74      	ldr	r2, [pc, #464]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006f8c:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8006f90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f96:	430b      	orrs	r3, r1
 8006f98:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	0318      	lsls	r0, r3, #12
 8006f9e:	d51b      	bpl.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
    switch (PeriphClkInit->AdcClockSelection)
 8006fa0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8006fa4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006fa8:	f000 8140 	beq.w	800722c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8006fac:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006fb0:	d007      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	f040 8140 	bne.w	8007238 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fb8:	f105 0008 	add.w	r0, r5, #8
 8006fbc:	f7ff fbc6 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fc0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	f040 813b 	bne.w	800723e <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fc8:	4a64      	ldr	r2, [pc, #400]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006fca:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8006fce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006fd0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	0359      	lsls	r1, r3, #13
 8006fdc:	d51c      	bpl.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->UsbClockSelection)
 8006fde:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8006fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fe6:	f000 812c 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8006fea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fee:	d008      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff4:	f040 812c 	bne.w	8007250 <HAL_RCCEx_PeriphCLKConfig+0x924>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff8:	4a58      	ldr	r2, [pc, #352]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006ffa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007000:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007002:	2c00      	cmp	r4, #0
 8007004:	f040 8127 	bne.w	8007256 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007008:	4a54      	ldr	r2, [pc, #336]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800700a:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800700e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007010:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007014:	430b      	orrs	r3, r1
 8007016:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	03da      	lsls	r2, r3, #15
 800701c:	d509      	bpl.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x706>
    switch (PeriphClkInit->SdmmcClockSelection)
 800701e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 811a 	beq.w	800725a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8007026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702a:	f000 8124 	beq.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800702e:	2601      	movs	r6, #1
 8007030:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	d507      	bpl.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007038:	2102      	movs	r1, #2
 800703a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800703e:	f7ff fbfd 	bl	800683c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8007042:	2800      	cmp	r0, #0
 8007044:	bf18      	it	ne
 8007046:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007048:	e9d5 3100 	ldrd	r3, r1, [r5]
 800704c:	039f      	lsls	r7, r3, #14
 800704e:	d50a      	bpl.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    switch (PeriphClkInit->RngClockSelection)
 8007050:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8007052:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007056:	f000 8125 	beq.w	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800705a:	f200 8115 	bhi.w	8007288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800705e:	2800      	cmp	r0, #0
 8007060:	f000 8118 	beq.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8007064:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007066:	02dc      	lsls	r4, r3, #11
 8007068:	d506      	bpl.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800706a:	483c      	ldr	r0, [pc, #240]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800706c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800706e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007070:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007074:	4322      	orrs	r2, r4
 8007076:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007078:	0298      	lsls	r0, r3, #10
 800707a:	d506      	bpl.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707c:	4837      	ldr	r0, [pc, #220]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800707e:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8007080:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007082:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007086:	4322      	orrs	r2, r4
 8007088:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800708a:	005a      	lsls	r2, r3, #1
 800708c:	d509      	bpl.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800708e:	4a33      	ldr	r2, [pc, #204]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8007090:	6910      	ldr	r0, [r2, #16]
 8007092:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8007096:	6110      	str	r0, [r2, #16]
 8007098:	6910      	ldr	r0, [r2, #16]
 800709a:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
 800709e:	4320      	orrs	r0, r4
 80070a0:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da06      	bge.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070a6:	482d      	ldr	r0, [pc, #180]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80070a8:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80070aa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80070ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070b0:	4322      	orrs	r2, r4
 80070b2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	d507      	bpl.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070b8:	4a28      	ldr	r2, [pc, #160]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80070ba:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 80070be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070c0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80070c4:	4303      	orrs	r3, r0
 80070c6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070c8:	07cf      	lsls	r7, r1, #31
 80070ca:	d507      	bpl.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070cc:	2100      	movs	r1, #0
 80070ce:	f105 0008 	add.w	r0, r5, #8
 80070d2:	f7ff fb3b 	bl	800674c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80070d6:	2800      	cmp	r0, #0
 80070d8:	bf18      	it	ne
 80070da:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070dc:	686b      	ldr	r3, [r5, #4]
 80070de:	079c      	lsls	r4, r3, #30
 80070e0:	d507      	bpl.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e2:	2101      	movs	r1, #1
 80070e4:	f105 0008 	add.w	r0, r5, #8
 80070e8:	f7ff fb30 	bl	800674c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80070ec:	2800      	cmp	r0, #0
 80070ee:	bf18      	it	ne
 80070f0:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80070f2:	686b      	ldr	r3, [r5, #4]
 80070f4:	0758      	lsls	r0, r3, #29
 80070f6:	d507      	bpl.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070f8:	2102      	movs	r1, #2
 80070fa:	f105 0008 	add.w	r0, r5, #8
 80070fe:	f7ff fb25 	bl	800674c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007102:	2800      	cmp	r0, #0
 8007104:	bf18      	it	ne
 8007106:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007108:	686b      	ldr	r3, [r5, #4]
 800710a:	0719      	lsls	r1, r3, #28
 800710c:	d507      	bpl.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800710e:	2100      	movs	r1, #0
 8007110:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007114:	f7ff fb92 	bl	800683c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007118:	2800      	cmp	r0, #0
 800711a:	bf18      	it	ne
 800711c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800711e:	686b      	ldr	r3, [r5, #4]
 8007120:	06da      	lsls	r2, r3, #27
 8007122:	d507      	bpl.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x808>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007124:	2101      	movs	r1, #1
 8007126:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800712a:	f7ff fb87 	bl	800683c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800712e:	2800      	cmp	r0, #0
 8007130:	bf18      	it	ne
 8007132:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007134:	686b      	ldr	r3, [r5, #4]
 8007136:	069b      	lsls	r3, r3, #26
 8007138:	f100 80bc 	bmi.w	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x988>
    return HAL_OK;
 800713c:	1e30      	subs	r0, r6, #0
 800713e:	bf18      	it	ne
 8007140:	2001      	movne	r0, #1
}
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007146:	2101      	movs	r1, #1
 8007148:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800714c:	f7ff fb76 	bl	800683c <RCCEx_PLL3_Config>
 8007150:	e6ab      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007152:	2601      	movs	r6, #1
 8007154:	4634      	mov	r4, r6
 8007156:	e6b4      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007158:	4626      	mov	r6, r4
 800715a:	e6b2      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800715c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007160:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007164:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007168:	d003      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800716a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800716e:	f47f aeba 	bne.w	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    if (ret == HAL_OK)
 8007172:	b9ac      	cbnz	r4, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007174:	4a54      	ldr	r2, [pc, #336]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8007176:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800717a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800717c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007180:	430b      	orrs	r3, r1
 8007182:	6553      	str	r3, [r2, #84]	; 0x54
 8007184:	e6b1      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x5be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007186:	2100      	movs	r1, #0
 8007188:	f105 0008 	add.w	r0, r5, #8
 800718c:	f7ff fade 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007190:	4604      	mov	r4, r0
        break;
 8007192:	e7ee      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x846>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007194:	2102      	movs	r1, #2
 8007196:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800719a:	f7ff fb4f 	bl	800683c <RCCEx_PLL3_Config>
 800719e:	e7f7      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x864>
 80071a0:	4626      	mov	r6, r4
 80071a2:	e6a2      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80071ac:	d003      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 80071ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071b2:	f47f aeac 	bne.w	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    if (ret == HAL_OK)
 80071b6:	b9ac      	cbnz	r4, 80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071b8:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80071ba:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80071be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80071c0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80071c4:	430b      	orrs	r3, r1
 80071c6:	6593      	str	r3, [r2, #88]	; 0x58
 80071c8:	e6a3      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ca:	2100      	movs	r1, #0
 80071cc:	f105 0008 	add.w	r0, r5, #8
 80071d0:	f7ff fabc 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071d4:	4604      	mov	r4, r0
        break;
 80071d6:	e7ee      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071d8:	2102      	movs	r1, #2
 80071da:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80071de:	f7ff fb2d 	bl	800683c <RCCEx_PLL3_Config>
 80071e2:	e7f7      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80071e4:	4626      	mov	r6, r4
 80071e6:	e694      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80071f0:	d003      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80071f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071f6:	f47f ae9e 	bne.w	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    if (ret == HAL_OK)
 80071fa:	b9ac      	cbnz	r4, 8007228 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071fc:	4a32      	ldr	r2, [pc, #200]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80071fe:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8007202:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007204:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007208:	430b      	orrs	r3, r1
 800720a:	6593      	str	r3, [r2, #88]	; 0x58
 800720c:	e695      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x60e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800720e:	2100      	movs	r1, #0
 8007210:	f105 0008 	add.w	r0, r5, #8
 8007214:	f7ff fa9a 	bl	800674c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007218:	4604      	mov	r4, r0
        break;
 800721a:	e7ee      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800721c:	2102      	movs	r1, #2
 800721e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007222:	f7ff fb0b 	bl	800683c <RCCEx_PLL3_Config>
 8007226:	e7f7      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007228:	4626      	mov	r6, r4
 800722a:	e686      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x60e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800722c:	2102      	movs	r1, #2
 800722e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007232:	f7ff fb03 	bl	800683c <RCCEx_PLL3_Config>
 8007236:	e6c3      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    switch (PeriphClkInit->AdcClockSelection)
 8007238:	2601      	movs	r6, #1
 800723a:	4634      	mov	r4, r6
 800723c:	e6cc      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800723e:	4626      	mov	r6, r4
 8007240:	e6ca      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007242:	2101      	movs	r1, #1
 8007244:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007248:	f7ff faf8 	bl	800683c <RCCEx_PLL3_Config>
 800724c:	4604      	mov	r4, r0
        break;
 800724e:	e6d8      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    switch (PeriphClkInit->UsbClockSelection)
 8007250:	2601      	movs	r6, #1
 8007252:	4634      	mov	r4, r6
 8007254:	e6e0      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8007256:	4626      	mov	r6, r4
 8007258:	e6de      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725a:	4a1b      	ldr	r2, [pc, #108]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800725c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800725e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007264:	b974      	cbnz	r4, 8007284 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8007268:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800726a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800726c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007270:	430b      	orrs	r3, r1
 8007272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007274:	e6dd      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x706>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007276:	2102      	movs	r1, #2
 8007278:	f105 0008 	add.w	r0, r5, #8
 800727c:	f7ff fa66 	bl	800674c <RCCEx_PLL2_Config>
 8007280:	4604      	mov	r4, r0
        break;
 8007282:	e7ef      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007284:	4626      	mov	r6, r4
 8007286:	e6d4      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x706>
    switch (PeriphClkInit->RngClockSelection)
 8007288:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800728c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007290:	f47f aee8 	bne.w	8007064 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if (ret == HAL_OK)
 8007294:	b964      	cbnz	r4, 80072b0 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007296:	4c0c      	ldr	r4, [pc, #48]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8007298:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800729a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800729e:	4302      	orrs	r2, r0
 80072a0:	6562      	str	r2, [r4, #84]	; 0x54
 80072a2:	e6e0      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a4:	4f08      	ldr	r7, [pc, #32]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80072a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80072ac:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 80072ae:	e7f1      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80072b0:	4626      	mov	r6, r4
 80072b2:	e6d8      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072b4:	2102      	movs	r1, #2
 80072b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80072ba:	f7ff fabf 	bl	800683c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f af3c 	beq.w	800713c <HAL_RCCEx_PeriphCLKConfig+0x810>
  return HAL_ERROR;
 80072c4:	2001      	movs	r0, #1
 80072c6:	e73c      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80072c8:	58024400 	.word	0x58024400

080072cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d13b      	bne.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	2302      	movs	r3, #2
 80072da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072de:	6803      	ldr	r3, [r0, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e8:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <HAL_TIM_Base_Start_IT+0x84>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d022      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f2:	d01f      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 80072f4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01b      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 80072fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007300:	4293      	cmp	r3, r2
 8007302:	d017      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 8007304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 800730c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007310:	4293      	cmp	r3, r2
 8007312:	d00f      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 8007314:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8007318:	4293      	cmp	r3, r2
 800731a:	d00b      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 800731c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007320:	4293      	cmp	r3, r2
 8007322:	d007      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 8007324:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <HAL_TIM_Base_Start_IT+0x64>
 800732c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007330:	4293      	cmp	r3, r2
 8007332:	d107      	bne.n	8007344 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007334:	6899      	ldr	r1, [r3, #8]
 8007336:	4a08      	ldr	r2, [pc, #32]	; (8007358 <HAL_TIM_Base_Start_IT+0x88>)
 8007338:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733a:	2a06      	cmp	r2, #6
 800733c:	d006      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x7c>
 800733e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007342:	d003      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800734c:	2000      	movs	r0, #0
}
 800734e:	4770      	bx	lr
    return HAL_ERROR;
 8007350:	2001      	movs	r0, #1
 8007352:	4770      	bx	lr
 8007354:	40010000 	.word	0x40010000
 8007358:	00010007 	.word	0x00010007

0800735c <HAL_TIM_OC_DelayElapsedCallback>:
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_IC_CaptureCallback>:
 800735e:	4770      	bx	lr

08007360 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007360:	4770      	bx	lr

08007362 <HAL_TIM_TriggerCallback>:
 8007362:	4770      	bx	lr

08007364 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007364:	6803      	ldr	r3, [r0, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	0791      	lsls	r1, r2, #30
{
 800736a:	b510      	push	{r4, lr}
 800736c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800736e:	d50f      	bpl.n	8007390 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	0792      	lsls	r2, r2, #30
 8007374:	d50c      	bpl.n	8007390 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007376:	f06f 0202 	mvn.w	r2, #2
 800737a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800737c:	2201      	movs	r2, #1
 800737e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	0799      	lsls	r1, r3, #30
 8007384:	f000 8085 	beq.w	8007492 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007388:	f7ff ffe9 	bl	800735e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738c:	2300      	movs	r3, #0
 800738e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	0752      	lsls	r2, r2, #29
 8007396:	d510      	bpl.n	80073ba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	0750      	lsls	r0, r2, #29
 800739c:	d50d      	bpl.n	80073ba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800739e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a6:	2202      	movs	r2, #2
 80073a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f413 7f40 	tst.w	r3, #768	; 0x300
 80073b0:	d075      	beq.n	800749e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	f7ff ffd4 	bl	800735e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b6:	2300      	movs	r3, #0
 80073b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	0711      	lsls	r1, r2, #28
 80073c0:	d50f      	bpl.n	80073e2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	0712      	lsls	r2, r2, #28
 80073c6:	d50c      	bpl.n	80073e2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d0:	2204      	movs	r2, #4
 80073d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	079b      	lsls	r3, r3, #30
 80073d8:	d067      	beq.n	80074aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80073da:	f7ff ffc0 	bl	800735e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	2300      	movs	r3, #0
 80073e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	06d0      	lsls	r0, r2, #27
 80073e8:	d510      	bpl.n	800740c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	06d1      	lsls	r1, r2, #27
 80073ee:	d50d      	bpl.n	800740c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f8:	2208      	movs	r2, #8
 80073fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007402:	d058      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8007404:	f7ff ffab 	bl	800735e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007408:	2300      	movs	r3, #0
 800740a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	07d2      	lsls	r2, r2, #31
 8007412:	d508      	bpl.n	8007426 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	07d0      	lsls	r0, r2, #31
 8007418:	d505      	bpl.n	8007426 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800741a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007420:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007422:	f7f9 fad9 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	0611      	lsls	r1, r2, #24
 800742c:	d508      	bpl.n	8007440 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	0612      	lsls	r2, r2, #24
 8007432:	d505      	bpl.n	8007440 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007434:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007438:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800743a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800743c:	f000 f8e1 	bl	8007602 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	05d0      	lsls	r0, r2, #23
 8007446:	d508      	bpl.n	800745a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	0611      	lsls	r1, r2, #24
 800744c:	d505      	bpl.n	800745a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800744e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007452:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007454:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007456:	f000 f8d5 	bl	8007604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	0652      	lsls	r2, r2, #25
 8007460:	d508      	bpl.n	8007474 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	0650      	lsls	r0, r2, #25
 8007466:	d505      	bpl.n	8007474 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007468:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800746c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800746e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007470:	f7ff ff77 	bl	8007362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	0691      	lsls	r1, r2, #26
 800747a:	d522      	bpl.n	80074c2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	0692      	lsls	r2, r2, #26
 8007480:	d51f      	bpl.n	80074c2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007482:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007486:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007488:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800748a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800748e:	f000 b8b7 	b.w	8007600 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	f7ff ff63 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff ff62 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
 800749c:	e776      	b.n	800738c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749e:	f7ff ff5d 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff ff5c 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
 80074a8:	e785      	b.n	80073b6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	f7ff ff57 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7ff ff56 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
 80074b4:	e793      	b.n	80073de <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	f7ff ff51 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff ff50 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
 80074c0:	e7a2      	b.n	8007408 <HAL_TIM_IRQHandler+0xa4>
}
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c4:	4a34      	ldr	r2, [pc, #208]	; (8007598 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 80074c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c8:	4290      	cmp	r0, r2
 80074ca:	d012      	beq.n	80074f2 <TIM_Base_SetConfig+0x2e>
 80074cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0x2e>
 80074d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80074d6:	4290      	cmp	r0, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x2e>
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	4290      	cmp	r0, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x2e>
 80074e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074e6:	4290      	cmp	r0, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x2e>
 80074ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80074ee:	4290      	cmp	r0, r2
 80074f0:	d119      	bne.n	8007526 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80074f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fa:	4a27      	ldr	r2, [pc, #156]	; (8007598 <TIM_Base_SetConfig+0xd4>)
 80074fc:	4290      	cmp	r0, r2
 80074fe:	d025      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007500:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007504:	d022      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007506:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800750a:	4290      	cmp	r0, r2
 800750c:	d01e      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 800750e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007512:	4290      	cmp	r0, r2
 8007514:	d01a      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800751a:	4290      	cmp	r0, r2
 800751c:	d016      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 800751e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007522:	4290      	cmp	r0, r2
 8007524:	d012      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007526:	4a1d      	ldr	r2, [pc, #116]	; (800759c <TIM_Base_SetConfig+0xd8>)
 8007528:	4290      	cmp	r0, r2
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 800752c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007530:	4290      	cmp	r0, r2
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007538:	4290      	cmp	r0, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 800753c:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8007540:	4290      	cmp	r0, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0x88>
 8007544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007548:	4290      	cmp	r0, r2
 800754a:	d103      	bne.n	8007554 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800754c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007550:	68ca      	ldr	r2, [r1, #12]
 8007552:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007554:	694a      	ldr	r2, [r1, #20]
 8007556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800755a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800755c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800755e:	688b      	ldr	r3, [r1, #8]
 8007560:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007562:	680b      	ldr	r3, [r1, #0]
 8007564:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <TIM_Base_SetConfig+0xd4>)
 8007568:	4298      	cmp	r0, r3
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0xc8>
 800756c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007570:	4298      	cmp	r0, r3
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0xc8>
 8007574:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007578:	4298      	cmp	r0, r3
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0xc8>
 800757c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007580:	4298      	cmp	r0, r3
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0xc8>
 8007584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007588:	4298      	cmp	r0, r3
 800758a:	d101      	bne.n	8007590 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800758c:	690b      	ldr	r3, [r1, #16]
 800758e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007590:	2301      	movs	r3, #1
 8007592:	6143      	str	r3, [r0, #20]
}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40014000 	.word	0x40014000

080075a0 <HAL_TIM_Base_Init>:
{
 80075a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80075a2:	4604      	mov	r4, r0
 80075a4:	b350      	cbz	r0, 80075fc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80075aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075ae:	b91b      	cbnz	r3, 80075b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80075b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80075b4:	f7ff fe8a 	bl	80072cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ba:	6820      	ldr	r0, [r4, #0]
 80075bc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80075be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c2:	f7ff ff7f 	bl	80074c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c6:	2301      	movs	r3, #1
  return HAL_OK;
 80075c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80075d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80075d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80075da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80075de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80075f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80075fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80075fc:	2001      	movs	r0, #1
 80075fe:	e7fc      	b.n	80075fa <HAL_TIM_Base_Init+0x5a>

08007600 <HAL_TIMEx_CommutCallback>:
 8007600:	4770      	bx	lr

08007602 <HAL_TIMEx_BreakCallback>:
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_Break2Callback>:
 8007604:	4770      	bx	lr

08007606 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007606:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007608:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800760c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800760e:	f001 fe57 	bl	80092c0 <xTaskGetSchedulerState>
 8007612:	2801      	cmp	r0, #1
 8007614:	d003      	beq.n	800761e <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8007616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800761a:	f000 bbdb 	b.w	8007dd4 <xPortSysTickHandler>
}
 800761e:	bd08      	pop	{r3, pc}

08007620 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007620:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007624:	b92b      	cbnz	r3, 8007632 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <osKernelInitialize+0x20>)
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	b928      	cbnz	r0, 8007638 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007630:	4770      	bx	lr
    stat = osErrorISR;
 8007632:	f06f 0005 	mvn.w	r0, #5
 8007636:	4770      	bx	lr
    } else {
      stat = osError;
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	24002330 	.word	0x24002330

08007644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007644:	b510      	push	{r4, lr}
 8007646:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800764a:	b95c      	cbnz	r4, 8007664 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800764c:	4b08      	ldr	r3, [pc, #32]	; (8007670 <osKernelStart+0x2c>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	2a01      	cmp	r2, #1
 8007652:	d10a      	bne.n	800766a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007654:	4a07      	ldr	r2, [pc, #28]	; (8007674 <osKernelStart+0x30>)
 8007656:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007658:	2202      	movs	r2, #2
 800765a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800765c:	f001 fcca 	bl	8008ff4 <vTaskStartScheduler>
      stat = osOK;
 8007660:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8007662:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007664:	f06f 0005 	mvn.w	r0, #5
 8007668:	e7fb      	b.n	8007662 <osKernelStart+0x1e>
      stat = osError;
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800766e:	e7f8      	b.n	8007662 <osKernelStart+0x1e>
 8007670:	24002330 	.word	0x24002330
 8007674:	e000ed00 	.word	0xe000ed00

08007678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767a:	4614      	mov	r4, r2
 800767c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800767e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007680:	460b      	mov	r3, r1
  hTask = NULL;
 8007682:	9205      	str	r2, [sp, #20]
 8007684:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007688:	b9d2      	cbnz	r2, 80076c0 <osThreadNew+0x48>
 800768a:	b1c8      	cbz	r0, 80076c0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800768c:	2c00      	cmp	r4, #0
 800768e:	d02f      	beq.n	80076f0 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007690:	69a5      	ldr	r5, [r4, #24]
 8007692:	2d00      	cmp	r5, #0
 8007694:	bf08      	it	eq
 8007696:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007698:	1e69      	subs	r1, r5, #1
 800769a:	46ac      	mov	ip, r5
 800769c:	2937      	cmp	r1, #55	; 0x37
 800769e:	d82b      	bhi.n	80076f8 <osThreadNew+0x80>
 80076a0:	6861      	ldr	r1, [r4, #4]
 80076a2:	07c9      	lsls	r1, r1, #31
 80076a4:	d428      	bmi.n	80076f8 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80076a6:	6966      	ldr	r6, [r4, #20]
 80076a8:	b16e      	cbz	r6, 80076c6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076aa:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80076ac:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076ae:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80076b2:	b157      	cbz	r7, 80076ca <osThreadNew+0x52>
 80076b4:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 80076b8:	d902      	bls.n	80076c0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076ba:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076bc:	b104      	cbz	r4, 80076c0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076be:	b9ee      	cbnz	r6, 80076fc <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076c0:	9805      	ldr	r0, [sp, #20]
}
 80076c2:	b007      	add	sp, #28
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80076c6:	2280      	movs	r2, #128	; 0x80
 80076c8:	e7f0      	b.n	80076ac <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076ca:	f1be 0f00 	cmp.w	lr, #0
 80076ce:	d1f7      	bne.n	80076c0 <osThreadNew+0x48>
      if (mem == 0) {
 80076d0:	6924      	ldr	r4, [r4, #16]
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d1f4      	bne.n	80076c0 <osThreadNew+0x48>
 80076d6:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076d8:	a905      	add	r1, sp, #20
 80076da:	b292      	uxth	r2, r2
 80076dc:	e9cd c100 	strd	ip, r1, [sp]
 80076e0:	4621      	mov	r1, r4
 80076e2:	f001 fb01 	bl	8008ce8 <xTaskCreate>
 80076e6:	2801      	cmp	r0, #1
            hTask = NULL;
 80076e8:	bf1c      	itt	ne
 80076ea:	2300      	movne	r3, #0
 80076ec:	9305      	strne	r3, [sp, #20]
 80076ee:	e7e7      	b.n	80076c0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 80076f0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	e7ef      	b.n	80076d8 <osThreadNew+0x60>
        return (NULL);
 80076f8:	4610      	mov	r0, r2
 80076fa:	e7e2      	b.n	80076c2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076fc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007700:	9500      	str	r5, [sp, #0]
 8007702:	f001 fab9 	bl	8008c78 <xTaskCreateStatic>
 8007706:	9005      	str	r0, [sp, #20]
 8007708:	e7da      	b.n	80076c0 <osThreadNew+0x48>

0800770a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800770a:	b510      	push	{r4, lr}
 800770c:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007710:	b924      	cbnz	r4, 800771c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8007712:	b110      	cbz	r0, 800771a <osDelay+0x10>
      vTaskDelay(ticks);
 8007714:	f001 fc2e 	bl	8008f74 <vTaskDelay>
    stat = osOK;
 8007718:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800771a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800771c:	f06f 0005 	mvn.w	r0, #5
 8007720:	e7fb      	b.n	800771a <osDelay+0x10>

08007722 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007724:	4604      	mov	r4, r0
 8007726:	460e      	mov	r6, r1
 8007728:	4615      	mov	r5, r2
 800772a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800772e:	b11a      	cbz	r2, 8007738 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007730:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007732:	4620      	mov	r0, r4
 8007734:	b003      	add	sp, #12
 8007736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007738:	2800      	cmp	r0, #0
 800773a:	d0f9      	beq.n	8007730 <osSemaphoreNew+0xe>
 800773c:	4288      	cmp	r0, r1
 800773e:	d3f7      	bcc.n	8007730 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8007740:	b1e5      	cbz	r5, 800777c <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007742:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8007746:	b1bb      	cbz	r3, 8007778 <osSemaphoreNew+0x56>
 8007748:	2f4f      	cmp	r7, #79	; 0x4f
 800774a:	d9f1      	bls.n	8007730 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800774c:	2801      	cmp	r0, #1
 800774e:	d12a      	bne.n	80077a6 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007750:	2103      	movs	r1, #3
 8007752:	9100      	str	r1, [sp, #0]
 8007754:	4611      	mov	r1, r2
 8007756:	f000 fce5 	bl	8008124 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800775a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800775c:	2800      	cmp	r0, #0
 800775e:	d0e7      	beq.n	8007730 <osSemaphoreNew+0xe>
 8007760:	b1de      	cbz	r6, 800779a <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007762:	2300      	movs	r3, #0
 8007764:	461a      	mov	r2, r3
 8007766:	4619      	mov	r1, r3
 8007768:	f000 fd91 	bl	800828e <xQueueGenericSend>
 800776c:	2801      	cmp	r0, #1
 800776e:	d014      	beq.n	800779a <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8007770:	4620      	mov	r0, r4
 8007772:	f001 f8cd 	bl	8008910 <vQueueDelete>
 8007776:	e7db      	b.n	8007730 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007778:	2f00      	cmp	r7, #0
 800777a:	d1d9      	bne.n	8007730 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800777c:	2c01      	cmp	r4, #1
 800777e:	d105      	bne.n	800778c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8007780:	2203      	movs	r2, #3
 8007782:	2100      	movs	r1, #0
 8007784:	4620      	mov	r0, r4
 8007786:	f000 fd1b 	bl	80081c0 <xQueueGenericCreate>
 800778a:	e7e6      	b.n	800775a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800778c:	4620      	mov	r0, r4
 800778e:	4631      	mov	r1, r6
 8007790:	f000 fd5f 	bl	8008252 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007794:	4604      	mov	r4, r0
 8007796:	2800      	cmp	r0, #0
 8007798:	d0ca      	beq.n	8007730 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800779a:	b955      	cbnz	r5, 80077b2 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800779c:	4629      	mov	r1, r5
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 f890 	bl	80088c4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80077a4:	e7c5      	b.n	8007732 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80077a6:	461a      	mov	r2, r3
 80077a8:	f000 fd31 	bl	800820e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80077ac:	4604      	mov	r4, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d0be      	beq.n	8007730 <osSemaphoreNew+0xe>
          name = attr->name;
 80077b2:	682d      	ldr	r5, [r5, #0]
 80077b4:	e7f2      	b.n	800779c <osSemaphoreNew+0x7a>

080077b6 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80077b6:	b513      	push	{r0, r1, r4, lr}
 80077b8:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80077ba:	b308      	cbz	r0, 8007800 <osSemaphoreAcquire+0x4a>
 80077bc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80077c0:	b1b3      	cbz	r3, 80077f0 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 80077c2:	b9e9      	cbnz	r1, 8007800 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077c4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80077c6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077c8:	f001 f82c 	bl	8008824 <xQueueReceiveFromISR>
 80077cc:	2801      	cmp	r0, #1
 80077ce:	d114      	bne.n	80077fa <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80077d0:	9b01      	ldr	r3, [sp, #4]
 80077d2:	b913      	cbnz	r3, 80077da <osSemaphoreAcquire+0x24>
  stat = osOK;
 80077d4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80077d6:	b002      	add	sp, #8
 80077d8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80077da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	e7f1      	b.n	80077d4 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077f0:	f000 ff55 	bl	800869e <xQueueSemaphoreTake>
 80077f4:	2801      	cmp	r0, #1
 80077f6:	d0ed      	beq.n	80077d4 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 80077f8:	b92c      	cbnz	r4, 8007806 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 80077fa:	f06f 0002 	mvn.w	r0, #2
 80077fe:	e7ea      	b.n	80077d6 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007800:	f06f 0003 	mvn.w	r0, #3
 8007804:	e7e7      	b.n	80077d6 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 8007806:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800780a:	e7e4      	b.n	80077d6 <osSemaphoreAcquire+0x20>

0800780c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800780c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800780e:	b310      	cbz	r0, 8007856 <osSemaphoreRelease+0x4a>
 8007810:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007814:	b1b3      	cbz	r3, 8007844 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8007816:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007818:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800781a:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800781c:	f000 fe4c 	bl	80084b8 <xQueueGiveFromISR>
 8007820:	2801      	cmp	r0, #1
 8007822:	d115      	bne.n	8007850 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	b913      	cbnz	r3, 800782e <osSemaphoreRelease+0x22>
  stat = osOK;
 8007828:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800782a:	b002      	add	sp, #8
 800782c:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800782e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	e7f1      	b.n	8007828 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007844:	461a      	mov	r2, r3
 8007846:	4619      	mov	r1, r3
 8007848:	f000 fd21 	bl	800828e <xQueueGenericSend>
 800784c:	2801      	cmp	r0, #1
 800784e:	d0eb      	beq.n	8007828 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8007850:	f06f 0002 	mvn.w	r0, #2
 8007854:	e7e9      	b.n	800782a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007856:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800785a:	e7e6      	b.n	800782a <osSemaphoreRelease+0x1e>

0800785c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800785c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800785e:	4605      	mov	r5, r0
 8007860:	460e      	mov	r6, r1
 8007862:	4614      	mov	r4, r2
 8007864:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007868:	b11f      	cbz	r7, 8007872 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800786a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800786c:	4628      	mov	r0, r5
 800786e:	b003      	add	sp, #12
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007872:	2800      	cmp	r0, #0
 8007874:	d0f9      	beq.n	800786a <osMessageQueueNew+0xe>
 8007876:	2900      	cmp	r1, #0
 8007878:	d0f7      	beq.n	800786a <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800787a:	b1da      	cbz	r2, 80078b4 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800787c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8007880:	b183      	cbz	r3, 80078a4 <osMessageQueueNew+0x48>
 8007882:	2a4f      	cmp	r2, #79	; 0x4f
 8007884:	d9f1      	bls.n	800786a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007886:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007888:	2a00      	cmp	r2, #0
 800788a:	d0ee      	beq.n	800786a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800788c:	434d      	muls	r5, r1
 800788e:	6966      	ldr	r6, [r4, #20]
 8007890:	42ae      	cmp	r6, r5
 8007892:	d3ea      	bcc.n	800786a <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007894:	9700      	str	r7, [sp, #0]
 8007896:	f000 fc45 	bl	8008124 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800789a:	4605      	mov	r5, r0
 800789c:	2800      	cmp	r0, #0
 800789e:	d0e4      	beq.n	800786a <osMessageQueueNew+0xe>
        name = attr->name;
 80078a0:	6824      	ldr	r4, [r4, #0]
 80078a2:	e011      	b.n	80078c8 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d1e0      	bne.n	800786a <osMessageQueueNew+0xe>
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1dd      	bne.n	800786a <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078ae:	6963      	ldr	r3, [r4, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1da      	bne.n	800786a <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80078b4:	4628      	mov	r0, r5
 80078b6:	2200      	movs	r2, #0
 80078b8:	4631      	mov	r1, r6
 80078ba:	f000 fc81 	bl	80081c0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80078be:	4605      	mov	r5, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d0d2      	beq.n	800786a <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	d1eb      	bne.n	80078a0 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 fffa 	bl	80088c4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80078d0:	e7cc      	b.n	800786c <osMessageQueueNew+0x10>

080078d2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d4:	461c      	mov	r4, r3
 80078d6:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80078da:	b1c6      	cbz	r6, 800790e <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078dc:	b318      	cbz	r0, 8007926 <osMessageQueuePut+0x54>
 80078de:	b311      	cbz	r1, 8007926 <osMessageQueuePut+0x54>
 80078e0:	bb0b      	cbnz	r3, 8007926 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80078e2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80078e4:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80078e6:	f000 fd85 	bl	80083f4 <xQueueGenericSendFromISR>
 80078ea:	2801      	cmp	r0, #1
 80078ec:	d118      	bne.n	8007920 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80078ee:	9b01      	ldr	r3, [sp, #4]
 80078f0:	b913      	cbnz	r3, 80078f8 <osMessageQueuePut+0x26>
  stat = osOK;
 80078f2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80078f4:	b002      	add	sp, #8
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80078f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007900:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	e7f1      	b.n	80078f2 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800790e:	b150      	cbz	r0, 8007926 <osMessageQueuePut+0x54>
 8007910:	b149      	cbz	r1, 8007926 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007912:	4633      	mov	r3, r6
 8007914:	4622      	mov	r2, r4
 8007916:	f000 fcba 	bl	800828e <xQueueGenericSend>
 800791a:	2801      	cmp	r0, #1
 800791c:	d0e9      	beq.n	80078f2 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800791e:	b92c      	cbnz	r4, 800792c <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8007920:	f06f 0002 	mvn.w	r0, #2
 8007924:	e7e6      	b.n	80078f4 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8007926:	f06f 0003 	mvn.w	r0, #3
 800792a:	e7e3      	b.n	80078f4 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800792c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007930:	e7e0      	b.n	80078f4 <osMessageQueuePut+0x22>

08007932 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007932:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007934:	461c      	mov	r4, r3
 8007936:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800793a:	b1c3      	cbz	r3, 800796e <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800793c:	b310      	cbz	r0, 8007984 <osMessageQueueGet+0x52>
 800793e:	b309      	cbz	r1, 8007984 <osMessageQueueGet+0x52>
 8007940:	bb04      	cbnz	r4, 8007984 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007942:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007944:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007946:	f000 ff6d 	bl	8008824 <xQueueReceiveFromISR>
 800794a:	2801      	cmp	r0, #1
 800794c:	d117      	bne.n	800797e <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	b913      	cbnz	r3, 8007958 <osMessageQueueGet+0x26>
  stat = osOK;
 8007952:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007954:	b003      	add	sp, #12
 8007956:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007958:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	e7f1      	b.n	8007952 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800796e:	b148      	cbz	r0, 8007984 <osMessageQueueGet+0x52>
 8007970:	b141      	cbz	r1, 8007984 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007972:	4622      	mov	r2, r4
 8007974:	f000 fdf4 	bl	8008560 <xQueueReceive>
 8007978:	2801      	cmp	r0, #1
 800797a:	d0ea      	beq.n	8007952 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800797c:	b92c      	cbnz	r4, 800798a <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800797e:	f06f 0002 	mvn.w	r0, #2
 8007982:	e7e7      	b.n	8007954 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 8007984:	f06f 0003 	mvn.w	r0, #3
 8007988:	e7e4      	b.n	8007954 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800798a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800798e:	e7e1      	b.n	8007954 <osMessageQueueGet+0x22>

08007990 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <vApplicationGetIdleTaskMemory+0x10>)
 8007992:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007994:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <vApplicationGetIdleTaskMemory+0x14>)
 8007996:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007998:	2380      	movs	r3, #128	; 0x80
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	24002270 	.word	0x24002270
 80079a4:	24002070 	.word	0x24002070

080079a8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079a8:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <vApplicationGetTimerTaskMemory+0x10>)
 80079aa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079ac:	4b03      	ldr	r3, [pc, #12]	; (80079bc <vApplicationGetTimerTaskMemory+0x14>)
 80079ae:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b4:	6013      	str	r3, [r2, #0]
}
 80079b6:	4770      	bx	lr
 80079b8:	24002734 	.word	0x24002734
 80079bc:	24002334 	.word	0x24002334

080079c0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079c0:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <prvInsertBlockIntoFreeList+0x40>)
{
 80079c2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079c4:	461a      	mov	r2, r3
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4283      	cmp	r3, r0
 80079ca:	d3fb      	bcc.n	80079c4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079cc:	6854      	ldr	r4, [r2, #4]
 80079ce:	1911      	adds	r1, r2, r4
 80079d0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d2:	bf01      	itttt	eq
 80079d4:	6841      	ldreq	r1, [r0, #4]
 80079d6:	4610      	moveq	r0, r2
 80079d8:	1909      	addeq	r1, r1, r4
 80079da:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079dc:	6844      	ldr	r4, [r0, #4]
 80079de:	1901      	adds	r1, r0, r4
 80079e0:	428b      	cmp	r3, r1
 80079e2:	d107      	bne.n	80079f4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079e4:	4907      	ldr	r1, [pc, #28]	; (8007a04 <prvInsertBlockIntoFreeList+0x44>)
 80079e6:	6809      	ldr	r1, [r1, #0]
 80079e8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079ea:	bf1f      	itttt	ne
 80079ec:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ee:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079f0:	1909      	addne	r1, r1, r4
 80079f2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079f4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079f6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079f8:	bf18      	it	ne
 80079fa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	2400640c 	.word	0x2400640c
 8007a04:	240027f4 	.word	0x240027f4

08007a08 <pvPortMalloc>:
{
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a0e:	f001 f999 	bl	8008d44 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a12:	4842      	ldr	r0, [pc, #264]	; (8007b1c <pvPortMalloc+0x114>)
 8007a14:	4d42      	ldr	r5, [pc, #264]	; (8007b20 <pvPortMalloc+0x118>)
 8007a16:	6803      	ldr	r3, [r0, #0]
 8007a18:	bb0b      	cbnz	r3, 8007a5e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8007a1a:	4942      	ldr	r1, [pc, #264]	; (8007b24 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a1c:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1e:	4e42      	ldr	r6, [pc, #264]	; (8007b28 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a20:	bf1b      	ittet	ne
 8007a22:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a24:	f501 5270 	addne.w	r2, r1, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a28:	f44f 5270 	moveq.w	r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a2c:	f023 0307 	bicne.w	r3, r3, #7
 8007a30:	bf1c      	itt	ne
 8007a32:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a34:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8007a36:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a38:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a3a:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a3c:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8007a3e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a40:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007a44:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a48:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8007a4a:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a4c:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a50:	4a36      	ldr	r2, [pc, #216]	; (8007b2c <pvPortMalloc+0x124>)
 8007a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a54:	4a36      	ldr	r2, [pc, #216]	; (8007b30 <pvPortMalloc+0x128>)
 8007a56:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a5c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a5e:	682f      	ldr	r7, [r5, #0]
 8007a60:	4227      	tst	r7, r4
 8007a62:	d155      	bne.n	8007b10 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	d046      	beq.n	8007af6 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8007a68:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a6c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a6e:	bf1c      	itt	ne
 8007a70:	f023 0307 	bicne.w	r3, r3, #7
 8007a74:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04a      	beq.n	8007b10 <pvPortMalloc+0x108>
 8007a7a:	4c2d      	ldr	r4, [pc, #180]	; (8007b30 <pvPortMalloc+0x128>)
 8007a7c:	6826      	ldr	r6, [r4, #0]
 8007a7e:	429e      	cmp	r6, r3
 8007a80:	d346      	bcc.n	8007b10 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8007a82:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <pvPortMalloc+0x120>)
 8007a84:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a86:	6869      	ldr	r1, [r5, #4]
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d204      	bcs.n	8007a96 <pvPortMalloc+0x8e>
 8007a8c:	f8d5 c000 	ldr.w	ip, [r5]
 8007a90:	f1bc 0f00 	cmp.w	ip, #0
 8007a94:	d115      	bne.n	8007ac2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	42a8      	cmp	r0, r5
 8007a9a:	d039      	beq.n	8007b10 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a9c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a9e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aa0:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aa4:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aa6:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aa8:	d912      	bls.n	8007ad0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aaa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aac:	0742      	lsls	r2, r0, #29
 8007aae:	d00b      	beq.n	8007ac8 <pvPortMalloc+0xc0>
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	e7fe      	b.n	8007ac0 <pvPortMalloc+0xb8>
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4665      	mov	r5, ip
 8007ac6:	e7de      	b.n	8007a86 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007aca:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007acc:	f7ff ff78 	bl	80079c0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ad2:	4916      	ldr	r1, [pc, #88]	; (8007b2c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ad6:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8007ad8:	4a16      	ldr	r2, [pc, #88]	; (8007b34 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 8007ada:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007adc:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007ade:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007ae0:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ae2:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ae4:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ae6:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 8007aea:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007aee:	bf38      	it	cc
 8007af0:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007af2:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8007af4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8007af6:	f001 f9c9 	bl	8008e8c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007afa:	0763      	lsls	r3, r4, #29
 8007afc:	d00a      	beq.n	8007b14 <pvPortMalloc+0x10c>
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	e7fe      	b.n	8007b0e <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8007b10:	2400      	movs	r4, #0
 8007b12:	e7f0      	b.n	8007af6 <pvPortMalloc+0xee>
}
 8007b14:	4620      	mov	r0, r4
 8007b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1a:	bf00      	nop
 8007b1c:	240027f4 	.word	0x240027f4
 8007b20:	240063f8 	.word	0x240063f8
 8007b24:	240027f8 	.word	0x240027f8
 8007b28:	2400640c 	.word	0x2400640c
 8007b2c:	24006400 	.word	0x24006400
 8007b30:	240063fc 	.word	0x240063fc
 8007b34:	24006404 	.word	0x24006404

08007b38 <vPortFree>:
{
 8007b38:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	b390      	cbz	r0, 8007ba4 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <vPortFree+0x70>)
 8007b40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	4213      	tst	r3, r2
 8007b48:	d108      	bne.n	8007b5c <vPortFree+0x24>
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	e7fe      	b.n	8007b5a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b5c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007b60:	b141      	cbz	r1, 8007b74 <vPortFree+0x3c>
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	e7fe      	b.n	8007b72 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b74:	ea23 0302 	bic.w	r3, r3, r2
 8007b78:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007b7c:	f001 f8e2 	bl	8008d44 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <vPortFree+0x74>)
 8007b82:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b86:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b8a:	6811      	ldr	r1, [r2, #0]
 8007b8c:	440b      	add	r3, r1
 8007b8e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b90:	f7ff ff16 	bl	80079c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b94:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <vPortFree+0x78>)
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	3301      	adds	r3, #1
}
 8007b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007b9e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007ba0:	f001 b974 	b.w	8008e8c <xTaskResumeAll>
}
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	240063f8 	.word	0x240063f8
 8007bac:	240063fc 	.word	0x240063fc
 8007bb0:	24006408 	.word	0x24006408

08007bb4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bb4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bbc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bbe:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bc8:	4770      	bx	lr

08007bca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bce:	4770      	bx	lr

08007bd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bd0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bd2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007bd4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bdc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007bde:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007be0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007be2:	3301      	adds	r3, #1
 8007be4:	6003      	str	r3, [r0, #0]
}
 8007be6:	4770      	bx	lr

08007be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bea:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bec:	1c63      	adds	r3, r4, #1
 8007bee:	d10a      	bne.n	8007c06 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bf0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bf6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bf8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bfa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007bfc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007bfe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c00:	3301      	adds	r3, #1
 8007c02:	6003      	str	r3, [r0, #0]
}
 8007c04:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c06:	f100 0208 	add.w	r2, r0, #8
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	6852      	ldr	r2, [r2, #4]
 8007c0e:	6815      	ldr	r5, [r2, #0]
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	d9fa      	bls.n	8007c0a <vListInsert+0x22>
 8007c14:	e7ed      	b.n	8007bf2 <vListInsert+0xa>

08007c16 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c16:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c18:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007c1c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c20:	6859      	ldr	r1, [r3, #4]
 8007c22:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c24:	bf08      	it	eq
 8007c26:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c28:	2200      	movs	r2, #0
 8007c2a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c32:	6818      	ldr	r0, [r3, #0]
}
 8007c34:	4770      	bx	lr
	...

08007c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <prvPortStartFirstTask+0x24>)
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	6800      	ldr	r0, [r0, #0]
 8007c3e:	f380 8808 	msr	MSP, r0
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8814 	msr	CONTROL, r0
 8007c4a:	b662      	cpsie	i
 8007c4c:	b661      	cpsie	f
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	df00      	svc	0
 8007c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c5a:	0000      	.short	0x0000
 8007c5c:	e000ed08 	.word	0xe000ed08

08007c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c70 <vPortEnableVFP+0x10>
 8007c64:	6801      	ldr	r1, [r0, #0]
 8007c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c6a:	6001      	str	r1, [r0, #0]
 8007c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c6e:	0000      	.short	0x0000
 8007c70:	e000ed88 	.word	0xe000ed88

08007c74 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007c74:	2300      	movs	r3, #0
{
 8007c76:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007c78:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <prvTaskExitError+0x3c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	d008      	beq.n	8007c94 <prvTaskExitError+0x20>
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	e7fe      	b.n	8007c92 <prvTaskExitError+0x1e>
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0fc      	beq.n	8007ca4 <prvTaskExitError+0x30>
}
 8007caa:	b002      	add	sp, #8
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	2400004c 	.word	0x2400004c

08007cb4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cb8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cbc:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007cc0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cc2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cc4:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cc6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cc8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cca:	f06f 0302 	mvn.w	r3, #2
 8007cce:	6203      	str	r3, [r0, #32]
}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	08007c75 	.word	0x08007c75
	...

08007ce0 <SVC_Handler>:
	__asm volatile (
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <pxCurrentTCBConst2>)
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	f380 8809 	msr	PSP, r0
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	4770      	bx	lr
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst2>:
 8007d00:	2400645c 	.word	0x2400645c

08007d04 <vPortEnterCritical>:
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <vPortEnterCritical+0x3c>)
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007d1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007d1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007d1e:	d10e      	bne.n	8007d3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	b143      	cbz	r3, 8007d3e <vPortEnterCritical+0x3a>
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	e7fe      	b.n	8007d3c <vPortEnterCritical+0x38>
}
 8007d3e:	4770      	bx	lr
 8007d40:	2400004c 	.word	0x2400004c

08007d44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007d44:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <vPortExitCritical+0x24>)
 8007d46:	6813      	ldr	r3, [r2, #0]
 8007d48:	b943      	cbnz	r3, 8007d5c <vPortExitCritical+0x18>
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	e7fe      	b.n	8007d5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d60:	b90b      	cbnz	r3, 8007d66 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d62:	f383 8811 	msr	BASEPRI, r3
}
 8007d66:	4770      	bx	lr
 8007d68:	2400004c 	.word	0x2400004c
 8007d6c:	00000000 	.word	0x00000000

08007d70 <PendSV_Handler>:
	__asm volatile
 8007d70:	f3ef 8009 	mrs	r0, PSP
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <pxCurrentTCBConst>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f01e 0f10 	tst.w	lr, #16
 8007d80:	bf08      	it	eq
 8007d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d94:	f380 8811 	msr	BASEPRI, r0
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f001 f97c 	bl	800909c <vTaskSwitchContext>
 8007da4:	f04f 0000 	mov.w	r0, #0
 8007da8:	f380 8811 	msr	BASEPRI, r0
 8007dac:	bc09      	pop	{r0, r3}
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	6808      	ldr	r0, [r1, #0]
 8007db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db6:	f01e 0f10 	tst.w	lr, #16
 8007dba:	bf08      	it	eq
 8007dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dc0:	f380 8809 	msr	PSP, r0
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w

08007dd0 <pxCurrentTCBConst>:
 8007dd0:	2400645c 	.word	0x2400645c

08007dd4 <xPortSysTickHandler>:
{
 8007dd4:	b508      	push	{r3, lr}
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007de6:	f000 ffbb 	bl	8008d60 <xTaskIncrementTick>
 8007dea:	b128      	cbz	r0, 8007df8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bd08      	pop	{r3, pc}

08007e00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007e04:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e0a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e0c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e0e:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <vPortSetupTimerInterrupt+0x20>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e16:	3b01      	subs	r3, #1
 8007e18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e1a:	2307      	movs	r3, #7
 8007e1c:	6113      	str	r3, [r2, #16]
}
 8007e1e:	4770      	bx	lr
 8007e20:	2400003c 	.word	0x2400003c

08007e24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8007e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8007e2e:	4a3a      	ldr	r2, [pc, #232]	; (8007f18 <xPortStartScheduler+0xf4>)
 8007e30:	4291      	cmp	r1, r2
 8007e32:	d108      	bne.n	8007e46 <xPortStartScheduler+0x22>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	e7fe      	b.n	8007e44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007e4a:	4b34      	ldr	r3, [pc, #208]	; (8007f1c <xPortStartScheduler+0xf8>)
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d108      	bne.n	8007e62 <xPortStartScheduler+0x3e>
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	e7fe      	b.n	8007e60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e62:	4b2f      	ldr	r3, [pc, #188]	; (8007f20 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e64:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e70:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e72:	4a2c      	ldr	r2, [pc, #176]	; (8007f24 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e82:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e84:	2307      	movs	r3, #7
 8007e86:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <xPortStartScheduler+0x104>)
 8007e88:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007e8e:	1e5c      	subs	r4, r3, #1
 8007e90:	0600      	lsls	r0, r0, #24
 8007e92:	d40c      	bmi.n	8007eae <xPortStartScheduler+0x8a>
 8007e94:	b111      	cbz	r1, 8007e9c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	d011      	beq.n	8007ec0 <xPortStartScheduler+0x9c>
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	e7fe      	b.n	8007eac <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f88d 3003 	strb.w	r3, [sp, #3]
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	e7e4      	b.n	8007e8a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ec0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ec4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007ec8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eca:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <xPortStartScheduler+0xfc>)
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ed4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007edc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ee0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007ee4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ee8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007eec:	f7ff ff88 	bl	8007e00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <xPortStartScheduler+0x108>)
 8007ef2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007ef4:	f7ff feb4 	bl	8007c60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ef8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007efc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f00:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007f04:	f7ff fe98 	bl	8007c38 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007f08:	f001 f8c8 	bl	800909c <vTaskSwitchContext>
}
 8007f0c:	4628      	mov	r0, r5
	prvTaskExitError();
 8007f0e:	f7ff feb1 	bl	8007c74 <prvTaskExitError>
}
 8007f12:	b003      	add	sp, #12
 8007f14:	bd30      	pop	{r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	410fc271 	.word	0x410fc271
 8007f1c:	410fc270 	.word	0x410fc270
 8007f20:	e000e400 	.word	0xe000e400
 8007f24:	24006414 	.word	0x24006414
 8007f28:	24006418 	.word	0x24006418
 8007f2c:	2400004c 	.word	0x2400004c

08007f30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d90e      	bls.n	8007f56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f38:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <vPortValidateInterruptPriority+0x50>)
 8007f3a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f3c:	4a11      	ldr	r2, [pc, #68]	; (8007f84 <vPortValidateInterruptPriority+0x54>)
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d908      	bls.n	8007f56 <vPortValidateInterruptPriority+0x26>
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	e7fe      	b.n	8007f54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f5a:	4a0b      	ldr	r2, [pc, #44]	; (8007f88 <vPortValidateInterruptPriority+0x58>)
 8007f5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d908      	bls.n	8007f7c <vPortValidateInterruptPriority+0x4c>
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	e7fe      	b.n	8007f7a <vPortValidateInterruptPriority+0x4a>
	}
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	e000e3f0 	.word	0xe000e3f0
 8007f84:	24006414 	.word	0x24006414
 8007f88:	24006418 	.word	0x24006418

08007f8c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f90:	f7ff feb8 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007f96:	f7ff fed5 	bl	8007d44 <vPortExitCritical>

	return xReturn;
}
 8007f9a:	fab4 f084 	clz	r0, r4
 8007f9e:	0940      	lsrs	r0, r0, #5
 8007fa0:	bd10      	pop	{r4, pc}

08007fa2 <prvCopyDataToQueue>:
{
 8007fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007fa8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007faa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fac:	b952      	cbnz	r2, 8007fc4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fae:	6807      	ldr	r7, [r0, #0]
 8007fb0:	bb47      	cbnz	r7, 8008004 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fb2:	6880      	ldr	r0, [r0, #8]
 8007fb4:	f001 f9d4 	bl	8009360 <xTaskPriorityDisinherit>
 8007fb8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fba:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fbc:	3601      	adds	r6, #1
}
 8007fbe:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fc0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007fc4:	b965      	cbnz	r5, 8007fe0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fc6:	6840      	ldr	r0, [r0, #4]
 8007fc8:	f00e ff74 	bl	8016eb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007fd0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd8:	d3f0      	bcc.n	8007fbc <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	e7ed      	b.n	8007fbc <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fe0:	68c0      	ldr	r0, [r0, #12]
 8007fe2:	f00e ff67 	bl	8016eb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fe6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007fe8:	68e3      	ldr	r3, [r4, #12]
 8007fea:	4251      	negs	r1, r2
 8007fec:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ff4:	bf3e      	ittt	cc
 8007ff6:	68a3      	ldrcc	r3, [r4, #8]
 8007ff8:	185b      	addcc	r3, r3, r1
 8007ffa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007ffc:	2d02      	cmp	r5, #2
 8007ffe:	d101      	bne.n	8008004 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008000:	b116      	cbz	r6, 8008008 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8008002:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008004:	2500      	movs	r5, #0
 8008006:	e7d9      	b.n	8007fbc <prvCopyDataToQueue+0x1a>
 8008008:	4635      	mov	r5, r6
 800800a:	e7d7      	b.n	8007fbc <prvCopyDataToQueue+0x1a>

0800800c <prvCopyDataFromQueue>:
{
 800800c:	4603      	mov	r3, r0
 800800e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008012:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008014:	b162      	cbz	r2, 8008030 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008016:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008018:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800801a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800801c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800801e:	60dc      	str	r4, [r3, #12]
}
 8008020:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008024:	bf24      	itt	cs
 8008026:	6819      	ldrcs	r1, [r3, #0]
 8008028:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800802a:	68d9      	ldr	r1, [r3, #12]
 800802c:	f00e bf42 	b.w	8016eb4 <memcpy>
}
 8008030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008034:	4770      	bx	lr

08008036 <prvUnlockQueue>:
{
 8008036:	b570      	push	{r4, r5, r6, lr}
 8008038:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800803a:	f7ff fe63 	bl	8007d04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800803e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008042:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008046:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008048:	2d00      	cmp	r5, #0
 800804a:	dc14      	bgt.n	8008076 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800804c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008056:	f7ff fe75 	bl	8007d44 <vPortExitCritical>
	taskENTER_CRITICAL();
 800805a:	f7ff fe53 	bl	8007d04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800805e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008062:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008064:	2d00      	cmp	r5, #0
 8008066:	dc12      	bgt.n	800808e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008068:	23ff      	movs	r3, #255	; 0xff
 800806a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800806e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008072:	f7ff be67 	b.w	8007d44 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0e7      	beq.n	800804c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800807c:	4630      	mov	r0, r6
 800807e:	f001 f88d 	bl	800919c <xTaskRemoveFromEventList>
 8008082:	b108      	cbz	r0, 8008088 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008084:	f001 f916 	bl	80092b4 <vTaskMissedYield>
			--cTxLock;
 8008088:	3d01      	subs	r5, #1
 800808a:	b26d      	sxtb	r5, r5
 800808c:	e7dc      	b.n	8008048 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0e9      	beq.n	8008068 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008094:	4630      	mov	r0, r6
 8008096:	f001 f881 	bl	800919c <xTaskRemoveFromEventList>
 800809a:	b108      	cbz	r0, 80080a0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800809c:	f001 f90a 	bl	80092b4 <vTaskMissedYield>
				--cRxLock;
 80080a0:	3d01      	subs	r5, #1
 80080a2:	b26d      	sxtb	r5, r5
 80080a4:	e7de      	b.n	8008064 <prvUnlockQueue+0x2e>

080080a6 <xQueueGenericReset>:
{
 80080a6:	b538      	push	{r3, r4, r5, lr}
 80080a8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80080aa:	4604      	mov	r4, r0
 80080ac:	b940      	cbnz	r0, 80080c0 <xQueueGenericReset+0x1a>
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	e7fe      	b.n	80080be <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80080c0:	f7ff fe20 	bl	8007d04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ca:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080cc:	434b      	muls	r3, r1
 80080ce:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d0:	1a5b      	subs	r3, r3, r1
 80080d2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080d6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080da:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80080de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80080e6:	b9a5      	cbnz	r5, 8008112 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	b173      	cbz	r3, 800810a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ec:	f104 0010 	add.w	r0, r4, #16
 80080f0:	f001 f854 	bl	800919c <xTaskRemoveFromEventList>
 80080f4:	b148      	cbz	r0, 800810a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80080f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800810a:	f7ff fe1b 	bl	8007d44 <vPortExitCritical>
}
 800810e:	2001      	movs	r0, #1
 8008110:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008112:	f104 0010 	add.w	r0, r4, #16
 8008116:	f7ff fd4d 	bl	8007bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800811a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800811e:	f7ff fd49 	bl	8007bb4 <vListInitialise>
 8008122:	e7f2      	b.n	800810a <xQueueGenericReset+0x64>

08008124 <xQueueGenericCreateStatic>:
	{
 8008124:	b513      	push	{r0, r1, r4, lr}
 8008126:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008128:	b940      	cbnz	r0, 800813c <xQueueGenericCreateStatic+0x18>
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	e7fe      	b.n	800813a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800813c:	b943      	cbnz	r3, 8008150 <xQueueGenericCreateStatic+0x2c>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	e7fe      	b.n	800814e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008150:	b14a      	cbz	r2, 8008166 <xQueueGenericCreateStatic+0x42>
 8008152:	b991      	cbnz	r1, 800817a <xQueueGenericCreateStatic+0x56>
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	e7fe      	b.n	8008164 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008166:	b141      	cbz	r1, 800817a <xQueueGenericCreateStatic+0x56>
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	e7fe      	b.n	8008178 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800817a:	2350      	movs	r3, #80	; 0x50
 800817c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	2b50      	cmp	r3, #80	; 0x50
 8008182:	d008      	beq.n	8008196 <xQueueGenericCreateStatic+0x72>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	e7fe      	b.n	8008194 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008196:	2900      	cmp	r1, #0
 8008198:	bf08      	it	eq
 800819a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800819c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800819e:	2301      	movs	r3, #1
 80081a0:	6022      	str	r2, [r4, #0]
 80081a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80081a6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081aa:	4619      	mov	r1, r3
 80081ac:	4620      	mov	r0, r4
 80081ae:	f7ff ff7a 	bl	80080a6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80081b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80081b6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80081b8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80081bc:	b002      	add	sp, #8
 80081be:	bd10      	pop	{r4, pc}

080081c0 <xQueueGenericCreate>:
	{
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	460d      	mov	r5, r1
 80081c4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081c6:	4606      	mov	r6, r0
 80081c8:	b940      	cbnz	r0, 80081dc <xQueueGenericCreate+0x1c>
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	e7fe      	b.n	80081da <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081dc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081de:	3050      	adds	r0, #80	; 0x50
 80081e0:	f7ff fc12 	bl	8007a08 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80081e4:	4604      	mov	r4, r0
 80081e6:	b170      	cbz	r0, 8008206 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ee:	b165      	cbz	r5, 800820a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081f4:	2101      	movs	r1, #1
 80081f6:	4620      	mov	r0, r4
 80081f8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80081fa:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081fe:	f7ff ff52 	bl	80080a6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008202:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8008206:	4620      	mov	r0, r4
 8008208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820a:	4603      	mov	r3, r0
 800820c:	e7f2      	b.n	80081f4 <xQueueGenericCreate+0x34>

0800820e <xQueueCreateCountingSemaphoreStatic>:
	{
 800820e:	b513      	push	{r0, r1, r4, lr}
 8008210:	4613      	mov	r3, r2
 8008212:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8008214:	b940      	cbnz	r0, 8008228 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	e7fe      	b.n	8008226 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008228:	4288      	cmp	r0, r1
 800822a:	d208      	bcs.n	800823e <xQueueCreateCountingSemaphoreStatic+0x30>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	e7fe      	b.n	800823c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800823e:	2202      	movs	r2, #2
 8008240:	9200      	str	r2, [sp, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	4611      	mov	r1, r2
 8008246:	f7ff ff6d 	bl	8008124 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800824a:	b100      	cbz	r0, 800824e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800824c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800824e:	b002      	add	sp, #8
 8008250:	bd10      	pop	{r4, pc}

08008252 <xQueueCreateCountingSemaphore>:
	{
 8008252:	b510      	push	{r4, lr}
 8008254:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8008256:	b940      	cbnz	r0, 800826a <xQueueCreateCountingSemaphore+0x18>
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	e7fe      	b.n	8008268 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800826a:	4288      	cmp	r0, r1
 800826c:	d208      	bcs.n	8008280 <xQueueCreateCountingSemaphore+0x2e>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	e7fe      	b.n	800827e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008280:	2202      	movs	r2, #2
 8008282:	2100      	movs	r1, #0
 8008284:	f7ff ff9c 	bl	80081c0 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008288:	b100      	cbz	r0, 800828c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800828a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800828c:	bd10      	pop	{r4, pc}

0800828e <xQueueGenericSend>:
{
 800828e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008292:	b085      	sub	sp, #20
 8008294:	4688      	mov	r8, r1
 8008296:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008298:	4604      	mov	r4, r0
{
 800829a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800829c:	b940      	cbnz	r0, 80082b0 <xQueueGenericSend+0x22>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	e7fe      	b.n	80082ae <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b0:	b951      	cbnz	r1, 80082c8 <xQueueGenericSend+0x3a>
 80082b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80082b4:	b143      	cbz	r3, 80082c8 <xQueueGenericSend+0x3a>
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	e7fe      	b.n	80082c6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082c8:	2f02      	cmp	r7, #2
 80082ca:	d10b      	bne.n	80082e4 <xQueueGenericSend+0x56>
 80082cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d008      	beq.n	80082e4 <xQueueGenericSend+0x56>
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	e7fe      	b.n	80082e2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082e4:	f000 ffec 	bl	80092c0 <xTaskGetSchedulerState>
 80082e8:	4606      	mov	r6, r0
 80082ea:	b950      	cbnz	r0, 8008302 <xQueueGenericSend+0x74>
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	b14b      	cbz	r3, 8008304 <xQueueGenericSend+0x76>
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	e7fe      	b.n	8008300 <xQueueGenericSend+0x72>
 8008302:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008304:	f04f 0900 	mov.w	r9, #0
 8008308:	e037      	b.n	800837a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800830a:	9d01      	ldr	r5, [sp, #4]
 800830c:	b91d      	cbnz	r5, 8008316 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800830e:	f7ff fd19 	bl	8007d44 <vPortExitCritical>
			return errQUEUE_FULL;
 8008312:	2000      	movs	r0, #0
 8008314:	e052      	b.n	80083bc <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8008316:	b916      	cbnz	r6, 800831e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008318:	a802      	add	r0, sp, #8
 800831a:	f000 ff83 	bl	8009224 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800831e:	f7ff fd11 	bl	8007d44 <vPortExitCritical>
		vTaskSuspendAll();
 8008322:	f000 fd0f 	bl	8008d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008326:	f7ff fced 	bl	8007d04 <vPortEnterCritical>
 800832a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800832e:	2bff      	cmp	r3, #255	; 0xff
 8008330:	d101      	bne.n	8008336 <xQueueGenericSend+0xa8>
 8008332:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8008336:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800833a:	2bff      	cmp	r3, #255	; 0xff
 800833c:	d101      	bne.n	8008342 <xQueueGenericSend+0xb4>
 800833e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8008342:	f7ff fcff 	bl	8007d44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008346:	a901      	add	r1, sp, #4
 8008348:	a802      	add	r0, sp, #8
 800834a:	f000 ff77 	bl	800923c <xTaskCheckForTimeOut>
 800834e:	2800      	cmp	r0, #0
 8008350:	d14a      	bne.n	80083e8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008352:	f7ff fcd7 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008356:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800835a:	429a      	cmp	r2, r3
 800835c:	d131      	bne.n	80083c2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800835e:	f7ff fcf1 	bl	8007d44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008362:	9901      	ldr	r1, [sp, #4]
 8008364:	f104 0010 	add.w	r0, r4, #16
 8008368:	f000 fee0 	bl	800912c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800836c:	4620      	mov	r0, r4
 800836e:	f7ff fe62 	bl	8008036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008372:	f000 fd8b 	bl	8008e8c <xTaskResumeAll>
 8008376:	b360      	cbz	r0, 80083d2 <xQueueGenericSend+0x144>
 8008378:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800837a:	f7ff fcc3 	bl	8007d04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800837e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008382:	429a      	cmp	r2, r3
 8008384:	d301      	bcc.n	800838a <xQueueGenericSend+0xfc>
 8008386:	2f02      	cmp	r7, #2
 8008388:	d1bf      	bne.n	800830a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800838a:	463a      	mov	r2, r7
 800838c:	4641      	mov	r1, r8
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff fe07 	bl	8007fa2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008396:	b11b      	cbz	r3, 80083a0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008398:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800839c:	f000 fefe 	bl	800919c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80083a0:	b148      	cbz	r0, 80083b6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80083a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80083b6:	f7ff fcc5 	bl	8007d44 <vPortExitCritical>
				return pdPASS;
 80083ba:	2001      	movs	r0, #1
}
 80083bc:	b005      	add	sp, #20
 80083be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80083c2:	f7ff fcbf 	bl	8007d44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff fe35 	bl	8008036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083cc:	f000 fd5e 	bl	8008e8c <xTaskResumeAll>
 80083d0:	e7d2      	b.n	8008378 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80083d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	e7c7      	b.n	8008378 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80083e8:	4620      	mov	r0, r4
 80083ea:	f7ff fe24 	bl	8008036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ee:	f000 fd4d 	bl	8008e8c <xTaskResumeAll>
 80083f2:	e78e      	b.n	8008312 <xQueueGenericSend+0x84>

080083f4 <xQueueGenericSendFromISR>:
{
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4689      	mov	r9, r1
 80083fa:	4690      	mov	r8, r2
 80083fc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80083fe:	4604      	mov	r4, r0
 8008400:	b940      	cbnz	r0, 8008414 <xQueueGenericSendFromISR+0x20>
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	e7fe      	b.n	8008412 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008414:	b951      	cbnz	r1, 800842c <xQueueGenericSendFromISR+0x38>
 8008416:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008418:	b143      	cbz	r3, 800842c <xQueueGenericSendFromISR+0x38>
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	e7fe      	b.n	800842a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800842c:	2f02      	cmp	r7, #2
 800842e:	d10b      	bne.n	8008448 <xQueueGenericSendFromISR+0x54>
 8008430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d008      	beq.n	8008448 <xQueueGenericSendFromISR+0x54>
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	e7fe      	b.n	8008446 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008448:	f7ff fd72 	bl	8007f30 <vPortValidateInterruptPriority>
	__asm volatile
 800844c:	f3ef 8611 	mrs	r6, BASEPRI
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008460:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008464:	429a      	cmp	r2, r3
 8008466:	d301      	bcc.n	800846c <xQueueGenericSendFromISR+0x78>
 8008468:	2f02      	cmp	r7, #2
 800846a:	d123      	bne.n	80084b4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800846c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008470:	463a      	mov	r2, r7
 8008472:	4649      	mov	r1, r9
 8008474:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008476:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800847a:	f7ff fd92 	bl	8007fa2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800847e:	1c6b      	adds	r3, r5, #1
 8008480:	d113      	bne.n	80084aa <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008484:	b90b      	cbnz	r3, 800848a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8008486:	2001      	movs	r0, #1
 8008488:	e00b      	b.n	80084a2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800848a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800848e:	f000 fe85 	bl	800919c <xTaskRemoveFromEventList>
 8008492:	2800      	cmp	r0, #0
 8008494:	d0f7      	beq.n	8008486 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	d0f4      	beq.n	8008486 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800849c:	2001      	movs	r0, #1
 800849e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80084a2:	f386 8811 	msr	BASEPRI, r6
}
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084aa:	3501      	adds	r5, #1
 80084ac:	b26d      	sxtb	r5, r5
 80084ae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80084b2:	e7e8      	b.n	8008486 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 80084b4:	2000      	movs	r0, #0
 80084b6:	e7f4      	b.n	80084a2 <xQueueGenericSendFromISR+0xae>

080084b8 <xQueueGiveFromISR>:
{
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80084bc:	4604      	mov	r4, r0
 80084be:	b940      	cbnz	r0, 80084d2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	e7fe      	b.n	80084d0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80084d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084d4:	b143      	cbz	r3, 80084e8 <xQueueGiveFromISR+0x30>
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	e7fe      	b.n	80084e6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	b953      	cbnz	r3, 8008502 <xQueueGiveFromISR+0x4a>
 80084ec:	6883      	ldr	r3, [r0, #8]
 80084ee:	b143      	cbz	r3, 8008502 <xQueueGiveFromISR+0x4a>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	e7fe      	b.n	8008500 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008502:	f7ff fd15 	bl	8007f30 <vPortValidateInterruptPriority>
	__asm volatile
 8008506:	f3ef 8611 	mrs	r6, BASEPRI
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800851a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800851c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800851e:	4293      	cmp	r3, r2
 8008520:	d91c      	bls.n	800855c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008522:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008526:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008528:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800852a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800852c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800852e:	d110      	bne.n	8008552 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008532:	b90b      	cbnz	r3, 8008538 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8008534:	2001      	movs	r0, #1
 8008536:	e009      	b.n	800854c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008538:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800853c:	f000 fe2e 	bl	800919c <xTaskRemoveFromEventList>
 8008540:	2800      	cmp	r0, #0
 8008542:	d0f7      	beq.n	8008534 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8008544:	2d00      	cmp	r5, #0
 8008546:	d0f5      	beq.n	8008534 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008548:	2001      	movs	r0, #1
 800854a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800854c:	f386 8811 	msr	BASEPRI, r6
}
 8008550:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008552:	3301      	adds	r3, #1
 8008554:	b25b      	sxtb	r3, r3
 8008556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800855a:	e7eb      	b.n	8008534 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800855c:	2000      	movs	r0, #0
 800855e:	e7f5      	b.n	800854c <xQueueGiveFromISR+0x94>

08008560 <xQueueReceive>:
{
 8008560:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008564:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008566:	4604      	mov	r4, r0
{
 8008568:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800856a:	b940      	cbnz	r0, 800857e <xQueueReceive+0x1e>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	e7fe      	b.n	800857c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857e:	b951      	cbnz	r1, 8008596 <xQueueReceive+0x36>
 8008580:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008582:	b143      	cbz	r3, 8008596 <xQueueReceive+0x36>
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	e7fe      	b.n	8008594 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008596:	f000 fe93 	bl	80092c0 <xTaskGetSchedulerState>
 800859a:	4606      	mov	r6, r0
 800859c:	b950      	cbnz	r0, 80085b4 <xQueueReceive+0x54>
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	b14b      	cbz	r3, 80085b6 <xQueueReceive+0x56>
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	e7fe      	b.n	80085b2 <xQueueReceive+0x52>
 80085b4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80085b6:	f04f 0800 	mov.w	r8, #0
 80085ba:	e03d      	b.n	8008638 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	b91d      	cbnz	r5, 80085c8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80085c0:	f7ff fbc0 	bl	8007d44 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80085c4:	2000      	movs	r0, #0
 80085c6:	e056      	b.n	8008676 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80085c8:	b916      	cbnz	r6, 80085d0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ca:	a802      	add	r0, sp, #8
 80085cc:	f000 fe2a 	bl	8009224 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80085d0:	f7ff fbb8 	bl	8007d44 <vPortExitCritical>
		vTaskSuspendAll();
 80085d4:	f000 fbb6 	bl	8008d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085d8:	f7ff fb94 	bl	8007d04 <vPortEnterCritical>
 80085dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80085e0:	2bff      	cmp	r3, #255	; 0xff
 80085e2:	d101      	bne.n	80085e8 <xQueueReceive+0x88>
 80085e4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80085e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085ec:	2bff      	cmp	r3, #255	; 0xff
 80085ee:	d101      	bne.n	80085f4 <xQueueReceive+0x94>
 80085f0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80085f4:	f7ff fba6 	bl	8007d44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085f8:	a901      	add	r1, sp, #4
 80085fa:	a802      	add	r0, sp, #8
 80085fc:	f000 fe1e 	bl	800923c <xTaskCheckForTimeOut>
 8008600:	2800      	cmp	r0, #0
 8008602:	d141      	bne.n	8008688 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008604:	4620      	mov	r0, r4
 8008606:	f7ff fcc1 	bl	8007f8c <prvIsQueueEmpty>
 800860a:	b3b8      	cbz	r0, 800867c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800860c:	9901      	ldr	r1, [sp, #4]
 800860e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008612:	f000 fd8b 	bl	800912c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008616:	4620      	mov	r0, r4
 8008618:	f7ff fd0d 	bl	8008036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800861c:	f000 fc36 	bl	8008e8c <xTaskResumeAll>
 8008620:	b948      	cbnz	r0, 8008636 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008622:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008638:	f7ff fb64 	bl	8007d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863e:	2d00      	cmp	r5, #0
 8008640:	d0bc      	beq.n	80085bc <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008642:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008644:	4639      	mov	r1, r7
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff fce0 	bl	800800c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800864c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	b173      	cbz	r3, 8008670 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008652:	f104 0010 	add.w	r0, r4, #16
 8008656:	f000 fda1 	bl	800919c <xTaskRemoveFromEventList>
 800865a:	b148      	cbz	r0, 8008670 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800865c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008664:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008670:	f7ff fb68 	bl	8007d44 <vPortExitCritical>
				return pdPASS;
 8008674:	2001      	movs	r0, #1
}
 8008676:	b004      	add	sp, #16
 8008678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800867c:	4620      	mov	r0, r4
 800867e:	f7ff fcda 	bl	8008036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008682:	f000 fc03 	bl	8008e8c <xTaskResumeAll>
 8008686:	e7d6      	b.n	8008636 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008688:	4620      	mov	r0, r4
 800868a:	f7ff fcd4 	bl	8008036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800868e:	f000 fbfd 	bl	8008e8c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff fc7a 	bl	8007f8c <prvIsQueueEmpty>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0cc      	beq.n	8008636 <xQueueReceive+0xd6>
 800869c:	e792      	b.n	80085c4 <xQueueReceive+0x64>

0800869e <xQueueSemaphoreTake>:
{
 800869e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80086a2:	4604      	mov	r4, r0
{
 80086a4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086a6:	b940      	cbnz	r0, 80086ba <xQueueSemaphoreTake+0x1c>
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	e7fe      	b.n	80086b8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80086ba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80086bc:	b145      	cbz	r5, 80086d0 <xQueueSemaphoreTake+0x32>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	e7fe      	b.n	80086ce <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086d0:	f000 fdf6 	bl	80092c0 <xTaskGetSchedulerState>
 80086d4:	4606      	mov	r6, r0
 80086d6:	b950      	cbnz	r0, 80086ee <xQueueSemaphoreTake+0x50>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	b15b      	cbz	r3, 80086f4 <xQueueSemaphoreTake+0x56>
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	e7fe      	b.n	80086ec <xQueueSemaphoreTake+0x4e>
 80086ee:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80086f0:	2700      	movs	r7, #0
 80086f2:	e053      	b.n	800879c <xQueueSemaphoreTake+0xfe>
 80086f4:	4605      	mov	r5, r0
 80086f6:	e7fb      	b.n	80086f0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	b963      	cbnz	r3, 8008716 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80086fc:	b145      	cbz	r5, 8008710 <xQueueSemaphoreTake+0x72>
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	e7fe      	b.n	800870e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8008710:	f7ff fb18 	bl	8007d44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008714:	e062      	b.n	80087dc <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8008716:	b916      	cbnz	r6, 800871e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008718:	a802      	add	r0, sp, #8
 800871a:	f000 fd83 	bl	8009224 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800871e:	f7ff fb11 	bl	8007d44 <vPortExitCritical>
		vTaskSuspendAll();
 8008722:	f000 fb0f 	bl	8008d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008726:	f7ff faed 	bl	8007d04 <vPortEnterCritical>
 800872a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800872e:	2bff      	cmp	r3, #255	; 0xff
 8008730:	d101      	bne.n	8008736 <xQueueSemaphoreTake+0x98>
 8008732:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008736:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800873a:	2bff      	cmp	r3, #255	; 0xff
 800873c:	d101      	bne.n	8008742 <xQueueSemaphoreTake+0xa4>
 800873e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008742:	f7ff faff 	bl	8007d44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008746:	a901      	add	r1, sp, #4
 8008748:	a802      	add	r0, sp, #8
 800874a:	f000 fd77 	bl	800923c <xTaskCheckForTimeOut>
 800874e:	2800      	cmp	r0, #0
 8008750:	d14d      	bne.n	80087ee <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008752:	4620      	mov	r0, r4
 8008754:	f7ff fc1a 	bl	8007f8c <prvIsQueueEmpty>
 8008758:	2800      	cmp	r0, #0
 800875a:	d042      	beq.n	80087e2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	b93b      	cbnz	r3, 8008770 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8008760:	f7ff fad0 	bl	8007d04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008764:	68a0      	ldr	r0, [r4, #8]
 8008766:	f000 fdbb 	bl	80092e0 <xTaskPriorityInherit>
 800876a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800876c:	f7ff faea 	bl	8007d44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008770:	9901      	ldr	r1, [sp, #4]
 8008772:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008776:	f000 fcd9 	bl	800912c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff fc5b 	bl	8008036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008780:	f000 fb84 	bl	8008e8c <xTaskResumeAll>
 8008784:	b948      	cbnz	r0, 800879a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8008786:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800878a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800879c:	f7ff fab2 	bl	8007d04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0a8      	beq.n	80086f8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087a6:	3b01      	subs	r3, #1
 80087a8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	b913      	cbnz	r3, 80087b4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087ae:	f000 fe6d 	bl	800948c <pvTaskIncrementMutexHeldCount>
 80087b2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	b173      	cbz	r3, 80087d6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b8:	f104 0010 	add.w	r0, r4, #16
 80087bc:	f000 fcee 	bl	800919c <xTaskRemoveFromEventList>
 80087c0:	b148      	cbz	r0, 80087d6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80087c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80087d6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80087d8:	f7ff fab4 	bl	8007d44 <vPortExitCritical>
}
 80087dc:	4628      	mov	r0, r5
 80087de:	b005      	add	sp, #20
 80087e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff fc27 	bl	8008036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087e8:	f000 fb50 	bl	8008e8c <xTaskResumeAll>
 80087ec:	e7d5      	b.n	800879a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff fc21 	bl	8008036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087f4:	f000 fb4a 	bl	8008e8c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7ff fbc7 	bl	8007f8c <prvIsQueueEmpty>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0cb      	beq.n	800879a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8008802:	2d00      	cmp	r5, #0
 8008804:	d0ea      	beq.n	80087dc <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8008806:	f7ff fa7d 	bl	8007d04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800880a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800880c:	b119      	cbz	r1, 8008816 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800880e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008810:	6819      	ldr	r1, [r3, #0]
 8008812:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008816:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8008818:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800881a:	f000 fde5 	bl	80093e8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800881e:	f7ff fa91 	bl	8007d44 <vPortExitCritical>
 8008822:	e7db      	b.n	80087dc <xQueueSemaphoreTake+0x13e>

08008824 <xQueueReceiveFromISR>:
{
 8008824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008828:	4689      	mov	r9, r1
 800882a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800882c:	4605      	mov	r5, r0
 800882e:	b940      	cbnz	r0, 8008842 <xQueueReceiveFromISR+0x1e>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	e7fe      	b.n	8008840 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008842:	b951      	cbnz	r1, 800885a <xQueueReceiveFromISR+0x36>
 8008844:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008846:	b143      	cbz	r3, 800885a <xQueueReceiveFromISR+0x36>
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	e7fe      	b.n	8008858 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800885a:	f7ff fb69 	bl	8007f30 <vPortValidateInterruptPriority>
	__asm volatile
 800885e:	f3ef 8711 	mrs	r7, BASEPRI
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008872:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008874:	b31c      	cbz	r4, 80088be <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008876:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800887a:	4649      	mov	r1, r9
 800887c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800887e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008880:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008882:	f7ff fbc3 	bl	800800c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008886:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008888:	1c73      	adds	r3, r6, #1
 800888a:	d113      	bne.n	80088b4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800888c:	692b      	ldr	r3, [r5, #16]
 800888e:	b90b      	cbnz	r3, 8008894 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8008890:	2001      	movs	r0, #1
 8008892:	e00b      	b.n	80088ac <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008894:	f105 0010 	add.w	r0, r5, #16
 8008898:	f000 fc80 	bl	800919c <xTaskRemoveFromEventList>
 800889c:	2800      	cmp	r0, #0
 800889e:	d0f7      	beq.n	8008890 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80088a0:	f1b8 0f00 	cmp.w	r8, #0
 80088a4:	d0f4      	beq.n	8008890 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088a6:	2001      	movs	r0, #1
 80088a8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80088ac:	f387 8811 	msr	BASEPRI, r7
}
 80088b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088b4:	3601      	adds	r6, #1
 80088b6:	b276      	sxtb	r6, r6
 80088b8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80088bc:	e7e8      	b.n	8008890 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80088be:	4620      	mov	r0, r4
 80088c0:	e7f4      	b.n	80088ac <xQueueReceiveFromISR+0x88>
	...

080088c4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088c4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088c6:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <vQueueAddToRegistry+0x20>)
	{
 80088c8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088ca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80088ce:	b92c      	cbnz	r4, 80088dc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088d8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088da:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088dc:	3301      	adds	r3, #1
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d1f3      	bne.n	80088ca <vQueueAddToRegistry+0x6>
 80088e2:	e7fa      	b.n	80088da <vQueueAddToRegistry+0x16>
 80088e4:	2400641c 	.word	0x2400641c

080088e8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088ea:	4a08      	ldr	r2, [pc, #32]	; (800890c <vQueueUnregisterQueue+0x24>)
	{
 80088ec:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088ee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80088f2:	684c      	ldr	r4, [r1, #4]
 80088f4:	4284      	cmp	r4, r0
 80088f6:	d104      	bne.n	8008902 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088f8:	2000      	movs	r0, #0
 80088fa:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088fe:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008900:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008902:	3301      	adds	r3, #1
 8008904:	2b08      	cmp	r3, #8
 8008906:	d1f2      	bne.n	80088ee <vQueueUnregisterQueue+0x6>
 8008908:	e7fa      	b.n	8008900 <vQueueUnregisterQueue+0x18>
 800890a:	bf00      	nop
 800890c:	2400641c 	.word	0x2400641c

08008910 <vQueueDelete>:
{
 8008910:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008912:	4604      	mov	r4, r0
 8008914:	b940      	cbnz	r0, 8008928 <vQueueDelete+0x18>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	e7fe      	b.n	8008926 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8008928:	f7ff ffde 	bl	80088e8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800892c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008930:	b923      	cbnz	r3, 800893c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8008932:	4620      	mov	r0, r4
}
 8008934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008938:	f7ff b8fe 	b.w	8007b38 <vPortFree>
}
 800893c:	bd10      	pop	{r4, pc}

0800893e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008946:	f7ff f9dd 	bl	8007d04 <vPortEnterCritical>
 800894a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800894e:	2bff      	cmp	r3, #255	; 0xff
 8008950:	d102      	bne.n	8008958 <vQueueWaitForMessageRestricted+0x1a>
 8008952:	2300      	movs	r3, #0
 8008954:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008958:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800895c:	2bff      	cmp	r3, #255	; 0xff
 800895e:	d102      	bne.n	8008966 <vQueueWaitForMessageRestricted+0x28>
 8008960:	2300      	movs	r3, #0
 8008962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008966:	f7ff f9ed 	bl	8007d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800896a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800896c:	b92b      	cbnz	r3, 800897a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800896e:	4632      	mov	r2, r6
 8008970:	4629      	mov	r1, r5
 8008972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008976:	f000 fbf3 	bl	8009160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800897a:	4620      	mov	r0, r4
	}
 800897c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008980:	f7ff bb59 	b.w	8008036 <prvUnlockQueue>

08008984 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800898a:	f7ff f9bb 	bl	8007d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800898e:	4b2f      	ldr	r3, [pc, #188]	; (8008a4c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008990:	4e2f      	ldr	r6, [pc, #188]	; (8008a50 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4f2f      	ldr	r7, [pc, #188]	; (8008a54 <prvAddNewTaskToReadyList+0xd0>)
 8008996:	3201      	adds	r2, #1
 8008998:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800899a:	6835      	ldr	r5, [r6, #0]
 800899c:	2d00      	cmp	r5, #0
 800899e:	d14a      	bne.n	8008a36 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089a0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d11f      	bne.n	80089e8 <prvAddNewTaskToReadyList+0x64>
 80089a8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089aa:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089ac:	4640      	mov	r0, r8
 80089ae:	f7ff f901 	bl	8007bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089b2:	f108 0814 	add.w	r8, r8, #20
 80089b6:	2d38      	cmp	r5, #56	; 0x38
 80089b8:	d1f7      	bne.n	80089aa <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008a7c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80089be:	4d26      	ldr	r5, [pc, #152]	; (8008a58 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80089c0:	4640      	mov	r0, r8
 80089c2:	f7ff f8f7 	bl	8007bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7ff f8f4 	bl	8007bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089cc:	4823      	ldr	r0, [pc, #140]	; (8008a5c <prvAddNewTaskToReadyList+0xd8>)
 80089ce:	f7ff f8f1 	bl	8007bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089d2:	4823      	ldr	r0, [pc, #140]	; (8008a60 <prvAddNewTaskToReadyList+0xdc>)
 80089d4:	f7ff f8ee 	bl	8007bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089d8:	4822      	ldr	r0, [pc, #136]	; (8008a64 <prvAddNewTaskToReadyList+0xe0>)
 80089da:	f7ff f8eb 	bl	8007bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <prvAddNewTaskToReadyList+0xe4>)
 80089e0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <prvAddNewTaskToReadyList+0xe8>)
 80089e6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80089e8:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <prvAddNewTaskToReadyList+0xec>)
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80089f0:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089f2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80089f4:	6811      	ldr	r1, [r2, #0]
 80089f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089f8:	428b      	cmp	r3, r1
 80089fa:	d900      	bls.n	80089fe <prvAddNewTaskToReadyList+0x7a>
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	2014      	movs	r0, #20
 8008a00:	1d21      	adds	r1, r4, #4
 8008a02:	fb00 7003 	mla	r0, r0, r3, r7
 8008a06:	f7ff f8e3 	bl	8007bd0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008a0a:	f7ff f99b 	bl	8007d44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008a0e:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <prvAddNewTaskToReadyList+0xf4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	b173      	cbz	r3, 8008a32 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d209      	bcs.n	8008a32 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008a1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
}
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <prvAddNewTaskToReadyList+0xf4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1d4      	bne.n	80089e8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a3e:	6833      	ldr	r3, [r6, #0]
 8008a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d8cf      	bhi.n	80089e8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008a48:	6034      	str	r4, [r6, #0]
 8008a4a:	e7cd      	b.n	80089e8 <prvAddNewTaskToReadyList+0x64>
 8008a4c:	240068c8 	.word	0x240068c8
 8008a50:	2400645c 	.word	0x2400645c
 8008a54:	24006468 	.word	0x24006468
 8008a58:	240068f0 	.word	0x240068f0
 8008a5c:	24006910 	.word	0x24006910
 8008a60:	2400693c 	.word	0x2400693c
 8008a64:	24006928 	.word	0x24006928
 8008a68:	24006460 	.word	0x24006460
 8008a6c:	24006464 	.word	0x24006464
 8008a70:	240068d4 	.word	0x240068d4
 8008a74:	240068d8 	.word	0x240068d8
 8008a78:	24006924 	.word	0x24006924
 8008a7c:	240068dc 	.word	0x240068dc

08008a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008a84:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a86:	4e15      	ldr	r6, [pc, #84]	; (8008adc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008a88:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008a8a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a8c:	6830      	ldr	r0, [r6, #0]
 8008a8e:	3004      	adds	r0, #4
 8008a90:	f7ff f8c1 	bl	8007c16 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a94:	1c63      	adds	r3, r4, #1
 8008a96:	d107      	bne.n	8008aa8 <prvAddCurrentTaskToDelayedList+0x28>
 8008a98:	b137      	cbz	r7, 8008aa8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9a:	6831      	ldr	r1, [r6, #0]
 8008a9c:	4810      	ldr	r0, [pc, #64]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x60>)
 8008a9e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa4:	f7ff b894 	b.w	8007bd0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aa8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aaa:	6833      	ldr	r3, [r6, #0]
 8008aac:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aae:	d307      	bcc.n	8008ac0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0x64>)
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	6831      	ldr	r1, [r6, #0]
}
 8008ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aba:	3104      	adds	r1, #4
 8008abc:	f7ff b894 	b.w	8007be8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac0:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	6831      	ldr	r1, [r6, #0]
 8008ac6:	3104      	adds	r1, #4
 8008ac8:	f7ff f88e 	bl	8007be8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <prvAddCurrentTaskToDelayedList+0x6c>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	42a2      	cmp	r2, r4
 8008ad2:	d900      	bls.n	8008ad6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008ad4:	601c      	str	r4, [r3, #0]
}
 8008ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad8:	24006950 	.word	0x24006950
 8008adc:	2400645c 	.word	0x2400645c
 8008ae0:	24006928 	.word	0x24006928
 8008ae4:	24006464 	.word	0x24006464
 8008ae8:	24006460 	.word	0x24006460
 8008aec:	24006904 	.word	0x24006904

08008af0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008af0:	4a06      	ldr	r2, [pc, #24]	; (8008b0c <prvResetNextTaskUnblockTime+0x1c>)
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	6819      	ldr	r1, [r3, #0]
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <prvResetNextTaskUnblockTime+0x20>)
 8008af8:	b919      	cbnz	r1, 8008b02 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008afe:	601a      	str	r2, [r3, #0]
}
 8008b00:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b06:	68d2      	ldr	r2, [r2, #12]
 8008b08:	6852      	ldr	r2, [r2, #4]
 8008b0a:	e7f8      	b.n	8008afe <prvResetNextTaskUnblockTime+0xe>
 8008b0c:	24006460 	.word	0x24006460
 8008b10:	24006904 	.word	0x24006904

08008b14 <prvDeleteTCB>:
	{
 8008b14:	b510      	push	{r4, lr}
 8008b16:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b18:	3058      	adds	r0, #88	; 0x58
 8008b1a:	f00e fdbd 	bl	8017698 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b1e:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 8008b22:	b93b      	cbnz	r3, 8008b34 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008b24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008b26:	f7ff f807 	bl	8007b38 <vPortFree>
				vPortFree( pxTCB );
 8008b2a:	4620      	mov	r0, r4
	}
 8008b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008b30:	f7ff b802 	b.w	8007b38 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d0f8      	beq.n	8008b2a <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d008      	beq.n	8008b4e <prvDeleteTCB+0x3a>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	e7fe      	b.n	8008b4c <prvDeleteTCB+0x38>
	}
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <prvIdleTask>:
{
 8008b50:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b52:	4c14      	ldr	r4, [pc, #80]	; (8008ba4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b54:	4f14      	ldr	r7, [pc, #80]	; (8008ba8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008b56:	4d15      	ldr	r5, [pc, #84]	; (8008bac <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	b983      	cbnz	r3, 8008b7e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b5c:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <prvIdleTask+0x60>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d909      	bls.n	8008b78 <prvIdleTask+0x28>
				taskYIELD();
 8008b64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008b78:	f7f7 fc1a 	bl	80003b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008b7c:	e7eb      	b.n	8008b56 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008b7e:	f7ff f8c1 	bl	8007d04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b86:	1d30      	adds	r0, r6, #4
 8008b88:	f7ff f845 	bl	8007c16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008b98:	f7ff f8d4 	bl	8007d44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff ffb9 	bl	8008b14 <prvDeleteTCB>
 8008ba2:	e7d9      	b.n	8008b58 <prvIdleTask+0x8>
 8008ba4:	240068cc 	.word	0x240068cc
 8008ba8:	2400693c 	.word	0x2400693c
 8008bac:	240068c8 	.word	0x240068c8
 8008bb0:	24006468 	.word	0x24006468

08008bb4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bb8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bc0:	21a5      	movs	r1, #165	; 0xa5
 8008bc2:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008bc4:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bc6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008bca:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008bd0:	f00e f97e 	bl	8016ed0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008bd6:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bd8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	d042      	beq.n	8008c66 <prvInitialiseNewTask.constprop.0+0xb2>
 8008be0:	1e6b      	subs	r3, r5, #1
 8008be2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008be6:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008be8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008bec:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008bf0:	b108      	cbz	r0, 8008bf6 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	d1f8      	bne.n	8008be8 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bfc:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008bfe:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c02:	1d20      	adds	r0, r4, #4
 8008c04:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008c06:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008c0a:	bf28      	it	cs
 8008c0c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008c0e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008c10:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c12:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c16:	f7fe ffd8 	bl	8007bca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c1a:	f104 0018 	add.w	r0, r4, #24
 8008c1e:	f7fe ffd4 	bl	8007bca <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c22:	2260      	movs	r2, #96	; 0x60
 8008c24:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8008c26:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c2e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c30:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c32:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008c34:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c38:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c3c:	f00e f948 	bl	8016ed0 <memset>
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c42:	463a      	mov	r2, r7
 8008c44:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c46:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c48:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <prvInitialiseNewTask.constprop.0+0xbc>)
 8008c4c:	6623      	str	r3, [r4, #96]	; 0x60
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <prvInitialiseNewTask.constprop.0+0xc0>)
 8008c50:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c52:	f7ff f82f 	bl	8007cb4 <pxPortInitialiseStack>
 8008c56:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	d001      	beq.n	8008c62 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c5e:	f8c8 4000 	str.w	r4, [r8]
}
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c66:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008c6a:	e7c7      	b.n	8008bfc <prvInitialiseNewTask.constprop.0+0x48>
 8008c6c:	080192c4 	.word	0x080192c4
 8008c70:	080192e4 	.word	0x080192e4
 8008c74:	080192a4 	.word	0x080192a4

08008c78 <xTaskCreateStatic>:
	{
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008c80:	b945      	cbnz	r5, 8008c94 <xTaskCreateStatic+0x1c>
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	e7fe      	b.n	8008c92 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008c94:	b944      	cbnz	r4, 8008ca8 <xTaskCreateStatic+0x30>
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	e7fe      	b.n	8008ca6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ca8:	26c0      	movs	r6, #192	; 0xc0
 8008caa:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cac:	9e05      	ldr	r6, [sp, #20]
 8008cae:	2ec0      	cmp	r6, #192	; 0xc0
 8008cb0:	d008      	beq.n	8008cc4 <xTaskCreateStatic+0x4c>
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	e7fe      	b.n	8008cc2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cc4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc6:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cc8:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cca:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cce:	ad04      	add	r5, sp, #16
 8008cd0:	9402      	str	r4, [sp, #8]
 8008cd2:	9501      	str	r5, [sp, #4]
 8008cd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008cd6:	9500      	str	r5, [sp, #0]
 8008cd8:	f7ff ff6c 	bl	8008bb4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7ff fe51 	bl	8008984 <prvAddNewTaskToReadyList>
	}
 8008ce2:	9804      	ldr	r0, [sp, #16]
 8008ce4:	b006      	add	sp, #24
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}

08008ce8 <xTaskCreate>:
	{
 8008ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cec:	4607      	mov	r7, r0
 8008cee:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cf0:	0090      	lsls	r0, r2, #2
	{
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cf8:	f7fe fe86 	bl	8007a08 <pvPortMalloc>
			if( pxStack != NULL )
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	b1e8      	cbz	r0, 8008d3c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d00:	20c0      	movs	r0, #192	; 0xc0
 8008d02:	f7fe fe81 	bl	8007a08 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008d06:	4604      	mov	r4, r0
 8008d08:	b1a8      	cbz	r0, 8008d36 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d0a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008d0c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d0e:	4632      	mov	r2, r6
 8008d10:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d12:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d18:	9002      	str	r0, [sp, #8]
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	464b      	mov	r3, r9
 8008d24:	f7ff ff46 	bl	8008bb4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7ff fe2b 	bl	8008984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d2e:	2001      	movs	r0, #1
	}
 8008d30:	b005      	add	sp, #20
 8008d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7fe fefe 	bl	8007b38 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008d40:	e7f6      	b.n	8008d30 <xTaskCreate+0x48>
	...

08008d44 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008d44:	4a02      	ldr	r2, [pc, #8]	; (8008d50 <vTaskSuspendAll+0xc>)
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	6013      	str	r3, [r2, #0]
}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	240068d0 	.word	0x240068d0

08008d54 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <xTaskGetTickCount+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
}
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	24006950 	.word	0x24006950

08008d60 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d60:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <xTaskIncrementTick+0x100>)
 8008d62:	681b      	ldr	r3, [r3, #0]
{
 8008d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d172      	bne.n	8008e52 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d6c:	4b3d      	ldr	r3, [pc, #244]	; (8008e64 <xTaskIncrementTick+0x104>)
 8008d6e:	681d      	ldr	r5, [r3, #0]
 8008d70:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008d72:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d74:	b9bd      	cbnz	r5, 8008da6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008d76:	4b3c      	ldr	r3, [pc, #240]	; (8008e68 <xTaskIncrementTick+0x108>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	b142      	cbz	r2, 8008d90 <xTaskIncrementTick+0x30>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	e7fe      	b.n	8008d8e <xTaskIncrementTick+0x2e>
 8008d90:	4a36      	ldr	r2, [pc, #216]	; (8008e6c <xTaskIncrementTick+0x10c>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6810      	ldr	r0, [r2, #0]
 8008d96:	6018      	str	r0, [r3, #0]
 8008d98:	6011      	str	r1, [r2, #0]
 8008d9a:	4a35      	ldr	r2, [pc, #212]	; (8008e70 <xTaskIncrementTick+0x110>)
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	f7ff fea5 	bl	8008af0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008da6:	4e33      	ldr	r6, [pc, #204]	; (8008e74 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8008da8:	2400      	movs	r4, #0
 8008daa:	4f33      	ldr	r7, [pc, #204]	; (8008e78 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008e84 <xTaskIncrementTick+0x124>
 8008db2:	429d      	cmp	r5, r3
 8008db4:	d211      	bcs.n	8008dda <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008db6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dba:	2214      	movs	r2, #20
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	4353      	muls	r3, r2
 8008dc0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008dc2:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	; (8008e7c <xTaskIncrementTick+0x11c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8008dc8:	bf28      	it	cs
 8008dca:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bf18      	it	ne
 8008dd0:	2401      	movne	r4, #1
}
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	b003      	add	sp, #12
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dda:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008e68 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008dde:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008e88 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008de2:	f8d9 3000 	ldr.w	r3, [r9]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	b91b      	cbnz	r3, 8008df2 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dea:	f04f 33ff 	mov.w	r3, #4294967295
 8008dee:	6033      	str	r3, [r6, #0]
					break;
 8008df0:	e7e1      	b.n	8008db6 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df2:	f8d9 3000 	ldr.w	r3, [r9]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dfc:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008e00:	4295      	cmp	r5, r2
 8008e02:	d201      	bcs.n	8008e08 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8008e04:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e06:	e7d6      	b.n	8008db6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e08:	f10b 0104 	add.w	r1, fp, #4
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	9101      	str	r1, [sp, #4]
 8008e10:	f7fe ff01 	bl	8007c16 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e14:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008e18:	9901      	ldr	r1, [sp, #4]
 8008e1a:	b122      	cbz	r2, 8008e26 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e1c:	f10b 0018 	add.w	r0, fp, #24
 8008e20:	f7fe fef9 	bl	8007c16 <uxListRemove>
 8008e24:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008e26:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008e2a:	f8da 2000 	ldr.w	r2, [sl]
 8008e2e:	4290      	cmp	r0, r2
 8008e30:	d901      	bls.n	8008e36 <xTaskIncrementTick+0xd6>
 8008e32:	f8ca 0000 	str.w	r0, [sl]
 8008e36:	2314      	movs	r3, #20
 8008e38:	fb03 7000 	mla	r0, r3, r0, r7
 8008e3c:	f7fe fec8 	bl	8007bd0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e40:	f8d8 1000 	ldr.w	r1, [r8]
 8008e44:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008e48:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	bf28      	it	cs
 8008e4e:	2401      	movcs	r4, #1
 8008e50:	e7c7      	b.n	8008de2 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8008e52:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8008e54:	2400      	movs	r4, #0
		++xPendedTicks;
 8008e56:	6813      	ldr	r3, [r2, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8008e5c:	e7b9      	b.n	8008dd2 <xTaskIncrementTick+0x72>
 8008e5e:	bf00      	nop
 8008e60:	240068d0 	.word	0x240068d0
 8008e64:	24006950 	.word	0x24006950
 8008e68:	24006460 	.word	0x24006460
 8008e6c:	24006464 	.word	0x24006464
 8008e70:	24006908 	.word	0x24006908
 8008e74:	24006904 	.word	0x24006904
 8008e78:	24006468 	.word	0x24006468
 8008e7c:	24006954 	.word	0x24006954
 8008e80:	2400690c 	.word	0x2400690c
 8008e84:	2400645c 	.word	0x2400645c
 8008e88:	240068d8 	.word	0x240068d8

08008e8c <xTaskResumeAll>:
{
 8008e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008e8e:	4c31      	ldr	r4, [pc, #196]	; (8008f54 <xTaskResumeAll+0xc8>)
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	b943      	cbnz	r3, 8008ea6 <xTaskResumeAll+0x1a>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	e7fe      	b.n	8008ea4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8008ea6:	f7fe ff2d 	bl	8007d04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb0:	6824      	ldr	r4, [r4, #0]
 8008eb2:	b12c      	cbz	r4, 8008ec0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8008eb4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008eb6:	f7fe ff45 	bl	8007d44 <vPortExitCritical>
}
 8008eba:	4620      	mov	r0, r4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ec0:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <xTaskResumeAll+0xcc>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f5      	beq.n	8008eb4 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ec8:	4d24      	ldr	r5, [pc, #144]	; (8008f5c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008eca:	4e25      	ldr	r6, [pc, #148]	; (8008f60 <xTaskResumeAll+0xd4>)
 8008ecc:	4f25      	ldr	r7, [pc, #148]	; (8008f64 <xTaskResumeAll+0xd8>)
 8008ece:	e01e      	b.n	8008f0e <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed0:	68eb      	ldr	r3, [r5, #12]
 8008ed2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ed4:	f104 0018 	add.w	r0, r4, #24
 8008ed8:	f7fe fe9d 	bl	8007c16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008edc:	1d21      	adds	r1, r4, #4
 8008ede:	4608      	mov	r0, r1
 8008ee0:	9101      	str	r1, [sp, #4]
 8008ee2:	f7fe fe98 	bl	8007c16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	9901      	ldr	r1, [sp, #4]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d900      	bls.n	8008ef2 <xTaskResumeAll+0x66>
 8008ef0:	6033      	str	r3, [r6, #0]
 8008ef2:	2014      	movs	r0, #20
 8008ef4:	fb00 7003 	mla	r0, r0, r3, r7
 8008ef8:	f7fe fe6a 	bl	8007bd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efc:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <xTaskResumeAll+0xdc>)
 8008efe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8008f08:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <xTaskResumeAll+0xe0>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1dd      	bne.n	8008ed0 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8008f14:	b10c      	cbz	r4, 8008f1a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8008f16:	f7ff fdeb 	bl	8008af0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f1a:	4d15      	ldr	r5, [pc, #84]	; (8008f70 <xTaskResumeAll+0xe4>)
 8008f1c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008f1e:	b144      	cbz	r4, 8008f32 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008f20:	4e12      	ldr	r6, [pc, #72]	; (8008f6c <xTaskResumeAll+0xe0>)
 8008f22:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008f24:	f7ff ff1c 	bl	8008d60 <xTaskIncrementTick>
 8008f28:	b100      	cbz	r0, 8008f2c <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8008f2a:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f2c:	3c01      	subs	r4, #1
 8008f2e:	d1f9      	bne.n	8008f24 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8008f30:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008f32:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <xTaskResumeAll+0xe0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0bc      	beq.n	8008eb4 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 8008f3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008f4e:	2401      	movs	r4, #1
 8008f50:	e7b1      	b.n	8008eb6 <xTaskResumeAll+0x2a>
 8008f52:	bf00      	nop
 8008f54:	240068d0 	.word	0x240068d0
 8008f58:	240068c8 	.word	0x240068c8
 8008f5c:	24006910 	.word	0x24006910
 8008f60:	240068d8 	.word	0x240068d8
 8008f64:	24006468 	.word	0x24006468
 8008f68:	2400645c 	.word	0x2400645c
 8008f6c:	24006954 	.word	0x24006954
 8008f70:	2400690c 	.word	0x2400690c

08008f74 <vTaskDelay>:
	{
 8008f74:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f76:	b950      	cbnz	r0, 8008f8e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008f78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	f3bf 8f6f 	isb	sy
	}
 8008f8c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <vTaskDelay+0x44>)
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	b141      	cbz	r1, 8008fa6 <vTaskDelay+0x32>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	e7fe      	b.n	8008fa4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008fa6:	f7ff fecd 	bl	8008d44 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008faa:	f7ff fd69 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008fae:	f7ff ff6d 	bl	8008e8c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0e0      	beq.n	8008f78 <vTaskDelay+0x4>
 8008fb6:	e7e9      	b.n	8008f8c <vTaskDelay+0x18>
 8008fb8:	240068d0 	.word	0x240068d0

08008fbc <vTaskSetApplicationTaskTag>:
	{
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	b908      	cbnz	r0, 8008fc8 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008fc4:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <vTaskSetApplicationTaskTag+0x1c>)
 8008fc6:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8008fc8:	f7fe fe9c 	bl	8007d04 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008fcc:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008fd2:	f7fe beb7 	b.w	8007d44 <vPortExitCritical>
 8008fd6:	bf00      	nop
 8008fd8:	2400645c 	.word	0x2400645c

08008fdc <xTaskCallApplicationTaskHook>:
	{
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <xTaskCallApplicationTaskHook+0x14>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe8:	b103      	cbz	r3, 8008fec <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8008fea:	4718      	bx	r3
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	4770      	bx	lr
 8008ff0:	2400645c 	.word	0x2400645c

08008ff4 <vTaskStartScheduler>:
{
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ff8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ffa:	aa07      	add	r2, sp, #28
 8008ffc:	a906      	add	r1, sp, #24
 8008ffe:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009000:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009004:	f7fe fcc4 	bl	8007990 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009008:	9b05      	ldr	r3, [sp, #20]
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	491b      	ldr	r1, [pc, #108]	; (8009080 <vTaskStartScheduler+0x8c>)
 8009012:	481c      	ldr	r0, [pc, #112]	; (8009084 <vTaskStartScheduler+0x90>)
 8009014:	e9cd 4300 	strd	r4, r3, [sp]
 8009018:	4623      	mov	r3, r4
 800901a:	f7ff fe2d 	bl	8008c78 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800901e:	b360      	cbz	r0, 800907a <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8009020:	f000 fa92 	bl	8009548 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009024:	2801      	cmp	r0, #1
 8009026:	d11d      	bne.n	8009064 <vTaskStartScheduler+0x70>
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009038:	4a13      	ldr	r2, [pc, #76]	; (8009088 <vTaskStartScheduler+0x94>)
 800903a:	4914      	ldr	r1, [pc, #80]	; (800908c <vTaskStartScheduler+0x98>)
 800903c:	6813      	ldr	r3, [r2, #0]
 800903e:	3358      	adds	r3, #88	; 0x58
 8009040:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009042:	f04f 31ff 	mov.w	r1, #4294967295
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <vTaskStartScheduler+0x9c>)
 8009048:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800904a:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800904c:	4b11      	ldr	r3, [pc, #68]	; (8009094 <vTaskStartScheduler+0xa0>)
 800904e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009050:	4b11      	ldr	r3, [pc, #68]	; (8009098 <vTaskStartScheduler+0xa4>)
 8009052:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8009054:	6810      	ldr	r0, [r2, #0]
 8009056:	f7ff ffc1 	bl	8008fdc <xTaskCallApplicationTaskHook>
}
 800905a:	b008      	add	sp, #32
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009060:	f7fe bee0 	b.w	8007e24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009064:	3001      	adds	r0, #1
 8009066:	d108      	bne.n	800907a <vTaskStartScheduler+0x86>
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	e7fe      	b.n	8009078 <vTaskStartScheduler+0x84>
}
 800907a:	b008      	add	sp, #32
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	08018d14 	.word	0x08018d14
 8009084:	08008b51 	.word	0x08008b51
 8009088:	2400645c 	.word	0x2400645c
 800908c:	240000a8 	.word	0x240000a8
 8009090:	24006904 	.word	0x24006904
 8009094:	24006924 	.word	0x24006924
 8009098:	24006950 	.word	0x24006950

0800909c <vTaskSwitchContext>:
{
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800909e:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <vTaskSwitchContext+0x78>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <vTaskSwitchContext+0x7c>)
 80090a4:	b112      	cbz	r2, 80090ac <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80090a6:	2201      	movs	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
}
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80090ac:	4c1b      	ldr	r4, [pc, #108]	; (800911c <vTaskSwitchContext+0x80>)
 80090ae:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b0:	4e1b      	ldr	r6, [pc, #108]	; (8009120 <vTaskSwitchContext+0x84>)
 80090b2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 80090b4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	f7ff ff90 	bl	8008fdc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	6832      	ldr	r2, [r6, #0]
 80090be:	4919      	ldr	r1, [pc, #100]	; (8009124 <vTaskSwitchContext+0x88>)
 80090c0:	fb07 f302 	mul.w	r3, r7, r2
 80090c4:	58cd      	ldr	r5, [r1, r3]
 80090c6:	18c8      	adds	r0, r1, r3
 80090c8:	b1c5      	cbz	r5, 80090fc <vTaskSwitchContext+0x60>
 80090ca:	6845      	ldr	r5, [r0, #4]
 80090cc:	3308      	adds	r3, #8
 80090ce:	686d      	ldr	r5, [r5, #4]
 80090d0:	440b      	add	r3, r1
 80090d2:	429d      	cmp	r5, r3
 80090d4:	6045      	str	r5, [r0, #4]
 80090d6:	bf04      	itt	eq
 80090d8:	686b      	ldreq	r3, [r5, #4]
 80090da:	6043      	streq	r3, [r0, #4]
 80090dc:	2314      	movs	r3, #20
 80090de:	fb03 1102 	mla	r1, r3, r2, r1
 80090e2:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80090e4:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80090ec:	6820      	ldr	r0, [r4, #0]
 80090ee:	f7ff ff75 	bl	8008fdc <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <vTaskSwitchContext+0x8c>)
 80090f6:	3358      	adds	r3, #88	; 0x58
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	e7d6      	b.n	80090aa <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fc:	b942      	cbnz	r2, 8009110 <vTaskSwitchContext+0x74>
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	e7fe      	b.n	800910e <vTaskSwitchContext+0x72>
 8009110:	3a01      	subs	r2, #1
 8009112:	e7d5      	b.n	80090c0 <vTaskSwitchContext+0x24>
 8009114:	240068d0 	.word	0x240068d0
 8009118:	24006954 	.word	0x24006954
 800911c:	2400645c 	.word	0x2400645c
 8009120:	240068d8 	.word	0x240068d8
 8009124:	24006468 	.word	0x24006468
 8009128:	240000a8 	.word	0x240000a8

0800912c <vTaskPlaceOnEventList>:
{
 800912c:	b510      	push	{r4, lr}
 800912e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009130:	b940      	cbnz	r0, 8009144 <vTaskPlaceOnEventList+0x18>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	e7fe      	b.n	8009142 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <vTaskPlaceOnEventList+0x30>)
 8009146:	6819      	ldr	r1, [r3, #0]
 8009148:	3118      	adds	r1, #24
 800914a:	f7fe fd4d 	bl	8007be8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800914e:	4620      	mov	r0, r4
 8009150:	2101      	movs	r1, #1
}
 8009152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009156:	f7ff bc93 	b.w	8008a80 <prvAddCurrentTaskToDelayedList>
 800915a:	bf00      	nop
 800915c:	2400645c 	.word	0x2400645c

08009160 <vTaskPlaceOnEventListRestricted>:
	{
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	460d      	mov	r5, r1
 8009164:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009166:	b940      	cbnz	r0, 800917a <vTaskPlaceOnEventListRestricted+0x1a>
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	e7fe      	b.n	8009178 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <vTaskPlaceOnEventListRestricted+0x38>)
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	3118      	adds	r1, #24
 8009180:	f7fe fd26 	bl	8007bd0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009184:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009186:	4621      	mov	r1, r4
 8009188:	bf0c      	ite	eq
 800918a:	4628      	moveq	r0, r5
 800918c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009194:	f7ff bc74 	b.w	8008a80 <prvAddCurrentTaskToDelayedList>
 8009198:	2400645c 	.word	0x2400645c

0800919c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919c:	68c3      	ldr	r3, [r0, #12]
{
 800919e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80091a2:	b944      	cbnz	r4, 80091b6 <xTaskRemoveFromEventList+0x1a>
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	e7fe      	b.n	80091b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091b6:	f104 0118 	add.w	r1, r4, #24
 80091ba:	4608      	mov	r0, r1
 80091bc:	9101      	str	r1, [sp, #4]
 80091be:	f7fe fd2a 	bl	8007c16 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <xTaskRemoveFromEventList+0x70>)
 80091c4:	9901      	ldr	r1, [sp, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b9e3      	cbnz	r3, 8009204 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ca:	1d21      	adds	r1, r4, #4
 80091cc:	4608      	mov	r0, r1
 80091ce:	9101      	str	r1, [sp, #4]
 80091d0:	f7fe fd21 	bl	8007c16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091d4:	4a0e      	ldr	r2, [pc, #56]	; (8009210 <xTaskRemoveFromEventList+0x74>)
 80091d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80091d8:	6810      	ldr	r0, [r2, #0]
 80091da:	9901      	ldr	r1, [sp, #4]
 80091dc:	4283      	cmp	r3, r0
 80091de:	d900      	bls.n	80091e2 <xTaskRemoveFromEventList+0x46>
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	4a0c      	ldr	r2, [pc, #48]	; (8009214 <xTaskRemoveFromEventList+0x78>)
 80091e4:	2014      	movs	r0, #20
 80091e6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ea:	f7fe fcf1 	bl	8007bd0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <xTaskRemoveFromEventList+0x7c>)
 80091f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d906      	bls.n	8009208 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80091fa:	2001      	movs	r0, #1
 80091fc:	4b07      	ldr	r3, [pc, #28]	; (800921c <xTaskRemoveFromEventList+0x80>)
 80091fe:	6018      	str	r0, [r3, #0]
}
 8009200:	b002      	add	sp, #8
 8009202:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009204:	4806      	ldr	r0, [pc, #24]	; (8009220 <xTaskRemoveFromEventList+0x84>)
 8009206:	e7f0      	b.n	80091ea <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8009208:	2000      	movs	r0, #0
	return xReturn;
 800920a:	e7f9      	b.n	8009200 <xTaskRemoveFromEventList+0x64>
 800920c:	240068d0 	.word	0x240068d0
 8009210:	240068d8 	.word	0x240068d8
 8009214:	24006468 	.word	0x24006468
 8009218:	2400645c 	.word	0x2400645c
 800921c:	24006954 	.word	0x24006954
 8009220:	24006910 	.word	0x24006910

08009224 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009224:	4b03      	ldr	r3, [pc, #12]	; (8009234 <vTaskInternalSetTimeOutState+0x10>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <vTaskInternalSetTimeOutState+0x14>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6043      	str	r3, [r0, #4]
}
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	24006908 	.word	0x24006908
 8009238:	24006950 	.word	0x24006950

0800923c <xTaskCheckForTimeOut>:
{
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009240:	4605      	mov	r5, r0
 8009242:	b940      	cbnz	r0, 8009256 <xTaskCheckForTimeOut+0x1a>
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	e7fe      	b.n	8009254 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009256:	b941      	cbnz	r1, 800926a <xTaskCheckForTimeOut+0x2e>
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	e7fe      	b.n	8009268 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800926a:	f7fe fd4b 	bl	8007d04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <xTaskCheckForTimeOut+0x70>)
 8009270:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	d010      	beq.n	800929a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009278:	480d      	ldr	r0, [pc, #52]	; (80092b0 <xTaskCheckForTimeOut+0x74>)
 800927a:	682e      	ldr	r6, [r5, #0]
 800927c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800927e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009280:	4286      	cmp	r6, r0
 8009282:	d001      	beq.n	8009288 <xTaskCheckForTimeOut+0x4c>
 8009284:	428a      	cmp	r2, r1
 8009286:	d90f      	bls.n	80092a8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009288:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800928a:	4283      	cmp	r3, r0
 800928c:	d90a      	bls.n	80092a4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800928e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009290:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009292:	4413      	add	r3, r2
 8009294:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009296:	f7ff ffc5 	bl	8009224 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800929a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800929c:	f7fe fd52 	bl	8007d44 <vPortExitCritical>
}
 80092a0:	4620      	mov	r0, r4
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80092a8:	2401      	movs	r4, #1
 80092aa:	e7f7      	b.n	800929c <xTaskCheckForTimeOut+0x60>
 80092ac:	24006950 	.word	0x24006950
 80092b0:	24006908 	.word	0x24006908

080092b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80092b4:	4b01      	ldr	r3, [pc, #4]	; (80092bc <vTaskMissedYield+0x8>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	4770      	bx	lr
 80092bc:	24006954 	.word	0x24006954

080092c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <xTaskGetSchedulerState+0x18>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	b133      	cbz	r3, 80092d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <xTaskGetSchedulerState+0x1c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf0c      	ite	eq
 80092ce:	2002      	moveq	r0, #2
 80092d0:	2000      	movne	r0, #0
 80092d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092d4:	2001      	movs	r0, #1
	}
 80092d6:	4770      	bx	lr
 80092d8:	24006924 	.word	0x24006924
 80092dc:	240068d0 	.word	0x240068d0

080092e0 <xTaskPriorityInherit>:
	{
 80092e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80092e2:	4604      	mov	r4, r0
 80092e4:	b340      	cbz	r0, 8009338 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092e6:	4d1b      	ldr	r5, [pc, #108]	; (8009354 <xTaskPriorityInherit+0x74>)
 80092e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80092ea:	682a      	ldr	r2, [r5, #0]
 80092ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d228      	bcs.n	8009344 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092f2:	6982      	ldr	r2, [r0, #24]
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	db04      	blt.n	8009302 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f8:	682a      	ldr	r2, [r5, #0]
 80092fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009300:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009302:	2214      	movs	r2, #20
 8009304:	4e14      	ldr	r6, [pc, #80]	; (8009358 <xTaskPriorityInherit+0x78>)
 8009306:	fb02 6303 	mla	r3, r2, r3, r6
 800930a:	6962      	ldr	r2, [r4, #20]
 800930c:	429a      	cmp	r2, r3
 800930e:	d115      	bne.n	800933c <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009310:	1d21      	adds	r1, r4, #4
 8009312:	4608      	mov	r0, r1
 8009314:	9101      	str	r1, [sp, #4]
 8009316:	f7fe fc7e 	bl	8007c16 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800931c:	4a0f      	ldr	r2, [pc, #60]	; (800935c <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009320:	6810      	ldr	r0, [r2, #0]
 8009322:	9901      	ldr	r1, [sp, #4]
 8009324:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009326:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009328:	d900      	bls.n	800932c <xTaskPriorityInherit+0x4c>
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	2014      	movs	r0, #20
 800932e:	fb00 6003 	mla	r0, r0, r3, r6
 8009332:	f7fe fc4d 	bl	8007bd0 <vListInsertEnd>
				xReturn = pdTRUE;
 8009336:	2001      	movs	r0, #1
	}
 8009338:	b002      	add	sp, #8
 800933a:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009342:	e7f8      	b.n	8009336 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009348:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800934a:	42a0      	cmp	r0, r4
 800934c:	bf2c      	ite	cs
 800934e:	2000      	movcs	r0, #0
 8009350:	2001      	movcc	r0, #1
 8009352:	e7f1      	b.n	8009338 <xTaskPriorityInherit+0x58>
 8009354:	2400645c 	.word	0x2400645c
 8009358:	24006468 	.word	0x24006468
 800935c:	240068d8 	.word	0x240068d8

08009360 <xTaskPriorityDisinherit>:
	{
 8009360:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009362:	b910      	cbnz	r0, 800936a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009364:	2000      	movs	r0, #0
	}
 8009366:	b002      	add	sp, #8
 8009368:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800936a:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <xTaskPriorityDisinherit+0x7c>)
 800936c:	681c      	ldr	r4, [r3, #0]
 800936e:	4284      	cmp	r4, r0
 8009370:	d008      	beq.n	8009384 <xTaskPriorityDisinherit+0x24>
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	e7fe      	b.n	8009382 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009384:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009386:	b943      	cbnz	r3, 800939a <xTaskPriorityDisinherit+0x3a>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	e7fe      	b.n	8009398 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800939a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800939c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800939e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80093a0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093a2:	4291      	cmp	r1, r2
 80093a4:	d0de      	beq.n	8009364 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1dc      	bne.n	8009364 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093aa:	1d21      	adds	r1, r4, #4
 80093ac:	4608      	mov	r0, r1
 80093ae:	9101      	str	r1, [sp, #4]
 80093b0:	f7fe fc31 	bl	8007c16 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80093b6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093be:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80093c0:	4a07      	ldr	r2, [pc, #28]	; (80093e0 <xTaskPriorityDisinherit+0x80>)
 80093c2:	6810      	ldr	r0, [r2, #0]
 80093c4:	4283      	cmp	r3, r0
 80093c6:	d900      	bls.n	80093ca <xTaskPriorityDisinherit+0x6a>
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	4a06      	ldr	r2, [pc, #24]	; (80093e4 <xTaskPriorityDisinherit+0x84>)
 80093cc:	2014      	movs	r0, #20
 80093ce:	fb00 2003 	mla	r0, r0, r3, r2
 80093d2:	f7fe fbfd 	bl	8007bd0 <vListInsertEnd>
					xReturn = pdTRUE;
 80093d6:	2001      	movs	r0, #1
		return xReturn;
 80093d8:	e7c5      	b.n	8009366 <xTaskPriorityDisinherit+0x6>
 80093da:	bf00      	nop
 80093dc:	2400645c 	.word	0x2400645c
 80093e0:	240068d8 	.word	0x240068d8
 80093e4:	24006468 	.word	0x24006468

080093e8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80093e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80093ea:	4604      	mov	r4, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d044      	beq.n	800947a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 80093f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80093f2:	b942      	cbnz	r2, 8009406 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	e7fe      	b.n	8009404 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009406:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009408:	4299      	cmp	r1, r3
 800940a:	bf38      	it	cc
 800940c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800940e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009410:	428b      	cmp	r3, r1
 8009412:	d032      	beq.n	800947a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009414:	2a01      	cmp	r2, #1
 8009416:	d130      	bne.n	800947a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8009418:	4a19      	ldr	r2, [pc, #100]	; (8009480 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	4282      	cmp	r2, r0
 800941e:	d108      	bne.n	8009432 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	e7fe      	b.n	8009430 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009432:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009434:	4d13      	ldr	r5, [pc, #76]	; (8009484 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009436:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009438:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800943c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800943e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009442:	bfa8      	it	ge
 8009444:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009448:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800944a:	bfa8      	it	ge
 800944c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800944e:	429a      	cmp	r2, r3
 8009450:	d113      	bne.n	800947a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009452:	1d01      	adds	r1, r0, #4
 8009454:	4608      	mov	r0, r1
 8009456:	9101      	str	r1, [sp, #4]
 8009458:	f7fe fbdd 	bl	8007c16 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800945c:	4a0a      	ldr	r2, [pc, #40]	; (8009488 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800945e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009460:	6810      	ldr	r0, [r2, #0]
 8009462:	9901      	ldr	r1, [sp, #4]
 8009464:	4283      	cmp	r3, r0
 8009466:	d900      	bls.n	800946a <vTaskPriorityDisinheritAfterTimeout+0x82>
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	2014      	movs	r0, #20
 800946c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009470:	b003      	add	sp, #12
 8009472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8009476:	f7fe bbab 	b.w	8007bd0 <vListInsertEnd>
	}
 800947a:	b003      	add	sp, #12
 800947c:	bd30      	pop	{r4, r5, pc}
 800947e:	bf00      	nop
 8009480:	2400645c 	.word	0x2400645c
 8009484:	24006468 	.word	0x24006468
 8009488:	240068d8 	.word	0x240068d8

0800948c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <pvTaskIncrementMutexHeldCount+0x14>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	b11a      	cbz	r2, 800949a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009492:	6819      	ldr	r1, [r3, #0]
 8009494:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009496:	3201      	adds	r2, #1
 8009498:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800949a:	6818      	ldr	r0, [r3, #0]
	}
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	2400645c 	.word	0x2400645c

080094a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80094a6:	4c11      	ldr	r4, [pc, #68]	; (80094ec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80094a8:	f7fe fc2c 	bl	8007d04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	b9bd      	cbnz	r5, 80094e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80094b0:	4f0f      	ldr	r7, [pc, #60]	; (80094f0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80094b2:	4e10      	ldr	r6, [pc, #64]	; (80094f4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7fe fb7d 	bl	8007bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7fe fb7a 	bl	8007bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094c2:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <prvCheckForValidListAndQueue+0x58>)
 80094c4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80094c6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094c8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <prvCheckForValidListAndQueue+0x5c>)
 80094cc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <prvCheckForValidListAndQueue+0x60>)
 80094d0:	9500      	str	r5, [sp, #0]
 80094d2:	f7fe fe27 	bl	8008124 <xQueueGenericCreateStatic>
 80094d6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094d8:	b110      	cbz	r0, 80094e0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094da:	490b      	ldr	r1, [pc, #44]	; (8009508 <prvCheckForValidListAndQueue+0x64>)
 80094dc:	f7ff f9f2 	bl	80088c4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80094e0:	b003      	add	sp, #12
 80094e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80094e6:	f7fe bc2d 	b.w	8007d44 <vPortExitCritical>
 80094ea:	bf00      	nop
 80094ec:	24006a7c 	.word	0x24006a7c
 80094f0:	24006a00 	.word	0x24006a00
 80094f4:	24006a14 	.word	0x24006a14
 80094f8:	24006958 	.word	0x24006958
 80094fc:	24006960 	.word	0x24006960
 8009500:	2400695c 	.word	0x2400695c
 8009504:	24006a2c 	.word	0x24006a2c
 8009508:	08018d19 	.word	0x08018d19

0800950c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800950c:	4291      	cmp	r1, r2
{
 800950e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009510:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009512:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009514:	d80a      	bhi.n	800952c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	6983      	ldr	r3, [r0, #24]
 800951a:	429a      	cmp	r2, r3
 800951c:	d20d      	bcs.n	800953a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800951e:	1d01      	adds	r1, r0, #4
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009522:	6818      	ldr	r0, [r3, #0]
 8009524:	f7fe fb60 	bl	8007be8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009528:	2000      	movs	r0, #0
}
 800952a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800952c:	429a      	cmp	r2, r3
 800952e:	d201      	bcs.n	8009534 <prvInsertTimerInActiveList+0x28>
 8009530:	4299      	cmp	r1, r3
 8009532:	d202      	bcs.n	800953a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009534:	1d01      	adds	r1, r0, #4
 8009536:	4b03      	ldr	r3, [pc, #12]	; (8009544 <prvInsertTimerInActiveList+0x38>)
 8009538:	e7f3      	b.n	8009522 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800953a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800953c:	e7f5      	b.n	800952a <prvInsertTimerInActiveList+0x1e>
 800953e:	bf00      	nop
 8009540:	2400695c 	.word	0x2400695c
 8009544:	24006958 	.word	0x24006958

08009548 <xTimerCreateTimerTask>:
{
 8009548:	b510      	push	{r4, lr}
 800954a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800954c:	f7ff ffaa 	bl	80094a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009550:	4b12      	ldr	r3, [pc, #72]	; (800959c <xTimerCreateTimerTask+0x54>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b1b3      	cbz	r3, 8009584 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009556:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009558:	aa07      	add	r2, sp, #28
 800955a:	a906      	add	r1, sp, #24
 800955c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800955e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009562:	f7fe fa21 	bl	80079a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	9a07      	ldr	r2, [sp, #28]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	9b06      	ldr	r3, [sp, #24]
 800956e:	490c      	ldr	r1, [pc, #48]	; (80095a0 <xTimerCreateTimerTask+0x58>)
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	2302      	movs	r3, #2
 8009574:	480b      	ldr	r0, [pc, #44]	; (80095a4 <xTimerCreateTimerTask+0x5c>)
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4623      	mov	r3, r4
 800957a:	f7ff fb7d 	bl	8008c78 <xTaskCreateStatic>
 800957e:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <xTimerCreateTimerTask+0x60>)
 8009580:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009582:	b940      	cbnz	r0, 8009596 <xTimerCreateTimerTask+0x4e>
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009594:	e7fe      	b.n	8009594 <xTimerCreateTimerTask+0x4c>
}
 8009596:	2001      	movs	r0, #1
 8009598:	b008      	add	sp, #32
 800959a:	bd10      	pop	{r4, pc}
 800959c:	24006a7c 	.word	0x24006a7c
 80095a0:	08018d1e 	.word	0x08018d1e
 80095a4:	080096ad 	.word	0x080096ad
 80095a8:	24006a80 	.word	0x24006a80

080095ac <xTimerGenericCommand>:
{
 80095ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095ae:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80095b0:	4604      	mov	r4, r0
{
 80095b2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80095b4:	b940      	cbnz	r0, 80095c8 <xTimerGenericCommand+0x1c>
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	e7fe      	b.n	80095c6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80095c8:	4d0c      	ldr	r5, [pc, #48]	; (80095fc <xTimerGenericCommand+0x50>)
 80095ca:	6828      	ldr	r0, [r5, #0]
 80095cc:	b178      	cbz	r0, 80095ee <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095ce:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095d0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095d2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095d6:	dc0c      	bgt.n	80095f2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095d8:	f7ff fe72 	bl	80092c0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095dc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095e0:	4669      	mov	r1, sp
 80095e2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e4:	bf0c      	ite	eq
 80095e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095e8:	461a      	movne	r2, r3
 80095ea:	f7fe fe50 	bl	800828e <xQueueGenericSend>
}
 80095ee:	b004      	add	sp, #16
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095f2:	2300      	movs	r3, #0
 80095f4:	4669      	mov	r1, sp
 80095f6:	f7fe fefd 	bl	80083f4 <xQueueGenericSendFromISR>
 80095fa:	e7f8      	b.n	80095ee <xTimerGenericCommand+0x42>
 80095fc:	24006a7c 	.word	0x24006a7c

08009600 <prvSampleTimeNow>:
{
 8009600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009604:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80096a8 <prvSampleTimeNow+0xa8>
{
 8009608:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800960a:	f7ff fba3 	bl	8008d54 <xTaskGetTickCount>
 800960e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	4283      	cmp	r3, r0
 8009616:	d940      	bls.n	800969a <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009618:	4f21      	ldr	r7, [pc, #132]	; (80096a0 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800961a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	b95a      	cbnz	r2, 800963c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009624:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <prvSampleTimeNow+0xa4>)
 8009626:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009628:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800962a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800962c:	6039      	str	r1, [r7, #0]
}
 800962e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8009630:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009632:	f8c8 5000 	str.w	r5, [r8]
}
 8009636:	b004      	add	sp, #16
 8009638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800963c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009640:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009644:	1d21      	adds	r1, r4, #4
 8009646:	4608      	mov	r0, r1
 8009648:	9103      	str	r1, [sp, #12]
 800964a:	f7fe fae4 	bl	8007c16 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800964e:	6a23      	ldr	r3, [r4, #32]
 8009650:	4620      	mov	r0, r4
 8009652:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009654:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009658:	9903      	ldr	r1, [sp, #12]
 800965a:	f013 0f04 	tst.w	r3, #4
 800965e:	d0de      	beq.n	800961e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009660:	69a3      	ldr	r3, [r4, #24]
 8009662:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009664:	459a      	cmp	sl, r3
 8009666:	d205      	bcs.n	8009674 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009668:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800966a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800966c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800966e:	f7fe fabb 	bl	8007be8 <vListInsert>
 8009672:	e7d4      	b.n	800961e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009674:	2300      	movs	r3, #0
 8009676:	4652      	mov	r2, sl
 8009678:	4620      	mov	r0, r4
 800967a:	f8cd 9000 	str.w	r9, [sp]
 800967e:	4619      	mov	r1, r3
 8009680:	f7ff ff94 	bl	80095ac <xTimerGenericCommand>
				configASSERT( xResult );
 8009684:	2800      	cmp	r0, #0
 8009686:	d1ca      	bne.n	800961e <prvSampleTimeNow+0x1e>
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	e7fe      	b.n	8009698 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	e7c7      	b.n	800962e <prvSampleTimeNow+0x2e>
 800969e:	bf00      	nop
 80096a0:	24006958 	.word	0x24006958
 80096a4:	2400695c 	.word	0x2400695c
 80096a8:	24006a28 	.word	0x24006a28

080096ac <prvTimerTask>:
{
 80096ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b0:	4d6e      	ldr	r5, [pc, #440]	; (800986c <prvTimerTask+0x1c0>)
{
 80096b2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096b4:	4e6e      	ldr	r6, [pc, #440]	; (8009870 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	f8d3 8000 	ldr.w	r8, [r3]
 80096bc:	f1b8 0f00 	cmp.w	r8, #0
 80096c0:	d035      	beq.n	800972e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096c4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80096ca:	f7ff fb3b 	bl	8008d44 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ce:	a804      	add	r0, sp, #16
 80096d0:	f7ff ff96 	bl	8009600 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80096d4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d169      	bne.n	80097b0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d14c      	bne.n	800977a <prvTimerTask+0xce>
 80096e0:	4540      	cmp	r0, r8
 80096e2:	d350      	bcc.n	8009786 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80096e4:	f7ff fbd2 	bl	8008e8c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ee:	1d38      	adds	r0, r7, #4
 80096f0:	f7fe fa91 	bl	8007c16 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096f8:	0758      	lsls	r0, r3, #29
 80096fa:	d51a      	bpl.n	8009732 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	4643      	mov	r3, r8
 8009700:	464a      	mov	r2, r9
 8009702:	4638      	mov	r0, r7
 8009704:	4441      	add	r1, r8
 8009706:	f7ff ff01 	bl	800950c <prvInsertTimerInActiveList>
 800970a:	b1b0      	cbz	r0, 800973a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800970c:	4623      	mov	r3, r4
 800970e:	4642      	mov	r2, r8
 8009710:	4621      	mov	r1, r4
 8009712:	4638      	mov	r0, r7
 8009714:	9400      	str	r4, [sp, #0]
 8009716:	f7ff ff49 	bl	80095ac <xTimerGenericCommand>
			configASSERT( xResult );
 800971a:	b970      	cbnz	r0, 800973a <prvTimerTask+0x8e>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	e7fe      	b.n	800972c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800972e:	2401      	movs	r4, #1
 8009730:	e7cb      	b.n	80096ca <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009732:	f023 0301 	bic.w	r3, r3, #1
 8009736:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	4638      	mov	r0, r7
 800973e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009740:	2200      	movs	r2, #0
 8009742:	a904      	add	r1, sp, #16
 8009744:	6830      	ldr	r0, [r6, #0]
 8009746:	f7fe ff0b 	bl	8008560 <xQueueReceive>
 800974a:	2800      	cmp	r0, #0
 800974c:	d0b3      	beq.n	80096b6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800974e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009750:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009752:	2b00      	cmp	r3, #0
 8009754:	db2f      	blt.n	80097b6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009756:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009758:	6963      	ldr	r3, [r4, #20]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d132      	bne.n	80097c4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800975e:	a803      	add	r0, sp, #12
 8009760:	f7ff ff4e 	bl	8009600 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009764:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009766:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009768:	2b09      	cmp	r3, #9
 800976a:	d8e9      	bhi.n	8009740 <prvTimerTask+0x94>
 800976c:	e8df f003 	tbb	[pc, r3]
 8009770:	572e2e2e 	.word	0x572e2e2e
 8009774:	2e2e765e 	.word	0x2e2e765e
 8009778:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800977a:	4b3e      	ldr	r3, [pc, #248]	; (8009874 <prvTimerTask+0x1c8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681c      	ldr	r4, [r3, #0]
 8009780:	fab4 f484 	clz	r4, r4
 8009784:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009786:	4622      	mov	r2, r4
 8009788:	eba8 0109 	sub.w	r1, r8, r9
 800978c:	6830      	ldr	r0, [r6, #0]
 800978e:	f7ff f8d6 	bl	800893e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009792:	f7ff fb7b 	bl	8008e8c <xTaskResumeAll>
 8009796:	2800      	cmp	r0, #0
 8009798:	d1d2      	bne.n	8009740 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800979a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	e7c7      	b.n	8009740 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80097b0:	f7ff fb6c 	bl	8008e8c <xTaskResumeAll>
}
 80097b4:	e7c4      	b.n	8009740 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097b6:	9b05      	ldr	r3, [sp, #20]
 80097b8:	9907      	ldr	r1, [sp, #28]
 80097ba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dbbe      	blt.n	8009740 <prvTimerTask+0x94>
 80097c2:	e7c8      	b.n	8009756 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c4:	1d20      	adds	r0, r4, #4
 80097c6:	f7fe fa26 	bl	8007c16 <uxListRemove>
 80097ca:	e7c8      	b.n	800975e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097d0:	4620      	mov	r0, r4
 80097d2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d4:	f043 0301 	orr.w	r3, r3, #1
 80097d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097dc:	9b05      	ldr	r3, [sp, #20]
 80097de:	4419      	add	r1, r3
 80097e0:	f7ff fe94 	bl	800950c <prvInsertTimerInActiveList>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d0ab      	beq.n	8009740 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e8:	6a23      	ldr	r3, [r4, #32]
 80097ea:	4620      	mov	r0, r4
 80097ec:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80097f2:	0759      	lsls	r1, r3, #29
 80097f4:	d5a4      	bpl.n	8009740 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097f6:	69a2      	ldr	r2, [r4, #24]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9905      	ldr	r1, [sp, #20]
 80097fc:	4620      	mov	r0, r4
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	440a      	add	r2, r1
 8009802:	4619      	mov	r1, r3
 8009804:	f7ff fed2 	bl	80095ac <xTimerGenericCommand>
							configASSERT( xResult );
 8009808:	2800      	cmp	r0, #0
 800980a:	d199      	bne.n	8009740 <prvTimerTask+0x94>
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	e7fe      	b.n	800981c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800981e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800982a:	e789      	b.n	8009740 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800982c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009838:	9905      	ldr	r1, [sp, #20]
 800983a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800983c:	b941      	cbnz	r1, 8009850 <prvTimerTask+0x1a4>
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	e7fe      	b.n	800984e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009850:	4603      	mov	r3, r0
 8009852:	4401      	add	r1, r0
 8009854:	4620      	mov	r0, r4
 8009856:	f7ff fe59 	bl	800950c <prvInsertTimerInActiveList>
					break;
 800985a:	e771      	b.n	8009740 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800985c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009860:	079a      	lsls	r2, r3, #30
 8009862:	d4de      	bmi.n	8009822 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8009864:	4620      	mov	r0, r4
 8009866:	f7fe f967 	bl	8007b38 <vPortFree>
 800986a:	e769      	b.n	8009740 <prvTimerTask+0x94>
 800986c:	24006958 	.word	0x24006958
 8009870:	24006a7c 	.word	0x24006a7c
 8009874:	2400695c 	.word	0x2400695c

08009878 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8009878:	8880      	ldrh	r0, [r0, #4]
 800987a:	4770      	bx	lr

0800987c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	6803      	ldr	r3, [r0, #0]
 8009880:	460c      	mov	r4, r1
 8009882:	2100      	movs	r1, #0
 8009884:	4605      	mov	r5, r0
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	4798      	blx	r3
 800988a:	4606      	mov	r6, r0
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	4628      	mov	r0, r5
 8009890:	1ba4      	subs	r4, r4, r6
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	b2a4      	uxth	r4, r4
 8009896:	4798      	blx	r3
 8009898:	fbb4 f0f0 	udiv	r0, r4, r0
 800989c:	bd70      	pop	{r4, r5, r6, pc}

0800989e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800989e:	2300      	movs	r3, #0
 80098a0:	8083      	strh	r3, [r0, #4]
 80098a2:	4770      	bx	lr

080098a4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	6803      	ldr	r3, [r0, #0]
 80098a8:	4604      	mov	r4, r0
 80098aa:	8881      	ldrh	r1, [r0, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	4798      	blx	r3
 80098b0:	88a3      	ldrh	r3, [r4, #4]
 80098b2:	3301      	adds	r3, #1
 80098b4:	80a3      	strh	r3, [r4, #4]
 80098b6:	bd10      	pop	{r4, pc}

080098b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80098b8:	6803      	ldr	r3, [r0, #0]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	4718      	bx	r3

080098be <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80098be:	4770      	bx	lr

080098c0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80098c0:	4a02      	ldr	r2, [pc, #8]	; (80098cc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80098c2:	6002      	str	r2, [r0, #0]
 80098c4:	2200      	movs	r2, #0
 80098c6:	8082      	strh	r2, [r0, #4]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	08018d30 	.word	0x08018d30

080098d0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80098d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80098d2:	4770      	bx	lr

080098d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80098d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098d6:	2000      	movs	r0, #0
 80098d8:	b12b      	cbz	r3, 80098e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80098da:	b920      	cbnz	r0, 80098e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80098dc:	1a5a      	subs	r2, r3, r1
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	4250      	negs	r0, r2
 80098e2:	4150      	adcs	r0, r2
 80098e4:	e7f8      	b.n	80098d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80098e6:	4770      	bx	lr

080098e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80098e8:	2300      	movs	r3, #0
 80098ea:	6148      	str	r0, [r1, #20]
 80098ec:	618b      	str	r3, [r1, #24]
 80098ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098f0:	b913      	cbnz	r3, 80098f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80098f2:	6281      	str	r1, [r0, #40]	; 0x28
 80098f4:	4770      	bx	lr
 80098f6:	4613      	mov	r3, r2
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d1fb      	bne.n	80098f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80098fe:	6199      	str	r1, [r3, #24]
 8009900:	4770      	bx	lr

08009902 <_ZN8touchgfx9Container9removeAllEv>:
 8009902:	2200      	movs	r2, #0
 8009904:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009906:	b123      	cbz	r3, 8009912 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009908:	6999      	ldr	r1, [r3, #24]
 800990a:	6281      	str	r1, [r0, #40]	; 0x28
 800990c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009910:	e7f8      	b.n	8009904 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8009912:	4770      	bx	lr

08009914 <_ZN8touchgfx9Container6unlinkEv>:
 8009914:	2300      	movs	r3, #0
 8009916:	6283      	str	r3, [r0, #40]	; 0x28
 8009918:	4770      	bx	lr

0800991a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800991a:	2200      	movs	r2, #0
 800991c:	8002      	strh	r2, [r0, #0]
 800991e:	8042      	strh	r2, [r0, #2]
 8009920:	8082      	strh	r2, [r0, #4]
 8009922:	80c2      	strh	r2, [r0, #6]
 8009924:	4770      	bx	lr

08009926 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8009926:	b570      	push	{r4, r5, r6, lr}
 8009928:	460d      	mov	r5, r1
 800992a:	4616      	mov	r6, r2
 800992c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800992e:	b13c      	cbz	r4, 8009940 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	4620      	mov	r0, r4
 8009934:	4632      	mov	r2, r6
 8009936:	4629      	mov	r1, r5
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	4798      	blx	r3
 800993c:	69a4      	ldr	r4, [r4, #24]
 800993e:	e7f6      	b.n	800992e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009940:	bd70      	pop	{r4, r5, r6, pc}

08009942 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8009942:	b538      	push	{r3, r4, r5, lr}
 8009944:	460d      	mov	r5, r1
 8009946:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009948:	b134      	cbz	r4, 8009958 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	4621      	mov	r1, r4
 800994e:	4628      	mov	r0, r5
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	4798      	blx	r3
 8009954:	69a4      	ldr	r4, [r4, #24]
 8009956:	e7f7      	b.n	8009948 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8009958:	bd38      	pop	{r3, r4, r5, pc}

0800995a <_ZN8touchgfx9ContainerD1Ev>:
 800995a:	4770      	bx	lr

0800995c <_ZN8touchgfx9ContainerD0Ev>:
 800995c:	b510      	push	{r4, lr}
 800995e:	4604      	mov	r4, r0
 8009960:	212c      	movs	r1, #44	; 0x2c
 8009962:	f00d f901 	bl	8016b68 <_ZdlPvj>
 8009966:	4620      	mov	r0, r4
 8009968:	bd10      	pop	{r4, pc}

0800996a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800996a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800996c:	b19b      	cbz	r3, 8009996 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800996e:	428b      	cmp	r3, r1
 8009970:	d109      	bne.n	8009986 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8009972:	699a      	ldr	r2, [r3, #24]
 8009974:	2100      	movs	r1, #0
 8009976:	6159      	str	r1, [r3, #20]
 8009978:	6282      	str	r2, [r0, #40]	; 0x28
 800997a:	b902      	cbnz	r2, 800997e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800997c:	4770      	bx	lr
 800997e:	6199      	str	r1, [r3, #24]
 8009980:	4770      	bx	lr
 8009982:	4613      	mov	r3, r2
 8009984:	b13a      	cbz	r2, 8009996 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009986:	699a      	ldr	r2, [r3, #24]
 8009988:	428a      	cmp	r2, r1
 800998a:	d1fa      	bne.n	8009982 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800998c:	698a      	ldr	r2, [r1, #24]
 800998e:	619a      	str	r2, [r3, #24]
 8009990:	2300      	movs	r3, #0
 8009992:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8009996:	4770      	bx	lr

08009998 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8009998:	b410      	push	{r4}
 800999a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800999c:	4604      	mov	r4, r0
 800999e:	b92b      	cbnz	r3, 80099ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80099a0:	6803      	ldr	r3, [r0, #0]
 80099a2:	4611      	mov	r1, r2
 80099a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099aa:	4718      	bx	r3
 80099ac:	b941      	cbnz	r1, 80099c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80099ae:	6193      	str	r3, [r2, #24]
 80099b0:	6282      	str	r2, [r0, #40]	; 0x28
 80099b2:	6154      	str	r4, [r2, #20]
 80099b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	4603      	mov	r3, r0
 80099bc:	2800      	cmp	r0, #0
 80099be:	d0f9      	beq.n	80099b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80099c0:	4299      	cmp	r1, r3
 80099c2:	6998      	ldr	r0, [r3, #24]
 80099c4:	d1f9      	bne.n	80099ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80099c6:	6190      	str	r0, [r2, #24]
 80099c8:	618a      	str	r2, [r1, #24]
 80099ca:	e7f2      	b.n	80099b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080099cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	461f      	mov	r7, r3
 80099d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80099d6:	460d      	mov	r5, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	b103      	cbz	r3, 80099de <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80099dc:	6038      	str	r0, [r7, #0]
 80099de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80099e0:	b314      	cbz	r4, 8009a28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80099e2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80099e6:	b1eb      	cbz	r3, 8009a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80099e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80099ec:	428d      	cmp	r5, r1
 80099ee:	db19      	blt.n	8009a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80099f0:	b289      	uxth	r1, r1
 80099f2:	8923      	ldrh	r3, [r4, #8]
 80099f4:	440b      	add	r3, r1
 80099f6:	b21b      	sxth	r3, r3
 80099f8:	429d      	cmp	r5, r3
 80099fa:	da13      	bge.n	8009a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80099fc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009a00:	4296      	cmp	r6, r2
 8009a02:	db0f      	blt.n	8009a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a04:	b292      	uxth	r2, r2
 8009a06:	8963      	ldrh	r3, [r4, #10]
 8009a08:	4413      	add	r3, r2
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	429e      	cmp	r6, r3
 8009a0e:	da09      	bge.n	8009a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	1ab2      	subs	r2, r6, r2
 8009a14:	1a69      	subs	r1, r5, r1
 8009a16:	4620      	mov	r0, r4
 8009a18:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8009a1c:	b212      	sxth	r2, r2
 8009a1e:	463b      	mov	r3, r7
 8009a20:	b209      	sxth	r1, r1
 8009a22:	47c0      	blx	r8
 8009a24:	69a4      	ldr	r4, [r4, #24]
 8009a26:	e7db      	b.n	80099e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	4c6d      	ldr	r4, [pc, #436]	; (8009be8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8009a32:	b0a1      	sub	sp, #132	; 0x84
 8009a34:	4606      	mov	r6, r0
 8009a36:	6824      	ldr	r4, [r4, #0]
 8009a38:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8009a3a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8009a3e:	2400      	movs	r4, #0
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	802c      	strh	r4, [r5, #0]
 8009a44:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8009a46:	802c      	strh	r4, [r5, #0]
 8009a48:	601c      	str	r4, [r3, #0]
 8009a4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009a4e:	f7ff ffbd 	bl	80099cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009a52:	f1b9 0f03 	cmp.w	r9, #3
 8009a56:	f340 80c1 	ble.w	8009bdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	a80c      	add	r0, sp, #48	; 0x30
 8009a5e:	f003 fb6d 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009a62:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8009a66:	9306      	str	r3, [sp, #24]
 8009a68:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8009a6c:	9307      	str	r3, [sp, #28]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	f8d3 a000 	ldr.w	sl, [r3]
 8009a74:	f1ba 0f00 	cmp.w	sl, #0
 8009a78:	f000 80b3 	beq.w	8009be2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8009a7c:	4651      	mov	r1, sl
 8009a7e:	a810      	add	r0, sp, #64	; 0x40
 8009a80:	f003 fb5c 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009a84:	2002      	movs	r0, #2
 8009a86:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8009a8a:	9b01      	ldr	r3, [sp, #4]
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	fb91 f1f0 	sdiv	r1, r1, r0
 8009a92:	189d      	adds	r5, r3, r2
 8009a94:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009a98:	9a07      	ldr	r2, [sp, #28]
 8009a9a:	4419      	add	r1, r3
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8009aa4:	1a6d      	subs	r5, r5, r1
 8009aa6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8009aaa:	fb92 f2f0 	sdiv	r2, r2, r0
 8009aae:	440a      	add	r2, r1
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	435b      	muls	r3, r3
 8009ab4:	fb05 3505 	mla	r5, r5, r5, r3
 8009ab8:	4f4c      	ldr	r7, [pc, #304]	; (8009bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8009aba:	ac10      	add	r4, sp, #64	; 0x40
 8009abc:	f1b9 0f0c 	cmp.w	r9, #12
 8009ac0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ac4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ac8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009acc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8009ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009ad4:	f04f 0303 	mov.w	r3, #3
 8009ad8:	bfd8      	it	le
 8009ada:	f109 32ff 	addle.w	r2, r9, #4294967295
 8009ade:	f04f 0400 	mov.w	r4, #0
 8009ae2:	f8cd 9000 	str.w	r9, [sp]
 8009ae6:	bfcc      	ite	gt
 8009ae8:	4698      	movgt	r8, r3
 8009aea:	fb92 f8f3 	sdivle	r8, r2, r3
 8009aee:	1c63      	adds	r3, r4, #1
 8009af0:	aa10      	add	r2, sp, #64	; 0x40
 8009af2:	f004 0401 	and.w	r4, r4, #1
 8009af6:	f04f 0b00 	mov.w	fp, #0
 8009afa:	9308      	str	r3, [sp, #32]
 8009afc:	9b00      	ldr	r3, [sp, #0]
 8009afe:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009b02:	fb93 f3f8 	sdiv	r3, r3, r8
 8009b06:	3404      	adds	r4, #4
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	9304      	str	r3, [sp, #16]
 8009b0c:	9a04      	ldr	r2, [sp, #16]
 8009b0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009b12:	fb13 f302 	smulbb	r3, r3, r2
 8009b16:	9a01      	ldr	r2, [sp, #4]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	1899      	adds	r1, r3, r2
 8009b1c:	9305      	str	r3, [sp, #20]
 8009b1e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009b22:	b209      	sxth	r1, r1
 8009b24:	4299      	cmp	r1, r3
 8009b26:	db4d      	blt.n	8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b28:	8932      	ldrh	r2, [r6, #8]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	da48      	bge.n	8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b32:	9b04      	ldr	r3, [sp, #16]
 8009b34:	6827      	ldr	r7, [r4, #0]
 8009b36:	fb17 f703 	smulbb	r7, r7, r3
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	b2bf      	uxth	r7, r7
 8009b3e:	18fa      	adds	r2, r7, r3
 8009b40:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009b44:	b212      	sxth	r2, r2
 8009b46:	429a      	cmp	r2, r3
 8009b48:	db3c      	blt.n	8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b4a:	8970      	ldrh	r0, [r6, #10]
 8009b4c:	4403      	add	r3, r0
 8009b4e:	b21b      	sxth	r3, r3
 8009b50:	429a      	cmp	r2, r3
 8009b52:	da37      	bge.n	8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b54:	2300      	movs	r3, #0
 8009b56:	4630      	mov	r0, r6
 8009b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b5a:	ab0b      	add	r3, sp, #44	; 0x2c
 8009b5c:	f7ff ff36 	bl	80099cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b62:	b37a      	cbz	r2, 8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b64:	4552      	cmp	r2, sl
 8009b66:	d02d      	beq.n	8009bc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b68:	4611      	mov	r1, r2
 8009b6a:	a80e      	add	r0, sp, #56	; 0x38
 8009b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b6e:	f003 fae5 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009b72:	f04f 0e02 	mov.w	lr, #2
 8009b76:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8009b7a:	9a06      	ldr	r2, [sp, #24]
 8009b7c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8009b86:	4413      	add	r3, r2
 8009b88:	9a07      	ldr	r2, [sp, #28]
 8009b8a:	fb91 f1fe 	sdiv	r1, r1, lr
 8009b8e:	fb9c fcfe 	sdiv	ip, ip, lr
 8009b92:	4401      	add	r1, r0
 8009b94:	1a58      	subs	r0, r3, r1
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8009b9c:	4413      	add	r3, r2
 8009b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba0:	448c      	add	ip, r1
 8009ba2:	eba3 030c 	sub.w	r3, r3, ip
 8009ba6:	435b      	muls	r3, r3
 8009ba8:	fb00 3300 	mla	r3, r0, r0, r3
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	d208      	bcs.n	8009bc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8009bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	9803      	ldr	r0, [sp, #12]
 8009bb6:	6001      	str	r1, [r0, #0]
 8009bb8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009bba:	9805      	ldr	r0, [sp, #20]
 8009bbc:	8008      	strh	r0, [r1, #0]
 8009bbe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009bc0:	800f      	strh	r7, [r1, #0]
 8009bc2:	4692      	mov	sl, r2
 8009bc4:	f10b 0b01 	add.w	fp, fp, #1
 8009bc8:	3408      	adds	r4, #8
 8009bca:	f1bb 0f04 	cmp.w	fp, #4
 8009bce:	d19d      	bne.n	8009b0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8009bd0:	9b00      	ldr	r3, [sp, #0]
 8009bd2:	9c08      	ldr	r4, [sp, #32]
 8009bd4:	444b      	add	r3, r9
 8009bd6:	4544      	cmp	r4, r8
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	d188      	bne.n	8009aee <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8009bdc:	b021      	add	sp, #132	; 0x84
 8009bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be2:	f04f 35ff 	mov.w	r5, #4294967295
 8009be6:	e767      	b.n	8009ab8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8009be8:	24006a90 	.word	0x24006a90
 8009bec:	08017e14 	.word	0x08017e14

08009bf0 <_ZN8touchgfx4RectaNERKS0_>:
 8009bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009bf8:	888c      	ldrh	r4, [r1, #4]
 8009bfa:	f9b0 9000 	ldrsh.w	r9, [r0]
 8009bfe:	443c      	add	r4, r7
 8009c00:	b2a4      	uxth	r4, r4
 8009c02:	fa0f f884 	sxth.w	r8, r4
 8009c06:	45c1      	cmp	r9, r8
 8009c08:	da2f      	bge.n	8009c6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c0a:	8882      	ldrh	r2, [r0, #4]
 8009c0c:	444a      	add	r2, r9
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	fa0f fe82 	sxth.w	lr, r2
 8009c14:	4577      	cmp	r7, lr
 8009c16:	da28      	bge.n	8009c6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c18:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009c1c:	88cb      	ldrh	r3, [r1, #6]
 8009c1e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8009c22:	442b      	add	r3, r5
 8009c24:	b21b      	sxth	r3, r3
 8009c26:	429e      	cmp	r6, r3
 8009c28:	da1f      	bge.n	8009c6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c2a:	88c3      	ldrh	r3, [r0, #6]
 8009c2c:	4433      	add	r3, r6
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	fa0f fc83 	sxth.w	ip, r3
 8009c34:	4565      	cmp	r5, ip
 8009c36:	da18      	bge.n	8009c6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c38:	454f      	cmp	r7, r9
 8009c3a:	bfb8      	it	lt
 8009c3c:	464f      	movlt	r7, r9
 8009c3e:	42b5      	cmp	r5, r6
 8009c40:	bfb8      	it	lt
 8009c42:	4635      	movlt	r5, r6
 8009c44:	45f0      	cmp	r8, lr
 8009c46:	bfd8      	it	le
 8009c48:	4622      	movle	r2, r4
 8009c4a:	1bd2      	subs	r2, r2, r7
 8009c4c:	8082      	strh	r2, [r0, #4]
 8009c4e:	884a      	ldrh	r2, [r1, #2]
 8009c50:	88c9      	ldrh	r1, [r1, #6]
 8009c52:	8007      	strh	r7, [r0, #0]
 8009c54:	440a      	add	r2, r1
 8009c56:	8045      	strh	r5, [r0, #2]
 8009c58:	b292      	uxth	r2, r2
 8009c5a:	b211      	sxth	r1, r2
 8009c5c:	458c      	cmp	ip, r1
 8009c5e:	bfa8      	it	ge
 8009c60:	4613      	movge	r3, r2
 8009c62:	1b5b      	subs	r3, r3, r5
 8009c64:	80c3      	strh	r3, [r0, #6]
 8009c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	8003      	strh	r3, [r0, #0]
 8009c6e:	8043      	strh	r3, [r0, #2]
 8009c70:	8083      	strh	r3, [r0, #4]
 8009c72:	80c3      	strh	r3, [r0, #6]
 8009c74:	e7f7      	b.n	8009c66 <_ZN8touchgfx4RectaNERKS0_+0x76>

08009c76 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8009c76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dd06      	ble.n	8009c8c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009c7e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009c82:	2800      	cmp	r0, #0
 8009c84:	bfcc      	ite	gt
 8009c86:	2000      	movgt	r0, #0
 8009c88:	2001      	movle	r0, #1
 8009c8a:	4770      	bx	lr
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	4770      	bx	lr

08009c90 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8009c9a:	8003      	strh	r3, [r0, #0]
 8009c9c:	8043      	strh	r3, [r0, #2]
 8009c9e:	8083      	strh	r3, [r0, #4]
 8009ca0:	80c3      	strh	r3, [r0, #6]
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	d040      	beq.n	8009d28 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009ca6:	1d28      	adds	r0, r5, #4
 8009ca8:	f7ff ffe5 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009cac:	b988      	cbnz	r0, 8009cd2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff ffe1 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009cb4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009cb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009cbc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009cc0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009cc4:	b138      	cbz	r0, 8009cd6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009cc6:	8022      	strh	r2, [r4, #0]
 8009cc8:	8063      	strh	r3, [r4, #2]
 8009cca:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009cce:	f8a4 c006 	strh.w	ip, [r4, #6]
 8009cd2:	69ad      	ldr	r5, [r5, #24]
 8009cd4:	e7e5      	b.n	8009ca2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009cd6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009cda:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009cde:	4290      	cmp	r0, r2
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009ce6:	460e      	mov	r6, r1
 8009ce8:	bfa8      	it	ge
 8009cea:	4617      	movge	r7, r2
 8009cec:	4299      	cmp	r1, r3
 8009cee:	4472      	add	r2, lr
 8009cf0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009cf4:	bfa8      	it	ge
 8009cf6:	461e      	movge	r6, r3
 8009cf8:	4440      	add	r0, r8
 8009cfa:	4471      	add	r1, lr
 8009cfc:	4463      	add	r3, ip
 8009cfe:	b200      	sxth	r0, r0
 8009d00:	8027      	strh	r7, [r4, #0]
 8009d02:	b212      	sxth	r2, r2
 8009d04:	8066      	strh	r6, [r4, #2]
 8009d06:	b209      	sxth	r1, r1
 8009d08:	b21b      	sxth	r3, r3
 8009d0a:	4290      	cmp	r0, r2
 8009d0c:	bfac      	ite	ge
 8009d0e:	ebc7 0200 	rsbge	r2, r7, r0
 8009d12:	ebc7 0202 	rsblt	r2, r7, r2
 8009d16:	4299      	cmp	r1, r3
 8009d18:	bfac      	ite	ge
 8009d1a:	ebc6 0301 	rsbge	r3, r6, r1
 8009d1e:	ebc6 0303 	rsblt	r3, r6, r3
 8009d22:	80a2      	strh	r2, [r4, #4]
 8009d24:	80e3      	strh	r3, [r4, #6]
 8009d26:	e7d4      	b.n	8009cd2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d2e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009d2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d32:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009d36:	b383      	cbz	r3, 8009d9a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009d38:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009d3a:	b374      	cbz	r4, 8009d9a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009d3c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009d40:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8009d44:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009d48:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009d4c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009d50:	b303      	cbz	r3, 8009d94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009d52:	4668      	mov	r0, sp
 8009d54:	1d21      	adds	r1, r4, #4
 8009d56:	f8ad 5000 	strh.w	r5, [sp]
 8009d5a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009d5e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009d62:	f8ad 8006 	strh.w	r8, [sp, #6]
 8009d66:	f7ff ff43 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 8009d6a:	4668      	mov	r0, sp
 8009d6c:	f7ff ff83 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009d70:	b980      	cbnz	r0, 8009d94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009d72:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d76:	4669      	mov	r1, sp
 8009d78:	88a2      	ldrh	r2, [r4, #4]
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	88e2      	ldrh	r2, [r4, #6]
 8009d80:	f8ad 3000 	strh.w	r3, [sp]
 8009d84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009d88:	1a9b      	subs	r3, r3, r2
 8009d8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	4798      	blx	r3
 8009d94:	69a4      	ldr	r4, [r4, #24]
 8009d96:	2c00      	cmp	r4, #0
 8009d98:	d1d8      	bne.n	8009d4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009d9a:	b002      	add	sp, #8
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009da0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009da2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009da6:	460d      	mov	r5, r1
 8009da8:	4616      	mov	r6, r2
 8009daa:	b323      	cbz	r3, 8009df6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009dac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009dae:	b314      	cbz	r4, 8009df6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009db0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009db4:	b1eb      	cbz	r3, 8009df2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009db6:	6828      	ldr	r0, [r5, #0]
 8009db8:	466b      	mov	r3, sp
 8009dba:	6869      	ldr	r1, [r5, #4]
 8009dbc:	c303      	stmia	r3!, {r0, r1}
 8009dbe:	4668      	mov	r0, sp
 8009dc0:	1d21      	adds	r1, r4, #4
 8009dc2:	f7ff ff15 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 8009dc6:	4668      	mov	r0, sp
 8009dc8:	f7ff ff55 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009dcc:	b988      	cbnz	r0, 8009df2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009dce:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dd2:	4669      	mov	r1, sp
 8009dd4:	88a2      	ldrh	r2, [r4, #4]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	1a9b      	subs	r3, r3, r2
 8009dda:	88e2      	ldrh	r2, [r4, #6]
 8009ddc:	f8ad 3000 	strh.w	r3, [sp]
 8009de0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	4632      	mov	r2, r6
 8009de8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df0:	4798      	blx	r3
 8009df2:	69a4      	ldr	r4, [r4, #24]
 8009df4:	e7db      	b.n	8009dae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009df6:	b002      	add	sp, #8
 8009df8:	bd70      	pop	{r4, r5, r6, pc}

08009dfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009dfa:	6803      	ldr	r3, [r0, #0]
 8009dfc:	b513      	push	{r0, r1, r4, lr}
 8009dfe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8009e02:	2300      	movs	r3, #0
 8009e04:	e9cd 3300 	strd	r3, r3, [sp]
 8009e08:	466b      	mov	r3, sp
 8009e0a:	47a0      	blx	r4
 8009e0c:	b002      	add	sp, #8
 8009e0e:	bd10      	pop	{r4, pc}

08009e10 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009e10:	2301      	movs	r3, #1
 8009e12:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8009e16:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8009e1a:	4770      	bx	lr

08009e1c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8009e22:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8009e26:	4770      	bx	lr

08009e28 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009e28:	6843      	ldr	r3, [r0, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	725a      	strb	r2, [r3, #9]
 8009e2e:	6840      	ldr	r0, [r0, #4]
 8009e30:	6803      	ldr	r3, [r0, #0]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	4718      	bx	r3

08009e36 <_ZN8touchgfx3HAL8flushDMAEv>:
 8009e36:	6840      	ldr	r0, [r0, #4]
 8009e38:	6803      	ldr	r3, [r0, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	4718      	bx	r3

08009e3e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009e3e:	b530      	push	{r4, r5, lr}
 8009e40:	b08b      	sub	sp, #44	; 0x2c
 8009e42:	6804      	ldr	r4, [r0, #0]
 8009e44:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8009e48:	9509      	str	r5, [sp, #36]	; 0x24
 8009e4a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8009e4e:	9508      	str	r5, [sp, #32]
 8009e50:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8009e54:	9507      	str	r5, [sp, #28]
 8009e56:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8009e5a:	9506      	str	r5, [sp, #24]
 8009e5c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8009e60:	9505      	str	r5, [sp, #20]
 8009e62:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8009e66:	9504      	str	r5, [sp, #16]
 8009e68:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8009e6c:	9503      	str	r5, [sp, #12]
 8009e6e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8009e72:	9502      	str	r5, [sp, #8]
 8009e74:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8009e78:	e9cd 3500 	strd	r3, r5, [sp]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8009e80:	2200      	movs	r2, #0
 8009e82:	47a0      	blx	r4
 8009e84:	b00b      	add	sp, #44	; 0x2c
 8009e86:	bd30      	pop	{r4, r5, pc}

08009e88 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b123      	cbz	r3, 8009e98 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009e8e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8009e92:	f080 0001 	eor.w	r0, r0, #1
 8009e96:	4770      	bx	lr
 8009e98:	2001      	movs	r0, #1
 8009e9a:	4770      	bx	lr
 8009e9c:	24006a8e 	.word	0x24006a8e

08009ea0 <_ZN8touchgfx3HAL8endFrameEv>:
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	6840      	ldr	r0, [r0, #4]
 8009ea6:	6803      	ldr	r3, [r0, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4798      	blx	r3
 8009eac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8009eb0:	b113      	cbz	r3, 8009eb8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <_ZN8touchgfx3HAL10initializeEv>:
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	f7f7 fbd7 	bl	8001670 <_ZN8touchgfx10OSWrappers10initializeEv>
 8009ec2:	f7f7 fa97 	bl	80013f4 <_ZN8touchgfx4GPIO4initEv>
 8009ec6:	6860      	ldr	r0, [r4, #4]
 8009ec8:	6803      	ldr	r3, [r0, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	4798      	blx	r3
 8009ece:	68e0      	ldr	r0, [r4, #12]
 8009ed0:	6803      	ldr	r3, [r0, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	4798      	blx	r3
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee0:	4718      	bx	r3
	...

08009ee4 <_ZN8touchgfx3HAL4tickEv>:
 8009ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	4604      	mov	r4, r0
 8009eea:	4d5b      	ldr	r5, [pc, #364]	; (800a058 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ef0:	4798      	blx	r3
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f000 8095 	beq.w	800a022 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009ef8:	2001      	movs	r0, #1
 8009efa:	2600      	movs	r6, #0
 8009efc:	f7f7 f9d8 	bl	80012b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8009f00:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8009f04:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8009f08:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8009f0c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009f10:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8009f14:	b133      	cbz	r3, 8009f24 <_ZN8touchgfx3HAL4tickEv+0x40>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009f1e:	4798      	blx	r3
 8009f20:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8009f24:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8009f28:	2601      	movs	r6, #1
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	f083 0301 	eor.w	r3, r3, #1
 8009f30:	702e      	strb	r6, [r5, #0]
 8009f32:	7253      	strb	r3, [r2, #9]
 8009f34:	f002 f822 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
 8009f38:	6803      	ldr	r3, [r0, #0]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	4798      	blx	r3
 8009f3e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8009f42:	b90b      	cbnz	r3, 8009f48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009f44:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8009f48:	f002 f818 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
 8009f4c:	6803      	ldr	r3, [r0, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	4798      	blx	r3
 8009f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f54:	6803      	ldr	r3, [r0, #0]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	4798      	blx	r3
 8009f5a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8009f5e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8009f6a:	b10a      	cbz	r2, 8009f70 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1eb      	bne.n	8009f48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009f70:	4a3a      	ldr	r2, [pc, #232]	; (800a05c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8009f72:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8009f76:	7813      	ldrb	r3, [r2, #0]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	7013      	strb	r3, [r2, #0]
 8009f80:	dc10      	bgt.n	8009fa4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009f82:	2300      	movs	r3, #0
 8009f84:	68e0      	ldr	r0, [r4, #12]
 8009f86:	a902      	add	r1, sp, #8
 8009f88:	7013      	strb	r3, [r2, #0]
 8009f8a:	aa03      	add	r2, sp, #12
 8009f8c:	6803      	ldr	r3, [r0, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4798      	blx	r3
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d050      	beq.n	800a03a <_ZN8touchgfx3HAL4tickEv+0x156>
 8009f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009fa2:	4798      	blx	r3
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	6960      	ldr	r0, [r4, #20]
 8009fa8:	f88d 3007 	strb.w	r3, [sp, #7]
 8009fac:	b158      	cbz	r0, 8009fc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009fae:	6803      	ldr	r3, [r0, #0]
 8009fb0:	f10d 0107 	add.w	r1, sp, #7
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	4798      	blx	r3
 8009fb8:	b128      	cbz	r0, 8009fc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009fc0:	6803      	ldr	r3, [r0, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	4798      	blx	r3
 8009fc6:	f104 001c 	add.w	r0, r4, #28
 8009fca:	f00c fcf9 	bl	80169c0 <_ZN8touchgfx8Gestures4tickEv>
 8009fce:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8009fd2:	b30b      	cbz	r3, 800a018 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009fd4:	6920      	ldr	r0, [r4, #16]
 8009fd6:	6803      	ldr	r3, [r0, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	4798      	blx	r3
 8009fdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009fde:	4606      	mov	r6, r0
 8009fe0:	b903      	cbnz	r3, 8009fe4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8009fe2:	6720      	str	r0, [r4, #112]	; 0x70
 8009fe4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009fe8:	1af3      	subs	r3, r6, r3
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d914      	bls.n	800a018 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009fee:	6920      	ldr	r0, [r4, #16]
 8009ff0:	6803      	ldr	r3, [r0, #0]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	4798      	blx	r3
 8009ff6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009ff8:	2264      	movs	r2, #100	; 0x64
 8009ffa:	1af3      	subs	r3, r6, r3
 8009ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a000:	fbb0 f0f3 	udiv	r0, r0, r3
 800a004:	2800      	cmp	r0, #0
 800a006:	dc1d      	bgt.n	800a044 <_ZN8touchgfx3HAL4tickEv+0x160>
 800a008:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800a00c:	6920      	ldr	r0, [r4, #16]
 800a00e:	2100      	movs	r1, #0
 800a010:	6803      	ldr	r3, [r0, #0]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	4798      	blx	r3
 800a016:	6726      	str	r6, [r4, #112]	; 0x70
 800a018:	f001 ffb0 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
 800a01c:	6803      	ldr	r3, [r0, #0]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	4798      	blx	r3
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4620      	mov	r0, r4
 800a026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a02a:	4798      	blx	r3
 800a02c:	2001      	movs	r0, #1
 800a02e:	f7f7 f971 	bl	8001314 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800a032:	2300      	movs	r3, #0
 800a034:	702b      	strb	r3, [r5, #0]
 800a036:	b004      	add	sp, #16
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a03e:	4620      	mov	r0, r4
 800a040:	4798      	blx	r3
 800a042:	e7af      	b.n	8009fa4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800a044:	2863      	cmp	r0, #99	; 0x63
 800a046:	bfcb      	itete	gt
 800a048:	2300      	movgt	r3, #0
 800a04a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800a04e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800a052:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800a056:	e7d9      	b.n	800a00c <_ZN8touchgfx3HAL4tickEv+0x128>
 800a058:	24006a94 	.word	0x24006a94
 800a05c:	24006a95 	.word	0x24006a95
 800a060:	05f5e100 	.word	0x05f5e100

0800a064 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800a064:	f7f7 bb34 	b.w	80016d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a068 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800a068:	6581      	str	r1, [r0, #88]	; 0x58
 800a06a:	301c      	adds	r0, #28
 800a06c:	f00c bca6 	b.w	80169bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800a070 <_ZN8touchgfx3HAL5touchEll>:
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	4604      	mov	r4, r0
 800a076:	a804      	add	r0, sp, #16
 800a078:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a07c:	f001 fd7e 	bl	800bb7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800a080:	9b04      	ldr	r3, [sp, #16]
 800a082:	a906      	add	r1, sp, #24
 800a084:	a803      	add	r0, sp, #12
 800a086:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800a090:	f001 fdc6 	bl	800bc20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800a094:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800a098:	f104 001c 	add.w	r0, r4, #28
 800a09c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a0a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a0a4:	b189      	cbz	r1, 800a0ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 800a0a6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	f00c fc92 	bl	80169dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800a0b8:	b128      	cbz	r0, 800a0c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800a0ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a0be:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a0c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800a0c4:	6623      	str	r3, [r4, #96]	; 0x60
 800a0c6:	b007      	add	sp, #28
 800a0c8:	bd30      	pop	{r4, r5, pc}
 800a0ca:	f00c fcc7 	bl	8016a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a0d4:	e7f1      	b.n	800a0ba <_ZN8touchgfx3HAL5touchEll+0x4a>

0800a0d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d046      	beq.n	800a16a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a0dc:	ea81 0002 	eor.w	r0, r1, r2
 800a0e0:	07c4      	lsls	r4, r0, #31
 800a0e2:	d508      	bpl.n	800a0f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800a0e4:	440b      	add	r3, r1
 800a0e6:	3a01      	subs	r2, #1
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	d93e      	bls.n	800a16a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a0ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a0f0:	f801 0b01 	strb.w	r0, [r1], #1
 800a0f4:	e7f8      	b.n	800a0e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800a0f6:	07d0      	lsls	r0, r2, #31
 800a0f8:	bf42      	ittt	mi
 800a0fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800a0fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800a102:	f801 0b01 	strbmi.w	r0, [r1], #1
 800a106:	2b01      	cmp	r3, #1
 800a108:	d911      	bls.n	800a12e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a10a:	ea81 0402 	eor.w	r4, r1, r2
 800a10e:	4610      	mov	r0, r2
 800a110:	07a4      	lsls	r4, r4, #30
 800a112:	d022      	beq.n	800a15a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800a114:	f023 0401 	bic.w	r4, r3, #1
 800a118:	440c      	add	r4, r1
 800a11a:	428c      	cmp	r4, r1
 800a11c:	4602      	mov	r2, r0
 800a11e:	d904      	bls.n	800a12a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800a120:	8812      	ldrh	r2, [r2, #0]
 800a122:	3002      	adds	r0, #2
 800a124:	f821 2b02 	strh.w	r2, [r1], #2
 800a128:	e7f7      	b.n	800a11a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	f023 0003 	bic.w	r0, r3, #3
 800a132:	4408      	add	r0, r1
 800a134:	4288      	cmp	r0, r1
 800a136:	4614      	mov	r4, r2
 800a138:	d904      	bls.n	800a144 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800a13a:	6824      	ldr	r4, [r4, #0]
 800a13c:	3204      	adds	r2, #4
 800a13e:	f841 4b04 	str.w	r4, [r1], #4
 800a142:	e7f7      	b.n	800a134 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800a144:	f003 0303 	and.w	r3, r3, #3
 800a148:	3a01      	subs	r2, #1
 800a14a:	440b      	add	r3, r1
 800a14c:	428b      	cmp	r3, r1
 800a14e:	d90c      	bls.n	800a16a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a150:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a154:	f801 0b01 	strb.w	r0, [r1], #1
 800a158:	e7f8      	b.n	800a14c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800a15a:	0790      	lsls	r0, r2, #30
 800a15c:	d0e7      	beq.n	800a12e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a15e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a162:	3b02      	subs	r3, #2
 800a164:	f821 0b02 	strh.w	r0, [r1], #2
 800a168:	e7e1      	b.n	800a12e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a16a:	2001      	movs	r0, #1
 800a16c:	bd10      	pop	{r4, pc}

0800a16e <_ZN8touchgfx3HAL7noTouchEv>:
 800a16e:	b510      	push	{r4, lr}
 800a170:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800a174:	4604      	mov	r4, r0
 800a176:	b153      	cbz	r3, 800a18e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800a178:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a17c:	2101      	movs	r1, #1
 800a17e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800a182:	301c      	adds	r0, #28
 800a184:	f00c fc6a 	bl	8016a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a188:	2300      	movs	r3, #0
 800a18a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a18e:	bd10      	pop	{r4, pc}

0800a190 <_ZN8touchgfx3HAL3lcdEv>:
 800a190:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800a198:	b10a      	cbz	r2, 800a19e <_ZN8touchgfx3HAL3lcdEv+0xe>
 800a19a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a19c:	b900      	cbnz	r0, 800a1a0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800a19e:	6898      	ldr	r0, [r3, #8]
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	24006a90 	.word	0x24006a90

0800a1a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800a1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	4699      	mov	r9, r3
 800a1b4:	ad04      	add	r5, sp, #16
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	4690      	mov	r8, r2
 800a1ba:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a1be:	69a0      	ldr	r0, [r4, #24]
 800a1c0:	6806      	ldr	r6, [r0, #0]
 800a1c2:	9501      	str	r5, [sp, #4]
 800a1c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800a1c8:	9500      	str	r5, [sp, #0]
 800a1ca:	6835      	ldr	r5, [r6, #0]
 800a1cc:	47a8      	blx	r5
 800a1ce:	4d10      	ldr	r5, [pc, #64]	; (800a210 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	f8a5 9000 	strh.w	r9, [r5]
 800a1d6:	f7ff ffdb 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a1da:	6803      	ldr	r3, [r0, #0]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	4798      	blx	r3
 800a1e0:	b128      	cbz	r0, 800a1ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800a1e2:	2801      	cmp	r0, #1
 800a1e4:	d00b      	beq.n	800a1fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	b005      	add	sp, #20
 800a1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ee:	882b      	ldrh	r3, [r5, #0]
 800a1f0:	fb08 7203 	mla	r2, r8, r3, r7
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800a1fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a1fc:	e7f3      	b.n	800a1e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a1fe:	882a      	ldrh	r2, [r5, #0]
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	fb08 7202 	mla	r2, r8, r2, r7
 800a206:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a20a:	1a9a      	subs	r2, r3, r2
 800a20c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a20e:	e7ea      	b.n	800a1e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a210:	24006a8a 	.word	0x24006a8a

0800a214 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a216:	b08b      	sub	sp, #44	; 0x2c
 800a218:	4617      	mov	r7, r2
 800a21a:	4604      	mov	r4, r0
 800a21c:	460e      	mov	r6, r1
 800a21e:	461d      	mov	r5, r3
 800a220:	f7ff ffb6 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a224:	6803      	ldr	r3, [r0, #0]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	4798      	blx	r3
 800a22a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a22e:	9007      	str	r0, [sp, #28]
 800a230:	4631      	mov	r1, r6
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800a23a:	4620      	mov	r0, r4
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	9306      	str	r3, [sp, #24]
 800a240:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a250:	9303      	str	r3, [sp, #12]
 800a252:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a256:	9302      	str	r3, [sp, #8]
 800a258:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a25c:	e9cd 5300 	strd	r5, r3, [sp]
 800a260:	463b      	mov	r3, r7
 800a262:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800a264:	2200      	movs	r2, #0
 800a266:	47a8      	blx	r5
 800a268:	b00b      	add	sp, #44	; 0x2c
 800a26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26c:	24006a8a 	.word	0x24006a8a

0800a270 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800a270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a274:	4698      	mov	r8, r3
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	b08b      	sub	sp, #44	; 0x2c
 800a27a:	4617      	mov	r7, r2
 800a27c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800a27e:	460e      	mov	r6, r1
 800a280:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800a282:	4604      	mov	r4, r0
 800a284:	f8b3 9000 	ldrh.w	r9, [r3]
 800a288:	f7ff ff82 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a28c:	6803      	ldr	r3, [r0, #0]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4798      	blx	r3
 800a292:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a296:	2200      	movs	r2, #0
 800a298:	4631      	mov	r1, r6
 800a29a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a29e:	2302      	movs	r3, #2
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a2b4:	9303      	str	r3, [sp, #12]
 800a2b6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a2c0:	e9cd 8300 	strd	r8, r3, [sp]
 800a2c4:	463b      	mov	r3, r7
 800a2c6:	47a8      	blx	r5
 800a2c8:	b00b      	add	sp, #44	; 0x2c
 800a2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	bf00      	nop
 800a2d0:	24006a8a 	.word	0x24006a8a

0800a2d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	4698      	mov	r8, r3
 800a2da:	6803      	ldr	r3, [r0, #0]
 800a2dc:	b087      	sub	sp, #28
 800a2de:	460e      	mov	r6, r1
 800a2e0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800a2e2:	4617      	mov	r7, r2
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	f8b3 9000 	ldrh.w	r9, [r3]
 800a2ec:	f7ff ff50 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a2f0:	6803      	ldr	r3, [r0, #0]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	4798      	blx	r3
 800a2f6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a2fa:	463a      	mov	r2, r7
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	f8cd 900c 	str.w	r9, [sp, #12]
 800a302:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a306:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a30a:	4620      	mov	r0, r4
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	4643      	mov	r3, r8
 800a31c:	47a8      	blx	r5
 800a31e:	b007      	add	sp, #28
 800a320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a324:	24006a8a 	.word	0x24006a8a

0800a328 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4604      	mov	r4, r0
 800a32e:	b08f      	sub	sp, #60	; 0x3c
 800a330:	4610      	mov	r0, r2
 800a332:	460d      	mov	r5, r1
 800a334:	4691      	mov	r9, r2
 800a336:	461e      	mov	r6, r3
 800a338:	f004 f9d8 	bl	800e6ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f000 809d 	beq.w	800a47c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	4620      	mov	r0, r4
 800a346:	f8df b198 	ldr.w	fp, [pc, #408]	; 800a4e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a34a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	4798      	blx	r3
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	4620      	mov	r0, r4
 800a356:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800a4e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	4798      	blx	r3
 800a35e:	f8bb 3000 	ldrh.w	r3, [fp]
 800a362:	4f5c      	ldr	r7, [pc, #368]	; (800a4d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	f8ba 3000 	ldrh.w	r3, [sl]
 800a36a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a36e:	4640      	mov	r0, r8
 800a370:	9302      	str	r3, [sp, #8]
 800a372:	883b      	ldrh	r3, [r7, #0]
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	4b58      	ldr	r3, [pc, #352]	; (800a4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a378:	881a      	ldrh	r2, [r3, #0]
 800a37a:	9305      	str	r3, [sp, #20]
 800a37c:	9204      	str	r2, [sp, #16]
 800a37e:	f004 faf9 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a382:	8038      	strh	r0, [r7, #0]
 800a384:	4640      	mov	r0, r8
 800a386:	f004 fb29 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a38a:	9b05      	ldr	r3, [sp, #20]
 800a38c:	b280      	uxth	r0, r0
 800a38e:	8018      	strh	r0, [r3, #0]
 800a390:	4b52      	ldr	r3, [pc, #328]	; (800a4dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d174      	bne.n	800a482 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800a398:	883b      	ldrh	r3, [r7, #0]
 800a39a:	f8aa 0000 	strh.w	r0, [sl]
 800a39e:	f8ab 3000 	strh.w	r3, [fp]
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800a3a8:	f004 f9a0 	bl	800e6ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a3ba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a3be:	f7f7 fff1 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800a3c8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a3cc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dd5c      	ble.n	800a48e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a3d4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	dd58      	ble.n	800a48e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a3dc:	462a      	mov	r2, r5
 800a3de:	ab0a      	add	r3, sp, #40	; 0x28
 800a3e0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a3e4:	6851      	ldr	r1, [r2, #4]
 800a3e6:	c303      	stmia	r3!, {r0, r1}
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	a80a      	add	r0, sp, #40	; 0x28
 800a3ec:	f7ff fc00 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800a3f0:	4b38      	ldr	r3, [pc, #224]	; (800a4d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a3f8:	4b37      	ldr	r3, [pc, #220]	; (800a4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a3fa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800a3fe:	aa0a      	add	r2, sp, #40	; 0x28
 800a400:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a404:	910c      	str	r1, [sp, #48]	; 0x30
 800a406:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a40a:	ab08      	add	r3, sp, #32
 800a40c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a410:	e883 0003 	stmia.w	r3, {r0, r1}
 800a414:	4618      	mov	r0, r3
 800a416:	a90c      	add	r1, sp, #48	; 0x30
 800a418:	f7ff fbea 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800a41c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d13c      	bne.n	800a49c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800a422:	2000      	movs	r0, #0
 800a424:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800a428:	2600      	movs	r6, #0
 800a42a:	696b      	ldr	r3, [r5, #20]
 800a42c:	a908      	add	r1, sp, #32
 800a42e:	682a      	ldr	r2, [r5, #0]
 800a430:	4628      	mov	r0, r5
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	616e      	str	r6, [r5, #20]
 800a436:	6892      	ldr	r2, [r2, #8]
 800a438:	4790      	blx	r2
 800a43a:	9b05      	ldr	r3, [sp, #20]
 800a43c:	4652      	mov	r2, sl
 800a43e:	4649      	mov	r1, r9
 800a440:	616b      	str	r3, [r5, #20]
 800a442:	4628      	mov	r0, r5
 800a444:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800a448:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800a44c:	f7f7 ffaa 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
 800a450:	9a01      	ldr	r2, [sp, #4]
 800a452:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a454:	4620      	mov	r0, r4
 800a456:	801a      	strh	r2, [r3, #0]
 800a458:	9a02      	ldr	r2, [sp, #8]
 800a45a:	4b22      	ldr	r3, [pc, #136]	; (800a4e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800a45c:	801a      	strh	r2, [r3, #0]
 800a45e:	9a03      	ldr	r2, [sp, #12]
 800a460:	4b1c      	ldr	r3, [pc, #112]	; (800a4d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	4b1c      	ldr	r3, [pc, #112]	; (800a4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	801a      	strh	r2, [r3, #0]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	4798      	blx	r3
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	4620      	mov	r0, r4
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	4798      	blx	r3
 800a47c:	b00f      	add	sp, #60	; 0x3c
 800a47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a482:	883b      	ldrh	r3, [r7, #0]
 800a484:	f8ab 0000 	strh.w	r0, [fp]
 800a488:	f8aa 3000 	strh.w	r3, [sl]
 800a48c:	e789      	b.n	800a3a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800a48e:	462a      	mov	r2, r5
 800a490:	ab0a      	add	r3, sp, #40	; 0x28
 800a492:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a496:	6851      	ldr	r1, [r2, #4]
 800a498:	c303      	stmia	r3!, {r0, r1}
 800a49a:	e7a9      	b.n	800a3f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800a49c:	a807      	add	r0, sp, #28
 800a49e:	f004 fba1 	bl	800ebe4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a4a6:	6803      	ldr	r3, [r0, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	4798      	blx	r3
 800a4ac:	4286      	cmp	r6, r0
 800a4ae:	d1b8      	bne.n	800a422 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800a4b0:	f7ff fe6e 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a4b4:	6803      	ldr	r3, [r0, #0]
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	a807      	add	r0, sp, #28
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	f004 fb91 	bl	800ebe4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a4c2:	9b05      	ldr	r3, [sp, #20]
 800a4c4:	4601      	mov	r1, r0
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4798      	blx	r3
 800a4ca:	f080 0001 	eor.w	r0, r0, #1
 800a4ce:	b2c0      	uxtb	r0, r0
 800a4d0:	e7a8      	b.n	800a424 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800a4d2:	bf00      	nop
 800a4d4:	24006a84 	.word	0x24006a84
 800a4d8:	24006a86 	.word	0x24006a86
 800a4dc:	24006a88 	.word	0x24006a88
 800a4e0:	24006a8a 	.word	0x24006a8a
 800a4e4:	24006a8c 	.word	0x24006a8c

0800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800a4e8:	4b07      	ldr	r3, [pc, #28]	; (800a508 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	b13b      	cbz	r3, 800a502 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a4f2:	6803      	ldr	r3, [r0, #0]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	4798      	blx	r3
 800a4f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4fa:	4283      	cmp	r3, r0
 800a4fc:	d101      	bne.n	800a502 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a4fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a500:	bd10      	pop	{r4, pc}
 800a502:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a504:	e7fc      	b.n	800a500 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800a506:	bf00      	nop
 800a508:	24006a8e 	.word	0x24006a8e

0800a50c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	461d      	mov	r5, r3
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a518:	4690      	mov	r8, r2
 800a51a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800a51e:	2400      	movs	r4, #0
 800a520:	4607      	mov	r7, r0
 800a522:	fb06 8505 	mla	r5, r6, r5, r8
 800a526:	9404      	str	r4, [sp, #16]
 800a528:	f88d 4020 	strb.w	r4, [sp, #32]
 800a52c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a530:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a534:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a538:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a53c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a540:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a544:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a548:	f7ff ffce 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a54c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a556:	a901      	add	r1, sp, #4
 800a558:	9505      	str	r5, [sp, #20]
 800a55a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800a55e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800a562:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800a566:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800a56a:	6803      	ldr	r3, [r0, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	4798      	blx	r3
 800a570:	b00a      	add	sp, #40	; 0x28
 800a572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a576 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800a576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a57a:	b08b      	sub	sp, #44	; 0x2c
 800a57c:	2400      	movs	r4, #0
 800a57e:	4691      	mov	r9, r2
 800a580:	461d      	mov	r5, r3
 800a582:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800a586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a58a:	4688      	mov	r8, r1
 800a58c:	4607      	mov	r7, r0
 800a58e:	9404      	str	r4, [sp, #16]
 800a590:	fb06 9505 	mla	r5, r6, r5, r9
 800a594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a598:	f7ff ffa6 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a59c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a5a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a5aa:	a901      	add	r1, sp, #4
 800a5ac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a5b0:	9505      	str	r5, [sp, #20]
 800a5b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a5b6:	f8ad 401c 	strh.w	r4, [sp, #28]
 800a5ba:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a5be:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5c2:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a5c6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800a5ca:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800a5ce:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800a5d2:	6803      	ldr	r3, [r0, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	4798      	blx	r3
 800a5d8:	b00b      	add	sp, #44	; 0x2c
 800a5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a5e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	b08a      	sub	sp, #40	; 0x28
 800a5e6:	4698      	mov	r8, r3
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800a5f0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800a5f4:	2d0b      	cmp	r5, #11
 800a5f6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800a5fa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800a5fe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	d137      	bne.n	800a676 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800a606:	2380      	movs	r3, #128	; 0x80
 800a608:	f88d 0020 	strb.w	r0, [sp, #32]
 800a60c:	4630      	mov	r0, r6
 800a60e:	9203      	str	r2, [sp, #12]
 800a610:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a614:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a618:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a61c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a620:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a624:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a628:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a62c:	f7ff ff5c 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a630:	2c0b      	cmp	r4, #11
 800a632:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800a636:	f8ad 701e 	strh.w	r7, [sp, #30]
 800a63a:	bf94      	ite	ls
 800a63c:	4b19      	ldrls	r3, [pc, #100]	; (800a6a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800a63e:	2100      	movhi	r1, #0
 800a640:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800a644:	bf98      	it	ls
 800a646:	5d19      	ldrbls	r1, [r3, r4]
 800a648:	fb02 8307 	mla	r3, r2, r7, r8
 800a64c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800a650:	10c9      	asrs	r1, r1, #3
 800a652:	fb01 0003 	mla	r0, r1, r3, r0
 800a656:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a65a:	a901      	add	r1, sp, #4
 800a65c:	9005      	str	r0, [sp, #20]
 800a65e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800a662:	2300      	movs	r3, #0
 800a664:	6870      	ldr	r0, [r6, #4]
 800a666:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a66a:	6803      	ldr	r3, [r0, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4798      	blx	r3
 800a670:	b00a      	add	sp, #40	; 0x28
 800a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a676:	2d02      	cmp	r5, #2
 800a678:	d109      	bne.n	800a68e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800a67a:	28ff      	cmp	r0, #255	; 0xff
 800a67c:	d105      	bne.n	800a68a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800a67e:	f1bc 0f00 	cmp.w	ip, #0
 800a682:	bf14      	ite	ne
 800a684:	2340      	movne	r3, #64	; 0x40
 800a686:	2320      	moveq	r3, #32
 800a688:	e7be      	b.n	800a608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a68a:	2340      	movs	r3, #64	; 0x40
 800a68c:	e7bc      	b.n	800a608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a68e:	28ff      	cmp	r0, #255	; 0xff
 800a690:	d105      	bne.n	800a69e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800a692:	f1bc 0f00 	cmp.w	ip, #0
 800a696:	bf14      	ite	ne
 800a698:	2304      	movne	r3, #4
 800a69a:	2301      	moveq	r3, #1
 800a69c:	e7b4      	b.n	800a608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a69e:	2304      	movs	r3, #4
 800a6a0:	e7b2      	b.n	800a608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a6a2:	bf00      	nop
 800a6a4:	08018dec 	.word	0x08018dec

0800a6a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	b08b      	sub	sp, #44	; 0x2c
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	2400      	movs	r4, #0
 800a6b2:	4688      	mov	r8, r1
 800a6b4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800a6b8:	4693      	mov	fp, r2
 800a6ba:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800a6be:	4607      	mov	r7, r0
 800a6c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800a6c4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800a6c8:	9404      	str	r4, [sp, #16]
 800a6ca:	bf14      	ite	ne
 800a6cc:	2308      	movne	r3, #8
 800a6ce:	2302      	moveq	r3, #2
 800a6d0:	fb05 b50a 	mla	r5, r5, sl, fp
 800a6d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6d8:	f7ff ff06 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a6dc:	2e0b      	cmp	r6, #11
 800a6de:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a6e2:	a901      	add	r1, sp, #4
 800a6e4:	bf98      	it	ls
 800a6e6:	4b13      	ldrls	r3, [pc, #76]	; (800a734 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800a6e8:	f8ad a01e 	strh.w	sl, [sp, #30]
 800a6ec:	bf98      	it	ls
 800a6ee:	5d9c      	ldrbls	r4, [r3, r6]
 800a6f0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a6f4:	10e4      	asrs	r4, r4, #3
 800a6f6:	f8cd 8010 	str.w	r8, [sp, #16]
 800a6fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a6fe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800a702:	fb04 0405 	mla	r4, r4, r5, r0
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a70c:	2300      	movs	r3, #0
 800a70e:	9405      	str	r4, [sp, #20]
 800a710:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a714:	f88d 9020 	strb.w	r9, [sp, #32]
 800a718:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800a71c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a720:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800a724:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800a728:	6803      	ldr	r3, [r0, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	4798      	blx	r3
 800a72e:	b00b      	add	sp, #44	; 0x2c
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	08018dec 	.word	0x08018dec

0800a738 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	461e      	mov	r6, r3
 800a73e:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800a740:	460f      	mov	r7, r1
 800a742:	4690      	mov	r8, r2
 800a744:	881d      	ldrh	r5, [r3, #0]
 800a746:	f7ff fd23 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a74a:	6803      	ldr	r3, [r0, #0]
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	4798      	blx	r3
 800a750:	280b      	cmp	r0, #11
 800a752:	bf96      	itet	ls
 800a754:	4b05      	ldrls	r3, [pc, #20]	; (800a76c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800a756:	2400      	movhi	r4, #0
 800a758:	5c1c      	ldrbls	r4, [r3, r0]
 800a75a:	fb08 7005 	mla	r0, r8, r5, r7
 800a75e:	10e4      	asrs	r4, r4, #3
 800a760:	fb04 6000 	mla	r0, r4, r0, r6
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	24006a8a 	.word	0x24006a8a
 800a76c:	08018dec 	.word	0x08018dec

0800a770 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800a770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a772:	b08b      	sub	sp, #44	; 0x2c
 800a774:	461f      	mov	r7, r3
 800a776:	4604      	mov	r4, r0
 800a778:	4616      	mov	r6, r2
 800a77a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800a77e:	2500      	movs	r5, #0
 800a780:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a784:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a788:	9504      	str	r5, [sp, #16]
 800a78a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a78e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a792:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a796:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a79a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a79e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a7a2:	f88d 3020 	strb.w	r3, [sp, #32]
 800a7a6:	f7ff fe9f 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a7aa:	463a      	mov	r2, r7
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f7ff ffc1 	bl	800a738 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800a7b8:	9005      	str	r0, [sp, #20]
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a7c0:	f7ff fce6 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a7c4:	6803      	ldr	r3, [r0, #0]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4798      	blx	r3
 800a7ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7cc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800a7d0:	a901      	add	r1, sp, #4
 800a7d2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	6860      	ldr	r0, [r4, #4]
 800a7da:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a7de:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800a7e2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800a7e6:	6803      	ldr	r3, [r0, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	4798      	blx	r3
 800a7ec:	b00b      	add	sp, #44	; 0x2c
 800a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f0:	24006a8a 	.word	0x24006a8a

0800a7f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f6:	b08d      	sub	sp, #52	; 0x34
 800a7f8:	2501      	movs	r5, #1
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	466b      	mov	r3, sp
 800a7fe:	9503      	str	r5, [sp, #12]
 800a800:	e883 0006 	stmia.w	r3, {r1, r2}
 800a804:	2300      	movs	r3, #0
 800a806:	f8bd 6000 	ldrh.w	r6, [sp]
 800a80a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a80e:	9306      	str	r3, [sp, #24]
 800a810:	6803      	ldr	r3, [r0, #0]
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	4798      	blx	r3
 800a816:	463a      	mov	r2, r7
 800a818:	4631      	mov	r1, r6
 800a81a:	4603      	mov	r3, r0
 800a81c:	4620      	mov	r0, r4
 800a81e:	f7ff ff8b 	bl	800a738 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a822:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a824:	9004      	str	r0, [sp, #16]
 800a826:	9307      	str	r3, [sp, #28]
 800a828:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a82c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a830:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a834:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a840:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a844:	f7ff fca4 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a848:	6803      	ldr	r3, [r0, #0]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	4798      	blx	r3
 800a84e:	23ff      	movs	r3, #255	; 0xff
 800a850:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800a854:	a903      	add	r1, sp, #12
 800a856:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800a85a:	6860      	ldr	r0, [r4, #4]
 800a85c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800a860:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800a864:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800a868:	6803      	ldr	r3, [r0, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	4798      	blx	r3
 800a86e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a870:	b00d      	add	sp, #52	; 0x34
 800a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a874:	24006a8a 	.word	0x24006a8a

0800a878 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	b08c      	sub	sp, #48	; 0x30
 800a87e:	461e      	mov	r6, r3
 800a880:	2300      	movs	r3, #0
 800a882:	4604      	mov	r4, r0
 800a884:	466d      	mov	r5, sp
 800a886:	9306      	str	r3, [sp, #24]
 800a888:	6803      	ldr	r3, [r0, #0]
 800a88a:	e885 0006 	stmia.w	r5, {r1, r2}
 800a88e:	2501      	movs	r5, #1
 800a890:	f8bd 7000 	ldrh.w	r7, [sp]
 800a894:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a898:	9503      	str	r5, [sp, #12]
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	4798      	blx	r3
 800a89e:	4642      	mov	r2, r8
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f7ff ff47 	bl	800a738 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a8aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a8ae:	9004      	str	r0, [sp, #16]
 800a8b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a8b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a8b8:	9607      	str	r6, [sp, #28]
 800a8ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800a8be:	4b10      	ldr	r3, [pc, #64]	; (800a900 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a8c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a8cc:	f7ff fc60 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800a8d0:	6803      	ldr	r3, [r0, #0]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	4798      	blx	r3
 800a8d6:	23ff      	movs	r3, #255	; 0xff
 800a8d8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800a8dc:	a903      	add	r1, sp, #12
 800a8de:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800a8e2:	6860      	ldr	r0, [r4, #4]
 800a8e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800a8e8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800a8ec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800a8f0:	6803      	ldr	r3, [r0, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	4798      	blx	r3
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	b00c      	add	sp, #48	; 0x30
 800a8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fe:	bf00      	nop
 800a900:	24006a8a 	.word	0x24006a8a

0800a904 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a906:	b085      	sub	sp, #20
 800a908:	4605      	mov	r5, r0
 800a90a:	ac02      	add	r4, sp, #8
 800a90c:	e884 0006 	stmia.w	r4, {r1, r2}
 800a910:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a914:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a918:	f7ff fde6 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a91c:	4631      	mov	r1, r6
 800a91e:	4603      	mov	r3, r0
 800a920:	463a      	mov	r2, r7
 800a922:	4628      	mov	r0, r5
 800a924:	f7ff ff08 	bl	800a738 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a928:	4a05      	ldr	r2, [pc, #20]	; (800a940 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a92a:	682b      	ldr	r3, [r5, #0]
 800a92c:	8812      	ldrh	r2, [r2, #0]
 800a92e:	9200      	str	r2, [sp, #0]
 800a930:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800a932:	4603      	mov	r3, r0
 800a934:	4628      	mov	r0, r5
 800a936:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a93a:	47b0      	blx	r6
 800a93c:	b005      	add	sp, #20
 800a93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a940:	24006a8a 	.word	0x24006a8a

0800a944 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800a94a:	4604      	mov	r4, r0
 800a94c:	b19b      	cbz	r3, 800a976 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a94e:	2002      	movs	r0, #2
 800a950:	f7f6 fd12 	bl	8001378 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a954:	2300      	movs	r3, #0
 800a956:	4620      	mov	r0, r4
 800a958:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800a95c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800a966:	f7ff fdbf 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a96a:	4601      	mov	r1, r0
 800a96c:	4620      	mov	r0, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a974:	4718      	bx	r3
 800a976:	bd70      	pop	{r4, r5, r6, pc}

0800a978 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4605      	mov	r5, r0
 800a97c:	460c      	mov	r4, r1
 800a97e:	2003      	movs	r0, #3
 800a980:	b149      	cbz	r1, 800a996 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800a982:	f7f6 fc95 	bl	80012b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800a986:	6928      	ldr	r0, [r5, #16]
 800a988:	b168      	cbz	r0, 800a9a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800a98a:	6803      	ldr	r3, [r0, #0]
 800a98c:	2101      	movs	r1, #1
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a994:	4718      	bx	r3
 800a996:	f7f6 fcbd 	bl	8001314 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800a99a:	6928      	ldr	r0, [r5, #16]
 800a99c:	b118      	cbz	r0, 800a9a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800a99e:	6803      	ldr	r3, [r0, #0]
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	e7f4      	b.n	800a990 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}

0800a9a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	428b      	cmp	r3, r1
 800a9b4:	d006      	beq.n	800a9c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a9b6:	6803      	ldr	r3, [r0, #0]
 800a9b8:	b929      	cbnz	r1, 800a9c6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a9ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a9be:	4798      	blx	r3
 800a9c0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800a9c4:	bd38      	pop	{r3, r4, r5, pc}
 800a9c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a9ca:	e7f8      	b.n	800a9be <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a9cc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b95b      	cbnz	r3, 800a9ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a9d6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d007      	beq.n	800a9ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a9de:	6840      	ldr	r0, [r0, #4]
 800a9e0:	f000 f912 	bl	800ac08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800a9e4:	b118      	cbz	r0, 800a9ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a9e6:	6862      	ldr	r2, [r4, #4]
 800a9e8:	7a53      	ldrb	r3, [r2, #9]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0fc      	beq.n	800a9e8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800a9ee:	f7f6 fe67 	bl	80016c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	f7ff ffd7 	bl	800a9a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f7ff fd74 	bl	800a4e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	bf00      	nop
 800aa04:	24006a8e 	.word	0x24006a8e

0800aa08 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800aa08:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800aa0c:	1a13      	subs	r3, r2, r0
 800aa0e:	4258      	negs	r0, r3
 800aa10:	4158      	adcs	r0, r3
 800aa12:	4770      	bx	lr

0800aa14 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800aa14:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800aa18:	1a9b      	subs	r3, r3, r2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bfdc      	itt	le
 800aa1e:	6882      	ldrle	r2, [r0, #8]
 800aa20:	189b      	addle	r3, r3, r2
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	bfcc      	ite	gt
 800aa26:	2000      	movgt	r0, #0
 800aa28:	2001      	movle	r0, #1
 800aa2a:	4770      	bx	lr

0800aa2c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800aa2c:	6902      	ldr	r2, [r0, #16]
 800aa2e:	6843      	ldr	r3, [r0, #4]
 800aa30:	2024      	movs	r0, #36	; 0x24
 800aa32:	fb00 3002 	mla	r0, r0, r2, r3
 800aa36:	4770      	bx	lr

0800aa38 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800aa38:	6803      	ldr	r3, [r0, #0]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	4718      	bx	r3

0800aa3e <_ZN8touchgfx13DMA_Interface7executeEv>:
 800aa3e:	2301      	movs	r3, #1
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	7203      	strb	r3, [r0, #8]
 800aa44:	4604      	mov	r4, r0
 800aa46:	6840      	ldr	r0, [r0, #4]
 800aa48:	6803      	ldr	r3, [r0, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	4798      	blx	r3
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	4605      	mov	r5, r0
 800aa52:	2b40      	cmp	r3, #64	; 0x40
 800aa54:	d00c      	beq.n	800aa70 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa56:	d810      	bhi.n	800aa7a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d01d      	beq.n	800aa98 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800aa5c:	d804      	bhi.n	800aa68 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d006      	beq.n	800aa70 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d02c      	beq.n	800aac0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d01d      	beq.n	800aaa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d1fa      	bne.n	800aa66 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	4620      	mov	r0, r4
 800aa74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa76:	4798      	blx	r3
 800aa78:	e013      	b.n	800aaa2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800aa7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa7e:	d0f7      	beq.n	800aa70 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa80:	d804      	bhi.n	800aa8c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d0f4      	beq.n	800aa70 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa8a:	e7f0      	b.n	800aa6e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800aa8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa90:	d0ee      	beq.n	800aa70 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa96:	e7e5      	b.n	800aa64 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	7f01      	ldrb	r1, [r0, #28]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	4798      	blx	r3
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa6:	e006      	b.n	800aab6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	7f01      	ldrb	r1, [r0, #28]
 800aaac:	4620      	mov	r0, r4
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	4798      	blx	r3
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab6:	4629      	mov	r1, r5
 800aab8:	4620      	mov	r0, r4
 800aaba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aabe:	4718      	bx	r3
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	4620      	mov	r0, r4
 800aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac6:	4798      	blx	r3
 800aac8:	e7f3      	b.n	800aab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800aaca <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800aaca:	4770      	bx	lr

0800aacc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800aacc:	4770      	bx	lr

0800aace <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800aace:	4770      	bx	lr

0800aad0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800aad0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800aad4:	b510      	push	{r4, lr}
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	2a00      	cmp	r2, #0
 800aada:	bfdc      	itt	le
 800aadc:	6884      	ldrle	r4, [r0, #8]
 800aade:	1912      	addle	r2, r2, r4
 800aae0:	2a01      	cmp	r2, #1
 800aae2:	dd16      	ble.n	800ab12 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800aae4:	6842      	ldr	r2, [r0, #4]
 800aae6:	2424      	movs	r4, #36	; 0x24
 800aae8:	fb04 2303 	mla	r3, r4, r3, r2
 800aaec:	f101 0220 	add.w	r2, r1, #32
 800aaf0:	f851 4b04 	ldr.w	r4, [r1], #4
 800aaf4:	4291      	cmp	r1, r2
 800aaf6:	f843 4b04 	str.w	r4, [r3], #4
 800aafa:	d1f9      	bne.n	800aaf0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800aafc:	780a      	ldrb	r2, [r1, #0]
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	68c3      	ldr	r3, [r0, #12]
 800ab02:	6882      	ldr	r2, [r0, #8]
 800ab04:	f3bf 8f5b 	dmb	ish
 800ab08:	3301      	adds	r3, #1
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	bfd8      	it	le
 800ab0e:	1a9b      	suble	r3, r3, r2
 800ab10:	60c3      	str	r3, [r0, #12]
 800ab12:	bd10      	pop	{r4, pc}

0800ab14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ab14:	6903      	ldr	r3, [r0, #16]
 800ab16:	6882      	ldr	r2, [r0, #8]
 800ab18:	f3bf 8f5b 	dmb	ish
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	bfd8      	it	le
 800ab22:	1a9b      	suble	r3, r3, r2
 800ab24:	6103      	str	r3, [r0, #16]
 800ab26:	4770      	bx	lr

0800ab28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	460e      	mov	r6, r1
 800ab2e:	6860      	ldr	r0, [r4, #4]
 800ab30:	6803      	ldr	r3, [r0, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4798      	blx	r3
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d1f9      	bne.n	800ab2e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ab3a:	4d0d      	ldr	r5, [pc, #52]	; (800ab70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ab3c:	6828      	ldr	r0, [r5, #0]
 800ab3e:	6803      	ldr	r3, [r0, #0]
 800ab40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab42:	4798      	blx	r3
 800ab44:	f7f6 fdca 	bl	80016dc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ab48:	6828      	ldr	r0, [r5, #0]
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	f7ff ff2c 	bl	800a9a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ab50:	6860      	ldr	r0, [r4, #4]
 800ab52:	4631      	mov	r1, r6
 800ab54:	6803      	ldr	r3, [r0, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	4798      	blx	r3
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4798      	blx	r3
 800ab62:	6828      	ldr	r0, [r5, #0]
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab6c:	4718      	bx	r3
 800ab6e:	bf00      	nop
 800ab70:	24006a90 	.word	0x24006a90

0800ab74 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ab74:	b508      	push	{r3, lr}
 800ab76:	f7f6 fda3 	bl	80016c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ab7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ab7e:	f7f6 bda7 	b.w	80016d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ab82 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ab82:	b510      	push	{r4, lr}
 800ab84:	4604      	mov	r4, r0
 800ab86:	2114      	movs	r1, #20
 800ab88:	f00b ffee 	bl	8016b68 <_ZdlPvj>
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	bd10      	pop	{r4, pc}

0800ab90 <_ZN8touchgfx13DMA_Interface5startEv>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	4604      	mov	r4, r0
 800ab94:	6840      	ldr	r0, [r0, #4]
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4798      	blx	r3
 800ab9c:	b948      	cbnz	r0, 800abb2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ab9e:	7a63      	ldrb	r3, [r4, #9]
 800aba0:	b13b      	cbz	r3, 800abb2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800aba2:	7a23      	ldrb	r3, [r4, #8]
 800aba4:	b92b      	cbnz	r3, 800abb2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	4620      	mov	r0, r4
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb0:	4718      	bx	r3
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	6840      	ldr	r0, [r0, #4]
 800abba:	6803      	ldr	r3, [r0, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4798      	blx	r3
 800abc0:	4605      	mov	r5, r0
 800abc2:	b930      	cbnz	r0, 800abd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800abc4:	7a23      	ldrb	r3, [r4, #8]
 800abc6:	b123      	cbz	r3, 800abd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800abc8:	6860      	ldr	r0, [r4, #4]
 800abca:	6803      	ldr	r3, [r0, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	4798      	blx	r3
 800abd0:	7225      	strb	r5, [r4, #8]
 800abd2:	6860      	ldr	r0, [r4, #4]
 800abd4:	6803      	ldr	r3, [r0, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4798      	blx	r3
 800abda:	b928      	cbnz	r0, 800abe8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	4620      	mov	r0, r4
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abe6:	4718      	bx	r3
 800abe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abec:	f7f6 bd7e 	b.w	80016ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800abf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	6082      	str	r2, [r0, #8]
 800abf4:	2200      	movs	r2, #0
 800abf6:	4c03      	ldr	r4, [pc, #12]	; (800ac04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800abf8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800abfc:	e9c0 4100 	strd	r4, r1, [r0]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	08018e00 	.word	0x08018e00

0800ac08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ac08:	6840      	ldr	r0, [r0, #4]
 800ac0a:	6803      	ldr	r3, [r0, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4718      	bx	r3

0800ac10 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ac10:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800ac14:	4770      	bx	lr

0800ac16 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800ac16:	4770      	bx	lr

0800ac18 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800ac18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ac1c:	b133      	cbz	r3, 800ac2c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800ac1e:	790b      	ldrb	r3, [r1, #4]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	bf01      	itttt	eq
 800ac24:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800ac26:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800ac28:	8603      	strheq	r3, [r0, #48]	; 0x30
 800ac2a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800ac2c:	f00b bf78 	b.w	8016b20 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800ac30 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800ac30:	8813      	ldrh	r3, [r2, #0]
 800ac32:	8683      	strh	r3, [r0, #52]	; 0x34
 800ac34:	f000 b860 	b.w	800acf8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800ac38 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	2138      	movs	r1, #56	; 0x38
 800ac3e:	f00b ff93 	bl	8016b68 <_ZdlPvj>
 800ac42:	4620      	mov	r0, r4
 800ac44:	bd10      	pop	{r4, pc}

0800ac46 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ac46:	b510      	push	{r4, lr}
 800ac48:	4604      	mov	r4, r0
 800ac4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac4c:	b150      	cbz	r0, 800ac64 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ac4e:	6803      	ldr	r3, [r0, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	4798      	blx	r3
 800ac54:	b130      	cbz	r0, 800ac64 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ac56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ac58:	4621      	mov	r1, r4
 800ac5a:	6803      	ldr	r3, [r0, #0]
 800ac5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	4718      	bx	r3
 800ac64:	bd10      	pop	{r4, pc}

0800ac66 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800ac66:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800ac6a:	b12a      	cbz	r2, 800ac78 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ac6c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800ac70:	b112      	cbz	r2, 800ac78 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ac72:	6803      	ldr	r3, [r0, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	4718      	bx	r3
 800ac78:	4770      	bx	lr

0800ac7a <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	8083      	strh	r3, [r0, #4]
 800ac7e:	80c3      	strh	r3, [r0, #6]
 800ac80:	8003      	strh	r3, [r0, #0]
 800ac82:	8043      	strh	r3, [r0, #2]
 800ac84:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800ac88:	2bff      	cmp	r3, #255	; 0xff
 800ac8a:	bf01      	itttt	eq
 800ac8c:	890b      	ldrheq	r3, [r1, #8]
 800ac8e:	8083      	strheq	r3, [r0, #4]
 800ac90:	894b      	ldrheq	r3, [r1, #10]
 800ac92:	80c3      	strheq	r3, [r0, #6]
 800ac94:	4770      	bx	lr
	...

0800ac98 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800ac98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	466b      	mov	r3, sp
 800ac9e:	6808      	ldr	r0, [r1, #0]
 800aca0:	6849      	ldr	r1, [r1, #4]
 800aca2:	c303      	stmia	r3!, {r0, r1}
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	4669      	mov	r1, sp
 800aca8:	4620      	mov	r0, r4
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	4798      	blx	r3
 800acae:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800acb6:	b10a      	cbz	r2, 800acbc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800acb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800acba:	b900      	cbnz	r0, 800acbe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800acbc:	6898      	ldr	r0, [r3, #8]
 800acbe:	6803      	ldr	r3, [r0, #0]
 800acc0:	4669      	mov	r1, sp
 800acc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800acc4:	6a1d      	ldr	r5, [r3, #32]
 800acc6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800acca:	47a8      	blx	r5
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	24006a90 	.word	0x24006a90

0800acd4 <_ZN8touchgfx3BoxD1Ev>:
 800acd4:	4770      	bx	lr

0800acd6 <_ZN8touchgfx3BoxD0Ev>:
 800acd6:	b510      	push	{r4, lr}
 800acd8:	4604      	mov	r4, r0
 800acda:	212c      	movs	r1, #44	; 0x2c
 800acdc:	f00b ff44 	bl	8016b68 <_ZdlPvj>
 800ace0:	4620      	mov	r0, r4
 800ace2:	bd10      	pop	{r4, pc}

0800ace4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800ace4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800ace8:	b12a      	cbz	r2, 800acf6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800acea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800acee:	b112      	cbz	r2, 800acf6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800acf0:	6803      	ldr	r3, [r0, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	4718      	bx	r3
 800acf6:	4770      	bx	lr

0800acf8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	880b      	ldrh	r3, [r1, #0]
 800acfc:	4605      	mov	r5, r0
 800acfe:	4604      	mov	r4, r0
 800ad00:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800ad02:	8813      	ldrh	r3, [r2, #0]
 800ad04:	f825 3f30 	strh.w	r3, [r5, #48]!
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f003 fe33 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4628      	mov	r0, r5
 800ad12:	f003 fe63 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	4798      	blx	r3
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4629      	mov	r1, r5
 800ad26:	4620      	mov	r0, r4
 800ad28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad2e:	4718      	bx	r3

0800ad30 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800ad30:	b510      	push	{r4, lr}
 800ad32:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800ad36:	4604      	mov	r4, r0
 800ad38:	2bff      	cmp	r3, #255	; 0xff
 800ad3a:	d006      	beq.n	800ad4a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	8003      	strh	r3, [r0, #0]
 800ad40:	8043      	strh	r3, [r0, #2]
 800ad42:	8083      	strh	r3, [r0, #4]
 800ad44:	80c3      	strh	r3, [r0, #6]
 800ad46:	4620      	mov	r0, r4
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800ad4e:	b11b      	cbz	r3, 800ad58 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800ad50:	3130      	adds	r1, #48	; 0x30
 800ad52:	f003 fe77 	bl	800ea44 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ad56:	e7f6      	b.n	800ad46 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800ad58:	312e      	adds	r1, #46	; 0x2e
 800ad5a:	e7fa      	b.n	800ad52 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800ad5c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ad64:	b08a      	sub	sp, #40	; 0x28
 800ad66:	4604      	mov	r4, r0
 800ad68:	4688      	mov	r8, r1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d066      	beq.n	800ae3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800ad6e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800ad70:	a805      	add	r0, sp, #20
 800ad72:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad76:	f003 fdfd 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	a805      	add	r0, sp, #20
 800ad7e:	f003 fe2d 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ad82:	f9b8 6000 	ldrsh.w	r6, [r8]
 800ad86:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4432      	add	r2, r6
 800ad8e:	9306      	str	r3, [sp, #24]
 800ad90:	b292      	uxth	r2, r2
 800ad92:	fa0f fc82 	sxth.w	ip, r2
 800ad96:	459c      	cmp	ip, r3
 800ad98:	dd52      	ble.n	800ae40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ad9a:	42b7      	cmp	r7, r6
 800ad9c:	dd50      	ble.n	800ae40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ad9e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ada2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ada6:	442b      	add	r3, r5
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	b219      	sxth	r1, r3
 800adac:	2900      	cmp	r1, #0
 800adae:	dd47      	ble.n	800ae40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800adb0:	42a8      	cmp	r0, r5
 800adb2:	dd45      	ble.n	800ae40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800adb4:	4567      	cmp	r7, ip
 800adb6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800adba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800adbe:	bfb8      	it	lt
 800adc0:	b2ba      	uxthlt	r2, r7
 800adc2:	4288      	cmp	r0, r1
 800adc4:	f8ad 6018 	strh.w	r6, [sp, #24]
 800adc8:	bfb8      	it	lt
 800adca:	b283      	uxthlt	r3, r0
 800adcc:	1b92      	subs	r2, r2, r6
 800adce:	f8ad 501a 	strh.w	r5, [sp, #26]
 800add2:	1b5b      	subs	r3, r3, r5
 800add4:	f8ad 201c 	strh.w	r2, [sp, #28]
 800add8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800addc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ade0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d026      	beq.n	800ae36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800ade8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dd22      	ble.n	800ae36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800adf0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dd1e      	ble.n	800ae36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800adf8:	2300      	movs	r3, #0
 800adfa:	a908      	add	r1, sp, #32
 800adfc:	4620      	mov	r0, r4
 800adfe:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae06:	4798      	blx	r3
 800ae08:	4b0f      	ldr	r3, [pc, #60]	; (800ae48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ae10:	b10a      	cbz	r2, 800ae16 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800ae12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ae14:	b900      	cbnz	r0, 800ae18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800ae16:	6898      	ldr	r0, [r3, #8]
 800ae18:	2501      	movs	r5, #1
 800ae1a:	6801      	ldr	r1, [r0, #0]
 800ae1c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800ae20:	9502      	str	r5, [sp, #8]
 800ae22:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800ae26:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ae2a:	9401      	str	r4, [sp, #4]
 800ae2c:	ac06      	add	r4, sp, #24
 800ae2e:	9400      	str	r4, [sp, #0]
 800ae30:	688c      	ldr	r4, [r1, #8]
 800ae32:	a905      	add	r1, sp, #20
 800ae34:	47a0      	blx	r4
 800ae36:	b00a      	add	sp, #40	; 0x28
 800ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800ae3e:	e797      	b.n	800ad70 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800ae40:	2300      	movs	r3, #0
 800ae42:	9307      	str	r3, [sp, #28]
 800ae44:	e7ca      	b.n	800addc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800ae46:	bf00      	nop
 800ae48:	24006a90 	.word	0x24006a90

0800ae4c <_ZN8touchgfx5ImageD1Ev>:
 800ae4c:	4770      	bx	lr

0800ae4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	880b      	ldrh	r3, [r1, #0]
 800ae52:	460d      	mov	r5, r1
 800ae54:	4604      	mov	r4, r0
 800ae56:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ae58:	4608      	mov	r0, r1
 800ae5a:	f003 fd8b 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	4628      	mov	r0, r5
 800ae62:	f003 fdbb 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	4605      	mov	r5, r0
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae70:	4798      	blx	r3
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	4629      	mov	r1, r5
 800ae76:	4620      	mov	r0, r4
 800ae78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae7e:	4718      	bx	r3

0800ae80 <_ZN8touchgfx5ImageD0Ev>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	212c      	movs	r1, #44	; 0x2c
 800ae86:	f00b fe6f 	bl	8016b68 <_ZdlPvj>
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	bd10      	pop	{r4, pc}

0800ae8e <_ZNK8touchgfx5Image12getSolidRectEv>:
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800ae94:	4604      	mov	r4, r0
 800ae96:	2bff      	cmp	r3, #255	; 0xff
 800ae98:	d006      	beq.n	800aea8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	8003      	strh	r3, [r0, #0]
 800ae9e:	8043      	strh	r3, [r0, #2]
 800aea0:	8083      	strh	r3, [r0, #4]
 800aea2:	80c3      	strh	r3, [r0, #6]
 800aea4:	4620      	mov	r0, r4
 800aea6:	bd10      	pop	{r4, pc}
 800aea8:	3126      	adds	r1, #38	; 0x26
 800aeaa:	f003 fdcb 	bl	800ea44 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800aeae:	e7f9      	b.n	800aea4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800aeb0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800aeb0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800aeb4:	b12a      	cbz	r2, 800aec2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aeb6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800aeba:	b112      	cbz	r2, 800aec2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aebc:	6803      	ldr	r3, [r0, #0]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	4718      	bx	r3
 800aec2:	4770      	bx	lr

0800aec4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	4604      	mov	r4, r0
 800aeca:	b088      	sub	sp, #32
 800aecc:	2500      	movs	r5, #0
 800aece:	460f      	mov	r7, r1
 800aed0:	f854 3b26 	ldr.w	r3, [r4], #38
 800aed4:	a904      	add	r1, sp, #16
 800aed6:	4606      	mov	r6, r0
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aede:	4798      	blx	r3
 800aee0:	4620      	mov	r0, r4
 800aee2:	f003 fd47 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800aee6:	4680      	mov	r8, r0
 800aee8:	4620      	mov	r0, r4
 800aeea:	f003 fd77 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aeee:	9506      	str	r5, [sp, #24]
 800aef0:	ad06      	add	r5, sp, #24
 800aef2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800aef6:	4639      	mov	r1, r7
 800aef8:	f8ad 801c 	strh.w	r8, [sp, #28]
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7fe fe77 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800af02:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd19      	ble.n	800af3e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800af0a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dd15      	ble.n	800af3e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800af12:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800af1a:	b10a      	cbz	r2, 800af20 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800af1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800af1e:	b900      	cbnz	r0, 800af22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800af20:	6898      	ldr	r0, [r3, #8]
 800af22:	2701      	movs	r7, #1
 800af24:	6801      	ldr	r1, [r0, #0]
 800af26:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800af2a:	9702      	str	r7, [sp, #8]
 800af2c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800af30:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800af34:	e9cd 5600 	strd	r5, r6, [sp]
 800af38:	688d      	ldr	r5, [r1, #8]
 800af3a:	4621      	mov	r1, r4
 800af3c:	47a8      	blx	r5
 800af3e:	b008      	add	sp, #32
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	24006a90 	.word	0x24006a90

0800af48 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	6803      	ldr	r3, [r0, #0]
 800af4c:	460c      	mov	r4, r1
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4798      	blx	r3
 800af52:	1b03      	subs	r3, r0, r4
 800af54:	4258      	negs	r0, r3
 800af56:	4158      	adcs	r0, r3
 800af58:	bd10      	pop	{r4, pc}
	...

0800af5c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800af5c:	4b01      	ldr	r3, [pc, #4]	; (800af64 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800af5e:	6019      	str	r1, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	24006a98 	.word	0x24006a98

0800af68 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	4696      	mov	lr, r2
 800af6e:	b097      	sub	sp, #92	; 0x5c
 800af70:	4605      	mov	r5, r0
 800af72:	4614      	mov	r4, r2
 800af74:	460e      	mov	r6, r1
 800af76:	461f      	mov	r7, r3
 800af78:	f10d 0c1c 	add.w	ip, sp, #28
 800af7c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800af80:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800af84:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800af88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800af8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af90:	f8de 3000 	ldr.w	r3, [lr]
 800af94:	f104 0e14 	add.w	lr, r4, #20
 800af98:	f8cc 3000 	str.w	r3, [ip]
 800af9c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800afa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afa8:	f8de 3000 	ldr.w	r3, [lr]
 800afac:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800afb0:	f8cc 3000 	str.w	r3, [ip]
 800afb4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800afb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afc0:	f8de 3000 	ldr.w	r3, [lr]
 800afc4:	4631      	mov	r1, r6
 800afc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afc8:	4628      	mov	r0, r5
 800afca:	f8cc 3000 	str.w	r3, [ip]
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	9201      	str	r2, [sp, #4]
 800afd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800afd4:	f8cd 8008 	str.w	r8, [sp, #8]
 800afd8:	9200      	str	r2, [sp, #0]
 800afda:	aa07      	add	r2, sp, #28
 800afdc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800afe0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800afe4:	463b      	mov	r3, r7
 800afe6:	47d8      	blx	fp
 800afe8:	46a6      	mov	lr, r4
 800afea:	f10d 0c1c 	add.w	ip, sp, #28
 800afee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aff2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aff6:	f8de 3000 	ldr.w	r3, [lr]
 800affa:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800affe:	343c      	adds	r4, #60	; 0x3c
 800b000:	f8cc 3000 	str.w	r3, [ip]
 800b004:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800b008:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b00c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b010:	f8de 3000 	ldr.w	r3, [lr]
 800b014:	f8cc 3000 	str.w	r3, [ip]
 800b018:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800b01c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b01e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	f8cc 3000 	str.w	r3, [ip]
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b032:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b034:	f8cd 8008 	str.w	r8, [sp, #8]
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b03c:	9200      	str	r2, [sp, #0]
 800b03e:	aa07      	add	r2, sp, #28
 800b040:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b042:	463b      	mov	r3, r7
 800b044:	47a0      	blx	r4
 800b046:	b017      	add	sp, #92	; 0x5c
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b04c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	b08d      	sub	sp, #52	; 0x34
 800b052:	4688      	mov	r8, r1
 800b054:	f8d3 c000 	ldr.w	ip, [r3]
 800b058:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b05a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800b05e:	680f      	ldr	r7, [r1, #0]
 800b060:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800b064:	eba7 070c 	sub.w	r7, r7, ip
 800b068:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800b06c:	edd3 6a07 	vldr	s13, [r3, #28]
 800b070:	42bc      	cmp	r4, r7
 800b072:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b074:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800b078:	bfa8      	it	ge
 800b07a:	463c      	movge	r4, r7
 800b07c:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b080:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b084:	ee07 4a90 	vmov	s15, r4
 800b088:	eb09 0e0c 	add.w	lr, r9, ip
 800b08c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800b090:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b094:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800b098:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800b09c:	4571      	cmp	r1, lr
 800b09e:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b0a2:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b0a6:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b0aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b0ae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b0b2:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b0b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b0ba:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b0be:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b0c2:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b0c6:	f340 808c 	ble.w	800b1e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800b0ca:	eba1 060e 	sub.w	r6, r1, lr
 800b0ce:	fb96 f5f4 	sdiv	r5, r6, r4
 800b0d2:	ee07 5a10 	vmov	s14, r5
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	fb04 6615 	mls	r6, r4, r5, r6
 800b0dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0e0:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b0e4:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b0e8:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b0ec:	dd12      	ble.n	800b114 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800b0ee:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b0f2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b0f6:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b0fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b102:	bf14      	ite	ne
 800b104:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b108:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b10c:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b110:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b114:	fb05 f204 	mul.w	r2, r5, r4
 800b118:	1abf      	subs	r7, r7, r2
 800b11a:	4494      	add	ip, r2
 800b11c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b120:	4411      	add	r1, r2
 800b122:	eb09 020c 	add.w	r2, r9, ip
 800b126:	b209      	sxth	r1, r1
 800b128:	443a      	add	r2, r7
 800b12a:	428a      	cmp	r2, r1
 800b12c:	bfc4      	itt	gt
 800b12e:	eba1 0209 	subgt.w	r2, r1, r9
 800b132:	eba2 070c 	subgt.w	r7, r2, ip
 800b136:	2f00      	cmp	r7, #0
 800b138:	dd50      	ble.n	800b1dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800b13a:	fb97 f1f4 	sdiv	r1, r7, r4
 800b13e:	fb04 7211 	mls	r2, r4, r1, r7
 800b142:	b90a      	cbnz	r2, 800b148 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800b144:	3901      	subs	r1, #1
 800b146:	4622      	mov	r2, r4
 800b148:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b14c:	6840      	ldr	r0, [r0, #4]
 800b14e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800b152:	44b6      	add	lr, r6
 800b154:	f8d0 a000 	ldr.w	sl, [r0]
 800b158:	2900      	cmp	r1, #0
 800b15a:	bfcc      	ite	gt
 800b15c:	46a1      	movgt	r9, r4
 800b15e:	4691      	movle	r9, r2
 800b160:	900b      	str	r0, [sp, #44]	; 0x2c
 800b162:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b164:	fb04 e505 	mla	r5, r4, r5, lr
 800b168:	eef0 6a42 	vmov.f32	s13, s4
 800b16c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b170:	9008      	str	r0, [sp, #32]
 800b172:	eeb0 7a61 	vmov.f32	s14, s3
 800b176:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b17e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b182:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b186:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b188:	445b      	add	r3, fp
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	ee16 3a90 	vmov	r3, s13
 800b190:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b194:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b198:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b19c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b1a0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b1a4:	ee17 7a90 	vmov	r7, s15
 800b1a8:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b1ac:	fb97 f7f4 	sdiv	r7, r7, r4
 800b1b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b1b4:	ee17 ca90 	vmov	ip, s15
 800b1b8:	fb9c fcf4 	sdiv	ip, ip, r4
 800b1bc:	fb0c 3306 	mla	r3, ip, r6, r3
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	ee17 3a10 	vmov	r3, s14
 800b1c6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b1ca:	fb07 3706 	mla	r7, r7, r6, r3
 800b1ce:	eba9 0306 	sub.w	r3, r9, r6
 800b1d2:	e9cd 4700 	strd	r4, r7, [sp]
 800b1d6:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b1da:	47a0      	blx	r4
 800b1dc:	b00d      	add	sp, #52	; 0x34
 800b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e2:	2500      	movs	r5, #0
 800b1e4:	462e      	mov	r6, r5
 800b1e6:	e799      	b.n	800b11c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800b1e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	b0db      	sub	sp, #364	; 0x16c
 800b1ee:	461d      	mov	r5, r3
 800b1f0:	4614      	mov	r4, r2
 800b1f2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800b1f6:	910f      	str	r1, [sp, #60]	; 0x3c
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b1fc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800b200:	9009      	str	r0, [sp, #36]	; 0x24
 800b202:	930b      	str	r3, [sp, #44]	; 0x2c
 800b204:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800b208:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800b20c:	9310      	str	r3, [sp, #64]	; 0x40
 800b20e:	6803      	ldr	r3, [r0, #0]
 800b210:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800b212:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b216:	47b8      	blx	r7
 800b218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21a:	6058      	str	r0, [r3, #4]
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f000 83a1 	beq.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800b228:	ed94 7a02 	vldr	s14, [r4, #8]
 800b22c:	9314      	str	r3, [sp, #80]	; 0x50
 800b22e:	686b      	ldr	r3, [r5, #4]
 800b230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b234:	9315      	str	r3, [sp, #84]	; 0x54
 800b236:	4bc1      	ldr	r3, [pc, #772]	; (800b53c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b238:	7819      	ldrb	r1, [r3, #0]
 800b23a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b23e:	2900      	cmp	r1, #0
 800b240:	bf16      	itet	ne
 800b242:	4619      	movne	r1, r3
 800b244:	4611      	moveq	r1, r2
 800b246:	4613      	movne	r3, r2
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	9116      	str	r1, [sp, #88]	; 0x58
 800b24e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800b252:	f240 8387 	bls.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b256:	ed94 7a07 	vldr	s14, [r4, #28]
 800b25a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b262:	f240 837f 	bls.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b266:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800b26a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b272:	f240 8377 	bls.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b276:	6822      	ldr	r2, [r4, #0]
 800b278:	4bb1      	ldr	r3, [pc, #708]	; (800b540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b27a:	429a      	cmp	r2, r3
 800b27c:	f2c0 8372 	blt.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b280:	49b0      	ldr	r1, [pc, #704]	; (800b544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b282:	6963      	ldr	r3, [r4, #20]
 800b284:	428a      	cmp	r2, r1
 800b286:	f300 836d 	bgt.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b28a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800b28e:	48ae      	ldr	r0, [pc, #696]	; (800b548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b290:	33ff      	adds	r3, #255	; 0xff
 800b292:	4283      	cmp	r3, r0
 800b294:	f200 8366 	bhi.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b29a:	4dac      	ldr	r5, [pc, #688]	; (800b54c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b29c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800b2a0:	33ff      	adds	r3, #255	; 0xff
 800b2a2:	42ab      	cmp	r3, r5
 800b2a4:	f200 835e 	bhi.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b2a8:	6862      	ldr	r2, [r4, #4]
 800b2aa:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800b2ae:	33ff      	adds	r3, #255	; 0xff
 800b2b0:	4283      	cmp	r3, r0
 800b2b2:	f200 8357 	bhi.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b2b6:	69a1      	ldr	r1, [r4, #24]
 800b2b8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800b2bc:	33ff      	adds	r3, #255	; 0xff
 800b2be:	4283      	cmp	r3, r0
 800b2c0:	f200 8350 	bhi.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b2c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b2c6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800b2ca:	30ff      	adds	r0, #255	; 0xff
 800b2cc:	42a8      	cmp	r0, r5
 800b2ce:	f200 8349 	bhi.w	800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b2d2:	428a      	cmp	r2, r1
 800b2d4:	f280 8110 	bge.w	800b4f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	f300 8119 	bgt.w	800b510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	f280 811d 	bge.w	800b51e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800b2e4:	2502      	movs	r5, #2
 800b2e6:	2701      	movs	r7, #1
 800b2e8:	46a9      	mov	r9, r5
 800b2ea:	46b8      	mov	r8, r7
 800b2ec:	f04f 0a00 	mov.w	sl, #0
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	a849      	add	r0, sp, #292	; 0x124
 800b2f4:	f002 ffc6 	bl	800e284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4653      	mov	r3, sl
 800b2fc:	a949      	add	r1, sp, #292	; 0x124
 800b2fe:	f8cd 9000 	str.w	r9, [sp]
 800b302:	a819      	add	r0, sp, #100	; 0x64
 800b304:	f003 f8ee 	bl	800e4e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b308:	4622      	mov	r2, r4
 800b30a:	4653      	mov	r3, sl
 800b30c:	a949      	add	r1, sp, #292	; 0x124
 800b30e:	f8cd 8000 	str.w	r8, [sp]
 800b312:	a829      	add	r0, sp, #164	; 0xa4
 800b314:	f003 f8e6 	bl	800e4e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b318:	4643      	mov	r3, r8
 800b31a:	4622      	mov	r2, r4
 800b31c:	a949      	add	r1, sp, #292	; 0x124
 800b31e:	f8cd 9000 	str.w	r9, [sp]
 800b322:	a839      	add	r0, sp, #228	; 0xe4
 800b324:	f003 f8de 	bl	800e4e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b328:	42af      	cmp	r7, r5
 800b32a:	af12      	add	r7, sp, #72	; 0x48
 800b32c:	bfb7      	itett	lt
 800b32e:	2300      	movlt	r3, #0
 800b330:	2301      	movge	r3, #1
 800b332:	ad29      	addlt	r5, sp, #164	; 0xa4
 800b334:	ac19      	addlt	r4, sp, #100	; 0x64
 800b336:	bfb1      	iteee	lt
 800b338:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b33a:	ad19      	addge	r5, sp, #100	; 0x64
 800b33c:	930e      	strge	r3, [sp, #56]	; 0x38
 800b33e:	ac29      	addge	r4, sp, #164	; 0xa4
 800b340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b342:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b346:	e887 0003 	stmia.w	r7, {r0, r1}
 800b34a:	b928      	cbnz	r0, 800b358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800b34c:	4b80      	ldr	r3, [pc, #512]	; (800b550 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	6803      	ldr	r3, [r0, #0]
 800b352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b354:	4798      	blx	r3
 800b356:	6038      	str	r0, [r7, #0]
 800b358:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b35a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b35e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b362:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800b364:	930c      	str	r3, [sp, #48]	; 0x30
 800b366:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b368:	6963      	ldr	r3, [r4, #20]
 800b36a:	440b      	add	r3, r1
 800b36c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b370:	4408      	add	r0, r1
 800b372:	b200      	sxth	r0, r0
 800b374:	4283      	cmp	r3, r0
 800b376:	900d      	str	r0, [sp, #52]	; 0x34
 800b378:	f280 80dd 	bge.w	800b536 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800b37c:	428b      	cmp	r3, r1
 800b37e:	da08      	bge.n	800b392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b380:	2a00      	cmp	r2, #0
 800b382:	dd06      	ble.n	800b392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b384:	1acb      	subs	r3, r1, r3
 800b386:	429a      	cmp	r2, r3
 800b388:	f2c0 80e4 	blt.w	800b554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f300 80e2 	bgt.w	800b556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800b392:	6967      	ldr	r7, [r4, #20]
 800b394:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800b398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b39a:	443b      	add	r3, r7
 800b39c:	461f      	mov	r7, r3
 800b39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a0:	1bdf      	subs	r7, r3, r7
 800b3a2:	4297      	cmp	r7, r2
 800b3a4:	bfa8      	it	ge
 800b3a6:	4617      	movge	r7, r2
 800b3a8:	2f00      	cmp	r7, #0
 800b3aa:	f340 8166 	ble.w	800b67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800b3ae:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b3b0:	6829      	ldr	r1, [r5, #0]
 800b3b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b3b6:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b3ba:	4411      	add	r1, r2
 800b3bc:	6820      	ldr	r0, [r4, #0]
 800b3be:	4299      	cmp	r1, r3
 800b3c0:	dd1a      	ble.n	800b3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b3c2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b3c6:	4402      	add	r2, r0
 800b3c8:	440b      	add	r3, r1
 800b3ca:	b21b      	sxth	r3, r3
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	dc13      	bgt.n	800b3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b3d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3d2:	a912      	add	r1, sp, #72	; 0x48
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	9206      	str	r2, [sp, #24]
 800b3dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3de:	9500      	str	r5, [sp, #0]
 800b3e0:	9205      	str	r2, [sp, #20]
 800b3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e4:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b3e8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b3ea:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b3ee:	aa49      	add	r2, sp, #292	; 0x124
 800b3f0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800b3f4:	4623      	mov	r3, r4
 800b3f6:	47c8      	blx	r9
 800b3f8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800b3fc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b400:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800b404:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b408:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800b40c:	68a1      	ldr	r1, [r4, #8]
 800b40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b412:	ed94 6a08 	vldr	s12, [r4, #32]
 800b416:	edd4 6a07 	vldr	s13, [r4, #28]
 800b41a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800b41e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b422:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800b426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b42a:	edc4 6a07 	vstr	s13, [r4, #28]
 800b42e:	441a      	add	r2, r3
 800b430:	6963      	ldr	r3, [r4, #20]
 800b432:	3301      	adds	r3, #1
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	6163      	str	r3, [r4, #20]
 800b438:	69a3      	ldr	r3, [r4, #24]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	61a3      	str	r3, [r4, #24]
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	440b      	add	r3, r1
 800b442:	68e1      	ldr	r1, [r4, #12]
 800b444:	428b      	cmp	r3, r1
 800b446:	6123      	str	r3, [r4, #16]
 800b448:	db15      	blt.n	800b476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800b44a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800b44e:	3201      	adds	r2, #1
 800b450:	1a5b      	subs	r3, r3, r1
 800b452:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b456:	6022      	str	r2, [r4, #0]
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	edc4 6a07 	vstr	s13, [r4, #28]
 800b45e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800b462:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b466:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800b46a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800b46e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b472:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800b476:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800b47a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800b47e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800b482:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b486:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800b48a:	68a9      	ldr	r1, [r5, #8]
 800b48c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b490:	ed95 6a08 	vldr	s12, [r5, #32]
 800b494:	edd5 6a07 	vldr	s13, [r5, #28]
 800b498:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800b49c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b4a0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800b4a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4a8:	edc5 6a07 	vstr	s13, [r5, #28]
 800b4ac:	441a      	add	r2, r3
 800b4ae:	696b      	ldr	r3, [r5, #20]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	602a      	str	r2, [r5, #0]
 800b4b4:	616b      	str	r3, [r5, #20]
 800b4b6:	69ab      	ldr	r3, [r5, #24]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	61ab      	str	r3, [r5, #24]
 800b4bc:	692b      	ldr	r3, [r5, #16]
 800b4be:	440b      	add	r3, r1
 800b4c0:	68e9      	ldr	r1, [r5, #12]
 800b4c2:	428b      	cmp	r3, r1
 800b4c4:	612b      	str	r3, [r5, #16]
 800b4c6:	db15      	blt.n	800b4f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b4c8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800b4cc:	3201      	adds	r2, #1
 800b4ce:	1a5b      	subs	r3, r3, r1
 800b4d0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	612b      	str	r3, [r5, #16]
 800b4d8:	edc5 6a07 	vstr	s13, [r5, #28]
 800b4dc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800b4e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b4e4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800b4e8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800b4ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4f0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800b4f4:	3f01      	subs	r7, #1
 800b4f6:	e757      	b.n	800b3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b4f8:	4299      	cmp	r1, r3
 800b4fa:	dc13      	bgt.n	800b524 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	da14      	bge.n	800b52a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b500:	2502      	movs	r5, #2
 800b502:	2703      	movs	r7, #3
 800b504:	f04f 0800 	mov.w	r8, #0
 800b508:	46a9      	mov	r9, r5
 800b50a:	f04f 0a01 	mov.w	sl, #1
 800b50e:	e6ef      	b.n	800b2f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b510:	2501      	movs	r5, #1
 800b512:	2700      	movs	r7, #0
 800b514:	46a9      	mov	r9, r5
 800b516:	46b8      	mov	r8, r7
 800b518:	f04f 0a02 	mov.w	sl, #2
 800b51c:	e6e8      	b.n	800b2f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b51e:	2501      	movs	r5, #1
 800b520:	2702      	movs	r7, #2
 800b522:	e6e1      	b.n	800b2e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b524:	2500      	movs	r5, #0
 800b526:	2701      	movs	r7, #1
 800b528:	e7f4      	b.n	800b514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b52a:	2702      	movs	r7, #2
 800b52c:	2503      	movs	r5, #3
 800b52e:	f04f 0900 	mov.w	r9, #0
 800b532:	46b8      	mov	r8, r7
 800b534:	e7e9      	b.n	800b50a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b536:	4613      	mov	r3, r2
 800b538:	e728      	b.n	800b38c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b53a:	bf00      	nop
 800b53c:	24006a88 	.word	0x24006a88
 800b540:	fffd8f01 	.word	0xfffd8f01
 800b544:	00027100 	.word	0x00027100
 800b548:	0004e1ff 	.word	0x0004e1ff
 800b54c:	0004e1fe 	.word	0x0004e1fe
 800b550:	24006a90 	.word	0x24006a90
 800b554:	4613      	mov	r3, r2
 800b556:	992b      	ldr	r1, [sp, #172]	; 0xac
 800b558:	469e      	mov	lr, r3
 800b55a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b55c:	469c      	mov	ip, r3
 800b55e:	9111      	str	r1, [sp, #68]	; 0x44
 800b560:	f04f 0900 	mov.w	r9, #0
 800b564:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800b568:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800b56c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800b570:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800b574:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800b578:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b57c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800b580:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800b584:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800b588:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800b58c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800b590:	f1bc 0f00 	cmp.w	ip, #0
 800b594:	d147      	bne.n	800b626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b596:	eb03 0c07 	add.w	ip, r3, r7
 800b59a:	1ad7      	subs	r7, r2, r3
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	d009      	beq.n	800b5b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b5a2:	9029      	str	r0, [sp, #164]	; 0xa4
 800b5a4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800b5a8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800b5ac:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800b5b0:	912d      	str	r1, [sp, #180]	; 0xb4
 800b5b2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800b5b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b5b8:	f04f 0800 	mov.w	r8, #0
 800b5bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800b5c0:	9111      	str	r1, [sp, #68]	; 0x44
 800b5c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800b5c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800b5ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800b5ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800b5d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800b5d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800b5da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800b5de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800b5e2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800b5e6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800b5ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800b5ee:	f1be 0f00 	cmp.w	lr, #0
 800b5f2:	d031      	beq.n	800b658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b5f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b5f6:	4450      	add	r0, sl
 800b5f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b5fc:	4431      	add	r1, r6
 800b5fe:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b602:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b606:	4549      	cmp	r1, r9
 800b608:	db08      	blt.n	800b61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b60a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b60e:	3001      	adds	r0, #1
 800b610:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b614:	eba1 0109 	sub.w	r1, r1, r9
 800b618:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b61c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b620:	f04f 0801 	mov.w	r8, #1
 800b624:	e7e3      	b.n	800b5ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b626:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b628:	4450      	add	r0, sl
 800b62a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b62e:	4431      	add	r1, r6
 800b630:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b634:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b638:	4541      	cmp	r1, r8
 800b63a:	db08      	blt.n	800b64e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b63c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b640:	3001      	adds	r0, #1
 800b642:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b646:	eba1 0108 	sub.w	r1, r1, r8
 800b64a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b64e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b652:	f04f 0901 	mov.w	r9, #1
 800b656:	e79b      	b.n	800b590 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b658:	449c      	add	ip, r3
 800b65a:	1aff      	subs	r7, r7, r3
 800b65c:	f1b8 0f00 	cmp.w	r8, #0
 800b660:	d009      	beq.n	800b676 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b662:	9019      	str	r0, [sp, #100]	; 0x64
 800b664:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800b668:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800b66c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800b670:	911d      	str	r1, [sp, #116]	; 0x74
 800b672:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800b676:	1ad2      	subs	r2, r2, r3
 800b678:	e68b      	b.n	800b392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b67a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b67c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 80d1 	beq.w	800b826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b684:	ad19      	add	r5, sp, #100	; 0x64
 800b686:	ac39      	add	r4, sp, #228	; 0xe4
 800b688:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b68a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b68e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b692:	930c      	str	r3, [sp, #48]	; 0x30
 800b694:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b696:	6963      	ldr	r3, [r4, #20]
 800b698:	440b      	add	r3, r1
 800b69a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b69e:	4408      	add	r0, r1
 800b6a0:	b200      	sxth	r0, r0
 800b6a2:	4283      	cmp	r3, r0
 800b6a4:	900d      	str	r0, [sp, #52]	; 0x34
 800b6a6:	f280 80c1 	bge.w	800b82c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b6aa:	428b      	cmp	r3, r1
 800b6ac:	da08      	bge.n	800b6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b6ae:	2a00      	cmp	r2, #0
 800b6b0:	dd06      	ble.n	800b6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b6b2:	1acb      	subs	r3, r1, r3
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	f2c0 80bb 	blt.w	800b830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f300 80b9 	bgt.w	800b832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b6c0:	6967      	ldr	r7, [r4, #20]
 800b6c2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800b6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c8:	443b      	add	r3, r7
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ce:	1bdf      	subs	r7, r3, r7
 800b6d0:	4297      	cmp	r7, r2
 800b6d2:	bfa8      	it	ge
 800b6d4:	4617      	movge	r7, r2
 800b6d6:	2f00      	cmp	r7, #0
 800b6d8:	f340 813c 	ble.w	800b954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b6dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b6de:	6829      	ldr	r1, [r5, #0]
 800b6e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6e4:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b6e8:	4411      	add	r1, r2
 800b6ea:	6820      	ldr	r0, [r4, #0]
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	dd1a      	ble.n	800b726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b6f0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b6f4:	4402      	add	r2, r0
 800b6f6:	440b      	add	r3, r1
 800b6f8:	b21b      	sxth	r3, r3
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	dc13      	bgt.n	800b726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b6fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b700:	a912      	add	r1, sp, #72	; 0x48
 800b702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	9206      	str	r2, [sp, #24]
 800b70a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b70c:	9500      	str	r5, [sp, #0]
 800b70e:	9205      	str	r2, [sp, #20]
 800b710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b712:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b716:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b718:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b71c:	aa49      	add	r2, sp, #292	; 0x124
 800b71e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800b722:	4623      	mov	r3, r4
 800b724:	47c8      	blx	r9
 800b726:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800b72a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b72e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800b732:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b736:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800b73a:	68a1      	ldr	r1, [r4, #8]
 800b73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b740:	ed94 6a08 	vldr	s12, [r4, #32]
 800b744:	edd4 6a07 	vldr	s13, [r4, #28]
 800b748:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800b74c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b750:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800b754:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b758:	edc4 6a07 	vstr	s13, [r4, #28]
 800b75c:	441a      	add	r2, r3
 800b75e:	6963      	ldr	r3, [r4, #20]
 800b760:	3301      	adds	r3, #1
 800b762:	6022      	str	r2, [r4, #0]
 800b764:	6163      	str	r3, [r4, #20]
 800b766:	69a3      	ldr	r3, [r4, #24]
 800b768:	3b01      	subs	r3, #1
 800b76a:	61a3      	str	r3, [r4, #24]
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	440b      	add	r3, r1
 800b770:	68e1      	ldr	r1, [r4, #12]
 800b772:	428b      	cmp	r3, r1
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	db15      	blt.n	800b7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b778:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800b77c:	3201      	adds	r2, #1
 800b77e:	1a5b      	subs	r3, r3, r1
 800b780:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	edc4 6a07 	vstr	s13, [r4, #28]
 800b78c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800b790:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b794:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800b798:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800b79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800b7a4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800b7a8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800b7ac:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800b7b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b7b4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800b7b8:	68a9      	ldr	r1, [r5, #8]
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ed95 6a08 	vldr	s12, [r5, #32]
 800b7c2:	edd5 6a07 	vldr	s13, [r5, #28]
 800b7c6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800b7ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b7ce:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800b7d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7d6:	edc5 6a07 	vstr	s13, [r5, #28]
 800b7da:	441a      	add	r2, r3
 800b7dc:	696b      	ldr	r3, [r5, #20]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	616b      	str	r3, [r5, #20]
 800b7e4:	69ab      	ldr	r3, [r5, #24]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	61ab      	str	r3, [r5, #24]
 800b7ea:	692b      	ldr	r3, [r5, #16]
 800b7ec:	440b      	add	r3, r1
 800b7ee:	68e9      	ldr	r1, [r5, #12]
 800b7f0:	428b      	cmp	r3, r1
 800b7f2:	612b      	str	r3, [r5, #16]
 800b7f4:	db15      	blt.n	800b822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800b7f6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800b7fa:	3201      	adds	r2, #1
 800b7fc:	1a5b      	subs	r3, r3, r1
 800b7fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b802:	602a      	str	r2, [r5, #0]
 800b804:	612b      	str	r3, [r5, #16]
 800b806:	edc5 6a07 	vstr	s13, [r5, #28]
 800b80a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800b80e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b812:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800b816:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800b81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b81e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800b822:	3f01      	subs	r7, #1
 800b824:	e757      	b.n	800b6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800b826:	ad39      	add	r5, sp, #228	; 0xe4
 800b828:	ac19      	add	r4, sp, #100	; 0x64
 800b82a:	e72d      	b.n	800b688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800b82c:	4613      	mov	r3, r2
 800b82e:	e744      	b.n	800b6ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800b830:	4613      	mov	r3, r2
 800b832:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800b834:	469e      	mov	lr, r3
 800b836:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800b83a:	461f      	mov	r7, r3
 800b83c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800b840:	f04f 0900 	mov.w	r9, #0
 800b844:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800b848:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800b84c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800b850:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800b854:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800b858:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800b85a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800b85e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800b862:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800b866:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800b86a:	960e      	str	r6, [sp, #56]	; 0x38
 800b86c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800b870:	2f00      	cmp	r7, #0
 800b872:	d146      	bne.n	800b902 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800b874:	449c      	add	ip, r3
 800b876:	1ad7      	subs	r7, r2, r3
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	d009      	beq.n	800b892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800b87e:	9039      	str	r0, [sp, #228]	; 0xe4
 800b880:	913d      	str	r1, [sp, #244]	; 0xf4
 800b882:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800b886:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800b88a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800b88e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800b892:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b894:	f04f 0800 	mov.w	r8, #0
 800b898:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800b89c:	910e      	str	r1, [sp, #56]	; 0x38
 800b89e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800b8a2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800b8a6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800b8aa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800b8ae:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800b8b2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800b8b6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800b8ba:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800b8be:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800b8c2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800b8c6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800b8ca:	f1be 0f00 	cmp.w	lr, #0
 800b8ce:	d030      	beq.n	800b932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800b8d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b8d2:	4450      	add	r0, sl
 800b8d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b8d8:	4431      	add	r1, r6
 800b8da:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b8de:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b8e2:	4549      	cmp	r1, r9
 800b8e4:	db08      	blt.n	800b8f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800b8e6:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b8f0:	eba1 0109 	sub.w	r1, r1, r9
 800b8f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b8f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b8fc:	f04f 0801 	mov.w	r8, #1
 800b900:	e7e3      	b.n	800b8ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800b902:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b904:	4450      	add	r0, sl
 800b906:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b90a:	4431      	add	r1, r6
 800b90c:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b910:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b914:	4541      	cmp	r1, r8
 800b916:	db08      	blt.n	800b92a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800b918:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b91c:	3001      	adds	r0, #1
 800b91e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b922:	eba1 0108 	sub.w	r1, r1, r8
 800b926:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b92a:	3f01      	subs	r7, #1
 800b92c:	f04f 0901 	mov.w	r9, #1
 800b930:	e79e      	b.n	800b870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800b932:	449c      	add	ip, r3
 800b934:	1aff      	subs	r7, r7, r3
 800b936:	f1b8 0f00 	cmp.w	r8, #0
 800b93a:	d009      	beq.n	800b950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800b93c:	9019      	str	r0, [sp, #100]	; 0x64
 800b93e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800b942:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800b946:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800b94a:	911d      	str	r1, [sp, #116]	; 0x74
 800b94c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	e6b5      	b.n	800b6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	b923      	cbnz	r3, 800b964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	6803      	ldr	r3, [r0, #0]
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	4798      	blx	r3
 800b964:	b05b      	add	sp, #364	; 0x16c
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96a:	bf00      	nop
 800b96c:	24006a90 	.word	0x24006a90

0800b970 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800b970:	2b03      	cmp	r3, #3
 800b972:	d818      	bhi.n	800b9a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800b974:	e8df f003 	tbb	[pc, r3]
 800b978:	130d0602 	.word	0x130d0602
 800b97c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b980:	1850      	adds	r0, r2, r1
 800b982:	4770      	bx	lr
 800b984:	8803      	ldrh	r3, [r0, #0]
 800b986:	8880      	ldrh	r0, [r0, #4]
 800b988:	4418      	add	r0, r3
 800b98a:	b200      	sxth	r0, r0
 800b98c:	1a80      	subs	r0, r0, r2
 800b98e:	3801      	subs	r0, #1
 800b990:	4770      	bx	lr
 800b992:	8803      	ldrh	r3, [r0, #0]
 800b994:	8880      	ldrh	r0, [r0, #4]
 800b996:	4418      	add	r0, r3
 800b998:	b200      	sxth	r0, r0
 800b99a:	1a40      	subs	r0, r0, r1
 800b99c:	e7f7      	b.n	800b98e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800b99e:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b9a2:	4410      	add	r0, r2
 800b9a4:	4770      	bx	lr
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	4770      	bx	lr

0800b9aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d817      	bhi.n	800b9de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800b9ae:	e8df f003 	tbb	[pc, r3]
 800b9b2:	0602      	.short	0x0602
 800b9b4:	1009      	.short	0x1009
 800b9b6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800b9ba:	1850      	adds	r0, r2, r1
 800b9bc:	4770      	bx	lr
 800b9be:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b9c2:	e7fa      	b.n	800b9ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800b9c4:	8843      	ldrh	r3, [r0, #2]
 800b9c6:	88c0      	ldrh	r0, [r0, #6]
 800b9c8:	4418      	add	r0, r3
 800b9ca:	b200      	sxth	r0, r0
 800b9cc:	1a80      	subs	r0, r0, r2
 800b9ce:	3801      	subs	r0, #1
 800b9d0:	4770      	bx	lr
 800b9d2:	8843      	ldrh	r3, [r0, #2]
 800b9d4:	88c0      	ldrh	r0, [r0, #6]
 800b9d6:	4418      	add	r0, r3
 800b9d8:	b200      	sxth	r0, r0
 800b9da:	1a40      	subs	r0, r0, r1
 800b9dc:	e7f7      	b.n	800b9ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800b9e4:	4b01      	ldr	r3, [pc, #4]	; (800b9ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]
 800b9ea:	4770      	bx	lr
 800b9ec:	24006a98 	.word	0x24006a98

0800b9f0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	b1c8      	cbz	r0, 800ba28 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800b9f4:	0c02      	lsrs	r2, r0, #16
 800b9f6:	0412      	lsls	r2, r2, #16
 800b9f8:	b9a2      	cbnz	r2, 800ba24 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800b9fa:	0403      	lsls	r3, r0, #16
 800b9fc:	2010      	movs	r0, #16
 800b9fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba02:	bf04      	itt	eq
 800ba04:	021b      	lsleq	r3, r3, #8
 800ba06:	3008      	addeq	r0, #8
 800ba08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba0c:	bf04      	itt	eq
 800ba0e:	011b      	lsleq	r3, r3, #4
 800ba10:	3004      	addeq	r0, #4
 800ba12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba16:	bf04      	itt	eq
 800ba18:	009b      	lsleq	r3, r3, #2
 800ba1a:	3002      	addeq	r0, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	db04      	blt.n	800ba2a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800ba20:	3001      	adds	r0, #1
 800ba22:	4770      	bx	lr
 800ba24:	2000      	movs	r0, #0
 800ba26:	e7ea      	b.n	800b9fe <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800ba28:	2020      	movs	r0, #32
 800ba2a:	4770      	bx	lr

0800ba2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	b087      	sub	sp, #28
 800ba32:	4681      	mov	r9, r0
 800ba34:	4698      	mov	r8, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	460d      	mov	r5, r1
 800ba3a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800ba3e:	b981      	cbnz	r1, 800ba62 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800ba40:	b14b      	cbz	r3, 800ba56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800ba42:	460b      	mov	r3, r1
 800ba44:	464a      	mov	r2, r9
 800ba46:	4641      	mov	r1, r8
 800ba48:	e9cd 4700 	strd	r4, r7, [sp]
 800ba4c:	f7ff ffee 	bl	800ba2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ba50:	b007      	add	sp, #28
 800ba52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	e7f6      	b.n	800ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ba62:	fa32 fa01 	lsrs.w	sl, r2, r1
 800ba66:	d107      	bne.n	800ba78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800ba68:	fb09 f602 	mul.w	r6, r9, r2
 800ba6c:	fbb6 f0f4 	udiv	r0, r6, r4
 800ba70:	fb04 6610 	mls	r6, r4, r0, r6
 800ba74:	603e      	str	r6, [r7, #0]
 800ba76:	e7eb      	b.n	800ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ba78:	2601      	movs	r6, #1
 800ba7a:	fa09 fb01 	lsl.w	fp, r9, r1
 800ba7e:	408e      	lsls	r6, r1
 800ba80:	fbbb f3f4 	udiv	r3, fp, r4
 800ba84:	3e01      	subs	r6, #1
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	fb0a f303 	mul.w	r3, sl, r3
 800ba8c:	4016      	ands	r6, r2
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7ff ffad 	bl	800b9f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ba96:	464a      	mov	r2, r9
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	e9cd 4700 	strd	r4, r7, [sp]
 800baa2:	f7ff ffc3 	bl	800ba2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800baa6:	9b02      	ldr	r3, [sp, #8]
 800baa8:	4606      	mov	r6, r0
 800baaa:	eb05 0108 	add.w	r1, r5, r8
 800baae:	fb04 bb13 	mls	fp, r4, r3, fp
 800bab2:	4658      	mov	r0, fp
 800bab4:	f7ff ff9c 	bl	800b9f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800bab8:	ab05      	add	r3, sp, #20
 800baba:	465a      	mov	r2, fp
 800babc:	e9cd 4300 	strd	r4, r3, [sp]
 800bac0:	4603      	mov	r3, r0
 800bac2:	4650      	mov	r0, sl
 800bac4:	f7ff ffb2 	bl	800ba2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	9a05      	ldr	r2, [sp, #20]
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	4411      	add	r1, r2
 800bad0:	fbb1 f2f4 	udiv	r2, r1, r4
 800bad4:	18d3      	adds	r3, r2, r3
 800bad6:	fb04 1412 	mls	r4, r4, r2, r1
 800bada:	441e      	add	r6, r3
 800badc:	603c      	str	r4, [r7, #0]
 800bade:	4430      	add	r0, r6
 800bae0:	e7b6      	b.n	800ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800bae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800bae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bae6:	b085      	sub	sp, #20
 800bae8:	f1b0 0900 	subs.w	r9, r0, #0
 800baec:	461d      	mov	r5, r3
 800baee:	4617      	mov	r7, r2
 800baf0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800baf2:	bfbb      	ittet	lt
 800baf4:	f1c9 0900 	rsblt	r9, r9, #0
 800baf8:	f04f 36ff 	movlt.w	r6, #4294967295
 800bafc:	2601      	movge	r6, #1
 800bafe:	6823      	ldrlt	r3, [r4, #0]
 800bb00:	bfbc      	itt	lt
 800bb02:	425b      	neglt	r3, r3
 800bb04:	6023      	strlt	r3, [r4, #0]
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	da04      	bge.n	800bb14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	4257      	negs	r7, r2
 800bb0e:	4276      	negs	r6, r6
 800bb10:	425b      	negs	r3, r3
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	2d00      	cmp	r5, #0
 800bb16:	4638      	mov	r0, r7
 800bb18:	bfba      	itte	lt
 800bb1a:	426d      	neglt	r5, r5
 800bb1c:	f04f 38ff 	movlt.w	r8, #4294967295
 800bb20:	f04f 0801 	movge.w	r8, #1
 800bb24:	f7ff ff64 	bl	800b9f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800bb28:	ab03      	add	r3, sp, #12
 800bb2a:	463a      	mov	r2, r7
 800bb2c:	e9cd 5300 	strd	r5, r3, [sp]
 800bb30:	4603      	mov	r3, r0
 800bb32:	4648      	mov	r0, r9
 800bb34:	f7ff ff7a 	bl	800ba2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	9a03      	ldr	r2, [sp, #12]
 800bb3c:	4546      	cmp	r6, r8
 800bb3e:	441a      	add	r2, r3
 800bb40:	fb92 f3f5 	sdiv	r3, r2, r5
 800bb44:	4418      	add	r0, r3
 800bb46:	fb05 2313 	mls	r3, r5, r3, r2
 800bb4a:	bf18      	it	ne
 800bb4c:	4240      	negne	r0, r0
 800bb4e:	1c72      	adds	r2, r6, #1
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	d105      	bne.n	800bb60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f1c3 0200 	rsb	r2, r3, #0
 800bb5a:	db0b      	blt.n	800bb74 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	e006      	b.n	800bb6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800bb60:	2e01      	cmp	r6, #1
 800bb62:	d104      	bne.n	800bb6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	da02      	bge.n	800bb6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800bb68:	442b      	add	r3, r5
 800bb6a:	3801      	subs	r0, #1
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	b005      	add	sp, #20
 800bb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb74:	3801      	subs	r0, #1
 800bb76:	1b52      	subs	r2, r2, r5
 800bb78:	e7f0      	b.n	800bb5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800bb7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800bb7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bb80:	4c1c      	ldr	r4, [pc, #112]	; (800bbf4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800bb82:	4605      	mov	r5, r0
 800bb84:	6807      	ldr	r7, [r0, #0]
 800bb86:	69a3      	ldr	r3, [r4, #24]
 800bb88:	b92b      	cbnz	r3, 800bb96 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800bb8a:	6840      	ldr	r0, [r0, #4]
 800bb8c:	e9c5 7000 	strd	r7, r0, [r5]
 800bb90:	b004      	add	sp, #16
 800bb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb96:	f04f 0802 	mov.w	r8, #2
 800bb9a:	68a2      	ldr	r2, [r4, #8]
 800bb9c:	ae04      	add	r6, sp, #16
 800bb9e:	6820      	ldr	r0, [r4, #0]
 800bba0:	fb93 f1f8 	sdiv	r1, r3, r8
 800bba4:	440a      	add	r2, r1
 800bba6:	69e1      	ldr	r1, [r4, #28]
 800bba8:	f846 2d04 	str.w	r2, [r6, #-4]!
 800bbac:	463a      	mov	r2, r7
 800bbae:	9600      	str	r6, [sp, #0]
 800bbb0:	f7ff ff97 	bl	800bae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800bbb4:	69a3      	ldr	r3, [r4, #24]
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	686a      	ldr	r2, [r5, #4]
 800bbba:	6a21      	ldr	r1, [r4, #32]
 800bbbc:	9600      	str	r6, [sp, #0]
 800bbbe:	6860      	ldr	r0, [r4, #4]
 800bbc0:	f7ff ff8f 	bl	800bae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800bbc4:	69a3      	ldr	r3, [r4, #24]
 800bbc6:	6962      	ldr	r2, [r4, #20]
 800bbc8:	4407      	add	r7, r0
 800bbca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbcc:	9600      	str	r6, [sp, #0]
 800bbce:	68e0      	ldr	r0, [r4, #12]
 800bbd0:	fb93 f8f8 	sdiv	r8, r3, r8
 800bbd4:	4442      	add	r2, r8
 800bbd6:	9203      	str	r2, [sp, #12]
 800bbd8:	682a      	ldr	r2, [r5, #0]
 800bbda:	f7ff ff82 	bl	800bae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800bbde:	4680      	mov	r8, r0
 800bbe0:	9600      	str	r6, [sp, #0]
 800bbe2:	69a3      	ldr	r3, [r4, #24]
 800bbe4:	686a      	ldr	r2, [r5, #4]
 800bbe6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bbe8:	6920      	ldr	r0, [r4, #16]
 800bbea:	f7ff ff7a 	bl	800bae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800bbee:	4440      	add	r0, r8
 800bbf0:	e7cc      	b.n	800bb8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800bbf2:	bf00      	nop
 800bbf4:	24006a9c 	.word	0x24006a9c

0800bbf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d109      	bne.n	800bc14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800bc00:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bc04:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bc08:	8003      	strh	r3, [r0, #0]
 800bc0a:	4b04      	ldr	r3, [pc, #16]	; (800bc1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	1a9b      	subs	r3, r3, r2
 800bc12:	800b      	strh	r3, [r1, #0]
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	24006a88 	.word	0x24006a88
 800bc1c:	24006a84 	.word	0x24006a84

0800bc20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800bc20:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800bc22:	b510      	push	{r4, lr}
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d108      	bne.n	800bc3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800bc2c:	880c      	ldrh	r4, [r1, #0]
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bc34:	3b01      	subs	r3, #1
 800bc36:	1b1b      	subs	r3, r3, r4
 800bc38:	8003      	strh	r3, [r0, #0]
 800bc3a:	800a      	strh	r2, [r1, #0]
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	bf00      	nop
 800bc40:	24006a88 	.word	0x24006a88
 800bc44:	24006a84 	.word	0x24006a84

0800bc48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d10e      	bne.n	800bc70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800bc52:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800bc56:	8843      	ldrh	r3, [r0, #2]
 800bc58:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bc5c:	18ca      	adds	r2, r1, r3
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800bc60:	8044      	strh	r4, [r0, #2]
 800bc62:	881b      	ldrh	r3, [r3, #0]
 800bc64:	1a9b      	subs	r3, r3, r2
 800bc66:	8003      	strh	r3, [r0, #0]
 800bc68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bc6c:	8081      	strh	r1, [r0, #4]
 800bc6e:	80c3      	strh	r3, [r0, #6]
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	24006a88 	.word	0x24006a88
 800bc78:	24006a84 	.word	0x24006a84

0800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800bc7c:	4b08      	ldr	r3, [pc, #32]	; (800bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d10c      	bne.n	800bc9e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800bc84:	8803      	ldrh	r3, [r0, #0]
 800bc86:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800bc8a:	8842      	ldrh	r2, [r0, #2]
 800bc8c:	8002      	strh	r2, [r0, #0]
 800bc8e:	185a      	adds	r2, r3, r1
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	8043      	strh	r3, [r0, #2]
 800bc98:	88c3      	ldrh	r3, [r0, #6]
 800bc9a:	80c1      	strh	r1, [r0, #6]
 800bc9c:	8083      	strh	r3, [r0, #4]
 800bc9e:	4770      	bx	lr
 800bca0:	24006a88 	.word	0x24006a88
 800bca4:	24006a84 	.word	0x24006a84

0800bca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800bca8:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d108      	bne.n	800bcc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800bcb2:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bcb6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bcba:	8003      	strh	r3, [r0, #0]
 800bcbc:	8893      	ldrh	r3, [r2, #4]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	1b1b      	subs	r3, r3, r4
 800bcc2:	800b      	strh	r3, [r1, #0]
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	bf00      	nop
 800bcc8:	24006a88 	.word	0x24006a88

0800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800bccc:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800bcce:	460a      	mov	r2, r1
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d10d      	bne.n	800bcf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800bcd8:	8881      	ldrh	r1, [r0, #4]
 800bcda:	8803      	ldrh	r3, [r0, #0]
 800bcdc:	440b      	add	r3, r1
 800bcde:	4601      	mov	r1, r0
 800bce0:	3b01      	subs	r3, #1
 800bce2:	f821 3b02 	strh.w	r3, [r1], #2
 800bce6:	f7ff ffdf 	bl	800bca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800bcea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bcee:	88c2      	ldrh	r2, [r0, #6]
 800bcf0:	80c3      	strh	r3, [r0, #6]
 800bcf2:	8082      	strh	r2, [r0, #4]
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	bf00      	nop
 800bcf8:	24006a88 	.word	0x24006a88

0800bcfc <_ZN8touchgfx11Application13requestRedrawEv>:
 800bcfc:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800bcfe:	2100      	movs	r1, #0
 800bd00:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800bd06:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800bd0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd0e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 800bd12:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 800bd16:	4770      	bx	lr
 800bd18:	24006a84 	.word	0x24006a84
 800bd1c:	24006a86 	.word	0x24006a86

0800bd20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800bd20:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	b110      	cbz	r0, 800bd2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800bd26:	6803      	ldr	r3, [r0, #0]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	4718      	bx	r3
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	24006acc 	.word	0x24006acc

0800bd34 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800bd34:	4770      	bx	lr
	...

0800bd38 <_ZN8touchgfx11Application4drawEv>:
 800bd38:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <_ZN8touchgfx11Application4drawEv+0x28>)
 800bd3a:	b507      	push	{r0, r1, r2, lr}
 800bd3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bd40:	2100      	movs	r1, #0
 800bd42:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800bd44:	9100      	str	r1, [sp, #0]
 800bd46:	4669      	mov	r1, sp
 800bd48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd4c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bd50:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bd54:	6803      	ldr	r3, [r0, #0]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	4798      	blx	r3
 800bd5a:	b003      	add	sp, #12
 800bd5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd60:	24006a84 	.word	0x24006a84
 800bd64:	24006a86 	.word	0x24006a86

0800bd68 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800bd6a:	6818      	ldr	r0, [r3, #0]
 800bd6c:	b110      	cbz	r0, 800bd74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800bd6e:	6803      	ldr	r3, [r0, #0]
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	4718      	bx	r3
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	24006acc 	.word	0x24006acc

0800bd7c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800bd7c:	4b03      	ldr	r3, [pc, #12]	; (800bd8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	b110      	cbz	r0, 800bd88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800bd82:	6803      	ldr	r3, [r0, #0]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	4718      	bx	r3
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	24006acc 	.word	0x24006acc

0800bd90 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 800bd96:	4770      	bx	lr

0800bd98 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800bd98:	4b03      	ldr	r3, [pc, #12]	; (800bda8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	b110      	cbz	r0, 800bda4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800bd9e:	6803      	ldr	r3, [r0, #0]
 800bda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda2:	4718      	bx	r3
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	24006acc 	.word	0x24006acc

0800bdac <_ZN8touchgfx11ApplicationD1Ev>:
 800bdac:	4770      	bx	lr

0800bdae <_ZN8touchgfx11ApplicationD0Ev>:
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800bdb6:	f00a fed7 	bl	8016b68 <_ZdlPvj>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800bdbe:	b510      	push	{r4, lr}
 800bdc0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bdc4:	888a      	ldrh	r2, [r1, #4]
 800bdc6:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bdca:	4422      	add	r2, r4
 800bdcc:	b212      	sxth	r2, r2
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	da15      	bge.n	800bdfe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bdd2:	8882      	ldrh	r2, [r0, #4]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	b21b      	sxth	r3, r3
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	da10      	bge.n	800bdfe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bddc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bde0:	88c9      	ldrh	r1, [r1, #6]
 800bde2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bde6:	4419      	add	r1, r3
 800bde8:	b209      	sxth	r1, r1
 800bdea:	428a      	cmp	r2, r1
 800bdec:	da07      	bge.n	800bdfe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bdee:	88c0      	ldrh	r0, [r0, #6]
 800bdf0:	4410      	add	r0, r2
 800bdf2:	b200      	sxth	r0, r0
 800bdf4:	4283      	cmp	r3, r0
 800bdf6:	bfac      	ite	ge
 800bdf8:	2000      	movge	r0, #0
 800bdfa:	2001      	movlt	r0, #1
 800bdfc:	bd10      	pop	{r4, pc}
 800bdfe:	2000      	movs	r0, #0
 800be00:	e7fc      	b.n	800bdfc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800be02 <_ZN8touchgfx4Rect10restrictToEss>:
 800be02:	f9b0 3000 	ldrsh.w	r3, [r0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	b510      	push	{r4, lr}
 800be0a:	da04      	bge.n	800be16 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800be0c:	8884      	ldrh	r4, [r0, #4]
 800be0e:	4423      	add	r3, r4
 800be10:	8083      	strh	r3, [r0, #4]
 800be12:	2300      	movs	r3, #0
 800be14:	8003      	strh	r3, [r0, #0]
 800be16:	f9b0 4000 	ldrsh.w	r4, [r0]
 800be1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800be1e:	1b09      	subs	r1, r1, r4
 800be20:	428b      	cmp	r3, r1
 800be22:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800be26:	bfc8      	it	gt
 800be28:	8081      	strhgt	r1, [r0, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da04      	bge.n	800be38 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800be2e:	88c1      	ldrh	r1, [r0, #6]
 800be30:	440b      	add	r3, r1
 800be32:	80c3      	strh	r3, [r0, #6]
 800be34:	2300      	movs	r3, #0
 800be36:	8043      	strh	r3, [r0, #2]
 800be38:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800be3c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800be40:	1a52      	subs	r2, r2, r1
 800be42:	4293      	cmp	r3, r2
 800be44:	bfc8      	it	gt
 800be46:	80c2      	strhgt	r2, [r0, #6]
 800be48:	bd10      	pop	{r4, pc}
	...

0800be4c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800be4e:	b510      	push	{r4, lr}
 800be50:	460c      	mov	r4, r1
 800be52:	f9b3 2000 	ldrsh.w	r2, [r3]
 800be56:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800be58:	4620      	mov	r0, r4
 800be5a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800be5e:	f7ff ffd0 	bl	800be02 <_ZN8touchgfx4Rect10restrictToEss>
 800be62:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	b190      	cbz	r0, 800be8e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800be68:	6803      	ldr	r3, [r0, #0]
 800be6a:	4621      	mov	r1, r4
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	4798      	blx	r3
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	b118      	cbz	r0, 800be7e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800be76:	6803      	ldr	r3, [r0, #0]
 800be78:	4621      	mov	r1, r4
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	4798      	blx	r3
 800be7e:	4b08      	ldr	r3, [pc, #32]	; (800bea0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800be80:	4621      	mov	r1, r4
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	6803      	ldr	r3, [r0, #0]
 800be86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	4718      	bx	r3
 800be8e:	bd10      	pop	{r4, pc}
 800be90:	24006a86 	.word	0x24006a86
 800be94:	24006a84 	.word	0x24006a84
 800be98:	24006acc 	.word	0x24006acc
 800be9c:	24006ac8 	.word	0x24006ac8
 800bea0:	24006a90 	.word	0x24006a90

0800bea4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	4606      	mov	r6, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	460f      	mov	r7, r1
 800beac:	f7fd fee3 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800beb0:	b9e8      	cbnz	r0, 800beee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800beb2:	f9b7 5000 	ldrsh.w	r5, [r7]
 800beb6:	f9b6 4000 	ldrsh.w	r4, [r6]
 800beba:	42a5      	cmp	r5, r4
 800bebc:	db17      	blt.n	800beee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800bebe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bec2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	db11      	blt.n	800beee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800beca:	88b9      	ldrh	r1, [r7, #4]
 800becc:	440d      	add	r5, r1
 800bece:	88b1      	ldrh	r1, [r6, #4]
 800bed0:	440c      	add	r4, r1
 800bed2:	b22d      	sxth	r5, r5
 800bed4:	b224      	sxth	r4, r4
 800bed6:	42a5      	cmp	r5, r4
 800bed8:	dc09      	bgt.n	800beee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800beda:	88f8      	ldrh	r0, [r7, #6]
 800bedc:	4410      	add	r0, r2
 800bede:	88f2      	ldrh	r2, [r6, #6]
 800bee0:	4413      	add	r3, r2
 800bee2:	b200      	sxth	r0, r0
 800bee4:	b21b      	sxth	r3, r3
 800bee6:	4298      	cmp	r0, r3
 800bee8:	bfcc      	ite	gt
 800beea:	2000      	movgt	r0, #0
 800beec:	2001      	movle	r0, #1
 800beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	460d      	mov	r5, r1
 800bef8:	f7fd febd 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800befc:	b978      	cbnz	r0, 800bf1e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800befe:	4620      	mov	r0, r4
 800bf00:	f7fd feb9 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800bf04:	f9b5 6000 	ldrsh.w	r6, [r5]
 800bf08:	b150      	cbz	r0, 800bf20 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800bf0a:	8026      	strh	r6, [r4, #0]
 800bf0c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800bf10:	8063      	strh	r3, [r4, #2]
 800bf12:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bf16:	80a3      	strh	r3, [r4, #4]
 800bf18:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bf1c:	80e3      	strh	r3, [r4, #6]
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	f9b4 1000 	ldrsh.w	r1, [r4]
 800bf24:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800bf28:	42b1      	cmp	r1, r6
 800bf2a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800bf2e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800bf32:	460f      	mov	r7, r1
 800bf34:	88ed      	ldrh	r5, [r5, #6]
 800bf36:	bfa8      	it	ge
 800bf38:	4637      	movge	r7, r6
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	4466      	add	r6, ip
 800bf40:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800bf44:	bfa8      	it	ge
 800bf46:	4610      	movge	r0, r2
 800bf48:	442a      	add	r2, r5
 800bf4a:	88e5      	ldrh	r5, [r4, #6]
 800bf4c:	4461      	add	r1, ip
 800bf4e:	b236      	sxth	r6, r6
 800bf50:	8027      	strh	r7, [r4, #0]
 800bf52:	442b      	add	r3, r5
 800bf54:	b209      	sxth	r1, r1
 800bf56:	b212      	sxth	r2, r2
 800bf58:	8060      	strh	r0, [r4, #2]
 800bf5a:	b21b      	sxth	r3, r3
 800bf5c:	428e      	cmp	r6, r1
 800bf5e:	bfac      	ite	ge
 800bf60:	ebc7 0106 	rsbge	r1, r7, r6
 800bf64:	ebc7 0101 	rsblt	r1, r7, r1
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	bfac      	ite	ge
 800bf6c:	ebc0 0202 	rsbge	r2, r0, r2
 800bf70:	ebc0 0203 	rsblt	r2, r0, r3
 800bf74:	80a1      	strh	r1, [r4, #4]
 800bf76:	80e2      	strh	r2, [r4, #6]
 800bf78:	e7d1      	b.n	800bf1e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800bf7c <_ZN8touchgfx11Application11getInstanceEv>:
 800bf7c:	4b01      	ldr	r3, [pc, #4]	; (800bf84 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	24006adc 	.word	0x24006adc

0800bf88 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800bf88:	2300      	movs	r3, #0
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800bf90:	4604      	mov	r4, r0
 800bf92:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800bf96:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800bf9a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800bf9e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d90e      	bls.n	800bfc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800bfa6:	18e2      	adds	r2, r4, r3
 800bfa8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800bfac:	b122      	cbz	r2, 800bfb8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800bfae:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800bfb2:	6803      	ldr	r3, [r0, #0]
 800bfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb6:	4798      	blx	r3
 800bfb8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800bfc2:	e7ea      	b.n	800bf9a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800bfc4:	bd10      	pop	{r4, pc}

0800bfc6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f100 0284 	add.w	r2, r0, #132	; 0x84
 800bfcc:	30a4      	adds	r0, #164	; 0xa4
 800bfce:	f820 3c24 	strh.w	r3, [r0, #-36]
 800bfd2:	f802 3b01 	strb.w	r3, [r2], #1
 800bfd6:	4282      	cmp	r2, r0
 800bfd8:	d1fb      	bne.n	800bfd2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800bfda:	4770      	bx	lr

0800bfdc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	4c0b      	ldr	r4, [pc, #44]	; (800c00c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460e      	mov	r6, r1
 800bfe4:	6820      	ldr	r0, [r4, #0]
 800bfe6:	b110      	cbz	r0, 800bfee <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800bfe8:	6803      	ldr	r3, [r0, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	4798      	blx	r3
 800bfee:	1d28      	adds	r0, r5, #4
 800bff0:	f7ff ffe9 	bl	800bfc6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800bff4:	6026      	str	r6, [r4, #0]
 800bff6:	6833      	ldr	r3, [r6, #0]
 800bff8:	4630      	mov	r0, r6
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4798      	blx	r3
 800bffe:	682b      	ldr	r3, [r5, #0]
 800c000:	4628      	mov	r0, r5
 800c002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c008:	4718      	bx	r3
 800c00a:	bf00      	nop
 800c00c:	24006acc 	.word	0x24006acc

0800c010 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800c010:	2300      	movs	r3, #0
 800c012:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 800c016:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 800c01a:	461a      	mov	r2, r3
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	461c      	mov	r4, r3
 800c020:	461d      	mov	r5, r3
 800c022:	459c      	cmp	ip, r3
 800c024:	dd1a      	ble.n	800c05c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800c026:	18c6      	adds	r6, r0, r3
 800c028:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 800c02c:	b16e      	cbz	r6, 800c04a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800c02e:	429a      	cmp	r2, r3
 800c030:	d008      	beq.n	800c044 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800c032:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800c036:	fa1f fe82 	uxth.w	lr, r2
 800c03a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800c03e:	1887      	adds	r7, r0, r2
 800c040:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 800c044:	3201      	adds	r2, #1
 800c046:	3301      	adds	r3, #1
 800c048:	e7eb      	b.n	800c022 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800c04a:	4299      	cmp	r1, r3
 800c04c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 800c050:	bfa8      	it	ge
 800c052:	3501      	addge	r5, #1
 800c054:	429e      	cmp	r6, r3
 800c056:	bfc8      	it	gt
 800c058:	3401      	addgt	r4, #1
 800c05a:	e7f4      	b.n	800c046 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800c05c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800c060:	1b49      	subs	r1, r1, r5
 800c062:	1b1b      	subs	r3, r3, r4
 800c064:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 800c068:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800c06c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800c070:	4293      	cmp	r3, r2
 800c072:	dd03      	ble.n	800c07c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800c074:	3b01      	subs	r3, #1
 800c076:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 800c07a:	e7f7      	b.n	800c06c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800c07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c080 <_ZN8touchgfx11Application15handleTickEventEv>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	4d16      	ldr	r5, [pc, #88]	; (800c0dc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800c084:	4604      	mov	r4, r0
 800c086:	6828      	ldr	r0, [r5, #0]
 800c088:	b140      	cbz	r0, 800c09c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800c08a:	7a03      	ldrb	r3, [r0, #8]
 800c08c:	b933      	cbnz	r3, 800c09c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800c08e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800c092:	6803      	ldr	r3, [r0, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c09a:	4718      	bx	r3
 800c09c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800c0a0:	4e0f      	ldr	r6, [pc, #60]	; (800c0e0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800c0a2:	b973      	cbnz	r3, 800c0c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c0a4:	b168      	cbz	r0, 800c0c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c0a6:	7a03      	ldrb	r3, [r0, #8]
 800c0a8:	b15b      	cbz	r3, 800c0c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c0aa:	6830      	ldr	r0, [r6, #0]
 800c0ac:	b110      	cbz	r0, 800c0b4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800c0ae:	6803      	ldr	r3, [r0, #0]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	4798      	blx	r3
 800c0b4:	6828      	ldr	r0, [r5, #0]
 800c0b6:	6803      	ldr	r3, [r0, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	4798      	blx	r3
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800c0c2:	3404      	adds	r4, #4
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f7ff ff5f 	bl	800bf88 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff ffa0 	bl	800c010 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800c0d0:	6830      	ldr	r0, [r6, #0]
 800c0d2:	b110      	cbz	r0, 800c0da <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800c0d4:	6803      	ldr	r3, [r0, #0]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	e7dd      	b.n	800c096 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	24006ad0 	.word	0x24006ad0
 800c0e0:	24006acc 	.word	0x24006acc

0800c0e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	801a      	strh	r2, [r3, #0]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	f823 2c06 	strh.w	r2, [r3, #-6]
 800c0f4:	f823 2c04 	strh.w	r2, [r3, #-4]
 800c0f8:	f823 2c02 	strh.w	r2, [r3, #-2]
 800c0fc:	428b      	cmp	r3, r1
 800c0fe:	d1f5      	bne.n	800c0ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800c100:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800c104:	4770      	bx	lr
	...

0800c108 <_ZN8touchgfx11ApplicationC1Ev>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	4b1d      	ldr	r3, [pc, #116]	; (800c180 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800c10c:	4606      	mov	r6, r0
 800c10e:	4604      	mov	r4, r0
 800c110:	2500      	movs	r5, #0
 800c112:	f846 3b04 	str.w	r3, [r6], #4
 800c116:	22a8      	movs	r2, #168	; 0xa8
 800c118:	2100      	movs	r1, #0
 800c11a:	4630      	mov	r0, r6
 800c11c:	f00a fed8 	bl	8016ed0 <memset>
 800c120:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 800c124:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800c128:	4f16      	ldr	r7, [pc, #88]	; (800c184 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800c12a:	f7ff ffdb 	bl	800c0e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c12e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800c132:	f7ff ffd7 	bl	800c0e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c136:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800c13a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800c13e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 800c142:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 800c146:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800c14a:	490f      	ldr	r1, [pc, #60]	; (800c188 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800c14c:	480f      	ldr	r0, [pc, #60]	; (800c18c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800c14e:	f00a fbe3 	bl	8016918 <CRC_Lock>
 800c152:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800c154:	b158      	cbz	r0, 800c16e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800c156:	801d      	strh	r5, [r3, #0]
 800c158:	2300      	movs	r3, #0
 800c15a:	4a0e      	ldr	r2, [pc, #56]	; (800c194 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800c15c:	4630      	mov	r0, r6
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	4a0d      	ldr	r2, [pc, #52]	; (800c198 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f7ff ff2e 	bl	800bfc6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800c16a:	4620      	mov	r0, r4
 800c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c172:	2002      	movs	r0, #2
 800c174:	801a      	strh	r2, [r3, #0]
 800c176:	6038      	str	r0, [r7, #0]
 800c178:	f001 fa24 	bl	800d5c4 <_ZN8touchgfx6Screen4drawEv>
 800c17c:	e7ec      	b.n	800c158 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800c17e:	bf00      	nop
 800c180:	08018f6c 	.word	0x08018f6c
 800c184:	24006acc 	.word	0x24006acc
 800c188:	b5e8b5cd 	.word	0xb5e8b5cd
 800c18c:	f407a5c2 	.word	0xf407a5c2
 800c190:	24000050 	.word	0x24000050
 800c194:	24006adc 	.word	0x24006adc
 800c198:	24006ad0 	.word	0x24006ad0

0800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800c19c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	428b      	cmp	r3, r1
 800c1a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	d908      	bls.n	800c1c0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800c1ae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c1b2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	6062      	str	r2, [r4, #4]
 800c1c0:	bd10      	pop	{r4, pc}
	...

0800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	b08f      	sub	sp, #60	; 0x3c
 800c1ca:	4b8f      	ldr	r3, [pc, #572]	; (800c408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800c1cc:	4683      	mov	fp, r0
 800c1ce:	ac0a      	add	r4, sp, #40	; 0x28
 800c1d0:	e884 0006 	stmia.w	r4, {r1, r2}
 800c1d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4b8c      	ldr	r3, [pc, #560]	; (800c40c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800c1dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c1e0:	f7ff fe0f 	bl	800be02 <_ZN8touchgfx4Rect10restrictToEss>
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f7fd fd46 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d16a      	bne.n	800c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800c1ee:	9403      	str	r4, [sp, #12]
 800c1f0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 800c1f4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800c1f8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	35a4      	adds	r5, #164	; 0xa4
 800c200:	b15c      	cbz	r4, 800c21a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800c202:	4629      	mov	r1, r5
 800c204:	9803      	ldr	r0, [sp, #12]
 800c206:	f7ff fe4d 	bl	800bea4 <_ZNK8touchgfx4Rect8includesERKS0_>
 800c20a:	3c01      	subs	r4, #1
 800c20c:	b118      	cbz	r0, 800c216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800c20e:	b2a1      	uxth	r1, r4
 800c210:	9801      	ldr	r0, [sp, #4]
 800c212:	f7ff ffc3 	bl	800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c216:	3d08      	subs	r5, #8
 800c218:	e7f2      	b.n	800c200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800c21a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 800c21e:	f108 33ff 	add.w	r3, r8, #4294967295
 800c222:	f8cd 8010 	str.w	r8, [sp, #16]
 800c226:	9302      	str	r3, [sp, #8]
 800c228:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c22c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800c230:	9306      	str	r3, [sp, #24]
 800c232:	445c      	add	r4, fp
 800c234:	2500      	movs	r5, #0
 800c236:	4626      	mov	r6, r4
 800c238:	f8cd 8014 	str.w	r8, [sp, #20]
 800c23c:	462f      	mov	r7, r5
 800c23e:	9b05      	ldr	r3, [sp, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d073      	beq.n	800c32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800c244:	9903      	ldr	r1, [sp, #12]
 800c246:	4630      	mov	r0, r6
 800c248:	f7ff fdb9 	bl	800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c24c:	b350      	cbz	r0, 800c2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800c24e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800c252:	f9b6 c000 	ldrsh.w	ip, [r6]
 800c256:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 800c25a:	45e6      	cmp	lr, ip
 800c25c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800c260:	db33      	blt.n	800c2ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800c262:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c266:	88b3      	ldrh	r3, [r6, #4]
 800c268:	4472      	add	r2, lr
 800c26a:	4463      	add	r3, ip
 800c26c:	b212      	sxth	r2, r2
 800c26e:	b21b      	sxth	r3, r3
 800c270:	429a      	cmp	r2, r3
 800c272:	dc2a      	bgt.n	800c2ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800c274:	fa1f f289 	uxth.w	r2, r9
 800c278:	88f3      	ldrh	r3, [r6, #6]
 800c27a:	45ca      	cmp	sl, r9
 800c27c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800c280:	4413      	add	r3, r2
 800c282:	fa1f fc8a 	uxth.w	ip, sl
 800c286:	b29b      	uxth	r3, r3
 800c288:	fa0f fe83 	sxth.w	lr, r3
 800c28c:	db0f      	blt.n	800c2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800c28e:	eba3 030c 	sub.w	r3, r3, ip
 800c292:	1ac9      	subs	r1, r1, r3
 800c294:	b209      	sxth	r1, r1
 800c296:	2900      	cmp	r1, #0
 800c298:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800c29c:	dd12      	ble.n	800c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800c29e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	9b05      	ldr	r3, [sp, #20]
 800c2a6:	3e08      	subs	r6, #8
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	9305      	str	r3, [sp, #20]
 800c2ac:	e7c7      	b.n	800c23e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800c2ae:	4461      	add	r1, ip
 800c2b0:	b209      	sxth	r1, r1
 800c2b2:	4571      	cmp	r1, lr
 800c2b4:	dc38      	bgt.n	800c328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800c2b6:	eba2 020c 	sub.w	r2, r2, ip
 800c2ba:	b212      	sxth	r2, r2
 800c2bc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	dcee      	bgt.n	800c2a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800c2c4:	b00f      	add	sp, #60	; 0x3c
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	45ca      	cmp	sl, r9
 800c2cc:	db2c      	blt.n	800c328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800c2ce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c2d2:	449a      	add	sl, r3
 800c2d4:	88f3      	ldrh	r3, [r6, #6]
 800c2d6:	4499      	add	r9, r3
 800c2d8:	fa0f fa8a 	sxth.w	sl, sl
 800c2dc:	fa0f f989 	sxth.w	r9, r9
 800c2e0:	45ca      	cmp	sl, r9
 800c2e2:	dc21      	bgt.n	800c328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800c2e4:	fa1f f28c 	uxth.w	r2, ip
 800c2e8:	88b3      	ldrh	r3, [r6, #4]
 800c2ea:	45e6      	cmp	lr, ip
 800c2ec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c2f0:	4413      	add	r3, r2
 800c2f2:	fa1f f98e 	uxth.w	r9, lr
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	fa0f fa83 	sxth.w	sl, r3
 800c2fc:	db0a      	blt.n	800c314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800c2fe:	eba3 0309 	sub.w	r3, r3, r9
 800c302:	1ac9      	subs	r1, r1, r3
 800c304:	b209      	sxth	r1, r1
 800c306:	2900      	cmp	r1, #0
 800c308:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800c30c:	ddda      	ble.n	800c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800c30e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800c312:	e7c6      	b.n	800c2a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800c314:	4449      	add	r1, r9
 800c316:	b209      	sxth	r1, r1
 800c318:	4551      	cmp	r1, sl
 800c31a:	dc05      	bgt.n	800c328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800c31c:	eba2 0209 	sub.w	r2, r2, r9
 800c320:	b212      	sxth	r2, r2
 800c322:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800c326:	e7cb      	b.n	800c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800c328:	4607      	mov	r7, r0
 800c32a:	e7bb      	b.n	800c2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800c32c:	2d00      	cmp	r5, #0
 800c32e:	d181      	bne.n	800c234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800c330:	2f00      	cmp	r7, #0
 800c332:	f000 81dd 	beq.w	800c6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800c336:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800c33a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800c33e:	b2b3      	uxth	r3, r6
 800c340:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c344:	b2b9      	uxth	r1, r7
 800c346:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 800c34a:	441a      	add	r2, r3
 800c34c:	448a      	add	sl, r1
 800c34e:	9105      	str	r1, [sp, #20]
 800c350:	b292      	uxth	r2, r2
 800c352:	fa1f fa8a 	uxth.w	sl, sl
 800c356:	fa0f f882 	sxth.w	r8, r2
 800c35a:	fa0f f98a 	sxth.w	r9, sl
 800c35e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d053      	beq.n	800c410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800c368:	9903      	ldr	r1, [sp, #12]
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7ff fd27 	bl	800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c370:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c374:	b1c0      	cbz	r0, 800c3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800c376:	f9b4 e000 	ldrsh.w	lr, [r4]
 800c37a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c37e:	4576      	cmp	r6, lr
 800c380:	dc23      	bgt.n	800c3ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800c382:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800c386:	44f4      	add	ip, lr
 800c388:	fa0f fc8c 	sxth.w	ip, ip
 800c38c:	45e0      	cmp	r8, ip
 800c38e:	db1c      	blt.n	800c3ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800c390:	428f      	cmp	r7, r1
 800c392:	fa1f fc81 	uxth.w	ip, r1
 800c396:	88e1      	ldrh	r1, [r4, #6]
 800c398:	dc0d      	bgt.n	800c3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800c39a:	ebaa 0c0c 	sub.w	ip, sl, ip
 800c39e:	f8a4 9002 	strh.w	r9, [r4, #2]
 800c3a2:	eba1 010c 	sub.w	r1, r1, ip
 800c3a6:	80e1      	strh	r1, [r4, #6]
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	9904      	ldr	r1, [sp, #16]
 800c3ac:	3c08      	subs	r4, #8
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	3901      	subs	r1, #1
 800c3b2:	9104      	str	r1, [sp, #16]
 800c3b4:	e7d3      	b.n	800c35e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 800c3b6:	4461      	add	r1, ip
 800c3b8:	b209      	sxth	r1, r1
 800c3ba:	4549      	cmp	r1, r9
 800c3bc:	dcf5      	bgt.n	800c3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800c3be:	9905      	ldr	r1, [sp, #20]
 800c3c0:	eba1 0c0c 	sub.w	ip, r1, ip
 800c3c4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c3c8:	e7ee      	b.n	800c3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800c3ca:	428f      	cmp	r7, r1
 800c3cc:	dced      	bgt.n	800c3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800c3ce:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800c3d2:	4461      	add	r1, ip
 800c3d4:	b209      	sxth	r1, r1
 800c3d6:	4589      	cmp	r9, r1
 800c3d8:	dbe7      	blt.n	800c3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800c3da:	4576      	cmp	r6, lr
 800c3dc:	fa1f fc8e 	uxth.w	ip, lr
 800c3e0:	88a1      	ldrh	r1, [r4, #4]
 800c3e2:	dc07      	bgt.n	800c3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800c3e4:	eba2 0c0c 	sub.w	ip, r2, ip
 800c3e8:	f8a4 8000 	strh.w	r8, [r4]
 800c3ec:	eba1 010c 	sub.w	r1, r1, ip
 800c3f0:	80a1      	strh	r1, [r4, #4]
 800c3f2:	e7d9      	b.n	800c3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800c3f4:	4461      	add	r1, ip
 800c3f6:	b209      	sxth	r1, r1
 800c3f8:	4588      	cmp	r8, r1
 800c3fa:	dbd6      	blt.n	800c3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800c3fc:	eba3 0c0c 	sub.w	ip, r3, ip
 800c400:	f8a4 c004 	strh.w	ip, [r4, #4]
 800c404:	e7d0      	b.n	800c3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800c406:	bf00      	nop
 800c408:	24006a86 	.word	0x24006a86
 800c40c:	24006a84 	.word	0x24006a84
 800c410:	2d00      	cmp	r5, #0
 800c412:	f000 816d 	beq.w	800c6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800c416:	9b06      	ldr	r3, [sp, #24]
 800c418:	445b      	add	r3, fp
 800c41a:	461c      	mov	r4, r3
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	3301      	adds	r3, #1
 800c420:	f000 8166 	beq.w	800c6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800c424:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 800c428:	9803      	ldr	r0, [sp, #12]
 800c42a:	4629      	mov	r1, r5
 800c42c:	f7ff fd3a 	bl	800bea4 <_ZNK8touchgfx4Rect8includesERKS0_>
 800c430:	b120      	cbz	r0, 800c43c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800c432:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c436:	9801      	ldr	r0, [sp, #4]
 800c438:	f7ff feb0 	bl	800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c43c:	9903      	ldr	r1, [sp, #12]
 800c43e:	4628      	mov	r0, r5
 800c440:	f7ff fcbd 	bl	800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c444:	2800      	cmp	r0, #0
 800c446:	f000 809c 	beq.w	800c582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800c44a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 800c44e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800c452:	fa1f f189 	uxth.w	r1, r9
 800c456:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800c45a:	9309      	str	r3, [sp, #36]	; 0x24
 800c45c:	eb01 0c03 	add.w	ip, r1, r3
 800c460:	b283      	uxth	r3, r0
 800c462:	4548      	cmp	r0, r9
 800c464:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800c468:	fa1f fa8c 	uxth.w	sl, ip
 800c46c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800c470:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 800c474:	eb03 050c 	add.w	r5, r3, ip
 800c478:	b2ad      	uxth	r5, r5
 800c47a:	9505      	str	r5, [sp, #20]
 800c47c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800c480:	9504      	str	r5, [sp, #16]
 800c482:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 800c486:	f340 8099 	ble.w	800c5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800c48a:	1a5b      	subs	r3, r3, r1
 800c48c:	4596      	cmp	lr, r2
 800c48e:	fa0f f08a 	sxth.w	r0, sl
 800c492:	b29b      	uxth	r3, r3
 800c494:	b21e      	sxth	r6, r3
 800c496:	dd2e      	ble.n	800c4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800c498:	9f02      	ldr	r7, [sp, #8]
 800c49a:	fa1f fe8e 	uxth.w	lr, lr
 800c49e:	b292      	uxth	r2, r2
 800c4a0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800c4a4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800c4a8:	9f04      	ldr	r7, [sp, #16]
 800c4aa:	ebae 0102 	sub.w	r1, lr, r2
 800c4ae:	44a6      	add	lr, r4
 800c4b0:	1a3f      	subs	r7, r7, r0
 800c4b2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 800c4b6:	b289      	uxth	r1, r1
 800c4b8:	4402      	add	r2, r0
 800c4ba:	fa0f fe8e 	sxth.w	lr, lr
 800c4be:	b20d      	sxth	r5, r1
 800c4c0:	b212      	sxth	r2, r2
 800c4c2:	436f      	muls	r7, r5
 800c4c4:	ebae 0202 	sub.w	r2, lr, r2
 800c4c8:	4372      	muls	r2, r6
 800c4ca:	4297      	cmp	r7, r2
 800c4cc:	db09      	blt.n	800c4e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800c4ce:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 800c4d2:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 800c4d6:	449c      	add	ip, r3
 800c4d8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c4dc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800c4e0:	e686      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c4e2:	4421      	add	r1, r4
 800c4e4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 800c4e8:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 800c4ec:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800c4f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c4f4:	e67c      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c4f6:	9f04      	ldr	r7, [sp, #16]
 800c4f8:	42b8      	cmp	r0, r7
 800c4fa:	da27      	bge.n	800c54c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800c4fc:	9902      	ldr	r1, [sp, #8]
 800c4fe:	1a3f      	subs	r7, r7, r0
 800c500:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 800c504:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800c508:	eb05 010e 	add.w	r1, r5, lr
 800c50c:	fa1f f881 	uxth.w	r8, r1
 800c510:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 800c514:	4411      	add	r1, r2
 800c516:	fa0f f988 	sxth.w	r9, r8
 800c51a:	eba2 020e 	sub.w	r2, r2, lr
 800c51e:	eba1 0108 	sub.w	r1, r1, r8
 800c522:	4372      	muls	r2, r6
 800c524:	b289      	uxth	r1, r1
 800c526:	fa0f f881 	sxth.w	r8, r1
 800c52a:	fb08 f707 	mul.w	r7, r8, r7
 800c52e:	42ba      	cmp	r2, r7
 800c530:	dc06      	bgt.n	800c540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800c532:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 800c536:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 800c53a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 800c53e:	e7ca      	b.n	800c4d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800c540:	4429      	add	r1, r5
 800c542:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 800c546:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800c54a:	e651      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c54c:	9805      	ldr	r0, [sp, #20]
 800c54e:	2d06      	cmp	r5, #6
 800c550:	ebaa 0000 	sub.w	r0, sl, r0
 800c554:	b280      	uxth	r0, r0
 800c556:	fa0f fe80 	sxth.w	lr, r0
 800c55a:	d817      	bhi.n	800c58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 800c562:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800c566:	1c6b      	adds	r3, r5, #1
 800c568:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 800c56c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	9801      	ldr	r0, [sp, #4]
 800c574:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c578:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800c57c:	805a      	strh	r2, [r3, #2]
 800c57e:	809e      	strh	r6, [r3, #4]
 800c580:	80d9      	strh	r1, [r3, #6]
 800c582:	9b02      	ldr	r3, [sp, #8]
 800c584:	3c08      	subs	r4, #8
 800c586:	3b01      	subs	r3, #1
 800c588:	9302      	str	r3, [sp, #8]
 800c58a:	e747      	b.n	800c41c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800c58c:	9a02      	ldr	r2, [sp, #8]
 800c58e:	45b6      	cmp	lr, r6
 800c590:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c594:	db0d      	blt.n	800c5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800c596:	449c      	add	ip, r3
 800c598:	445a      	add	r2, fp
 800c59a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800c59e:	fa1f fc8c 	uxth.w	ip, ip
 800c5a2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 800c5a6:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800c5aa:	448c      	add	ip, r1
 800c5ac:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 800c5b0:	e61e      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c5b2:	445a      	add	r2, fp
 800c5b4:	4484      	add	ip, r0
 800c5b6:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 800c5ba:	e78f      	b.n	800c4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800c5bc:	fa1f f18e 	uxth.w	r1, lr
 800c5c0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800c5c4:	b293      	uxth	r3, r2
 800c5c6:	4596      	cmp	lr, r2
 800c5c8:	eb01 0806 	add.w	r8, r1, r6
 800c5cc:	9306      	str	r3, [sp, #24]
 800c5ce:	fa1f f888 	uxth.w	r8, r8
 800c5d2:	9f06      	ldr	r7, [sp, #24]
 800c5d4:	fa0f f388 	sxth.w	r3, r8
 800c5d8:	9307      	str	r3, [sp, #28]
 800c5da:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 800c5de:	443b      	add	r3, r7
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	9308      	str	r3, [sp, #32]
 800c5e4:	da24      	bge.n	800c630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800c5e6:	9905      	ldr	r1, [sp, #20]
 800c5e8:	eba3 0308 	sub.w	r3, r3, r8
 800c5ec:	eba2 020e 	sub.w	r2, r2, lr
 800c5f0:	eba9 0000 	sub.w	r0, r9, r0
 800c5f4:	ebaa 0401 	sub.w	r4, sl, r1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	b2a4      	uxth	r4, r4
 800c5fc:	b219      	sxth	r1, r3
 800c5fe:	b225      	sxth	r5, r4
 800c600:	4348      	muls	r0, r1
 800c602:	436a      	muls	r2, r5
 800c604:	4282      	cmp	r2, r0
 800c606:	9a02      	ldr	r2, [sp, #8]
 800c608:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c60c:	445a      	add	r2, fp
 800c60e:	dc06      	bgt.n	800c61e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800c610:	9b07      	ldr	r3, [sp, #28]
 800c612:	44a4      	add	ip, r4
 800c614:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 800c618:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 800c61c:	e75e      	b.n	800c4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800c61e:	9904      	ldr	r1, [sp, #16]
 800c620:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 800c624:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 800c628:	4433      	add	r3, r6
 800c62a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800c62e:	e5df      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c630:	9f06      	ldr	r7, [sp, #24]
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	1bc9      	subs	r1, r1, r7
 800c636:	fa0f f78a 	sxth.w	r7, sl
 800c63a:	b289      	uxth	r1, r1
 800c63c:	429f      	cmp	r7, r3
 800c63e:	fa0f fe81 	sxth.w	lr, r1
 800c642:	dd23      	ble.n	800c68c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800c644:	9a05      	ldr	r2, [sp, #20]
 800c646:	eba9 0000 	sub.w	r0, r9, r0
 800c64a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800c64e:	ebaa 0202 	sub.w	r2, sl, r2
 800c652:	9d07      	ldr	r5, [sp, #28]
 800c654:	fb0e f000 	mul.w	r0, lr, r0
 800c658:	b292      	uxth	r2, r2
 800c65a:	eba5 0a03 	sub.w	sl, r5, r3
 800c65e:	9b02      	ldr	r3, [sp, #8]
 800c660:	b214      	sxth	r4, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	fb04 fa0a 	mul.w	sl, r4, sl
 800c668:	445b      	add	r3, fp
 800c66a:	4550      	cmp	r0, sl
 800c66c:	db03      	blt.n	800c676 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800c66e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 800c672:	4494      	add	ip, r2
 800c674:	e732      	b.n	800c4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800c676:	9a04      	ldr	r2, [sp, #16]
 800c678:	4431      	add	r1, r6
 800c67a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 800c67e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800c682:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800c686:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c68a:	e75c      	b.n	800c546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	2d06      	cmp	r5, #6
 800c690:	eba3 0308 	sub.w	r3, r3, r8
 800c694:	b29b      	uxth	r3, r3
 800c696:	b218      	sxth	r0, r3
 800c698:	d813      	bhi.n	800c6c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800c69a:	9b07      	ldr	r3, [sp, #28]
 800c69c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 800c6a0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 800c6a4:	1c6b      	adds	r3, r5, #1
 800c6a6:	9901      	ldr	r1, [sp, #4]
 800c6a8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800c6b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c6b6:	805a      	strh	r2, [r3, #2]
 800c6b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ba:	f8a3 e006 	strh.w	lr, [r3, #6]
 800c6be:	809a      	strh	r2, [r3, #4]
 800c6c0:	e75f      	b.n	800c582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800c6c2:	9c02      	ldr	r4, [sp, #8]
 800c6c4:	4570      	cmp	r0, lr
 800c6c6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c6ca:	db0d      	blt.n	800c6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800c6cc:	4431      	add	r1, r6
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	445c      	add	r4, fp
 800c6d2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800c6d6:	b289      	uxth	r1, r1
 800c6d8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 800c6dc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800c6e0:	4419      	add	r1, r3
 800c6e2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 800c6e6:	e583      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c6e8:	445c      	add	r4, fp
 800c6ea:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 800c6ee:	e79b      	b.n	800c628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800c6f0:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 800c6f4:	2e07      	cmp	r6, #7
 800c6f6:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800c6fa:	d812      	bhi.n	800c722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 800c6fc:	1c75      	adds	r5, r6, #1
 800c6fe:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800c702:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800c706:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 800c70a:	9d01      	ldr	r5, [sp, #4]
 800c70c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800c710:	442c      	add	r4, r5
 800c712:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800c716:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800c71a:	8061      	strh	r1, [r4, #2]
 800c71c:	80a2      	strh	r2, [r4, #4]
 800c71e:	80e3      	strh	r3, [r4, #6]
 800c720:	e5d0      	b.n	800c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800c722:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800c726:	3e01      	subs	r6, #1
 800c728:	445c      	add	r4, fp
 800c72a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800c72e:	f04f 37ff 	mov.w	r7, #4294967295
 800c732:	2500      	movs	r5, #0
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800c73a:	1e72      	subs	r2, r6, #1
 800c73c:	9302      	str	r3, [sp, #8]
 800c73e:	4691      	mov	r9, r2
 800c740:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 800c744:	9304      	str	r3, [sp, #16]
 800c746:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 800c74a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c754:	9207      	str	r2, [sp, #28]
 800c756:	bf16      	itet	ne
 800c758:	9905      	ldrne	r1, [sp, #20]
 800c75a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800c75e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800c762:	9306      	str	r3, [sp, #24]
 800c764:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800c768:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800c76c:	fb18 f801 	smulbb	r8, r8, r1
 800c770:	6859      	ldr	r1, [r3, #4]
 800c772:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c776:	4671      	mov	r1, lr
 800c778:	a80c      	add	r0, sp, #48	; 0x30
 800c77a:	f7ff fbb9 	bl	800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c77e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800c782:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800c786:	f04f 0c08 	mov.w	ip, #8
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	9a02      	ldr	r2, [sp, #8]
 800c78e:	fb10 f001 	smulbb	r0, r0, r1
 800c792:	fb02 8803 	mla	r8, r2, r3, r8
 800c796:	eba0 0108 	sub.w	r1, r0, r8
 800c79a:	fb90 f0fc 	sdiv	r0, r0, ip
 800c79e:	4288      	cmp	r0, r1
 800c7a0:	dc20      	bgt.n	800c7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800c7a2:	4551      	cmp	r1, sl
 800c7a4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c7a8:	da03      	bge.n	800c7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 800c7aa:	b1d9      	cbz	r1, 800c7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800c7ac:	468a      	mov	sl, r1
 800c7ae:	464f      	mov	r7, r9
 800c7b0:	4635      	mov	r5, r6
 800c7b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c7b6:	f119 0f02 	cmn.w	r9, #2
 800c7ba:	d1c6      	bne.n	800c74a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 800c7bc:	4616      	mov	r6, r2
 800c7be:	3201      	adds	r2, #1
 800c7c0:	f1a4 0408 	sub.w	r4, r4, #8
 800c7c4:	d1b7      	bne.n	800c736 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	b2ac      	uxth	r4, r5
 800c7ca:	00ed      	lsls	r5, r5, #3
 800c7cc:	1958      	adds	r0, r3, r5
 800c7ce:	1c7b      	adds	r3, r7, #1
 800c7d0:	d10b      	bne.n	800c7ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	9803      	ldr	r0, [sp, #12]
 800c7d6:	f7ff fb8b 	bl	800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	9801      	ldr	r0, [sp, #4]
 800c7de:	f7ff fcdd 	bl	800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c7e2:	e505      	b.n	800c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800c7e4:	464f      	mov	r7, r9
 800c7e6:	4635      	mov	r5, r6
 800c7e8:	e7ed      	b.n	800c7c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	00ff      	lsls	r7, r7, #3
 800c7ee:	445d      	add	r5, fp
 800c7f0:	19d9      	adds	r1, r3, r7
 800c7f2:	445f      	add	r7, fp
 800c7f4:	f7ff fb7c 	bl	800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	cb03      	ldmia	r3!, {r0, r1}
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800c802:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800c806:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800c80a:	6869      	ldr	r1, [r5, #4]
 800c80c:	c303      	stmia	r3!, {r0, r1}
 800c80e:	e7e4      	b.n	800c7da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0800c810 <_ZN8touchgfx11Application10invalidateEv>:
 800c810:	4b09      	ldr	r3, [pc, #36]	; (800c838 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800c812:	b082      	sub	sp, #8
 800c814:	2100      	movs	r1, #0
 800c816:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c81a:	4b08      	ldr	r3, [pc, #32]	; (800c83c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800c81c:	9100      	str	r1, [sp, #0]
 800c81e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c822:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c826:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c82a:	ab02      	add	r3, sp, #8
 800c82c:	e913 0006 	ldmdb	r3, {r1, r2}
 800c830:	b002      	add	sp, #8
 800c832:	f7ff bcc7 	b.w	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c836:	bf00      	nop
 800c838:	24006a84 	.word	0x24006a84
 800c83c:	24006a86 	.word	0x24006a86

0800c840 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	f500 7698 	add.w	r6, r0, #304	; 0x130
 800c848:	b09b      	sub	sp, #108	; 0x6c
 800c84a:	4604      	mov	r4, r0
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7fd fa12 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c852:	4605      	mov	r5, r0
 800c854:	b940      	cbnz	r0, 800c868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800c856:	4620      	mov	r0, r4
 800c858:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c85c:	f7ff fcb2 	bl	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c860:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800c864:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800c868:	4bc8      	ldr	r3, [pc, #800]	; (800cb8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d03e      	beq.n	800c8ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800c870:	4dc7      	ldr	r5, [pc, #796]	; (800cb90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800c872:	4628      	mov	r0, r5
 800c874:	f7fd f9ff 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c878:	4606      	mov	r6, r0
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d137      	bne.n	800c8ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800c87e:	4628      	mov	r0, r5
 800c880:	f7ff f9e2 	bl	800bc48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800c884:	6829      	ldr	r1, [r5, #0]
 800c886:	686a      	ldr	r2, [r5, #4]
 800c888:	4620      	mov	r0, r4
 800c88a:	f7ff fc9b 	bl	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c88e:	802e      	strh	r6, [r5, #0]
 800c890:	806e      	strh	r6, [r5, #2]
 800c892:	80ae      	strh	r6, [r5, #4]
 800c894:	80ee      	strh	r6, [r5, #6]
 800c896:	ae09      	add	r6, sp, #36	; 0x24
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff fc23 	bl	800c0e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c89e:	4abd      	ldr	r2, [pc, #756]	; (800cb94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800c8a0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800c8a4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800c8a8:	8815      	ldrh	r5, [r2, #0]
 800c8aa:	9202      	str	r2, [sp, #8]
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	429f      	cmp	r7, r3
 800c8b0:	d924      	bls.n	800c8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800c8b2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800c8b6:	2907      	cmp	r1, #7
 800c8b8:	d816      	bhi.n	800c8e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800c8ba:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800c8be:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800c8c2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800c8c6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800c8ca:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800c8ce:	1c4a      	adds	r2, r1, #1
 800c8d0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800c8d4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800c8d8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800c8dc:	f8a2 9002 	strh.w	r9, [r2, #2]
 800c8e0:	f8a2 e004 	strh.w	lr, [r2, #4]
 800c8e4:	f8a2 c006 	strh.w	ip, [r2, #6]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	e7df      	b.n	800c8ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800c8ee:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1cf      	bne.n	800c896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800c8f6:	b01b      	add	sp, #108	; 0x6c
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	462f      	mov	r7, r5
 800c8fe:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 800c902:	42bb      	cmp	r3, r7
 800c904:	d90b      	bls.n	800c91e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800c906:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800c90a:	3701      	adds	r7, #1
 800c90c:	4620      	mov	r0, r4
 800c90e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 800c912:	b2bf      	uxth	r7, r7
 800c914:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 800c918:	f7ff fc54 	bl	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c91c:	e7ef      	b.n	800c8fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800c91e:	4a9e      	ldr	r2, [pc, #632]	; (800cb98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800c920:	6813      	ldr	r3, [r2, #0]
 800c922:	4690      	mov	r8, r2
 800c924:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c928:	2b01      	cmp	r3, #1
 800c92a:	f040 80e4 	bne.w	800caf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800c92e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800c932:	4629      	mov	r1, r5
 800c934:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800c938:	2500      	movs	r5, #0
 800c93a:	33ae      	adds	r3, #174	; 0xae
 800c93c:	428f      	cmp	r7, r1
 800c93e:	f103 0308 	add.w	r3, r3, #8
 800c942:	dd0a      	ble.n	800c95a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800c944:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800c948:	3101      	adds	r1, #1
 800c94a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800c94e:	4402      	add	r2, r0
 800c950:	b212      	sxth	r2, r2
 800c952:	4295      	cmp	r5, r2
 800c954:	bfb8      	it	lt
 800c956:	4615      	movlt	r5, r2
 800c958:	e7f0      	b.n	800c93c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800c95a:	4b90      	ldr	r3, [pc, #576]	; (800cb9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800c95c:	f8df b238 	ldr.w	fp, [pc, #568]	; 800cb98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	46d8      	mov	r8, fp
 800c964:	2b0f      	cmp	r3, #15
 800c966:	bf8c      	ite	hi
 800c968:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800c96c:	f04f 0a01 	movls.w	sl, #1
 800c970:	2300      	movs	r3, #0
 800c972:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c976:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800c97a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800c97e:	4438      	add	r0, r7
 800c980:	b207      	sxth	r7, r0
 800c982:	f8db 0000 	ldr.w	r0, [fp]
 800c986:	42bd      	cmp	r5, r7
 800c988:	6803      	ldr	r3, [r0, #0]
 800c98a:	f340 8084 	ble.w	800ca96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800c98e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c992:	4798      	blx	r3
 800c994:	eb07 030a 	add.w	r3, r7, sl
 800c998:	4298      	cmp	r0, r3
 800c99a:	da07      	bge.n	800c9ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800c99c:	4285      	cmp	r5, r0
 800c99e:	dd05      	ble.n	800c9ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800c9a0:	4287      	cmp	r7, r0
 800c9a2:	dd6d      	ble.n	800ca80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	dd6b      	ble.n	800ca80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	e004      	b.n	800c9b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800c9ac:	4287      	cmp	r7, r0
 800c9ae:	dcfb      	bgt.n	800c9a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800c9b0:	42a8      	cmp	r0, r5
 800c9b2:	bfa8      	it	ge
 800c9b4:	4628      	movge	r0, r5
 800c9b6:	4b7a      	ldr	r3, [pc, #488]	; (800cba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800c9b8:	1bc0      	subs	r0, r0, r7
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c9c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c9cc:	9b02      	ldr	r3, [sp, #8]
 800c9ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 800c9d2:	881f      	ldrh	r7, [r3, #0]
 800c9d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800c9d8:	42bb      	cmp	r3, r7
 800c9da:	d9cc      	bls.n	800c976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800c9dc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800c9e0:	ab07      	add	r3, sp, #28
 800c9e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800c9e6:	6851      	ldr	r1, [r2, #4]
 800c9e8:	c303      	stmia	r3!, {r0, r1}
 800c9ea:	a905      	add	r1, sp, #20
 800c9ec:	a807      	add	r0, sp, #28
 800c9ee:	f7ff f9e6 	bl	800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d04c      	beq.n	800ca90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800c9f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800c9fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800c9fe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800ca02:	4686      	mov	lr, r0
 800ca04:	4290      	cmp	r0, r2
 800ca06:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800ca0a:	4448      	add	r0, r9
 800ca0c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800ca10:	bfb8      	it	lt
 800ca12:	4696      	movlt	lr, r2
 800ca14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ca18:	444a      	add	r2, r9
 800ca1a:	b280      	uxth	r0, r0
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	468c      	mov	ip, r1
 800ca20:	b292      	uxth	r2, r2
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	bfb8      	it	lt
 800ca26:	469c      	movlt	ip, r3
 800ca28:	b203      	sxth	r3, r0
 800ca2a:	fa0f f982 	sxth.w	r9, r2
 800ca2e:	f8ad e01c 	strh.w	lr, [sp, #28]
 800ca32:	f8ad c01e 	strh.w	ip, [sp, #30]
 800ca36:	454b      	cmp	r3, r9
 800ca38:	bfb8      	it	lt
 800ca3a:	4602      	movlt	r2, r0
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	eba2 020e 	sub.w	r2, r2, lr
 800ca42:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ca46:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ca4a:	4411      	add	r1, r2
 800ca4c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ca50:	4413      	add	r3, r2
 800ca52:	b289      	uxth	r1, r1
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	b208      	sxth	r0, r1
 800ca58:	b21a      	sxth	r2, r3
 800ca5a:	4290      	cmp	r0, r2
 800ca5c:	bfb8      	it	lt
 800ca5e:	460b      	movlt	r3, r1
 800ca60:	eba3 030c 	sub.w	r3, r3, ip
 800ca64:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ca68:	a807      	add	r0, sp, #28
 800ca6a:	f7fd f904 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca6e:	b920      	cbnz	r0, 800ca7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	a907      	add	r1, sp, #28
 800ca74:	4620      	mov	r0, r4
 800ca76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca78:	4798      	blx	r3
 800ca7a:	3701      	adds	r7, #1
 800ca7c:	b2bf      	uxth	r7, r7
 800ca7e:	e7a9      	b.n	800c9d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800ca80:	f8d8 0000 	ldr.w	r0, [r8]
 800ca84:	2101      	movs	r1, #1
 800ca86:	6803      	ldr	r3, [r0, #0]
 800ca88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca8c:	4798      	blx	r3
 800ca8e:	e772      	b.n	800c976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800ca90:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ca94:	e7e8      	b.n	800ca68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	4798      	blx	r3
 800ca9a:	4b42      	ldr	r3, [pc, #264]	; (800cba4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f43f af29 	beq.w	800c8f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800caa4:	2300      	movs	r3, #0
 800caa6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800caaa:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800caae:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 800cab2:	9b02      	ldr	r3, [sp, #8]
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	429d      	cmp	r5, r3
 800cab8:	f67f af1d 	bls.w	800c8f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800cabc:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 800cac0:	2907      	cmp	r1, #7
 800cac2:	d815      	bhi.n	800caf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800cac4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800cac8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800cacc:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800cad0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800cad4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800cad8:	1c4a      	adds	r2, r1, #1
 800cada:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 800cade:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800cae2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800cae6:	f8a2 e002 	strh.w	lr, [r2, #2]
 800caea:	f8a2 c004 	strh.w	ip, [r2, #4]
 800caee:	80d7      	strh	r7, [r2, #6]
 800caf0:	3301      	adds	r3, #1
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	e7df      	b.n	800cab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	f040 8135 	bne.w	800cd66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800cafc:	4b2a      	ldr	r3, [pc, #168]	; (800cba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800cafe:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f000 809c 	beq.w	800cc42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800cb0a:	9b02      	ldr	r3, [sp, #8]
 800cb0c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 800cb10:	f8b3 b000 	ldrh.w	fp, [r3]
 800cb14:	f10b 0b01 	add.w	fp, fp, #1
 800cb18:	fa1f fb8b 	uxth.w	fp, fp
 800cb1c:	2a00      	cmp	r2, #0
 800cb1e:	d0bc      	beq.n	800ca9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800cb20:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 800cb24:	4659      	mov	r1, fp
 800cb26:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 800cb2a:	f04f 0800 	mov.w	r8, #0
 800cb2e:	441d      	add	r5, r3
 800cb30:	b22d      	sxth	r5, r5
 800cb32:	b28b      	uxth	r3, r1
 800cb34:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	f240 80c0 	bls.w	800ccbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800cb3e:	4427      	add	r7, r4
 800cb40:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800cb44:	4608      	mov	r0, r1
 800cb46:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800cb4a:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 800cb4e:	4563      	cmp	r3, ip
 800cb50:	f340 80a2 	ble.w	800cc98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800cb54:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 800cb58:	4465      	add	r5, ip
 800cb5a:	b22d      	sxth	r5, r5
 800cb5c:	429d      	cmp	r5, r3
 800cb5e:	bfa8      	it	ge
 800cb60:	461d      	movge	r5, r3
 800cb62:	3101      	adds	r1, #1
 800cb64:	4680      	mov	r8, r0
 800cb66:	e7e4      	b.n	800cb32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800cb68:	d10b      	bne.n	800cb82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800cb6a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 800cb6e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 800cb72:	458c      	cmp	ip, r1
 800cb74:	bfb4      	ite	lt
 800cb76:	469c      	movlt	ip, r3
 800cb78:	46bc      	movge	ip, r7
 800cb7a:	4572      	cmp	r2, lr
 800cb7c:	bfb8      	it	lt
 800cb7e:	4672      	movlt	r2, lr
 800cb80:	e087      	b.n	800cc92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800cb82:	428a      	cmp	r2, r1
 800cb84:	46bc      	mov	ip, r7
 800cb86:	bfb8      	it	lt
 800cb88:	460a      	movlt	r2, r1
 800cb8a:	e082      	b.n	800cc92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800cb8c:	24006ac8 	.word	0x24006ac8
 800cb90:	24006ad4 	.word	0x24006ad4
 800cb94:	24000050 	.word	0x24000050
 800cb98:	24006a90 	.word	0x24006a90
 800cb9c:	24006a86 	.word	0x24006a86
 800cba0:	24006a84 	.word	0x24006a84
 800cba4:	24006a8e 	.word	0x24006a8e
 800cba8:	24006a88 	.word	0x24006a88
 800cbac:	1961      	adds	r1, r4, r5
 800cbae:	ab07      	add	r3, sp, #28
 800cbb0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800cbb4:	6849      	ldr	r1, [r1, #4]
 800cbb6:	c303      	stmia	r3!, {r0, r1}
 800cbb8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800cbbc:	a807      	add	r0, sp, #28
 800cbbe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800cbc2:	2b13      	cmp	r3, #19
 800cbc4:	440b      	add	r3, r1
 800cbc6:	bfd8      	it	le
 800cbc8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800cbcc:	1a9b      	subs	r3, r3, r2
 800cbce:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cbd2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cbd6:	f7ff f851 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cbda:	a807      	add	r0, sp, #28
 800cbdc:	f7fd f84b 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cbe0:	bb78      	cbnz	r0, 800cc42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800cbe2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800cbe6:	4425      	add	r5, r4
 800cbe8:	f8d8 0000 	ldr.w	r0, [r8]
 800cbec:	f1bc 0f14 	cmp.w	ip, #20
 800cbf0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cbf4:	f8d0 e000 	ldr.w	lr, [r0]
 800cbf8:	bfa8      	it	ge
 800cbfa:	f04f 0c14 	movge.w	ip, #20
 800cbfe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cc02:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800cc06:	fa1f fc8c 	uxth.w	ip, ip
 800cc0a:	f8cd c000 	str.w	ip, [sp]
 800cc0e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800cc12:	47d0      	blx	sl
 800cc14:	4682      	mov	sl, r0
 800cc16:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800cc1a:	a807      	add	r0, sp, #28
 800cc1c:	f7ff f814 	bl	800bc48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	4620      	mov	r0, r4
 800cc24:	a907      	add	r1, sp, #28
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	4798      	blx	r3
 800cc2a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 800cc2e:	eba0 000a 	sub.w	r0, r0, sl
 800cc32:	b200      	sxth	r0, r0
 800cc34:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 800cc38:	b918      	cbnz	r0, 800cc42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800cc3a:	b2b9      	uxth	r1, r7
 800cc3c:	4648      	mov	r0, r9
 800cc3e:	f7ff faad 	bl	800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cc42:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 800cc46:	f1bb 0f00 	cmp.w	fp, #0
 800cc4a:	f43f af26 	beq.w	800ca9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800cc4e:	9b02      	ldr	r3, [sp, #8]
 800cc50:	2700      	movs	r7, #0
 800cc52:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	b299      	uxth	r1, r3
 800cc5e:	00fd      	lsls	r5, r7, #3
 800cc60:	458b      	cmp	fp, r1
 800cc62:	d9a3      	bls.n	800cbac <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800cc64:	4425      	add	r5, r4
 800cc66:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800cc6a:	469c      	mov	ip, r3
 800cc6c:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 800cc70:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800cc74:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 800cc78:	4408      	add	r0, r1
 800cc7a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 800cc7e:	4471      	add	r1, lr
 800cc80:	b200      	sxth	r0, r0
 800cc82:	b209      	sxth	r1, r1
 800cc84:	4288      	cmp	r0, r1
 800cc86:	f6bf af6f 	bge.w	800cb68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800cc8a:	4586      	cmp	lr, r0
 800cc8c:	4672      	mov	r2, lr
 800cc8e:	bfb8      	it	lt
 800cc90:	4602      	movlt	r2, r0
 800cc92:	3301      	adds	r3, #1
 800cc94:	4667      	mov	r7, ip
 800cc96:	e7e1      	b.n	800cc5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800cc98:	d10c      	bne.n	800ccb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800cc9a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 800cc9e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 800cca2:	4287      	cmp	r7, r0
 800cca4:	bfb4      	ite	lt
 800cca6:	4608      	movlt	r0, r1
 800cca8:	4640      	movge	r0, r8
 800ccaa:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 800ccae:	443b      	add	r3, r7
 800ccb0:	b21b      	sxth	r3, r3
 800ccb2:	e753      	b.n	800cb5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800ccb4:	4565      	cmp	r5, ip
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	bfa8      	it	ge
 800ccba:	4665      	movge	r5, ip
 800ccbc:	e751      	b.n	800cb62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800ccbe:	eb09 0007 	add.w	r0, r9, r7
 800ccc2:	4427      	add	r7, r4
 800ccc4:	9203      	str	r2, [sp, #12]
 800ccc6:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 800ccca:	f1ba 0f13 	cmp.w	sl, #19
 800ccce:	bfde      	ittt	le
 800ccd0:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 800ccd4:	4455      	addle	r5, sl
 800ccd6:	b22d      	sxthle	r5, r5
 800ccd8:	f7fc ffcd 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ccdc:	9a03      	ldr	r2, [sp, #12]
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f47f af1c 	bne.w	800cb1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800cce4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800cce8:	fa1f fa8a 	uxth.w	sl, sl
 800ccec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ccf0:	1aad      	subs	r5, r5, r2
 800ccf2:	4829      	ldr	r0, [pc, #164]	; (800cd98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800ccf4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 800ccf8:	2d14      	cmp	r5, #20
 800ccfa:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800ccfe:	6800      	ldr	r0, [r0, #0]
 800cd00:	bfa8      	it	ge
 800cd02:	2514      	movge	r5, #20
 800cd04:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cd08:	f8ad 201e 	strh.w	r2, [sp, #30]
 800cd0c:	b289      	uxth	r1, r1
 800cd0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cd12:	b2ad      	uxth	r5, r5
 800cd14:	f8d0 c000 	ldr.w	ip, [r0]
 800cd18:	b292      	uxth	r2, r2
 800cd1a:	4555      	cmp	r5, sl
 800cd1c:	bf94      	ite	ls
 800cd1e:	9500      	strls	r5, [sp, #0]
 800cd20:	f8cd a000 	strhi.w	sl, [sp]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800cd2a:	47a8      	blx	r5
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800cd32:	a907      	add	r1, sp, #28
 800cd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd36:	4620      	mov	r0, r4
 800cd38:	4798      	blx	r3
 800cd3a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cd3e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cd42:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800cd46:	1a5b      	subs	r3, r3, r1
 800cd48:	440a      	add	r2, r1
 800cd4a:	b21b      	sxth	r3, r3
 800cd4c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 800cd50:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f47f aed8 	bne.w	800cb0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800cd5a:	fa1f f188 	uxth.w	r1, r8
 800cd5e:	4648      	mov	r0, r9
 800cd60:	f7ff fa1c 	bl	800c19c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cd64:	e6d1      	b.n	800cb0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800cd66:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800cd6a:	42ab      	cmp	r3, r5
 800cd6c:	f67f ae95 	bls.w	800ca9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800cd70:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800cd74:	ab07      	add	r3, sp, #28
 800cd76:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800cd7a:	6851      	ldr	r1, [r2, #4]
 800cd7c:	c303      	stmia	r3!, {r0, r1}
 800cd7e:	a807      	add	r0, sp, #28
 800cd80:	f7fc ff79 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd84:	b920      	cbnz	r0, 800cd90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	a907      	add	r1, sp, #28
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8e:	4798      	blx	r3
 800cd90:	3501      	adds	r5, #1
 800cd92:	b2ad      	uxth	r5, r5
 800cd94:	e7e7      	b.n	800cd66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800cd96:	bf00      	nop
 800cd98:	24006a90 	.word	0x24006a90

0800cd9c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800cd9c:	4b03      	ldr	r3, [pc, #12]	; (800cdac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	801a      	strh	r2, [r3, #0]
 800cda2:	805a      	strh	r2, [r3, #2]
 800cda4:	809a      	strh	r2, [r3, #4]
 800cda6:	80da      	strh	r2, [r3, #6]
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	24006ad4 	.word	0x24006ad4

0800cdb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	b09d      	sub	sp, #116	; 0x74
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	4614      	mov	r4, r2
 800cdba:	468a      	mov	sl, r1
 800cdbc:	a803      	add	r0, sp, #12
 800cdbe:	461d      	mov	r5, r3
 800cdc0:	f000 fd7a 	bl	800d8b8 <_ZN8touchgfx12TextProviderC1Ev>
 800cdc4:	6833      	ldr	r3, [r6, #0]
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800cdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdce:	4798      	blx	r3
 800cdd0:	6833      	ldr	r3, [r6, #0]
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdd8:	4798      	blx	r3
 800cdda:	462a      	mov	r2, r5
 800cddc:	2500      	movs	r5, #0
 800cdde:	4621      	mov	r1, r4
 800cde0:	9000      	str	r0, [sp, #0]
 800cde2:	463b      	mov	r3, r7
 800cde4:	462c      	mov	r4, r5
 800cde6:	46a9      	mov	r9, r5
 800cde8:	46a8      	mov	r8, r5
 800cdea:	a803      	add	r0, sp, #12
 800cdec:	f000 fdb7 	bl	800d95e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	9302      	str	r3, [sp, #8]
 800cdf4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	d002      	beq.n	800ce02 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800cdfc:	455c      	cmp	r4, fp
 800cdfe:	bf18      	it	ne
 800ce00:	4625      	movne	r5, r4
 800ce02:	ab02      	add	r3, sp, #8
 800ce04:	4632      	mov	r2, r6
 800ce06:	4651      	mov	r1, sl
 800ce08:	a803      	add	r0, sp, #12
 800ce0a:	f001 f89d 	bl	800df48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	b108      	cbz	r0, 800ce16 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800ce12:	280a      	cmp	r0, #10
 800ce14:	d10a      	bne.n	800ce2c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800ce16:	45c1      	cmp	r9, r8
 800ce18:	bf38      	it	cc
 800ce1a:	46c1      	movcc	r9, r8
 800ce1c:	f04f 0800 	mov.w	r8, #0
 800ce20:	2c00      	cmp	r4, #0
 800ce22:	d1e5      	bne.n	800cdf0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ce24:	4648      	mov	r0, r9
 800ce26:	b01d      	add	sp, #116	; 0x74
 800ce28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2c:	9a02      	ldr	r2, [sp, #8]
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d0de      	beq.n	800cdf0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ce32:	7b57      	ldrb	r7, [r2, #13]
 800ce34:	4629      	mov	r1, r5
 800ce36:	6833      	ldr	r3, [r6, #0]
 800ce38:	007f      	lsls	r7, r7, #1
 800ce3a:	8894      	ldrh	r4, [r2, #4]
 800ce3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce3e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800ce42:	7a97      	ldrb	r7, [r2, #10]
 800ce44:	4307      	orrs	r7, r0
 800ce46:	4630      	mov	r0, r6
 800ce48:	4798      	blx	r3
 800ce4a:	4438      	add	r0, r7
 800ce4c:	4480      	add	r8, r0
 800ce4e:	fa1f f888 	uxth.w	r8, r8
 800ce52:	e7e5      	b.n	800ce20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800ce54 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800ce54:	b508      	push	{r3, lr}
 800ce56:	6803      	ldr	r3, [r0, #0]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	4798      	blx	r3
 800ce5c:	b128      	cbz	r0, 800ce6a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800ce5e:	7b43      	ldrb	r3, [r0, #13]
 800ce60:	7a80      	ldrb	r0, [r0, #10]
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce68:	4318      	orrs	r0, r3
 800ce6a:	bd08      	pop	{r3, pc}

0800ce6c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ce6c:	b40e      	push	{r1, r2, r3}
 800ce6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce70:	b09e      	sub	sp, #120	; 0x78
 800ce72:	4605      	mov	r5, r0
 800ce74:	ab23      	add	r3, sp, #140	; 0x8c
 800ce76:	a805      	add	r0, sp, #20
 800ce78:	f853 4b04 	ldr.w	r4, [r3], #4
 800ce7c:	9303      	str	r3, [sp, #12]
 800ce7e:	f000 fd1b 	bl	800d8b8 <_ZN8touchgfx12TextProviderC1Ev>
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	4628      	mov	r0, r5
 800ce86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce88:	4798      	blx	r3
 800ce8a:	682b      	ldr	r3, [r5, #0]
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	4628      	mov	r0, r5
 800ce90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce92:	4798      	blx	r3
 800ce94:	4633      	mov	r3, r6
 800ce96:	4621      	mov	r1, r4
 800ce98:	ae1e      	add	r6, sp, #120	; 0x78
 800ce9a:	2400      	movs	r4, #0
 800ce9c:	9000      	str	r0, [sp, #0]
 800ce9e:	9a03      	ldr	r2, [sp, #12]
 800cea0:	a805      	add	r0, sp, #20
 800cea2:	f000 fd5c 	bl	800d95e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cea6:	f846 4d68 	str.w	r4, [r6, #-104]!
 800ceaa:	462a      	mov	r2, r5
 800ceac:	4633      	mov	r3, r6
 800ceae:	4621      	mov	r1, r4
 800ceb0:	a805      	add	r0, sp, #20
 800ceb2:	f001 f849 	bl	800df48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ceb6:	b300      	cbz	r0, 800cefa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800ceb8:	280a      	cmp	r0, #10
 800ceba:	d01a      	beq.n	800cef2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800cebc:	9f04      	ldr	r7, [sp, #16]
 800cebe:	b1c7      	cbz	r7, 800cef2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800cec0:	7b78      	ldrb	r0, [r7, #13]
 800cec2:	7a3b      	ldrb	r3, [r7, #8]
 800cec4:	00c1      	lsls	r1, r0, #3
 800cec6:	88ea      	ldrh	r2, [r5, #6]
 800cec8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800cecc:	4319      	orrs	r1, r3
 800cece:	0643      	lsls	r3, r0, #25
 800ced0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ced4:	bf48      	it	mi
 800ced6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800ceda:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800cede:	bf48      	it	mi
 800cee0:	b219      	sxthmi	r1, r3
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	4303      	orrs	r3, r0
 800cee6:	4413      	add	r3, r2
 800cee8:	1a5b      	subs	r3, r3, r1
 800ceea:	b21b      	sxth	r3, r3
 800ceec:	429c      	cmp	r4, r3
 800ceee:	bfb8      	it	lt
 800cef0:	461c      	movlt	r4, r3
 800cef2:	4633      	mov	r3, r6
 800cef4:	462a      	mov	r2, r5
 800cef6:	2100      	movs	r1, #0
 800cef8:	e7da      	b.n	800ceb0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800cefa:	b2a0      	uxth	r0, r4
 800cefc:	b01e      	add	sp, #120	; 0x78
 800cefe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cf02:	b003      	add	sp, #12
 800cf04:	4770      	bx	lr

0800cf06 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800cf06:	7a43      	ldrb	r3, [r0, #9]
 800cf08:	8880      	ldrh	r0, [r0, #4]
 800cf0a:	4418      	add	r0, r3
 800cf0c:	b280      	uxth	r0, r0
 800cf0e:	4770      	bx	lr

0800cf10 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800cf10:	6803      	ldr	r3, [r0, #0]
 800cf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf14:	4718      	bx	r3

0800cf16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800cf16:	b40e      	push	{r1, r2, r3}
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	b09d      	sub	sp, #116	; 0x74
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	ab21      	add	r3, sp, #132	; 0x84
 800cf20:	a803      	add	r0, sp, #12
 800cf22:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf26:	9302      	str	r3, [sp, #8]
 800cf28:	f000 fcc6 	bl	800d8b8 <_ZN8touchgfx12TextProviderC1Ev>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	4620      	mov	r0, r4
 800cf30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf32:	4798      	blx	r3
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	4606      	mov	r6, r0
 800cf38:	4620      	mov	r0, r4
 800cf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf3c:	2401      	movs	r4, #1
 800cf3e:	4798      	blx	r3
 800cf40:	4633      	mov	r3, r6
 800cf42:	9000      	str	r0, [sp, #0]
 800cf44:	4629      	mov	r1, r5
 800cf46:	9a02      	ldr	r2, [sp, #8]
 800cf48:	a803      	add	r0, sp, #12
 800cf4a:	f000 fd08 	bl	800d95e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cf4e:	a803      	add	r0, sp, #12
 800cf50:	f001 f87a 	bl	800e048 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800cf54:	b2a3      	uxth	r3, r4
 800cf56:	b138      	cbz	r0, 800cf68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800cf58:	280a      	cmp	r0, #10
 800cf5a:	a803      	add	r0, sp, #12
 800cf5c:	bf04      	itt	eq
 800cf5e:	3301      	addeq	r3, #1
 800cf60:	b21c      	sxtheq	r4, r3
 800cf62:	f001 f871 	bl	800e048 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800cf66:	e7f5      	b.n	800cf54 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800cf68:	4618      	mov	r0, r3
 800cf6a:	b01d      	add	sp, #116	; 0x74
 800cf6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf70:	b003      	add	sp, #12
 800cf72:	4770      	bx	lr

0800cf74 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800cf74:	b40e      	push	{r1, r2, r3}
 800cf76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf78:	b09e      	sub	sp, #120	; 0x78
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	ab23      	add	r3, sp, #140	; 0x8c
 800cf7e:	a805      	add	r0, sp, #20
 800cf80:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf84:	9303      	str	r3, [sp, #12]
 800cf86:	f000 fc97 	bl	800d8b8 <_ZN8touchgfx12TextProviderC1Ev>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf90:	4798      	blx	r3
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	4606      	mov	r6, r0
 800cf96:	4620      	mov	r0, r4
 800cf98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf9a:	4798      	blx	r3
 800cf9c:	4633      	mov	r3, r6
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	9000      	str	r0, [sp, #0]
 800cfa2:	9a03      	ldr	r2, [sp, #12]
 800cfa4:	a805      	add	r0, sp, #20
 800cfa6:	f000 fcda 	bl	800d95e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cfaa:	ad1e      	add	r5, sp, #120	; 0x78
 800cfac:	2100      	movs	r1, #0
 800cfae:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800cfb2:	4622      	mov	r2, r4
 800cfb4:	a805      	add	r0, sp, #20
 800cfb6:	f845 1d68 	str.w	r1, [r5, #-104]!
 800cfba:	462b      	mov	r3, r5
 800cfbc:	f000 ffc4 	bl	800df48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800cfc0:	b1d8      	cbz	r0, 800cffa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800cfc2:	280a      	cmp	r0, #10
 800cfc4:	d012      	beq.n	800cfec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800cfc6:	9804      	ldr	r0, [sp, #16]
 800cfc8:	b180      	cbz	r0, 800cfec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800cfca:	7b47      	ldrb	r7, [r0, #13]
 800cfcc:	88e2      	ldrh	r2, [r4, #6]
 800cfce:	00fb      	lsls	r3, r7, #3
 800cfd0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800cfd4:	7a03      	ldrb	r3, [r0, #8]
 800cfd6:	430b      	orrs	r3, r1
 800cfd8:	0679      	lsls	r1, r7, #25
 800cfda:	bf44      	itt	mi
 800cfdc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800cfe0:	b21b      	sxthmi	r3, r3
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	b21b      	sxth	r3, r3
 800cfe6:	429e      	cmp	r6, r3
 800cfe8:	bfa8      	it	ge
 800cfea:	461e      	movge	r6, r3
 800cfec:	462b      	mov	r3, r5
 800cfee:	4622      	mov	r2, r4
 800cff0:	2100      	movs	r1, #0
 800cff2:	a805      	add	r0, sp, #20
 800cff4:	f000 ffa8 	bl	800df48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800cff8:	e7e2      	b.n	800cfc0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800cffa:	4630      	mov	r0, r6
 800cffc:	b01e      	add	sp, #120	; 0x78
 800cffe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d002:	b003      	add	sp, #12
 800d004:	4770      	bx	lr

0800d006 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800d006:	b513      	push	{r0, r1, r4, lr}
 800d008:	6803      	ldr	r3, [r0, #0]
 800d00a:	2400      	movs	r4, #0
 800d00c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800d010:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d014:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d018:	4669      	mov	r1, sp
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	9400      	str	r4, [sp, #0]
 800d01e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d022:	4798      	blx	r3
 800d024:	b002      	add	sp, #8
 800d026:	bd10      	pop	{r4, pc}

0800d028 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	680b      	ldr	r3, [r1, #0]
 800d02c:	460c      	mov	r4, r1
 800d02e:	4605      	mov	r5, r0
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	4798      	blx	r3
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	4620      	mov	r0, r4
 800d038:	4629      	mov	r1, r5
 800d03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03c:	4798      	blx	r3
 800d03e:	4628      	mov	r0, r5
 800d040:	bd38      	pop	{r3, r4, r5, pc}

0800d042 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800d042:	b410      	push	{r4}
 800d044:	880a      	ldrh	r2, [r1, #0]
 800d046:	8884      	ldrh	r4, [r0, #4]
 800d048:	4422      	add	r2, r4
 800d04a:	800a      	strh	r2, [r1, #0]
 800d04c:	884a      	ldrh	r2, [r1, #2]
 800d04e:	88c4      	ldrh	r4, [r0, #6]
 800d050:	4422      	add	r2, r4
 800d052:	804a      	strh	r2, [r1, #2]
 800d054:	6940      	ldr	r0, [r0, #20]
 800d056:	b120      	cbz	r0, 800d062 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800d058:	6803      	ldr	r3, [r0, #0]
 800d05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	4718      	bx	r3
 800d062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800d068:	b570      	push	{r4, r5, r6, lr}
 800d06a:	8882      	ldrh	r2, [r0, #4]
 800d06c:	460c      	mov	r4, r1
 800d06e:	880b      	ldrh	r3, [r1, #0]
 800d070:	4605      	mov	r5, r0
 800d072:	4413      	add	r3, r2
 800d074:	800b      	strh	r3, [r1, #0]
 800d076:	884b      	ldrh	r3, [r1, #2]
 800d078:	88c2      	ldrh	r2, [r0, #6]
 800d07a:	4413      	add	r3, r2
 800d07c:	804b      	strh	r3, [r1, #2]
 800d07e:	1d01      	adds	r1, r0, #4
 800d080:	4620      	mov	r0, r4
 800d082:	f7fc fdb5 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d086:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dd0b      	ble.n	800d0a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d08e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d092:	2b00      	cmp	r3, #0
 800d094:	dd07      	ble.n	800d0a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d096:	6968      	ldr	r0, [r5, #20]
 800d098:	b128      	cbz	r0, 800d0a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d09a:	6803      	ldr	r3, [r0, #0]
 800d09c:	4621      	mov	r1, r4
 800d09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0a4:	4718      	bx	r3
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}

0800d0a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	8882      	ldrh	r2, [r0, #4]
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	880b      	ldrh	r3, [r1, #0]
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	4413      	add	r3, r2
 800d0b4:	800b      	strh	r3, [r1, #0]
 800d0b6:	884b      	ldrh	r3, [r1, #2]
 800d0b8:	88c2      	ldrh	r2, [r0, #6]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	804b      	strh	r3, [r1, #2]
 800d0be:	1d01      	adds	r1, r0, #4
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f7fc fd95 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d0c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	dd18      	ble.n	800d100 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800d0ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd14      	ble.n	800d100 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800d0d6:	6968      	ldr	r0, [r5, #20]
 800d0d8:	b128      	cbz	r0, 800d0e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800d0da:	6803      	ldr	r3, [r0, #0]
 800d0dc:	4621      	mov	r1, r4
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0e4:	4718      	bx	r3
 800d0e6:	4b07      	ldr	r3, [pc, #28]	; (800d104 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	429d      	cmp	r5, r3
 800d0ee:	d107      	bne.n	800d100 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800d0f0:	f7fe ff44 	bl	800bf7c <_ZN8touchgfx11Application11getInstanceEv>
 800d0f4:	6821      	ldr	r1, [r4, #0]
 800d0f6:	6862      	ldr	r2, [r4, #4]
 800d0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0fc:	f7ff b862 	b.w	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d100:	bd70      	pop	{r4, r5, r6, pc}
 800d102:	bf00      	nop
 800d104:	24006acc 	.word	0x24006acc

0800d108 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	4604      	mov	r4, r0
 800d10c:	4616      	mov	r6, r2
 800d10e:	460d      	mov	r5, r1
 800d110:	b901      	cbnz	r1, 800d114 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800d112:	b192      	cbz	r2, 800d13a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	4620      	mov	r0, r4
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	4798      	blx	r3
 800d11c:	88e2      	ldrh	r2, [r4, #6]
 800d11e:	88a1      	ldrh	r1, [r4, #4]
 800d120:	4620      	mov	r0, r4
 800d122:	4432      	add	r2, r6
 800d124:	4429      	add	r1, r5
 800d126:	b212      	sxth	r2, r2
 800d128:	b209      	sxth	r1, r1
 800d12a:	f7f5 f93b 	bl	80023a4 <_ZN8touchgfx8Drawable5setXYEss>
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	4620      	mov	r0, r4
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d138:	4718      	bx	r3
 800d13a:	bd70      	pop	{r4, r5, r6, pc}

0800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800d13c:	b510      	push	{r4, lr}
 800d13e:	2300      	movs	r3, #0
 800d140:	4604      	mov	r4, r0
 800d142:	4608      	mov	r0, r1
 800d144:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800d148:	8023      	strh	r3, [r4, #0]
 800d14a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d14e:	8063      	strh	r3, [r4, #2]
 800d150:	6803      	ldr	r3, [r0, #0]
 800d152:	80a1      	strh	r1, [r4, #4]
 800d154:	4621      	mov	r1, r4
 800d156:	80e2      	strh	r2, [r4, #6]
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	4798      	blx	r3
 800d15c:	4620      	mov	r0, r4
 800d15e:	bd10      	pop	{r4, pc}

0800d160 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800d160:	b530      	push	{r4, r5, lr}
 800d162:	8083      	strh	r3, [r0, #4]
 800d164:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d168:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800d16c:	80c3      	strh	r3, [r0, #6]
 800d16e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d172:	6141      	str	r1, [r0, #20]
 800d174:	7203      	strb	r3, [r0, #8]
 800d176:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d17a:	8302      	strh	r2, [r0, #24]
 800d17c:	7243      	strb	r3, [r0, #9]
 800d17e:	7a83      	ldrb	r3, [r0, #10]
 800d180:	f365 0306 	bfi	r3, r5, #0, #7
 800d184:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800d188:	f365 13c7 	bfi	r3, r5, #7, #1
 800d18c:	7283      	strb	r3, [r0, #10]
 800d18e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d192:	72c3      	strb	r3, [r0, #11]
 800d194:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d198:	7303      	strb	r3, [r0, #12]
 800d19a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800d19e:	81c3      	strh	r3, [r0, #14]
 800d1a0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d1a4:	8203      	strh	r3, [r0, #16]
 800d1a6:	4b01      	ldr	r3, [pc, #4]	; (800d1ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800d1a8:	6003      	str	r3, [r0, #0]
 800d1aa:	bd30      	pop	{r4, r5, pc}
 800d1ac:	08018fb8 	.word	0x08018fb8

0800d1b0 <_ZNK8touchgfx9ConstFont4findEt>:
 800d1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1b2:	6944      	ldr	r4, [r0, #20]
 800d1b4:	b3bc      	cbz	r4, 800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d1b6:	88a3      	ldrh	r3, [r4, #4]
 800d1b8:	8b02      	ldrh	r2, [r0, #24]
 800d1ba:	1acb      	subs	r3, r1, r3
 800d1bc:	f102 32ff 	add.w	r2, r2, #4294967295
 800d1c0:	d431      	bmi.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	dd0c      	ble.n	800d1e0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800d1c6:	230e      	movs	r3, #14
 800d1c8:	fb03 4302 	mla	r3, r3, r2, r4
 800d1cc:	889b      	ldrh	r3, [r3, #4]
 800d1ce:	1a5b      	subs	r3, r3, r1
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	db27      	blt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bfbc      	itt	lt
 800d1da:	2302      	movlt	r3, #2
 800d1dc:	fb92 f3f3 	sdivlt	r3, r2, r3
 800d1e0:	2500      	movs	r5, #0
 800d1e2:	260e      	movs	r6, #14
 800d1e4:	4295      	cmp	r5, r2
 800d1e6:	dc1e      	bgt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d1e8:	fb06 4003 	mla	r0, r6, r3, r4
 800d1ec:	8887      	ldrh	r7, [r0, #4]
 800d1ee:	42b9      	cmp	r1, r7
 800d1f0:	d01a      	beq.n	800d228 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800d1f2:	d20d      	bcs.n	800d210 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800d1f4:	1e5a      	subs	r2, r3, #1
 800d1f6:	4295      	cmp	r5, r2
 800d1f8:	dc15      	bgt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d1fa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800d1fe:	1a5b      	subs	r3, r3, r1
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	429a      	cmp	r2, r3
 800d204:	db0f      	blt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d206:	429d      	cmp	r5, r3
 800d208:	ddec      	ble.n	800d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d20a:	1953      	adds	r3, r2, r5
 800d20c:	105b      	asrs	r3, r3, #1
 800d20e:	e7e9      	b.n	800d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d210:	1c5d      	adds	r5, r3, #1
 800d212:	42aa      	cmp	r2, r5
 800d214:	db07      	blt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d216:	8a43      	ldrh	r3, [r0, #18]
 800d218:	1acb      	subs	r3, r1, r3
 800d21a:	442b      	add	r3, r5
 800d21c:	429d      	cmp	r5, r3
 800d21e:	dc02      	bgt.n	800d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d220:	429a      	cmp	r2, r3
 800d222:	dadf      	bge.n	800d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d224:	e7f1      	b.n	800d20a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800d226:	2000      	movs	r0, #0
 800d228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d22a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800d22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22c:	4604      	mov	r4, r0
 800d22e:	4617      	mov	r7, r2
 800d230:	461e      	mov	r6, r3
 800d232:	b911      	cbnz	r1, 800d23a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800d234:	2500      	movs	r5, #0
 800d236:	4628      	mov	r0, r5
 800d238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d23a:	290a      	cmp	r1, #10
 800d23c:	d0fa      	beq.n	800d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d23e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800d242:	4291      	cmp	r1, r2
 800d244:	d0f6      	beq.n	800d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d246:	f242 020b 	movw	r2, #8203	; 0x200b
 800d24a:	4291      	cmp	r1, r2
 800d24c:	d0f2      	beq.n	800d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d24e:	f7ff ffaf 	bl	800d1b0 <_ZNK8touchgfx9ConstFont4findEt>
 800d252:	4605      	mov	r5, r0
 800d254:	b950      	cbnz	r0, 800d26c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4620      	mov	r0, r4
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	4798      	blx	r3
 800d25e:	4601      	mov	r1, r0
 800d260:	4620      	mov	r0, r4
 800d262:	f7ff ffa5 	bl	800d1b0 <_ZNK8touchgfx9ConstFont4findEt>
 800d266:	4605      	mov	r5, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	d0e3      	beq.n	800d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	4629      	mov	r1, r5
 800d270:	4620      	mov	r0, r4
 800d272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d274:	4798      	blx	r3
 800d276:	6038      	str	r0, [r7, #0]
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	4620      	mov	r0, r4
 800d27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d27e:	4798      	blx	r3
 800d280:	7030      	strb	r0, [r6, #0]
 800d282:	e7d8      	b.n	800d236 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800d284 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800d284:	2000      	movs	r0, #0
 800d286:	4770      	bx	lr

0800d288 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800d288:	2001      	movs	r0, #1
 800d28a:	4770      	bx	lr

0800d28c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800d28c:	2002      	movs	r0, #2
 800d28e:	4770      	bx	lr

0800d290 <_ZN8touchgfx6ScreenD1Ev>:
 800d290:	4770      	bx	lr

0800d292 <_ZN8touchgfx12GestureEventD1Ev>:
 800d292:	4770      	bx	lr

0800d294 <_ZN8touchgfx9DragEventD1Ev>:
 800d294:	4770      	bx	lr

0800d296 <_ZN8touchgfx10ClickEventD1Ev>:
 800d296:	4770      	bx	lr

0800d298 <_ZN8touchgfx10ClickEventD0Ev>:
 800d298:	b510      	push	{r4, lr}
 800d29a:	4604      	mov	r4, r0
 800d29c:	210c      	movs	r1, #12
 800d29e:	f009 fc63 	bl	8016b68 <_ZdlPvj>
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <_ZN8touchgfx9DragEventD0Ev>:
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	2110      	movs	r1, #16
 800d2ac:	f009 fc5c 	bl	8016b68 <_ZdlPvj>
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	bd10      	pop	{r4, pc}

0800d2b4 <_ZN8touchgfx12GestureEventD0Ev>:
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	210c      	movs	r1, #12
 800d2ba:	f009 fc55 	bl	8016b68 <_ZdlPvj>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	bd10      	pop	{r4, pc}

0800d2c2 <_ZN8touchgfx6ScreenD0Ev>:
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	213c      	movs	r1, #60	; 0x3c
 800d2c8:	f009 fc4e 	bl	8016b68 <_ZdlPvj>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	bd10      	pop	{r4, pc}

0800d2d0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800d2d0:	b530      	push	{r4, r5, lr}
 800d2d2:	460d      	mov	r5, r1
 800d2d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	4604      	mov	r4, r0
 800d2da:	b301      	cbz	r1, 800d31e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800d2dc:	a801      	add	r0, sp, #4
 800d2de:	f7ff ff2d 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d2e2:	892a      	ldrh	r2, [r5, #8]
 800d2e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d2e8:	7928      	ldrb	r0, [r5, #4]
 800d2ea:	1ad2      	subs	r2, r2, r3
 800d2ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800d2ee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800d2f2:	441a      	add	r2, r3
 800d2f4:	896b      	ldrh	r3, [r5, #10]
 800d2f6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d2fa:	f88d 0010 	strb.w	r0, [sp, #16]
 800d2fe:	1b5b      	subs	r3, r3, r5
 800d300:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800d302:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d304:	442b      	add	r3, r5
 800d306:	4d07      	ldr	r5, [pc, #28]	; (800d324 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800d308:	f8ad 1012 	strh.w	r1, [sp, #18]
 800d30c:	a903      	add	r1, sp, #12
 800d30e:	9503      	str	r5, [sp, #12]
 800d310:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d314:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d318:	6803      	ldr	r3, [r0, #0]
 800d31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d31c:	4798      	blx	r3
 800d31e:	b007      	add	sp, #28
 800d320:	bd30      	pop	{r4, r5, pc}
 800d322:	bf00      	nop
 800d324:	08019040 	.word	0x08019040

0800d328 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800d328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d32c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	4604      	mov	r4, r0
 800d332:	460d      	mov	r5, r1
 800d334:	b113      	cbz	r3, 800d33c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800d336:	790b      	ldrb	r3, [r1, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d044      	beq.n	800d3c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d33c:	f104 0804 	add.w	r8, r4, #4
 800d340:	a803      	add	r0, sp, #12
 800d342:	4641      	mov	r1, r8
 800d344:	f7ff fefa 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d348:	792b      	ldrb	r3, [r5, #4]
 800d34a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800d34e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800d352:	b983      	cbnz	r3, 800d376 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800d354:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800d358:	892a      	ldrh	r2, [r5, #8]
 800d35a:	88e9      	ldrh	r1, [r5, #6]
 800d35c:	4640      	mov	r0, r8
 800d35e:	1b92      	subs	r2, r2, r6
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	1bc9      	subs	r1, r1, r7
 800d364:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800d368:	b212      	sxth	r2, r2
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	b209      	sxth	r1, r1
 800d36e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800d372:	f7fc fb5b 	bl	8009a2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800d376:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d378:	b329      	cbz	r1, 800d3c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d37a:	a805      	add	r0, sp, #20
 800d37c:	f7ff fede 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d380:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d384:	792b      	ldrb	r3, [r5, #4]
 800d386:	a907      	add	r1, sp, #28
 800d388:	1abf      	subs	r7, r7, r2
 800d38a:	88ea      	ldrh	r2, [r5, #6]
 800d38c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d38e:	4417      	add	r7, r2
 800d390:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800d392:	f88d 3020 	strb.w	r3, [sp, #32]
 800d396:	4417      	add	r7, r2
 800d398:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800d39c:	1ab6      	subs	r6, r6, r2
 800d39e:	892a      	ldrh	r2, [r5, #8]
 800d3a0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800d3a4:	4416      	add	r6, r2
 800d3a6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800d3a8:	4416      	add	r6, r2
 800d3aa:	4a08      	ldr	r2, [pc, #32]	; (800d3cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800d3ac:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	9207      	str	r2, [sp, #28]
 800d3b4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800d3b8:	6803      	ldr	r3, [r0, #0]
 800d3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3bc:	4798      	blx	r3
 800d3be:	792b      	ldrb	r3, [r5, #4]
 800d3c0:	b10b      	cbz	r3, 800d3c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d3c2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800d3c6:	b00a      	add	sp, #40	; 0x28
 800d3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3cc:	08019018 	.word	0x08019018

0800d3d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d3d8:	b088      	sub	sp, #32
 800d3da:	4605      	mov	r5, r0
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	d06d      	beq.n	800d4bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800d3e0:	4668      	mov	r0, sp
 800d3e2:	f7ff feab 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d3e6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800d3e8:	88e3      	ldrh	r3, [r4, #6]
 800d3ea:	f9bd 8000 	ldrsh.w	r8, [sp]
 800d3ee:	440b      	add	r3, r1
 800d3f0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800d3f4:	b21b      	sxth	r3, r3
 800d3f6:	4543      	cmp	r3, r8
 800d3f8:	db31      	blt.n	800d45e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d3fa:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800d3fe:	44c4      	add	ip, r8
 800d400:	fa0f fc8c 	sxth.w	ip, ip
 800d404:	4563      	cmp	r3, ip
 800d406:	da2a      	bge.n	800d45e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d408:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800d40a:	8926      	ldrh	r6, [r4, #8]
 800d40c:	4416      	add	r6, r2
 800d40e:	b236      	sxth	r6, r6
 800d410:	42be      	cmp	r6, r7
 800d412:	db24      	blt.n	800d45e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d414:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d418:	4438      	add	r0, r7
 800d41a:	b200      	sxth	r0, r0
 800d41c:	4286      	cmp	r6, r0
 800d41e:	da1e      	bge.n	800d45e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d420:	8963      	ldrh	r3, [r4, #10]
 800d422:	4419      	add	r1, r3
 800d424:	b209      	sxth	r1, r1
 800d426:	4541      	cmp	r1, r8
 800d428:	db08      	blt.n	800d43c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d42a:	4561      	cmp	r1, ip
 800d42c:	da06      	bge.n	800d43c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	441a      	add	r2, r3
 800d432:	b212      	sxth	r2, r2
 800d434:	42ba      	cmp	r2, r7
 800d436:	db01      	blt.n	800d43c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d438:	4282      	cmp	r2, r0
 800d43a:	db10      	blt.n	800d45e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d43c:	4b21      	ldr	r3, [pc, #132]	; (800d4c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800d43e:	a904      	add	r1, sp, #16
 800d440:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	2302      	movs	r3, #2
 800d446:	f88d 3014 	strb.w	r3, [sp, #20]
 800d44a:	2300      	movs	r3, #0
 800d44c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d450:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d454:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d458:	6803      	ldr	r3, [r0, #0]
 800d45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45c:	4798      	blx	r3
 800d45e:	1d29      	adds	r1, r5, #4
 800d460:	a802      	add	r0, sp, #8
 800d462:	f7ff fe6b 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d466:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d46a:	88e0      	ldrh	r0, [r4, #6]
 800d46c:	eba3 0808 	sub.w	r8, r3, r8
 800d470:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d474:	7921      	ldrb	r1, [r4, #4]
 800d476:	fa1f f888 	uxth.w	r8, r8
 800d47a:	1bdf      	subs	r7, r3, r7
 800d47c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800d480:	b2bb      	uxth	r3, r7
 800d482:	4440      	add	r0, r8
 800d484:	8922      	ldrh	r2, [r4, #8]
 800d486:	8967      	ldrh	r7, [r4, #10]
 800d488:	4460      	add	r0, ip
 800d48a:	89a4      	ldrh	r4, [r4, #12]
 800d48c:	441a      	add	r2, r3
 800d48e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800d490:	44b8      	add	r8, r7
 800d492:	4423      	add	r3, r4
 800d494:	f8ad 0016 	strh.w	r0, [sp, #22]
 800d498:	4432      	add	r2, r6
 800d49a:	44e0      	add	r8, ip
 800d49c:	4433      	add	r3, r6
 800d49e:	4c0a      	ldr	r4, [pc, #40]	; (800d4c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800d4a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800d4a2:	f88d 1014 	strb.w	r1, [sp, #20]
 800d4a6:	a904      	add	r1, sp, #16
 800d4a8:	9404      	str	r4, [sp, #16]
 800d4aa:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d4ae:	f8ad 801a 	strh.w	r8, [sp, #26]
 800d4b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d4b6:	6803      	ldr	r3, [r0, #0]
 800d4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ba:	4798      	blx	r3
 800d4bc:	b008      	add	sp, #32
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08019018 	.word	0x08019018
 800d4c8:	0801902c 	.word	0x0801902c

0800d4cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800d4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800d4d4:	3201      	adds	r2, #1
 800d4d6:	d112      	bne.n	800d4fe <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800d4d8:	2500      	movs	r5, #0
 800d4da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800d4de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d4e2:	6803      	ldr	r3, [r0, #0]
 800d4e4:	9500      	str	r5, [sp, #0]
 800d4e6:	466d      	mov	r5, sp
 800d4e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d4ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f4:	4798      	blx	r3
 800d4f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d4fa:	e884 0003 	stmia.w	r4, {r0, r1}
 800d4fe:	4620      	mov	r0, r4
 800d500:	b003      	add	sp, #12
 800d502:	bd30      	pop	{r4, r5, pc}

0800d504 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800d504:	b513      	push	{r0, r1, r4, lr}
 800d506:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800d50a:	4604      	mov	r4, r0
 800d50c:	3301      	adds	r3, #1
 800d50e:	d109      	bne.n	800d524 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800d510:	4601      	mov	r1, r0
 800d512:	4668      	mov	r0, sp
 800d514:	f7ff fe12 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d518:	f8bd 3000 	ldrh.w	r3, [sp]
 800d51c:	8423      	strh	r3, [r4, #32]
 800d51e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d522:	8463      	strh	r3, [r4, #34]	; 0x22
 800d524:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800d528:	b002      	add	sp, #8
 800d52a:	bd10      	pop	{r4, pc}

0800d52c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800d52c:	b513      	push	{r0, r1, r4, lr}
 800d52e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800d532:	4604      	mov	r4, r0
 800d534:	3301      	adds	r3, #1
 800d536:	d109      	bne.n	800d54c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800d538:	4601      	mov	r1, r0
 800d53a:	4668      	mov	r0, sp
 800d53c:	f7ff fdfe 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d540:	f8bd 3000 	ldrh.w	r3, [sp]
 800d544:	8423      	strh	r3, [r4, #32]
 800d546:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d54a:	8463      	strh	r3, [r4, #34]	; 0x22
 800d54c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800d550:	b002      	add	sp, #8
 800d552:	bd10      	pop	{r4, pc}

0800d554 <_ZN8touchgfx6ScreenC1Ev>:
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	4b17      	ldr	r3, [pc, #92]	; (800d5b4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800d558:	4605      	mov	r5, r0
 800d55a:	4a17      	ldr	r2, [pc, #92]	; (800d5b8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800d55c:	2101      	movs	r1, #1
 800d55e:	f845 3b04 	str.w	r3, [r5], #4
 800d562:	2300      	movs	r3, #0
 800d564:	6042      	str	r2, [r0, #4]
 800d566:	4604      	mov	r4, r0
 800d568:	8103      	strh	r3, [r0, #8]
 800d56a:	8143      	strh	r3, [r0, #10]
 800d56c:	8183      	strh	r3, [r0, #12]
 800d56e:	81c3      	strh	r3, [r0, #14]
 800d570:	8203      	strh	r3, [r0, #16]
 800d572:	8243      	strh	r3, [r0, #18]
 800d574:	8283      	strh	r3, [r0, #20]
 800d576:	82c3      	strh	r3, [r0, #22]
 800d578:	6203      	str	r3, [r0, #32]
 800d57a:	8483      	strh	r3, [r0, #36]	; 0x24
 800d57c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800d57e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800d582:	6343      	str	r3, [r0, #52]	; 0x34
 800d584:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800d588:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800d58c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800d590:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800d594:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800d596:	4628      	mov	r0, r5
 800d598:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d59c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d59e:	4a08      	ldr	r2, [pc, #32]	; (800d5c0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800d5a0:	f9b2 1000 	ldrsh.w	r1, [r2]
 800d5a4:	4798      	blx	r3
 800d5a6:	6863      	ldr	r3, [r4, #4]
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ae:	4798      	blx	r3
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	08019054 	.word	0x08019054
 800d5b8:	08018d64 	.word	0x08018d64
 800d5bc:	24006a86 	.word	0x24006a86
 800d5c0:	24006a84 	.word	0x24006a84

0800d5c4 <_ZN8touchgfx6Screen4drawEv>:
 800d5c4:	4b09      	ldr	r3, [pc, #36]	; (800d5ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 800d5c6:	b507      	push	{r0, r1, r2, lr}
 800d5c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800d5d0:	9100      	str	r1, [sp, #0]
 800d5d2:	4669      	mov	r1, sp
 800d5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d5dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d5e0:	6803      	ldr	r3, [r0, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	4798      	blx	r3
 800d5e6:	b003      	add	sp, #12
 800d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5ec:	24006a84 	.word	0x24006a84
 800d5f0:	24006a86 	.word	0x24006a86

0800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d5fc:	b089      	sub	sp, #36	; 0x24
 800d5fe:	4680      	mov	r8, r0
 800d600:	460c      	mov	r4, r1
 800d602:	2b00      	cmp	r3, #0
 800d604:	4615      	mov	r5, r2
 800d606:	dd0e      	ble.n	800d626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d608:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd0a      	ble.n	800d626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d610:	4628      	mov	r0, r5
 800d612:	f7ff ff5b 	bl	800d4cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d616:	4621      	mov	r1, r4
 800d618:	f7fe fbd1 	bl	800bdbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d61c:	69eb      	ldr	r3, [r5, #28]
 800d61e:	b928      	cbnz	r0, 800d62c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800d620:	461d      	mov	r5, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1f4      	bne.n	800d610 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800d626:	b009      	add	sp, #36	; 0x24
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	ae04      	add	r6, sp, #16
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 80b5 	beq.w	800d79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d634:	682b      	ldr	r3, [r5, #0]
 800d636:	4629      	mov	r1, r5
 800d638:	a802      	add	r0, sp, #8
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	4798      	blx	r3
 800d63e:	4628      	mov	r0, r5
 800d640:	f7ff ff60 	bl	800d504 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800d644:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800d648:	4407      	add	r7, r0
 800d64a:	4628      	mov	r0, r5
 800d64c:	f7ff ff6e 	bl	800d52c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800d650:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d654:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800d658:	b23f      	sxth	r7, r7
 800d65a:	4418      	add	r0, r3
 800d65c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d660:	4621      	mov	r1, r4
 800d662:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d666:	f8ad 0012 	strh.w	r0, [sp, #18]
 800d66a:	4630      	mov	r0, r6
 800d66c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d670:	f8ad 7010 	strh.w	r7, [sp, #16]
 800d674:	f7fc fabc 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d678:	4628      	mov	r0, r5
 800d67a:	f7ff ff27 	bl	800d4cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d67e:	ab06      	add	r3, sp, #24
 800d680:	4602      	mov	r2, r0
 800d682:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d686:	e883 0003 	stmia.w	r3, {r0, r1}
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fc faaf 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d692:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800d696:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d69a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800d69e:	4299      	cmp	r1, r3
 800d6a0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800d6a4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800d6a8:	d10b      	bne.n	800d6c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d6aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d6ae:	4552      	cmp	r2, sl
 800d6b0:	d107      	bne.n	800d6c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d6b2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800d6b6:	455a      	cmp	r2, fp
 800d6b8:	d103      	bne.n	800d6c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d6ba:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d6be:	454a      	cmp	r2, r9
 800d6c0:	d06d      	beq.n	800d79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d6c2:	f1bb 0f00 	cmp.w	fp, #0
 800d6c6:	dd65      	ble.n	800d794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800d6c8:	f1b9 0f00 	cmp.w	r9, #0
 800d6cc:	dd62      	ble.n	800d794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800d6ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d6d2:	fa1f f08a 	uxth.w	r0, sl
 800d6d6:	4552      	cmp	r2, sl
 800d6d8:	9000      	str	r0, [sp, #0]
 800d6da:	da12      	bge.n	800d702 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	9b00      	ldr	r3, [sp, #0]
 800d6e0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d6e4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800d6e8:	1a9a      	subs	r2, r3, r2
 800d6ea:	f8ad 1010 	strh.w	r1, [sp, #16]
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	f8ad 0014 	strh.w	r0, [sp, #20]
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	f8ad 2016 	strh.w	r2, [sp, #22]
 800d6fa:	69ea      	ldr	r2, [r5, #28]
 800d6fc:	f7ff ff7a 	bl	800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	f9b4 2000 	ldrsh.w	r2, [r4]
 800d706:	b29f      	uxth	r7, r3
 800d708:	429a      	cmp	r2, r3
 800d70a:	da0d      	bge.n	800d728 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800d70c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d710:	1aba      	subs	r2, r7, r2
 800d712:	f8ad a012 	strh.w	sl, [sp, #18]
 800d716:	4631      	mov	r1, r6
 800d718:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d71c:	4640      	mov	r0, r8
 800d71e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800d722:	69ea      	ldr	r2, [r5, #28]
 800d724:	f7ff ff66 	bl	800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d728:	8822      	ldrh	r2, [r4, #0]
 800d72a:	445f      	add	r7, fp
 800d72c:	88a3      	ldrh	r3, [r4, #4]
 800d72e:	b2bf      	uxth	r7, r7
 800d730:	4413      	add	r3, r2
 800d732:	b23a      	sxth	r2, r7
 800d734:	b29b      	uxth	r3, r3
 800d736:	b219      	sxth	r1, r3
 800d738:	4291      	cmp	r1, r2
 800d73a:	dd0d      	ble.n	800d758 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800d73c:	1bdb      	subs	r3, r3, r7
 800d73e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d742:	f8ad a012 	strh.w	sl, [sp, #18]
 800d746:	4631      	mov	r1, r6
 800d748:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d74c:	4640      	mov	r0, r8
 800d74e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800d752:	69ea      	ldr	r2, [r5, #28]
 800d754:	f7ff ff4e 	bl	800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d758:	88e2      	ldrh	r2, [r4, #6]
 800d75a:	8863      	ldrh	r3, [r4, #2]
 800d75c:	4413      	add	r3, r2
 800d75e:	9a00      	ldr	r2, [sp, #0]
 800d760:	444a      	add	r2, r9
 800d762:	b29b      	uxth	r3, r3
 800d764:	fa1f f982 	uxth.w	r9, r2
 800d768:	b219      	sxth	r1, r3
 800d76a:	fa0f f289 	sxth.w	r2, r9
 800d76e:	428a      	cmp	r2, r1
 800d770:	da15      	bge.n	800d79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d772:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d776:	eba3 0309 	sub.w	r3, r3, r9
 800d77a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d77e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d782:	4631      	mov	r1, r6
 800d784:	f8ad 0010 	strh.w	r0, [sp, #16]
 800d788:	f8ad 2012 	strh.w	r2, [sp, #18]
 800d78c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d790:	69ea      	ldr	r2, [r5, #28]
 800d792:	e001      	b.n	800d798 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800d794:	69ea      	ldr	r2, [r5, #28]
 800d796:	4621      	mov	r1, r4
 800d798:	4640      	mov	r0, r8
 800d79a:	f7ff ff2b 	bl	800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7ff fe94 	bl	800d4cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d7a4:	6861      	ldr	r1, [r4, #4]
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	4633      	mov	r3, r6
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	c303      	stmia	r3!, {r0, r1}
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f7fc fa1d 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d7b6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f77f af33 	ble.w	800d626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d7c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f77f af2e 	ble.w	800d626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f7ff fe9a 	bl	800d504 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800d7d0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800d7d4:	1a18      	subs	r0, r3, r0
 800d7d6:	f8ad 0010 	strh.w	r0, [sp, #16]
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f7ff fea6 	bl	800d52c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800d7e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	1a18      	subs	r0, r3, r0
 800d7e8:	f8ad 0012 	strh.w	r0, [sp, #18]
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	682b      	ldr	r3, [r5, #0]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	4798      	blx	r3
 800d7f4:	e717      	b.n	800d626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800d7f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800d7f6:	b570      	push	{r4, r5, r6, lr}
 800d7f8:	1d06      	adds	r6, r0, #4
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	2300      	movs	r3, #0
 800d800:	4631      	mov	r1, r6
 800d802:	4605      	mov	r5, r0
 800d804:	a802      	add	r0, sp, #8
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	f7ff fc98 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d80c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d810:	8822      	ldrh	r2, [r4, #0]
 800d812:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d816:	1ad2      	subs	r2, r2, r3
 800d818:	8863      	ldrh	r3, [r4, #2]
 800d81a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d81e:	1a5b      	subs	r3, r3, r1
 800d820:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800d824:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d828:	aa01      	add	r2, sp, #4
 800d82a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800d82e:	4630      	mov	r0, r6
 800d830:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d834:	a904      	add	r1, sp, #16
 800d836:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d83a:	f7fc fab1 	bl	8009da0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800d83e:	9a01      	ldr	r2, [sp, #4]
 800d840:	b11a      	cbz	r2, 800d84a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800d842:	4621      	mov	r1, r4
 800d844:	4628      	mov	r0, r5
 800d846:	f7ff fed5 	bl	800d5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d84a:	b006      	add	sp, #24
 800d84c:	bd70      	pop	{r4, r5, r6, pc}

0800d84e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800d84e:	4602      	mov	r2, r0
 800d850:	b530      	push	{r4, r5, lr}
 800d852:	4604      	mov	r4, r0
 800d854:	b085      	sub	sp, #20
 800d856:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800d85a:	460d      	mov	r5, r1
 800d85c:	466b      	mov	r3, sp
 800d85e:	6851      	ldr	r1, [r2, #4]
 800d860:	c303      	stmia	r3!, {r0, r1}
 800d862:	4629      	mov	r1, r5
 800d864:	4668      	mov	r0, sp
 800d866:	f7fc f9c3 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 800d86a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d86e:	b12b      	cbz	r3, 800d87c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800d870:	4669      	mov	r1, sp
 800d872:	4620      	mov	r0, r4
 800d874:	f7ff ffbf 	bl	800d7f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800d878:	b005      	add	sp, #20
 800d87a:	bd30      	pop	{r4, r5, pc}
 800d87c:	3404      	adds	r4, #4
 800d87e:	a802      	add	r0, sp, #8
 800d880:	4621      	mov	r1, r4
 800d882:	f7ff fc5b 	bl	800d13c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d886:	f8bd 3000 	ldrh.w	r3, [sp]
 800d88a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d88e:	4669      	mov	r1, sp
 800d890:	4620      	mov	r0, r4
 800d892:	1a9b      	subs	r3, r3, r2
 800d894:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d898:	f8ad 3000 	strh.w	r3, [sp]
 800d89c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d8a0:	1a9b      	subs	r3, r3, r2
 800d8a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d8a6:	f7fc fa42 	bl	8009d2e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800d8aa:	e7e5      	b.n	800d878 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800d8ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	680a      	ldr	r2, [r1, #0]
 800d8b0:	1d01      	adds	r1, r0, #4
 800d8b2:	6992      	ldr	r2, [r2, #24]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	4710      	bx	r2

0800d8b8 <_ZN8touchgfx12TextProviderC1Ev>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	2302      	movs	r3, #2
 800d8be:	4604      	mov	r4, r0
 800d8c0:	220e      	movs	r2, #14
 800d8c2:	7403      	strb	r3, [r0, #16]
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	6145      	str	r5, [r0, #20]
 800d8c8:	7605      	strb	r5, [r0, #24]
 800d8ca:	83c5      	strh	r5, [r0, #30]
 800d8cc:	8405      	strh	r5, [r0, #32]
 800d8ce:	86c5      	strh	r5, [r0, #54]	; 0x36
 800d8d0:	8705      	strh	r5, [r0, #56]	; 0x38
 800d8d2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800d8d4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800d8d8:	e9c0 5500 	strd	r5, r5, [r0]
 800d8dc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800d8e0:	304c      	adds	r0, #76	; 0x4c
 800d8e2:	f009 faf5 	bl	8016ed0 <memset>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800d8ee:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800d8f2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800d8f6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800d8fa:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800d8fe:	f7f4 ff2f 	bl	8002760 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800d902:	4620      	mov	r0, r4
 800d904:	bd38      	pop	{r3, r4, r5, pc}

0800d906 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800d906:	b530      	push	{r4, r5, lr}
 800d908:	2500      	movs	r5, #0
 800d90a:	2401      	movs	r4, #1
 800d90c:	6843      	ldr	r3, [r0, #4]
 800d90e:	b913      	cbnz	r3, 800d916 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800d910:	6803      	ldr	r3, [r0, #0]
 800d912:	b313      	cbz	r3, 800d95a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800d914:	6043      	str	r3, [r0, #4]
 800d916:	7e03      	ldrb	r3, [r0, #24]
 800d918:	b143      	cbz	r3, 800d92c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800d91a:	6943      	ldr	r3, [r0, #20]
 800d91c:	b12b      	cbz	r3, 800d92a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800d91e:	881a      	ldrh	r2, [r3, #0]
 800d920:	b11a      	cbz	r2, 800d92a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800d922:	1c9a      	adds	r2, r3, #2
 800d924:	6142      	str	r2, [r0, #20]
 800d926:	8818      	ldrh	r0, [r3, #0]
 800d928:	bd30      	pop	{r4, r5, pc}
 800d92a:	7605      	strb	r5, [r0, #24]
 800d92c:	6843      	ldr	r3, [r0, #4]
 800d92e:	8819      	ldrh	r1, [r3, #0]
 800d930:	b199      	cbz	r1, 800d95a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800d932:	1c9a      	adds	r2, r3, #2
 800d934:	2902      	cmp	r1, #2
 800d936:	6042      	str	r2, [r0, #4]
 800d938:	d1f5      	bne.n	800d926 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800d93a:	7c03      	ldrb	r3, [r0, #16]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d8e5      	bhi.n	800d90c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d940:	1c5a      	adds	r2, r3, #1
 800d942:	3302      	adds	r3, #2
 800d944:	7402      	strb	r2, [r0, #16]
 800d946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d94a:	6143      	str	r3, [r0, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0dd      	beq.n	800d90c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0da      	beq.n	800d90c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d956:	7604      	strb	r4, [r0, #24]
 800d958:	e7d8      	b.n	800d90c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d95a:	2000      	movs	r0, #0
 800d95c:	e7e4      	b.n	800d928 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800d95e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800d95e:	6001      	str	r1, [r0, #0]
 800d960:	2100      	movs	r1, #0
 800d962:	b430      	push	{r4, r5}
 800d964:	6041      	str	r1, [r0, #4]
 800d966:	6815      	ldr	r5, [r2, #0]
 800d968:	6085      	str	r5, [r0, #8]
 800d96a:	6852      	ldr	r2, [r2, #4]
 800d96c:	6443      	str	r3, [r0, #68]	; 0x44
 800d96e:	9b02      	ldr	r3, [sp, #8]
 800d970:	60c2      	str	r2, [r0, #12]
 800d972:	7401      	strb	r1, [r0, #16]
 800d974:	6141      	str	r1, [r0, #20]
 800d976:	7601      	strb	r1, [r0, #24]
 800d978:	8701      	strh	r1, [r0, #56]	; 0x38
 800d97a:	8401      	strh	r1, [r0, #32]
 800d97c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800d980:	6483      	str	r3, [r0, #72]	; 0x48
 800d982:	bc30      	pop	{r4, r5}
 800d984:	f7f4 beec 	b.w	8002760 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800d988 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800d988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98a:	4605      	mov	r5, r0
 800d98c:	4608      	mov	r0, r1
 800d98e:	b1f1      	cbz	r1, 800d9ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800d990:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800d994:	460b      	mov	r3, r1
 800d996:	f101 0708 	add.w	r7, r1, #8
 800d99a:	4622      	mov	r2, r4
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	3308      	adds	r3, #8
 800d9a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d9a4:	4626      	mov	r6, r4
 800d9a6:	42bb      	cmp	r3, r7
 800d9a8:	c603      	stmia	r6!, {r0, r1}
 800d9aa:	4634      	mov	r4, r6
 800d9ac:	d1f6      	bne.n	800d99c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800d9ae:	6818      	ldr	r0, [r3, #0]
 800d9b0:	6030      	str	r0, [r6, #0]
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	889b      	ldrh	r3, [r3, #4]
 800d9b6:	80b3      	strh	r3, [r6, #4]
 800d9b8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800d9bc:	015b      	lsls	r3, r3, #5
 800d9be:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800d9c2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	425b      	negs	r3, r3
 800d9ca:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	6811      	ldr	r1, [r2, #0]
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	68cd      	ldr	r5, [r1, #12]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	47a8      	blx	r5
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	bf08      	it	eq
 800d9e2:	4620      	moveq	r0, r4
 800d9e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d9e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4615      	mov	r5, r2
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	b93a      	cbnz	r2, 800da02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800d9f2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800d9f6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800d9fa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800d9fe:	4628      	mov	r0, r5
 800da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da02:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800da06:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800da0a:	8893      	ldrh	r3, [r2, #4]
 800da0c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800da10:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800da14:	79ee      	ldrb	r6, [r5, #7]
 800da16:	4316      	orrs	r6, r2
 800da18:	19da      	adds	r2, r3, r7
 800da1a:	b291      	uxth	r1, r2
 800da1c:	b2b7      	uxth	r7, r6
 800da1e:	291d      	cmp	r1, #29
 800da20:	d87b      	bhi.n	800db1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800da22:	2201      	movs	r2, #1
 800da24:	10f6      	asrs	r6, r6, #3
 800da26:	408a      	lsls	r2, r1
 800da28:	4974      	ldr	r1, [pc, #464]	; (800dbfc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800da2a:	420a      	tst	r2, r1
 800da2c:	d12e      	bne.n	800da8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800da2e:	f412 7f60 	tst.w	r2, #896	; 0x380
 800da32:	d072      	beq.n	800db1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800da34:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800da38:	462b      	mov	r3, r5
 800da3a:	f105 0e08 	add.w	lr, r5, #8
 800da3e:	4615      	mov	r5, r2
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	3308      	adds	r3, #8
 800da44:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800da48:	4694      	mov	ip, r2
 800da4a:	4573      	cmp	r3, lr
 800da4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800da50:	4662      	mov	r2, ip
 800da52:	d1f5      	bne.n	800da40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f8cc 0000 	str.w	r0, [ip]
 800da5a:	889b      	ldrh	r3, [r3, #4]
 800da5c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800da60:	b2b3      	uxth	r3, r6
 800da62:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800da66:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800da6a:	1aca      	subs	r2, r1, r3
 800da6c:	1bcf      	subs	r7, r1, r7
 800da6e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800da72:	b292      	uxth	r2, r2
 800da74:	1afb      	subs	r3, r7, r3
 800da76:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800da7a:	10d2      	asrs	r2, r2, #3
 800da7c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800da80:	4302      	orrs	r2, r0
 800da82:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800da86:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800da8a:	e7b8      	b.n	800d9fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800da8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800da8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800da92:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800da94:	f640 6333 	movw	r3, #3635	; 0xe33
 800da98:	4299      	cmp	r1, r3
 800da9a:	d110      	bne.n	800dabe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800da9c:	6803      	ldr	r3, [r0, #0]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	4798      	blx	r3
 800daa2:	7b41      	ldrb	r1, [r0, #13]
 800daa4:	00cb      	lsls	r3, r1, #3
 800daa6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800daaa:	7a03      	ldrb	r3, [r0, #8]
 800daac:	0648      	lsls	r0, r1, #25
 800daae:	ea43 0302 	orr.w	r3, r3, r2
 800dab2:	bf44      	itt	mi
 800dab4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dab8:	b21b      	sxthmi	r3, r3
 800daba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800dabe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800dac2:	462a      	mov	r2, r5
 800dac4:	f105 0c08 	add.w	ip, r5, #8
 800dac8:	443b      	add	r3, r7
 800daca:	4433      	add	r3, r6
 800dacc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	4635      	mov	r5, r6
 800dad4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800dad8:	6810      	ldr	r0, [r2, #0]
 800dada:	3208      	adds	r2, #8
 800dadc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800dae0:	4637      	mov	r7, r6
 800dae2:	4562      	cmp	r2, ip
 800dae4:	c703      	stmia	r7!, {r0, r1}
 800dae6:	463e      	mov	r6, r7
 800dae8:	d1f6      	bne.n	800dad8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800daea:	6810      	ldr	r0, [r2, #0]
 800daec:	6038      	str	r0, [r7, #0]
 800daee:	8892      	ldrh	r2, [r2, #4]
 800daf0:	80ba      	strh	r2, [r7, #4]
 800daf2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800daf6:	10db      	asrs	r3, r3, #3
 800daf8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800dafc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800db04:	4313      	orrs	r3, r2
 800db06:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800db0a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800db0e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800db18:	e771      	b.n	800d9fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800db1a:	f023 0204 	bic.w	r2, r3, #4
 800db1e:	f640 611b 	movw	r1, #3611	; 0xe1b
 800db22:	428a      	cmp	r2, r1
 800db24:	d003      	beq.n	800db2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800db26:	f640 621d 	movw	r2, #3613	; 0xe1d
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d120      	bne.n	800db70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800db2e:	3b01      	subs	r3, #1
 800db30:	4602      	mov	r2, r0
 800db32:	4629      	mov	r1, r5
 800db34:	4620      	mov	r0, r4
 800db36:	b29b      	uxth	r3, r3
 800db38:	f7ff ff4a 	bl	800d9d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800db3c:	7b41      	ldrb	r1, [r0, #13]
 800db3e:	00cb      	lsls	r3, r1, #3
 800db40:	0649      	lsls	r1, r1, #25
 800db42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800db46:	7a03      	ldrb	r3, [r0, #8]
 800db48:	ea43 0302 	orr.w	r3, r3, r2
 800db4c:	bf44      	itt	mi
 800db4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800db52:	b21b      	sxthmi	r3, r3
 800db54:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800db58:	7b6b      	ldrb	r3, [r5, #13]
 800db5a:	7aaa      	ldrb	r2, [r5, #10]
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db62:	4313      	orrs	r3, r2
 800db64:	115a      	asrs	r2, r3, #5
 800db66:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800db6a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800db6e:	e035      	b.n	800dbdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800db70:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800db74:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800db78:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800db7c:	7a2a      	ldrb	r2, [r5, #8]
 800db7e:	ea42 0201 	orr.w	r2, r2, r1
 800db82:	f640 6109 	movw	r1, #3593	; 0xe09
 800db86:	bf1c      	itt	ne
 800db88:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800db8c:	b212      	sxthne	r2, r2
 800db8e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800db92:	f023 0210 	bic.w	r2, r3, #16
 800db96:	428a      	cmp	r2, r1
 800db98:	d003      	beq.n	800dba2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800db9a:	f640 6213 	movw	r2, #3603	; 0xe13
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d129      	bne.n	800dbf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800dba2:	7b6e      	ldrb	r6, [r5, #13]
 800dba4:	4629      	mov	r1, r5
 800dba6:	0076      	lsls	r6, r6, #1
 800dba8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800dbac:	7aae      	ldrb	r6, [r5, #10]
 800dbae:	4316      	orrs	r6, r2
 800dbb0:	f640 6213 	movw	r2, #3603	; 0xe13
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	4620      	mov	r0, r4
 800dbba:	bf16      	itet	ne
 800dbbc:	f103 33ff 	addne.w	r3, r3, #4294967295
 800dbc0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800dbc4:	b29b      	uxthne	r3, r3
 800dbc6:	f7ff ff03 	bl	800d9d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800dbca:	7b43      	ldrb	r3, [r0, #13]
 800dbcc:	7a82      	ldrb	r2, [r0, #10]
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	1af6      	subs	r6, r6, r3
 800dbd8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800dbdc:	7b69      	ldrb	r1, [r5, #13]
 800dbde:	00cb      	lsls	r3, r1, #3
 800dbe0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800dbe4:	7a2b      	ldrb	r3, [r5, #8]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	064a      	lsls	r2, r1, #25
 800dbea:	bf44      	itt	mi
 800dbec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dbf0:	b21b      	sxthmi	r3, r3
 800dbf2:	1bdb      	subs	r3, r3, r7
 800dbf4:	e747      	b.n	800da86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e7b7      	b.n	800db6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 800dbfa:	bf00      	nop
 800dbfc:	3fc00079 	.word	0x3fc00079

0800dc00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800dc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc04:	4604      	mov	r4, r0
 800dc06:	b942      	cbnz	r2, 800dc1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800dc08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc0c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800dc10:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800dc14:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800dc18:	e047      	b.n	800dcaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800dc1a:	7b51      	ldrb	r1, [r2, #13]
 800dc1c:	8893      	ldrh	r3, [r2, #4]
 800dc1e:	010d      	lsls	r5, r1, #4
 800dc20:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800dc24:	79d5      	ldrb	r5, [r2, #7]
 800dc26:	4305      	orrs	r5, r0
 800dc28:	2d04      	cmp	r5, #4
 800dc2a:	bfcc      	ite	gt
 800dc2c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800dc30:	f04f 0e01 	movle.w	lr, #1
 800dc34:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800dc38:	f200 80ab 	bhi.w	800dd92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800dc3c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800dc40:	4283      	cmp	r3, r0
 800dc42:	d216      	bcs.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dc44:	f240 605b 	movw	r0, #1627	; 0x65b
 800dc48:	4283      	cmp	r3, r0
 800dc4a:	d859      	bhi.n	800dd00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800dc4c:	f240 6057 	movw	r0, #1623	; 0x657
 800dc50:	4283      	cmp	r3, r0
 800dc52:	d20e      	bcs.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dc54:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800dc58:	d24a      	bcs.n	800dcf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800dc5a:	f240 604e 	movw	r0, #1614	; 0x64e
 800dc5e:	4283      	cmp	r3, r0
 800dc60:	d207      	bcs.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dc62:	f240 601a 	movw	r0, #1562	; 0x61a
 800dc66:	4283      	cmp	r3, r0
 800dc68:	d02a      	beq.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dc6a:	d821      	bhi.n	800dcb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800dc6c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800dc70:	d35b      	bcc.n	800dd2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800dc72:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800dc76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800dc7a:	f040 80d0 	bne.w	800de1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800dc7e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800dc82:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800dc86:	f040 80ca 	bne.w	800de1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800dc8a:	00cb      	lsls	r3, r1, #3
 800dc8c:	0649      	lsls	r1, r1, #25
 800dc8e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800dc92:	7a13      	ldrb	r3, [r2, #8]
 800dc94:	ea43 0300 	orr.w	r3, r3, r0
 800dc98:	bf44      	itt	mi
 800dc9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dc9e:	b21b      	sxthmi	r3, r3
 800dca0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800dca4:	1b5d      	subs	r5, r3, r5
 800dca6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800dcaa:	4610      	mov	r0, r2
 800dcac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcb0:	f240 604b 	movw	r0, #1611	; 0x64b
 800dcb4:	4283      	cmp	r3, r0
 800dcb6:	d338      	bcc.n	800dd2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800dcb8:	f240 604c 	movw	r0, #1612	; 0x64c
 800dcbc:	4283      	cmp	r3, r0
 800dcbe:	d9d8      	bls.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dcc0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800dcc4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800dcc8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800dccc:	f040 80f3 	bne.w	800deb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800dcd0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800dcd4:	f040 80ef 	bne.w	800deb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800dcd8:	00cb      	lsls	r3, r1, #3
 800dcda:	064e      	lsls	r6, r1, #25
 800dcdc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800dce0:	7a13      	ldrb	r3, [r2, #8]
 800dce2:	ea43 0300 	orr.w	r3, r3, r0
 800dce6:	bf44      	itt	mi
 800dce8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dcec:	b21b      	sxthmi	r3, r3
 800dcee:	e7d9      	b.n	800dca4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800dcf0:	f240 6054 	movw	r0, #1620	; 0x654
 800dcf4:	4283      	cmp	r3, r0
 800dcf6:	d8e3      	bhi.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dcf8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800dcfc:	d9e0      	bls.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dcfe:	e7b8      	b.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd00:	f240 6074 	movw	r0, #1652	; 0x674
 800dd04:	4283      	cmp	r3, r0
 800dd06:	d0b4      	beq.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd08:	d82d      	bhi.n	800dd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800dd0a:	f240 605e 	movw	r0, #1630	; 0x65e
 800dd0e:	4283      	cmp	r3, r0
 800dd10:	d804      	bhi.n	800dd1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800dd12:	f240 605d 	movw	r0, #1629	; 0x65d
 800dd16:	4283      	cmp	r3, r0
 800dd18:	d3d2      	bcc.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dd1a:	e7aa      	b.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd1c:	f240 605f 	movw	r0, #1631	; 0x65f
 800dd20:	4283      	cmp	r3, r0
 800dd22:	d0cd      	beq.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dd24:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800dd28:	d0a3      	beq.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd2a:	00cb      	lsls	r3, r1, #3
 800dd2c:	0649      	lsls	r1, r1, #25
 800dd2e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800dd32:	7a13      	ldrb	r3, [r2, #8]
 800dd34:	ea43 0300 	orr.w	r3, r3, r0
 800dd38:	bf44      	itt	mi
 800dd3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dd3e:	b21b      	sxthmi	r3, r3
 800dd40:	1b5d      	subs	r5, r3, r5
 800dd42:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800dd46:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800dd4a:	7b53      	ldrb	r3, [r2, #13]
 800dd4c:	015b      	lsls	r3, r3, #5
 800dd4e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800dd52:	7993      	ldrb	r3, [r2, #6]
 800dd54:	430b      	orrs	r3, r1
 800dd56:	2105      	movs	r1, #5
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	fb93 f3f1 	sdiv	r3, r3, r1
 800dd5e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800dd62:	440b      	add	r3, r1
 800dd64:	e756      	b.n	800dc14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800dd66:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800dd6a:	4283      	cmp	r3, r0
 800dd6c:	d809      	bhi.n	800dd82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800dd6e:	f240 60df 	movw	r0, #1759	; 0x6df
 800dd72:	4283      	cmp	r3, r0
 800dd74:	f4bf af7d 	bcs.w	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd78:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800dd7c:	2b05      	cmp	r3, #5
 800dd7e:	d8d4      	bhi.n	800dd2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800dd80:	e777      	b.n	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dd82:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800dd86:	4283      	cmp	r3, r0
 800dd88:	d09a      	beq.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dd8a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800dd8e:	4283      	cmp	r3, r0
 800dd90:	e7ca      	b.n	800dd28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800dd92:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800dd96:	d22b      	bcs.n	800ddf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800dd98:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800dd9c:	4283      	cmp	r3, r0
 800dd9e:	d28f      	bcs.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dda0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800dda4:	4283      	cmp	r3, r0
 800dda6:	d816      	bhi.n	800ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800dda8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800ddac:	4283      	cmp	r3, r0
 800ddae:	f4bf af60 	bcs.w	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ddb2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800ddb6:	4283      	cmp	r3, r0
 800ddb8:	d80a      	bhi.n	800ddd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ddba:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800ddbe:	4283      	cmp	r3, r0
 800ddc0:	f4bf af57 	bcs.w	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ddc4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800ddc8:	4283      	cmp	r3, r0
 800ddca:	f43f af79 	beq.w	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ddce:	e7ac      	b.n	800dd2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ddd0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800ddd4:	e7f8      	b.n	800ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ddd6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800ddda:	4283      	cmp	r3, r0
 800dddc:	d802      	bhi.n	800dde4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ddde:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800dde2:	e798      	b.n	800dd16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800dde4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800dde8:	4283      	cmp	r3, r0
 800ddea:	f47f af42 	bne.w	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ddee:	e767      	b.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ddf0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800ddf4:	4283      	cmp	r3, r0
 800ddf6:	f43f af63 	beq.w	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ddfa:	d802      	bhi.n	800de02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ddfc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800de00:	e7f2      	b.n	800dde8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800de02:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800de06:	4283      	cmp	r3, r0
 800de08:	d805      	bhi.n	800de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800de0a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800de0e:	4283      	cmp	r3, r0
 800de10:	f4ff af2f 	bcc.w	800dc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800de14:	e754      	b.n	800dcc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800de16:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800de1a:	4283      	cmp	r3, r0
 800de1c:	e7af      	b.n	800dd7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800de1e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800de22:	4617      	mov	r7, r2
 800de24:	f102 0808 	add.w	r8, r2, #8
 800de28:	4666      	mov	r6, ip
 800de2a:	6838      	ldr	r0, [r7, #0]
 800de2c:	3708      	adds	r7, #8
 800de2e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800de32:	46e6      	mov	lr, ip
 800de34:	4547      	cmp	r7, r8
 800de36:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800de3a:	46f4      	mov	ip, lr
 800de3c:	d1f5      	bne.n	800de2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800de3e:	6838      	ldr	r0, [r7, #0]
 800de40:	f8ce 0000 	str.w	r0, [lr]
 800de44:	88b9      	ldrh	r1, [r7, #4]
 800de46:	f8ae 1004 	strh.w	r1, [lr, #4]
 800de4a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800de4e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800de52:	d009      	beq.n	800de68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800de54:	7b51      	ldrb	r1, [r2, #13]
 800de56:	7992      	ldrb	r2, [r2, #6]
 800de58:	0149      	lsls	r1, r1, #5
 800de5a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800de5e:	4311      	orrs	r1, r2
 800de60:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800de64:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800de68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800de6c:	b2ad      	uxth	r5, r5
 800de6e:	d00d      	beq.n	800de8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800de70:	442b      	add	r3, r5
 800de72:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800de76:	b29b      	uxth	r3, r3
 800de78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800de7c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800de80:	10db      	asrs	r3, r3, #3
 800de82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de86:	4313      	orrs	r3, r2
 800de88:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800de8c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800de90:	00cb      	lsls	r3, r1, #3
 800de92:	064f      	lsls	r7, r1, #25
 800de94:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800de98:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800de9c:	ea43 0302 	orr.w	r3, r3, r2
 800dea0:	bf44      	itt	mi
 800dea2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800dea6:	b21b      	sxthmi	r3, r3
 800dea8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800deac:	1b5b      	subs	r3, r3, r5
 800deae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800deb2:	4632      	mov	r2, r6
 800deb4:	e6f9      	b.n	800dcaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800deb6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800deba:	4617      	mov	r7, r2
 800debc:	f102 0908 	add.w	r9, r2, #8
 800dec0:	4666      	mov	r6, ip
 800dec2:	6838      	ldr	r0, [r7, #0]
 800dec4:	3708      	adds	r7, #8
 800dec6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800deca:	46e0      	mov	r8, ip
 800decc:	454f      	cmp	r7, r9
 800dece:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ded2:	46c4      	mov	ip, r8
 800ded4:	d1f5      	bne.n	800dec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ded6:	6838      	ldr	r0, [r7, #0]
 800ded8:	f8c8 0000 	str.w	r0, [r8]
 800dedc:	88b9      	ldrh	r1, [r7, #4]
 800dede:	f8a8 1004 	strh.w	r1, [r8, #4]
 800dee2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800dee6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800deea:	d009      	beq.n	800df00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800deec:	7b51      	ldrb	r1, [r2, #13]
 800deee:	7992      	ldrb	r2, [r2, #6]
 800def0:	0149      	lsls	r1, r1, #5
 800def2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800def6:	4311      	orrs	r1, r2
 800def8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800defc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800df00:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800df04:	d00e      	beq.n	800df24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800df06:	eba3 030e 	sub.w	r3, r3, lr
 800df0a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800df0e:	b29b      	uxth	r3, r3
 800df10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800df14:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800df18:	10db      	asrs	r3, r3, #3
 800df1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df1e:	4313      	orrs	r3, r2
 800df20:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800df24:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800df28:	00cb      	lsls	r3, r1, #3
 800df2a:	0648      	lsls	r0, r1, #25
 800df2c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800df30:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800df34:	ea43 0302 	orr.w	r3, r3, r2
 800df38:	bf44      	itt	mi
 800df3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800df3e:	b21b      	sxthmi	r3, r3
 800df40:	1b5d      	subs	r5, r3, r5
 800df42:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800df46:	e7b4      	b.n	800deb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800df48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	461e      	mov	r6, r3
 800df4e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800df50:	4604      	mov	r4, r0
 800df52:	4617      	mov	r7, r2
 800df54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800df58:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800df5c:	f7f4 fbbe 	bl	80026dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800df60:	4605      	mov	r5, r0
 800df62:	b918      	cbnz	r0, 800df6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800df64:	6030      	str	r0, [r6, #0]
 800df66:	4628      	mov	r0, r5
 800df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	4601      	mov	r1, r0
 800df70:	4638      	mov	r0, r7
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	4798      	blx	r3
 800df76:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800df7a:	4602      	mov	r2, r0
 800df7c:	6030      	str	r0, [r6, #0]
 800df7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df82:	d213      	bcs.n	800dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800df84:	4643      	mov	r3, r8
 800df86:	4639      	mov	r1, r7
 800df88:	4620      	mov	r0, r4
 800df8a:	f7ff fe39 	bl	800dc00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800df8e:	6030      	str	r0, [r6, #0]
 800df90:	6833      	ldr	r3, [r6, #0]
 800df92:	b143      	cbz	r3, 800dfa6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800df94:	7b5a      	ldrb	r2, [r3, #13]
 800df96:	7a9b      	ldrb	r3, [r3, #10]
 800df98:	0052      	lsls	r2, r2, #1
 800df9a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	bf0c      	ite	eq
 800dfa2:	2301      	moveq	r3, #1
 800dfa4:	2300      	movne	r3, #0
 800dfa6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800dfaa:	e7dc      	b.n	800df66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800dfac:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	2b7f      	cmp	r3, #127	; 0x7f
 800dfb4:	d804      	bhi.n	800dfc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f7ff fd15 	bl	800d9e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800dfbe:	e7e6      	b.n	800df8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800dfc0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0e3      	beq.n	800df90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800dfc8:	f640 1302 	movw	r3, #2306	; 0x902
 800dfcc:	429d      	cmp	r5, r3
 800dfce:	d1df      	bne.n	800df90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff fcd8 	bl	800d988 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800dfd8:	e7d9      	b.n	800df8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800dfda <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800dfda:	b510      	push	{r4, lr}
 800dfdc:	4604      	mov	r4, r0
 800dfde:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800dfe2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800dfe4:	b1e1      	cbz	r1, 800e020 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800dfe6:	2b0a      	cmp	r3, #10
 800dfe8:	d02d      	beq.n	800e046 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800dfea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dfec:	3901      	subs	r1, #1
 800dfee:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800dff2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800dff4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800dff8:	1c51      	adds	r1, r2, #1
 800dffa:	b289      	uxth	r1, r1
 800dffc:	2901      	cmp	r1, #1
 800dffe:	bf8a      	itet	hi
 800e000:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e004:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800e006:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800e008:	1c5a      	adds	r2, r3, #1
 800e00a:	8722      	strh	r2, [r4, #56]	; 0x38
 800e00c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e00e:	4413      	add	r3, r2
 800e010:	b29b      	uxth	r3, r3
 800e012:	2b09      	cmp	r3, #9
 800e014:	bf88      	it	hi
 800e016:	3b0a      	subhi	r3, #10
 800e018:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e01c:	8458      	strh	r0, [r3, #34]	; 0x22
 800e01e:	e7de      	b.n	800dfde <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800e020:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800e022:	2b0a      	cmp	r3, #10
 800e024:	d00f      	beq.n	800e046 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff fc6d 	bl	800d906 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800e02c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	8722      	strh	r2, [r4, #56]	; 0x38
 800e032:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e034:	4413      	add	r3, r2
 800e036:	b29b      	uxth	r3, r3
 800e038:	2b09      	cmp	r3, #9
 800e03a:	bf88      	it	hi
 800e03c:	3b0a      	subhi	r3, #10
 800e03e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e042:	8458      	strh	r0, [r3, #34]	; 0x22
 800e044:	e7ec      	b.n	800e020 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800e046:	bd10      	pop	{r4, pc}

0800e048 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800e04c:	4604      	mov	r4, r0
 800e04e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800e052:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800e054:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800e056:	3a01      	subs	r2, #1
 800e058:	8702      	strh	r2, [r0, #56]	; 0x38
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	b292      	uxth	r2, r2
 800e05e:	2a09      	cmp	r2, #9
 800e060:	bf8a      	itet	hi
 800e062:	3b09      	subhi	r3, #9
 800e064:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800e066:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800e068:	f7ff ffb7 	bl	800dfda <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800e06c:	8c23      	ldrh	r3, [r4, #32]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	bf9c      	itt	ls
 800e072:	3301      	addls	r3, #1
 800e074:	8423      	strhls	r3, [r4, #32]
 800e076:	8be3      	ldrh	r3, [r4, #30]
 800e078:	b90b      	cbnz	r3, 800e07e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800e07a:	2302      	movs	r3, #2
 800e07c:	83e3      	strh	r3, [r4, #30]
 800e07e:	8be3      	ldrh	r3, [r4, #30]
 800e080:	4628      	mov	r0, r5
 800e082:	3b01      	subs	r3, #1
 800e084:	b29b      	uxth	r3, r3
 800e086:	83e3      	strh	r3, [r4, #30]
 800e088:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e08c:	8365      	strh	r5, [r4, #26]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}

0800e090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800e090:	428a      	cmp	r2, r1
 800e092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e096:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800e098:	d932      	bls.n	800e100 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800e09a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800e09c:	1a54      	subs	r4, r2, r1
 800e09e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800e0a2:	19ee      	adds	r6, r5, r7
 800e0a4:	fa1f fe84 	uxth.w	lr, r4
 800e0a8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800e0ac:	3e01      	subs	r6, #1
 800e0ae:	b2b4      	uxth	r4, r6
 800e0b0:	eba4 090e 	sub.w	r9, r4, lr
 800e0b4:	fa1f f989 	uxth.w	r9, r9
 800e0b8:	2c09      	cmp	r4, #9
 800e0ba:	4626      	mov	r6, r4
 800e0bc:	bf88      	it	hi
 800e0be:	f1a4 060a 	subhi.w	r6, r4, #10
 800e0c2:	f1bc 0f00 	cmp.w	ip, #0
 800e0c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e0ca:	bf08      	it	eq
 800e0cc:	f04f 0c02 	moveq.w	ip, #2
 800e0d0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e0d4:	b2a4      	uxth	r4, r4
 800e0d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e0da:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800e0de:	454c      	cmp	r4, r9
 800e0e0:	fa1f fc8c 	uxth.w	ip, ip
 800e0e4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800e0e8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800e0ec:	d1e4      	bne.n	800e0b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800e0ee:	eba5 050e 	sub.w	r5, r5, lr
 800e0f2:	eb0e 0408 	add.w	r4, lr, r8
 800e0f6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800e0fa:	8705      	strh	r5, [r0, #56]	; 0x38
 800e0fc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800e100:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800e102:	250a      	movs	r5, #10
 800e104:	1a64      	subs	r4, r4, r1
 800e106:	4439      	add	r1, r7
 800e108:	b289      	uxth	r1, r1
 800e10a:	8704      	strh	r4, [r0, #56]	; 0x38
 800e10c:	2909      	cmp	r1, #9
 800e10e:	bf88      	it	hi
 800e110:	390a      	subhi	r1, #10
 800e112:	86c1      	strh	r1, [r0, #54]	; 0x36
 800e114:	b18a      	cbz	r2, 800e13a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800e116:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800e118:	3a01      	subs	r2, #1
 800e11a:	3101      	adds	r1, #1
 800e11c:	b292      	uxth	r2, r2
 800e11e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800e122:	8701      	strh	r1, [r0, #56]	; 0x38
 800e124:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800e126:	b901      	cbnz	r1, 800e12a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800e128:	86c5      	strh	r5, [r0, #54]	; 0x36
 800e12a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800e12c:	3901      	subs	r1, #1
 800e12e:	b289      	uxth	r1, r1
 800e130:	86c1      	strh	r1, [r0, #54]	; 0x36
 800e132:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e136:	844c      	strh	r4, [r1, #34]	; 0x22
 800e138:	e7ec      	b.n	800e114 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800e13a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e13e:	f7ff bf4c 	b.w	800dfda <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800e142 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800e142:	b570      	push	{r4, r5, r6, lr}
 800e144:	2500      	movs	r5, #0
 800e146:	4295      	cmp	r5, r2
 800e148:	d011      	beq.n	800e16e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800e14a:	8bc4      	ldrh	r4, [r0, #30]
 800e14c:	f831 6b02 	ldrh.w	r6, [r1], #2
 800e150:	4414      	add	r4, r2
 800e152:	3c01      	subs	r4, #1
 800e154:	1b64      	subs	r4, r4, r5
 800e156:	b2a4      	uxth	r4, r4
 800e158:	2c01      	cmp	r4, #1
 800e15a:	bf88      	it	hi
 800e15c:	3c02      	subhi	r4, #2
 800e15e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e162:	8b64      	ldrh	r4, [r4, #26]
 800e164:	42b4      	cmp	r4, r6
 800e166:	d117      	bne.n	800e198 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800e168:	3501      	adds	r5, #1
 800e16a:	b2ad      	uxth	r5, r5
 800e16c:	e7eb      	b.n	800e146 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800e16e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e172:	2400      	movs	r4, #0
 800e174:	4413      	add	r3, r2
 800e176:	b2a2      	uxth	r2, r4
 800e178:	429a      	cmp	r2, r3
 800e17a:	da0f      	bge.n	800e19c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800e17c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800e17e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800e182:	3401      	adds	r4, #1
 800e184:	4432      	add	r2, r6
 800e186:	b292      	uxth	r2, r2
 800e188:	2a09      	cmp	r2, #9
 800e18a:	bf88      	it	hi
 800e18c:	3a0a      	subhi	r2, #10
 800e18e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e192:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800e194:	42aa      	cmp	r2, r5
 800e196:	d0ee      	beq.n	800e176 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800e198:	2000      	movs	r0, #0
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	2001      	movs	r0, #1
 800e19e:	e7fc      	b.n	800e19a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800e1a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800e1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	4616      	mov	r6, r2
 800e1a8:	1c8c      	adds	r4, r1, #2
 800e1aa:	8809      	ldrh	r1, [r1, #0]
 800e1ac:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800e1b0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800e1b4:	42b3      	cmp	r3, r6
 800e1b6:	d124      	bne.n	800e202 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800e1b8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800e1bc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800e1c0:	f001 070f 	and.w	r7, r1, #15
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	f8cd 8000 	str.w	r8, [sp]
 800e1ca:	464b      	mov	r3, r9
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f7ff ffb7 	bl	800e142 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800e1d4:	4683      	mov	fp, r0
 800e1d6:	b168      	cbz	r0, 800e1f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800e1d8:	eb0a 0109 	add.w	r1, sl, r9
 800e1dc:	463a      	mov	r2, r7
 800e1de:	4628      	mov	r0, r5
 800e1e0:	4441      	add	r1, r8
 800e1e2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7ff ff52 	bl	800e090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800e1ec:	4658      	mov	r0, fp
 800e1ee:	b003      	add	sp, #12
 800e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f4:	eb07 010a 	add.w	r1, r7, sl
 800e1f8:	4449      	add	r1, r9
 800e1fa:	4441      	add	r1, r8
 800e1fc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800e200:	e7d2      	b.n	800e1a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800e202:	f04f 0b00 	mov.w	fp, #0
 800e206:	e7f1      	b.n	800e1ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800e208 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	8810      	ldrh	r0, [r2, #0]
 800e20c:	4298      	cmp	r0, r3
 800e20e:	d817      	bhi.n	800e240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e210:	1e48      	subs	r0, r1, #1
 800e212:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800e216:	4298      	cmp	r0, r3
 800e218:	d312      	bcc.n	800e240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e21a:	2400      	movs	r4, #0
 800e21c:	428c      	cmp	r4, r1
 800e21e:	d20f      	bcs.n	800e240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e220:	1860      	adds	r0, r4, r1
 800e222:	1040      	asrs	r0, r0, #1
 800e224:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800e228:	0085      	lsls	r5, r0, #2
 800e22a:	42b3      	cmp	r3, r6
 800e22c:	d902      	bls.n	800e234 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800e22e:	3001      	adds	r0, #1
 800e230:	b284      	uxth	r4, r0
 800e232:	e7f3      	b.n	800e21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800e234:	d201      	bcs.n	800e23a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800e236:	b281      	uxth	r1, r0
 800e238:	e7f0      	b.n	800e21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800e23a:	442a      	add	r2, r5
 800e23c:	8850      	ldrh	r0, [r2, #2]
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	2000      	movs	r0, #0
 800e242:	e7fc      	b.n	800e23e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800e244 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800e24a:	4604      	mov	r4, r0
 800e24c:	260b      	movs	r6, #11
 800e24e:	886f      	ldrh	r7, [r5, #2]
 800e250:	087f      	lsrs	r7, r7, #1
 800e252:	3e01      	subs	r6, #1
 800e254:	d013      	beq.n	800e27e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800e256:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e258:	462a      	mov	r2, r5
 800e25a:	4639      	mov	r1, r7
 800e25c:	4620      	mov	r0, r4
 800e25e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e262:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800e266:	4643      	mov	r3, r8
 800e268:	f7ff ffce 	bl	800e208 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800e26c:	b138      	cbz	r0, 800e27e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800e26e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800e272:	4642      	mov	r2, r8
 800e274:	4620      	mov	r0, r4
 800e276:	f7ff ff93 	bl	800e1a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d1e9      	bne.n	800e252 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	694a      	ldr	r2, [r1, #20]
 800e288:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800e28a:	684b      	ldr	r3, [r1, #4]
 800e28c:	1b54      	subs	r4, r2, r5
 800e28e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800e290:	f000 8106 	beq.w	800e4a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800e294:	1b9b      	subs	r3, r3, r6
 800e296:	d003      	beq.n	800e2a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800e298:	4363      	muls	r3, r4
 800e29a:	2210      	movs	r2, #16
 800e29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2a0:	680c      	ldr	r4, [r1, #0]
 800e2a2:	698a      	ldr	r2, [r1, #24]
 800e2a4:	1b65      	subs	r5, r4, r5
 800e2a6:	f000 80fd 	beq.w	800e4a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800e2aa:	1b92      	subs	r2, r2, r6
 800e2ac:	d003      	beq.n	800e2b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800e2ae:	436a      	muls	r2, r5
 800e2b0:	2410      	movs	r4, #16
 800e2b2:	fb92 f2f4 	sdiv	r2, r2, r4
 800e2b6:	1a9b      	subs	r3, r3, r2
 800e2b8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800e4e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800e2bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2c0:	460a      	mov	r2, r1
 800e2c2:	ee07 3a90 	vmov	s15, r3
 800e2c6:	f100 040c 	add.w	r4, r0, #12
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e2d4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800e2d8:	eeb1 6a43 	vneg.f32	s12, s6
 800e2dc:	edd2 7a02 	vldr	s15, [r2, #8]
 800e2e0:	3214      	adds	r2, #20
 800e2e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2e6:	ece3 6a01 	vstmia	r3!, {s13}
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	ed52 7a02 	vldr	s15, [r2, #-8]
 800e2f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2f4:	edc3 7a02 	vstr	s15, [r3, #8]
 800e2f8:	ed52 7a01 	vldr	s15, [r2, #-4]
 800e2fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e300:	edc3 7a05 	vstr	s15, [r3, #20]
 800e304:	d1ea      	bne.n	800e2dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800e306:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e308:	698b      	ldr	r3, [r1, #24]
 800e30a:	edd0 4a02 	vldr	s9, [r0, #8]
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	edd0 3a00 	vldr	s7, [r0]
 800e314:	edd0 6a01 	vldr	s13, [r0, #4]
 800e318:	ee07 3a90 	vmov	s15, r3
 800e31c:	684b      	ldr	r3, [r1, #4]
 800e31e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800e322:	ed90 5a05 	vldr	s10, [r0, #20]
 800e326:	1a9b      	subs	r3, r3, r2
 800e328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e32c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800e330:	ed90 2a03 	vldr	s4, [r0, #12]
 800e334:	ee07 3a10 	vmov	s14, r3
 800e338:	edd0 5a04 	vldr	s11, [r0, #16]
 800e33c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e340:	ed90 1a07 	vldr	s2, [r0, #28]
 800e344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e348:	edd0 2a06 	vldr	s5, [r0, #24]
 800e34c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800e350:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800e354:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e358:	ee32 5a45 	vsub.f32	s10, s4, s10
 800e35c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e360:	ee67 7a83 	vmul.f32	s15, s15, s6
 800e364:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800e368:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800e36a:	694a      	ldr	r2, [r1, #20]
 800e36c:	1b13      	subs	r3, r2, r4
 800e36e:	ee07 3a10 	vmov	s14, r3
 800e372:	680b      	ldr	r3, [r1, #0]
 800e374:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e378:	1b1b      	subs	r3, r3, r4
 800e37a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e37e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800e382:	ee07 3a10 	vmov	s14, r3
 800e386:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e38a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e38e:	eee6 4a87 	vfma.f32	s9, s13, s14
 800e392:	ee64 4a86 	vmul.f32	s9, s9, s12
 800e396:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800e39a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e39c:	698b      	ldr	r3, [r1, #24]
 800e39e:	1a9b      	subs	r3, r3, r2
 800e3a0:	ee06 3a90 	vmov	s13, r3
 800e3a4:	684b      	ldr	r3, [r1, #4]
 800e3a6:	1a9b      	subs	r3, r3, r2
 800e3a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e3ac:	ee07 3a10 	vmov	s14, r3
 800e3b0:	ee66 6a84 	vmul.f32	s13, s13, s8
 800e3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3b8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800e3bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e3c0:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e3c4:	ee66 6a83 	vmul.f32	s13, s13, s6
 800e3c8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800e3cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800e3ce:	694a      	ldr	r2, [r1, #20]
 800e3d0:	1b13      	subs	r3, r2, r4
 800e3d2:	ee07 3a10 	vmov	s14, r3
 800e3d6:	680b      	ldr	r3, [r1, #0]
 800e3d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3dc:	1b1b      	subs	r3, r3, r4
 800e3de:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e3e2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800e3e6:	ee07 3a10 	vmov	s14, r3
 800e3ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e3f2:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e3f6:	edd0 5a08 	vldr	s11, [r0, #32]
 800e3fa:	ee31 1a65 	vsub.f32	s2, s2, s11
 800e3fe:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800e402:	ee25 5a06 	vmul.f32	s10, s10, s12
 800e406:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800e40a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e40c:	698b      	ldr	r3, [r1, #24]
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	ee07 3a10 	vmov	s14, r3
 800e414:	684b      	ldr	r3, [r1, #4]
 800e416:	1a9b      	subs	r3, r3, r2
 800e418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e41c:	ee01 3a90 	vmov	s3, r3
 800e420:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e424:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800e428:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800e42c:	ee61 1a84 	vmul.f32	s3, s3, s8
 800e430:	eea1 7a21 	vfma.f32	s14, s2, s3
 800e434:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e438:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800e43c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800e43e:	694a      	ldr	r2, [r1, #20]
 800e440:	1b13      	subs	r3, r2, r4
 800e442:	ee03 3a10 	vmov	s6, r3
 800e446:	680b      	ldr	r3, [r1, #0]
 800e448:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800e44c:	1b1b      	subs	r3, r3, r4
 800e44e:	ee23 3a04 	vmul.f32	s6, s6, s8
 800e452:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800e456:	ee03 3a10 	vmov	s6, r3
 800e45a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800e45e:	ee23 4a04 	vmul.f32	s8, s6, s8
 800e462:	eee1 5a04 	vfma.f32	s11, s2, s8
 800e466:	ee25 6a86 	vmul.f32	s12, s11, s12
 800e46a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800e46e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800e472:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800e476:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	dd13      	ble.n	800e4a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800e480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e484:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800e488:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e48a:	eee3 7a87 	vfma.f32	s15, s7, s14
 800e48e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	dd15      	ble.n	800e4c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800e498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e49c:	6403      	str	r3, [r0, #64]	; 0x40
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	4623      	mov	r3, r4
 800e4a2:	e6fd      	b.n	800e2a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	e706      	b.n	800e2b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800e4a8:	d502      	bpl.n	800e4b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800e4aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e4ae:	e7e9      	b.n	800e484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800e4b0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800e4b4:	eea3 2a85 	vfma.f32	s4, s7, s10
 800e4b8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800e4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c0:	dade      	bge.n	800e480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800e4c2:	e7f2      	b.n	800e4aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800e4c4:	d502      	bpl.n	800e4cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800e4c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e4ca:	e7e7      	b.n	800e49c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800e4cc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800e4d0:	eee3 4a86 	vfma.f32	s9, s7, s12
 800e4d4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4dc:	dadc      	bge.n	800e498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800e4de:	e7f2      	b.n	800e4c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800e4e0:	3d800000 	.word	0x3d800000

0800e4e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e8:	2714      	movs	r7, #20
 800e4ea:	435f      	muls	r7, r3
 800e4ec:	eb02 0c07 	add.w	ip, r2, r7
 800e4f0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800e4f4:	f115 0e0f 	adds.w	lr, r5, #15
 800e4f8:	f100 80a2 	bmi.w	800e640 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800e4fc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800e500:	9c08      	ldr	r4, [sp, #32]
 800e502:	2614      	movs	r6, #20
 800e504:	f8c0 e014 	str.w	lr, [r0, #20]
 800e508:	4366      	muls	r6, r4
 800e50a:	eb02 0806 	add.w	r8, r2, r6
 800e50e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e512:	f115 040f 	adds.w	r4, r5, #15
 800e516:	f100 809f 	bmi.w	800e658 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800e51a:	1124      	asrs	r4, r4, #4
 800e51c:	eba4 040e 	sub.w	r4, r4, lr
 800e520:	6184      	str	r4, [r0, #24]
 800e522:	2c00      	cmp	r4, #0
 800e524:	f000 808a 	beq.w	800e63c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800e528:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800e52c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e530:	5995      	ldr	r5, [r2, r6]
 800e532:	eba4 0809 	sub.w	r8, r4, r9
 800e536:	59d4      	ldr	r4, [r2, r7]
 800e538:	eba5 0a04 	sub.w	sl, r5, r4
 800e53c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800e540:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800e544:	fb0e fe05 	mul.w	lr, lr, r5
 800e548:	fb0a ee19 	mls	lr, sl, r9, lr
 800e54c:	fb08 e404 	mla	r4, r8, r4, lr
 800e550:	3c01      	subs	r4, #1
 800e552:	19a4      	adds	r4, r4, r6
 800e554:	f100 808c 	bmi.w	800e670 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800e558:	fb94 fef6 	sdiv	lr, r4, r6
 800e55c:	fb06 441e 	mls	r4, r6, lr, r4
 800e560:	f8c0 e000 	str.w	lr, [r0]
 800e564:	6104      	str	r4, [r0, #16]
 800e566:	2d00      	cmp	r5, #0
 800e568:	f2c0 8095 	blt.w	800e696 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800e56c:	fb95 f4f6 	sdiv	r4, r5, r6
 800e570:	fb06 5514 	mls	r5, r6, r4, r5
 800e574:	6044      	str	r4, [r0, #4]
 800e576:	6085      	str	r5, [r0, #8]
 800e578:	60c6      	str	r6, [r0, #12]
 800e57a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e57e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800e582:	6945      	ldr	r5, [r0, #20]
 800e584:	59d2      	ldr	r2, [r2, r7]
 800e586:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800e58a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800e6b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800e58e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800e592:	ee07 4a10 	vmov	s14, r4
 800e596:	6804      	ldr	r4, [r0, #0]
 800e598:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800e59c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5a0:	ee07 2a90 	vmov	s15, r2
 800e5a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e5a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5b0:	edd3 6a00 	vldr	s13, [r3]
 800e5b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e5b8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800e5bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e5c0:	edc0 6a07 	vstr	s13, [r0, #28]
 800e5c4:	edd0 6a01 	vldr	s13, [r0, #4]
 800e5c8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800e5cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e5d0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800e5d4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e5d8:	ed80 6a08 	vstr	s12, [r0, #32]
 800e5dc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800e5de:	6242      	str	r2, [r0, #36]	; 0x24
 800e5e0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800e5e4:	ed93 6a03 	vldr	s12, [r3, #12]
 800e5e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e5ec:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800e5f0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e5f4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800e5f8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800e5fc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800e600:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e604:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800e608:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e60a:	6302      	str	r2, [r0, #48]	; 0x30
 800e60c:	ed93 6a06 	vldr	s12, [r3, #24]
 800e610:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800e614:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e618:	eeb0 7a46 	vmov.f32	s14, s12
 800e61c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800e620:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e624:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800e628:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800e62c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800e630:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e634:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800e638:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e63a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e640:	2410      	movs	r4, #16
 800e642:	f1c5 0501 	rsb	r5, r5, #1
 800e646:	fb9e fef4 	sdiv	lr, lr, r4
 800e64a:	f015 050f 	ands.w	r5, r5, #15
 800e64e:	bf18      	it	ne
 800e650:	2501      	movne	r5, #1
 800e652:	ebae 0e05 	sub.w	lr, lr, r5
 800e656:	e753      	b.n	800e500 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800e658:	f04f 0910 	mov.w	r9, #16
 800e65c:	f1c5 0501 	rsb	r5, r5, #1
 800e660:	fb94 f4f9 	sdiv	r4, r4, r9
 800e664:	f015 050f 	ands.w	r5, r5, #15
 800e668:	bf18      	it	ne
 800e66a:	2501      	movne	r5, #1
 800e66c:	1b64      	subs	r4, r4, r5
 800e66e:	e755      	b.n	800e51c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800e670:	4264      	negs	r4, r4
 800e672:	fb94 fef6 	sdiv	lr, r4, r6
 800e676:	f1ce 0800 	rsb	r8, lr, #0
 800e67a:	fb06 441e 	mls	r4, r6, lr, r4
 800e67e:	f8c0 8000 	str.w	r8, [r0]
 800e682:	6104      	str	r4, [r0, #16]
 800e684:	2c00      	cmp	r4, #0
 800e686:	f43f af6e 	beq.w	800e566 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800e68a:	ea6f 0e0e 	mvn.w	lr, lr
 800e68e:	1b34      	subs	r4, r6, r4
 800e690:	f8c0 e000 	str.w	lr, [r0]
 800e694:	e766      	b.n	800e564 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800e696:	426d      	negs	r5, r5
 800e698:	fb95 f4f6 	sdiv	r4, r5, r6
 800e69c:	f1c4 0e00 	rsb	lr, r4, #0
 800e6a0:	fb06 5514 	mls	r5, r6, r4, r5
 800e6a4:	f8c0 e004 	str.w	lr, [r0, #4]
 800e6a8:	6085      	str	r5, [r0, #8]
 800e6aa:	2d00      	cmp	r5, #0
 800e6ac:	f43f af64 	beq.w	800e578 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800e6b0:	43e4      	mvns	r4, r4
 800e6b2:	1b75      	subs	r5, r6, r5
 800e6b4:	6044      	str	r4, [r0, #4]
 800e6b6:	e75e      	b.n	800e576 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800e6b8:	3d800000 	.word	0x3d800000

0800e6bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800e6bc:	4b01      	ldr	r3, [pc, #4]	; (800e6c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800e6be:	6018      	str	r0, [r3, #0]
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	24006af0 	.word	0x24006af0

0800e6c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800e6ca:	881a      	ldrh	r2, [r3, #0]
 800e6cc:	4282      	cmp	r2, r0
 800e6ce:	d807      	bhi.n	800e6e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800e6d0:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800e6d2:	881b      	ldrh	r3, [r3, #0]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	4298      	cmp	r0, r3
 800e6d8:	bfac      	ite	ge
 800e6da:	2000      	movge	r0, #0
 800e6dc:	2001      	movlt	r0, #1
 800e6de:	4770      	bx	lr
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	4770      	bx	lr
 800e6e4:	24006b10 	.word	0x24006b10
 800e6e8:	24006b14 	.word	0x24006b14

0800e6ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800e6ec:	b508      	push	{r3, lr}
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	f7ff ffea 	bl	800e6c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800e6f4:	b118      	cbz	r0, 800e6fe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800e6f6:	4b02      	ldr	r3, [pc, #8]	; (800e700 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800e6fe:	bd08      	pop	{r3, pc}
 800e700:	24006af4 	.word	0x24006af4

0800e704 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 800e704:	b538      	push	{r3, r4, r5, lr}
 800e706:	4604      	mov	r4, r0
 800e708:	f7ff ffde 	bl	800e6c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800e70c:	b188      	cbz	r0, 800e732 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 800e70e:	4b09      	ldr	r3, [pc, #36]	; (800e734 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 800e710:	881a      	ldrh	r2, [r3, #0]
 800e712:	4b09      	ldr	r3, [pc, #36]	; (800e738 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 800e714:	1aa4      	subs	r4, r4, r2
 800e716:	220e      	movs	r2, #14
 800e718:	681d      	ldr	r5, [r3, #0]
 800e71a:	4362      	muls	r2, r4
 800e71c:	18ac      	adds	r4, r5, r2
 800e71e:	7b23      	ldrb	r3, [r4, #12]
 800e720:	f013 0320 	ands.w	r3, r3, #32
 800e724:	bf17      	itett	ne
 800e726:	680b      	ldrne	r3, [r1, #0]
 800e728:	4618      	moveq	r0, r3
 800e72a:	50ab      	strne	r3, [r5, r2]
 800e72c:	684b      	ldrne	r3, [r1, #4]
 800e72e:	bf18      	it	ne
 800e730:	6063      	strne	r3, [r4, #4]
 800e732:	bd38      	pop	{r3, r4, r5, pc}
 800e734:	24006b10 	.word	0x24006b10
 800e738:	24006af8 	.word	0x24006af8

0800e73c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 800e73c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e740:	4606      	mov	r6, r0
 800e742:	460c      	mov	r4, r1
 800e744:	f7ff ffc0 	bl	800e6c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800e748:	b918      	cbnz	r0, 800e752 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 800e74a:	2000      	movs	r0, #0
 800e74c:	b002      	add	sp, #8
 800e74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e752:	4608      	mov	r0, r1
 800e754:	f7fb fa8f 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e758:	2800      	cmp	r0, #0
 800e75a:	d1f6      	bne.n	800e74a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800e75c:	4b3f      	ldr	r3, [pc, #252]	; (800e85c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 800e75e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e860 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 800e762:	881d      	ldrh	r5, [r3, #0]
 800e764:	f8d9 a000 	ldr.w	sl, [r9]
 800e768:	46c8      	mov	r8, r9
 800e76a:	1b73      	subs	r3, r6, r5
 800e76c:	250e      	movs	r5, #14
 800e76e:	435d      	muls	r5, r3
 800e770:	eb0a 0705 	add.w	r7, sl, r5
 800e774:	7b3b      	ldrb	r3, [r7, #12]
 800e776:	f013 0f20 	tst.w	r3, #32
 800e77a:	d0e6      	beq.n	800e74a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800e77c:	4621      	mov	r1, r4
 800e77e:	4638      	mov	r0, r7
 800e780:	f7fd fb90 	bl	800bea4 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e784:	2800      	cmp	r0, #0
 800e786:	d1e1      	bne.n	800e74c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800e788:	4639      	mov	r1, r7
 800e78a:	4620      	mov	r0, r4
 800e78c:	f7fd fb8a 	bl	800bea4 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e790:	b108      	cbz	r0, 800e796 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 800e792:	4621      	mov	r1, r4
 800e794:	e020      	b.n	800e7d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 800e796:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e79a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d11e      	bne.n	800e7e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800e7a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e7a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d118      	bne.n	800e7e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800e7ae:	6820      	ldr	r0, [r4, #0]
 800e7b0:	466b      	mov	r3, sp
 800e7b2:	6861      	ldr	r1, [r4, #4]
 800e7b4:	c303      	stmia	r3!, {r0, r1}
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	4668      	mov	r0, sp
 800e7ba:	f7fd fb99 	bl	800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e7be:	f8d9 3000 	ldr.w	r3, [r9]
 800e7c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e7c6:	442b      	add	r3, r5
 800e7c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	dc04      	bgt.n	800e7e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800e7d6:	4669      	mov	r1, sp
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7ff ff93 	bl	800e704 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 800e7de:	e7b5      	b.n	800e74c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800e7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e7e4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e7e8:	442b      	add	r3, r5
 800e7ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e7ee:	4291      	cmp	r1, r2
 800e7f0:	d119      	bne.n	800e826 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800e7f2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e7f6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e7fa:	4291      	cmp	r1, r2
 800e7fc:	d113      	bne.n	800e826 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800e7fe:	6820      	ldr	r0, [r4, #0]
 800e800:	466a      	mov	r2, sp
 800e802:	6861      	ldr	r1, [r4, #4]
 800e804:	c203      	stmia	r2!, {r0, r1}
 800e806:	4619      	mov	r1, r3
 800e808:	4668      	mov	r0, sp
 800e80a:	f7fd fb71 	bl	800bef0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e80e:	f8d8 3000 	ldr.w	r3, [r8]
 800e812:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e816:	442b      	add	r3, r5
 800e818:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e81c:	4413      	add	r3, r2
 800e81e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800e822:	4293      	cmp	r3, r2
 800e824:	ddd7      	ble.n	800e7d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 800e826:	4620      	mov	r0, r4
 800e828:	f7fb fa25 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e82c:	b990      	cbnz	r0, 800e854 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 800e82e:	88a7      	ldrh	r7, [r4, #4]
 800e830:	88e3      	ldrh	r3, [r4, #6]
 800e832:	fb17 f703 	smulbb	r7, r7, r3
 800e836:	f8d8 3000 	ldr.w	r3, [r8]
 800e83a:	441d      	add	r5, r3
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7fb fa1a 	bl	8009c76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e842:	b948      	cbnz	r0, 800e858 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 800e844:	88ab      	ldrh	r3, [r5, #4]
 800e846:	88ea      	ldrh	r2, [r5, #6]
 800e848:	fb13 f302 	smulbb	r3, r3, r2
 800e84c:	42bb      	cmp	r3, r7
 800e84e:	f6bf af7c 	bge.w	800e74a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800e852:	e79e      	b.n	800e792 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 800e854:	2700      	movs	r7, #0
 800e856:	e7ee      	b.n	800e836 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 800e858:	2300      	movs	r3, #0
 800e85a:	e7f7      	b.n	800e84c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 800e85c:	24006b10 	.word	0x24006b10
 800e860:	24006af8 	.word	0x24006af8

0800e864 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800e864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e866:	4c24      	ldr	r4, [pc, #144]	; (800e8f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d042      	beq.n	800e8f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800e86e:	4a23      	ldr	r2, [pc, #140]	; (800e8fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800e870:	4d23      	ldr	r5, [pc, #140]	; (800e900 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800e872:	8811      	ldrh	r1, [r2, #0]
 800e874:	f8b5 c000 	ldrh.w	ip, [r5]
 800e878:	4822      	ldr	r0, [pc, #136]	; (800e904 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800e87a:	4461      	add	r1, ip
 800e87c:	1c4a      	adds	r2, r1, #1
 800e87e:	008f      	lsls	r7, r1, #2
 800e880:	f022 0201 	bic.w	r2, r2, #1
 800e884:	19de      	adds	r6, r3, r7
 800e886:	0412      	lsls	r2, r2, #16
 800e888:	6006      	str	r6, [r0, #0]
 800e88a:	4e1f      	ldr	r6, [pc, #124]	; (800e908 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800e88c:	0c12      	lsrs	r2, r2, #16
 800e88e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800e892:	19da      	adds	r2, r3, r7
 800e894:	6032      	str	r2, [r6, #0]
 800e896:	220e      	movs	r2, #14
 800e898:	fb02 f20c 	mul.w	r2, r2, ip
 800e89c:	3203      	adds	r2, #3
 800e89e:	f022 0203 	bic.w	r2, r2, #3
 800e8a2:	443a      	add	r2, r7
 800e8a4:	4f19      	ldr	r7, [pc, #100]	; (800e90c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800e8a6:	4413      	add	r3, r2
 800e8a8:	603b      	str	r3, [r7, #0]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	4f18      	ldr	r7, [pc, #96]	; (800e910 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800e8ae:	469c      	mov	ip, r3
 800e8b0:	803b      	strh	r3, [r7, #0]
 800e8b2:	4f18      	ldr	r7, [pc, #96]	; (800e914 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800e8b4:	683f      	ldr	r7, [r7, #0]
 800e8b6:	1aba      	subs	r2, r7, r2
 800e8b8:	4f17      	ldr	r7, [pc, #92]	; (800e918 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800e8ba:	603a      	str	r2, [r7, #0]
 800e8bc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800e8c0:	4a16      	ldr	r2, [pc, #88]	; (800e91c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800e8c2:	8013      	strh	r3, [r2, #0]
 800e8c4:	428b      	cmp	r3, r1
 800e8c6:	d10d      	bne.n	800e8e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800e8c8:	882d      	ldrh	r5, [r5, #0]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6830      	ldr	r0, [r6, #0]
 800e8ce:	240e      	movs	r4, #14
 800e8d0:	429d      	cmp	r5, r3
 800e8d2:	d90f      	bls.n	800e8f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800e8d4:	fb04 0203 	mla	r2, r4, r3, r0
 800e8d8:	3301      	adds	r3, #1
 800e8da:	7b11      	ldrb	r1, [r2, #12]
 800e8dc:	f36f 1145 	bfc	r1, #5, #1
 800e8e0:	7311      	strb	r1, [r2, #12]
 800e8e2:	e7f5      	b.n	800e8d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800e8ea:	6802      	ldr	r2, [r0, #0]
 800e8ec:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	e7e7      	b.n	800e8c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800e8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	24006af4 	.word	0x24006af4
 800e8fc:	24006b10 	.word	0x24006b10
 800e900:	24006b14 	.word	0x24006b14
 800e904:	24006b08 	.word	0x24006b08
 800e908:	24006af8 	.word	0x24006af8
 800e90c:	24006b00 	.word	0x24006b00
 800e910:	24006b12 	.word	0x24006b12
 800e914:	24006afc 	.word	0x24006afc
 800e918:	24006b0c 	.word	0x24006b0c
 800e91c:	24006b04 	.word	0x24006b04

0800e920 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800e920:	4b06      	ldr	r3, [pc, #24]	; (800e93c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	b943      	cbnz	r3, 800e938 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800e926:	b139      	cbz	r1, 800e938 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800e928:	4b05      	ldr	r3, [pc, #20]	; (800e940 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800e92a:	801a      	strh	r2, [r3, #0]
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800e92e:	6019      	str	r1, [r3, #0]
 800e930:	4b05      	ldr	r3, [pc, #20]	; (800e948 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800e932:	6018      	str	r0, [r3, #0]
 800e934:	f7ff bf96 	b.w	800e864 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	24006b00 	.word	0x24006b00
 800e940:	24006b14 	.word	0x24006b14
 800e944:	24006afc 	.word	0x24006afc
 800e948:	24006af4 	.word	0x24006af4

0800e94c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800e94c:	b470      	push	{r4, r5, r6}
 800e94e:	4c07      	ldr	r4, [pc, #28]	; (800e96c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800e950:	4605      	mov	r5, r0
 800e952:	4610      	mov	r0, r2
 800e954:	9a03      	ldr	r2, [sp, #12]
 800e956:	6826      	ldr	r6, [r4, #0]
 800e958:	b936      	cbnz	r6, 800e968 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800e95a:	6025      	str	r5, [r4, #0]
 800e95c:	4c04      	ldr	r4, [pc, #16]	; (800e970 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800e95e:	8021      	strh	r1, [r4, #0]
 800e960:	4619      	mov	r1, r3
 800e962:	bc70      	pop	{r4, r5, r6}
 800e964:	f7ff bfdc 	b.w	800e920 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800e968:	bc70      	pop	{r4, r5, r6}
 800e96a:	4770      	bx	lr
 800e96c:	24006b18 	.word	0x24006b18
 800e970:	24006b10 	.word	0x24006b10

0800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800e974:	4a12      	ldr	r2, [pc, #72]	; (800e9c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800e976:	8803      	ldrh	r3, [r0, #0]
 800e978:	8812      	ldrh	r2, [r2, #0]
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d207      	bcs.n	800e98e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800e97e:	4a11      	ldr	r2, [pc, #68]	; (800e9c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800e980:	2114      	movs	r1, #20
 800e982:	6812      	ldr	r2, [r2, #0]
 800e984:	fb01 2303 	mla	r3, r1, r3, r2
 800e988:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800e98c:	4770      	bx	lr
 800e98e:	490e      	ldr	r1, [pc, #56]	; (800e9c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800e990:	8809      	ldrh	r1, [r1, #0]
 800e992:	4411      	add	r1, r2
 800e994:	428b      	cmp	r3, r1
 800e996:	da04      	bge.n	800e9a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800e998:	1a9b      	subs	r3, r3, r2
 800e99a:	4a0c      	ldr	r2, [pc, #48]	; (800e9cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800e99c:	210e      	movs	r1, #14
 800e99e:	6812      	ldr	r2, [r2, #0]
 800e9a0:	e7f0      	b.n	800e984 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800e9a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d108      	bne.n	800e9bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800e9aa:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	b91b      	cbnz	r3, 800e9b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800e9b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e9b6:	4770      	bx	lr
 800e9b8:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800e9ba:	e7fa      	b.n	800e9b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800e9bc:	2000      	movs	r0, #0
 800e9be:	4770      	bx	lr
 800e9c0:	24006b10 	.word	0x24006b10
 800e9c4:	24006b18 	.word	0x24006b18
 800e9c8:	24006b14 	.word	0x24006b14
 800e9cc:	24006af8 	.word	0x24006af8
 800e9d0:	24006a88 	.word	0x24006a88
 800e9d4:	24006a8a 	.word	0x24006a8a
 800e9d8:	24006a8c 	.word	0x24006a8c

0800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800e9dc:	4a12      	ldr	r2, [pc, #72]	; (800ea28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800e9de:	8803      	ldrh	r3, [r0, #0]
 800e9e0:	8812      	ldrh	r2, [r2, #0]
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d207      	bcs.n	800e9f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800e9e6:	4a11      	ldr	r2, [pc, #68]	; (800ea2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800e9e8:	2114      	movs	r1, #20
 800e9ea:	6812      	ldr	r2, [r2, #0]
 800e9ec:	fb01 2303 	mla	r3, r1, r3, r2
 800e9f0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800e9f4:	4770      	bx	lr
 800e9f6:	490e      	ldr	r1, [pc, #56]	; (800ea30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800e9f8:	8809      	ldrh	r1, [r1, #0]
 800e9fa:	4411      	add	r1, r2
 800e9fc:	428b      	cmp	r3, r1
 800e9fe:	da04      	bge.n	800ea0a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800ea00:	1a9b      	subs	r3, r3, r2
 800ea02:	4a0c      	ldr	r2, [pc, #48]	; (800ea34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800ea04:	210e      	movs	r1, #14
 800ea06:	6812      	ldr	r2, [r2, #0]
 800ea08:	e7f0      	b.n	800e9ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800ea0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d108      	bne.n	800ea24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800ea12:	4b09      	ldr	r3, [pc, #36]	; (800ea38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	b91b      	cbnz	r3, 800ea20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800ea18:	4b08      	ldr	r3, [pc, #32]	; (800ea3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800ea1a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800ea1e:	4770      	bx	lr
 800ea20:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800ea22:	e7fa      	b.n	800ea1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800ea24:	2000      	movs	r0, #0
 800ea26:	4770      	bx	lr
 800ea28:	24006b10 	.word	0x24006b10
 800ea2c:	24006b18 	.word	0x24006b18
 800ea30:	24006b14 	.word	0x24006b14
 800ea34:	24006af8 	.word	0x24006af8
 800ea38:	24006a88 	.word	0x24006a88
 800ea3c:	24006a8c 	.word	0x24006a8c
 800ea40:	24006a8a 	.word	0x24006a8a

0800ea44 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800ea44:	4a1f      	ldr	r2, [pc, #124]	; (800eac4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 800ea46:	b510      	push	{r4, lr}
 800ea48:	880b      	ldrh	r3, [r1, #0]
 800ea4a:	8812      	ldrh	r2, [r2, #0]
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d213      	bcs.n	800ea78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800ea50:	4a1d      	ldr	r2, [pc, #116]	; (800eac8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 800ea52:	2114      	movs	r1, #20
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	fb01 2303 	mla	r3, r1, r3, r2
 800ea5a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800ea5e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800ea62:	8a1a      	ldrh	r2, [r3, #16]
 800ea64:	8a5b      	ldrh	r3, [r3, #18]
 800ea66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800ea6a:	8004      	strh	r4, [r0, #0]
 800ea6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea70:	8041      	strh	r1, [r0, #2]
 800ea72:	8082      	strh	r2, [r0, #4]
 800ea74:	80c3      	strh	r3, [r0, #6]
 800ea76:	e00e      	b.n	800ea96 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800ea78:	4914      	ldr	r1, [pc, #80]	; (800eacc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 800ea7a:	8809      	ldrh	r1, [r1, #0]
 800ea7c:	4411      	add	r1, r2
 800ea7e:	428b      	cmp	r3, r1
 800ea80:	da0a      	bge.n	800ea98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 800ea82:	1a9b      	subs	r3, r3, r2
 800ea84:	4a12      	ldr	r2, [pc, #72]	; (800ead0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800ea86:	210e      	movs	r1, #14
 800ea88:	6812      	ldr	r2, [r2, #0]
 800ea8a:	fb01 2303 	mla	r3, r1, r3, r2
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	6002      	str	r2, [r0, #0]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	6042      	str	r2, [r0, #4]
 800ea96:	bd10      	pop	{r4, pc}
 800ea98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d10b      	bne.n	800eab8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 800eaa0:	4b0c      	ldr	r3, [pc, #48]	; (800ead4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800eaa2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800eaa6:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800eaa8:	8081      	strh	r1, [r0, #4]
 800eaaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eaae:	2300      	movs	r3, #0
 800eab0:	80c2      	strh	r2, [r0, #6]
 800eab2:	8003      	strh	r3, [r0, #0]
 800eab4:	8043      	strh	r3, [r0, #2]
 800eab6:	e7ee      	b.n	800ea96 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800eab8:	2300      	movs	r3, #0
 800eaba:	8003      	strh	r3, [r0, #0]
 800eabc:	8043      	strh	r3, [r0, #2]
 800eabe:	8083      	strh	r3, [r0, #4]
 800eac0:	e7d8      	b.n	800ea74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800eac2:	bf00      	nop
 800eac4:	24006b10 	.word	0x24006b10
 800eac8:	24006b18 	.word	0x24006b18
 800eacc:	24006b14 	.word	0x24006b14
 800ead0:	24006af8 	.word	0x24006af8
 800ead4:	24006a84 	.word	0x24006a84
 800ead8:	24006a86 	.word	0x24006a86

0800eadc <_ZNK8touchgfx6Bitmap7getDataEv>:
 800eadc:	4a12      	ldr	r2, [pc, #72]	; (800eb28 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800eade:	8803      	ldrh	r3, [r0, #0]
 800eae0:	8811      	ldrh	r1, [r2, #0]
 800eae2:	428b      	cmp	r3, r1
 800eae4:	d20b      	bcs.n	800eafe <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800eae6:	4a11      	ldr	r2, [pc, #68]	; (800eb2c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800eae8:	6812      	ldr	r2, [r2, #0]
 800eaea:	b112      	cbz	r2, 800eaf2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800eaec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eaf0:	b9c0      	cbnz	r0, 800eb24 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800eaf2:	4a0f      	ldr	r2, [pc, #60]	; (800eb30 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800eaf4:	6811      	ldr	r1, [r2, #0]
 800eaf6:	2214      	movs	r2, #20
 800eaf8:	4353      	muls	r3, r2
 800eafa:	58c8      	ldr	r0, [r1, r3]
 800eafc:	4770      	bx	lr
 800eafe:	4a0d      	ldr	r2, [pc, #52]	; (800eb34 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800eb00:	8812      	ldrh	r2, [r2, #0]
 800eb02:	440a      	add	r2, r1
 800eb04:	4293      	cmp	r3, r2
 800eb06:	da04      	bge.n	800eb12 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800eb08:	4a08      	ldr	r2, [pc, #32]	; (800eb2c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800eb0a:	6812      	ldr	r2, [r2, #0]
 800eb0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eb10:	4770      	bx	lr
 800eb12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d103      	bne.n	800eb22 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800eb1a:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800eb20:	4770      	bx	lr
 800eb22:	2000      	movs	r0, #0
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	24006b10 	.word	0x24006b10
 800eb2c:	24006af4 	.word	0x24006af4
 800eb30:	24006b18 	.word	0x24006b18
 800eb34:	24006b14 	.word	0x24006b14
 800eb38:	24006a90 	.word	0x24006a90

0800eb3c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800eb3c:	4b24      	ldr	r3, [pc, #144]	; (800ebd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800eb3e:	8802      	ldrh	r2, [r0, #0]
 800eb40:	8818      	ldrh	r0, [r3, #0]
 800eb42:	4282      	cmp	r2, r0
 800eb44:	d221      	bcs.n	800eb8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800eb46:	4b23      	ldr	r3, [pc, #140]	; (800ebd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800eb48:	6819      	ldr	r1, [r3, #0]
 800eb4a:	2314      	movs	r3, #20
 800eb4c:	fb03 1302 	mla	r3, r3, r2, r1
 800eb50:	6858      	ldr	r0, [r3, #4]
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d03a      	beq.n	800ebcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800eb56:	4920      	ldr	r1, [pc, #128]	; (800ebd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800eb58:	6809      	ldr	r1, [r1, #0]
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	d036      	beq.n	800ebcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800eb5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800eb62:	2900      	cmp	r1, #0
 800eb64:	d032      	beq.n	800ebcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800eb66:	891a      	ldrh	r2, [r3, #8]
 800eb68:	8958      	ldrh	r0, [r3, #10]
 800eb6a:	4350      	muls	r0, r2
 800eb6c:	7c5a      	ldrb	r2, [r3, #17]
 800eb6e:	7cdb      	ldrb	r3, [r3, #19]
 800eb70:	0952      	lsrs	r2, r2, #5
 800eb72:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800eb76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800eb7a:	2b0b      	cmp	r3, #11
 800eb7c:	bf18      	it	ne
 800eb7e:	0040      	lslne	r0, r0, #1
 800eb80:	3003      	adds	r0, #3
 800eb82:	f020 0003 	bic.w	r0, r0, #3
 800eb86:	4408      	add	r0, r1
 800eb88:	4770      	bx	lr
 800eb8a:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800eb8c:	881b      	ldrh	r3, [r3, #0]
 800eb8e:	4403      	add	r3, r0
 800eb90:	429a      	cmp	r2, r3
 800eb92:	da1a      	bge.n	800ebca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800eb94:	4b12      	ldr	r3, [pc, #72]	; (800ebe0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800eb96:	1a10      	subs	r0, r2, r0
 800eb98:	210e      	movs	r1, #14
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	fb01 3000 	mla	r0, r1, r0, r3
 800eba0:	7b03      	ldrb	r3, [r0, #12]
 800eba2:	f003 031f 	and.w	r3, r3, #31
 800eba6:	2b0b      	cmp	r3, #11
 800eba8:	d10b      	bne.n	800ebc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800ebaa:	8903      	ldrh	r3, [r0, #8]
 800ebac:	8940      	ldrh	r0, [r0, #10]
 800ebae:	4358      	muls	r0, r3
 800ebb0:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800ebb2:	3003      	adds	r0, #3
 800ebb4:	6819      	ldr	r1, [r3, #0]
 800ebb6:	f020 0303 	bic.w	r3, r0, #3
 800ebba:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800ebbe:	4418      	add	r0, r3
 800ebc0:	4770      	bx	lr
 800ebc2:	2b0d      	cmp	r3, #13
 800ebc4:	d101      	bne.n	800ebca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800ebc6:	300d      	adds	r0, #13
 800ebc8:	4770      	bx	lr
 800ebca:	2000      	movs	r0, #0
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	24006b10 	.word	0x24006b10
 800ebd4:	24006b18 	.word	0x24006b18
 800ebd8:	24006af4 	.word	0x24006af4
 800ebdc:	24006b14 	.word	0x24006b14
 800ebe0:	24006af8 	.word	0x24006af8

0800ebe4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800ebe4:	4a17      	ldr	r2, [pc, #92]	; (800ec44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	8803      	ldrh	r3, [r0, #0]
 800ebea:	8812      	ldrh	r2, [r2, #0]
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d20c      	bcs.n	800ec0a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800ebf0:	4a15      	ldr	r2, [pc, #84]	; (800ec48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800ebf2:	2114      	movs	r1, #20
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	fb01 2303 	mla	r3, r1, r3, r2
 800ebfa:	7c58      	ldrb	r0, [r3, #17]
 800ebfc:	0942      	lsrs	r2, r0, #5
 800ebfe:	7cd8      	ldrb	r0, [r3, #19]
 800ec00:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800ec04:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800ec08:	bd10      	pop	{r4, pc}
 800ec0a:	4910      	ldr	r1, [pc, #64]	; (800ec4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800ec0c:	8809      	ldrh	r1, [r1, #0]
 800ec0e:	4411      	add	r1, r2
 800ec10:	428b      	cmp	r3, r1
 800ec12:	da09      	bge.n	800ec28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800ec14:	1a9b      	subs	r3, r3, r2
 800ec16:	4a0e      	ldr	r2, [pc, #56]	; (800ec50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800ec18:	210e      	movs	r1, #14
 800ec1a:	6812      	ldr	r2, [r2, #0]
 800ec1c:	fb01 2303 	mla	r3, r1, r3, r2
 800ec20:	7b18      	ldrb	r0, [r3, #12]
 800ec22:	f000 001f 	and.w	r0, r0, #31
 800ec26:	e7ef      	b.n	800ec08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800ec28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d106      	bne.n	800ec3e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800ec30:	f7fb faae 	bl	800a190 <_ZN8touchgfx3HAL3lcdEv>
 800ec34:	6803      	ldr	r3, [r0, #0]
 800ec36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	4718      	bx	r3
 800ec3e:	2000      	movs	r0, #0
 800ec40:	e7e2      	b.n	800ec08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800ec42:	bf00      	nop
 800ec44:	24006b10 	.word	0x24006b10
 800ec48:	24006b18 	.word	0x24006b18
 800ec4c:	24006b14 	.word	0x24006b14
 800ec50:	24006af8 	.word	0x24006af8

0800ec54 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 800ec54:	2018      	movs	r0, #24
 800ec56:	4770      	bx	lr

0800ec58 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 800ec58:	2001      	movs	r0, #1
 800ec5a:	4770      	bx	lr

0800ec5c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 800ec5c:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 800ec5e:	8818      	ldrh	r0, [r3, #0]
 800ec60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ec64:	b280      	uxth	r0, r0
 800ec66:	4770      	bx	lr
 800ec68:	24006a8a 	.word	0x24006a8a

0800ec6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800ec6c:	2bff      	cmp	r3, #255	; 0xff
 800ec6e:	d040      	beq.n	800ecf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800ec70:	2a2c      	cmp	r2, #44	; 0x2c
 800ec72:	d02a      	beq.n	800ecca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 800ec74:	d80f      	bhi.n	800ec96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 800ec76:	2a08      	cmp	r2, #8
 800ec78:	d037      	beq.n	800ecea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ec7a:	d805      	bhi.n	800ec88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 800ec7c:	2a04      	cmp	r2, #4
 800ec7e:	d032      	beq.n	800ece6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 800ec80:	2a05      	cmp	r2, #5
 800ec82:	d02e      	beq.n	800ece2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800ec84:	2000      	movs	r0, #0
 800ec86:	4770      	bx	lr
 800ec88:	2a0a      	cmp	r2, #10
 800ec8a:	d02e      	beq.n	800ecea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ec8c:	d301      	bcc.n	800ec92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 800ec8e:	2a0b      	cmp	r2, #11
 800ec90:	d1f8      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ec92:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800ec94:	4770      	bx	lr
 800ec96:	2a30      	cmp	r2, #48	; 0x30
 800ec98:	d029      	beq.n	800ecee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800ec9a:	d808      	bhi.n	800ecae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 800ec9c:	2a2e      	cmp	r2, #46	; 0x2e
 800ec9e:	684b      	ldr	r3, [r1, #4]
 800eca0:	d01a      	beq.n	800ecd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 800eca2:	d90b      	bls.n	800ecbc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1ec      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ecaa:	6a00      	ldr	r0, [r0, #32]
 800ecac:	4770      	bx	lr
 800ecae:	2a32      	cmp	r2, #50	; 0x32
 800ecb0:	d01d      	beq.n	800ecee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800ecb2:	d301      	bcc.n	800ecb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 800ecb4:	2a33      	cmp	r2, #51	; 0x33
 800ecb6:	d1e5      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ecb8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800ecba:	4770      	bx	lr
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0f3      	beq.n	800ecaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d1de      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ecc6:	6900      	ldr	r0, [r0, #16]
 800ecc8:	4770      	bx	lr
 800ecca:	684b      	ldr	r3, [r1, #4]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	b133      	cbz	r3, 800ecde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d1d7      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ecd4:	6880      	ldr	r0, [r0, #8]
 800ecd6:	4770      	bx	lr
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1d2      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ecde:	6980      	ldr	r0, [r0, #24]
 800ece0:	4770      	bx	lr
 800ece2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ece4:	4770      	bx	lr
 800ece6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ece8:	4770      	bx	lr
 800ecea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ecec:	4770      	bx	lr
 800ecee:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800ecf0:	4770      	bx	lr
 800ecf2:	2a2c      	cmp	r2, #44	; 0x2c
 800ecf4:	d02a      	beq.n	800ed4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 800ecf6:	d80f      	bhi.n	800ed18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 800ecf8:	2a08      	cmp	r2, #8
 800ecfa:	d035      	beq.n	800ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800ecfc:	d805      	bhi.n	800ed0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800ecfe:	2a04      	cmp	r2, #4
 800ed00:	d030      	beq.n	800ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 800ed02:	2a05      	cmp	r2, #5
 800ed04:	d1be      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed06:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ed08:	4770      	bx	lr
 800ed0a:	2a0a      	cmp	r2, #10
 800ed0c:	d02c      	beq.n	800ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800ed0e:	d301      	bcc.n	800ed14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 800ed10:	2a0b      	cmp	r2, #11
 800ed12:	d1b7      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed14:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800ed16:	4770      	bx	lr
 800ed18:	2a30      	cmp	r2, #48	; 0x30
 800ed1a:	d027      	beq.n	800ed6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800ed1c:	d808      	bhi.n	800ed30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 800ed1e:	2a2e      	cmp	r2, #46	; 0x2e
 800ed20:	684b      	ldr	r3, [r1, #4]
 800ed22:	d01a      	beq.n	800ed5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 800ed24:	d90b      	bls.n	800ed3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1ab      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ed2e:	4770      	bx	lr
 800ed30:	2a32      	cmp	r2, #50	; 0x32
 800ed32:	d01b      	beq.n	800ed6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800ed34:	d301      	bcc.n	800ed3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 800ed36:	2a33      	cmp	r2, #51	; 0x33
 800ed38:	d1a4      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed3a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ed3c:	4770      	bx	lr
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d0f3      	beq.n	800ed2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d19d      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed48:	6940      	ldr	r0, [r0, #20]
 800ed4a:	4770      	bx	lr
 800ed4c:	684b      	ldr	r3, [r1, #4]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	b133      	cbz	r3, 800ed60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d196      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed56:	68c0      	ldr	r0, [r0, #12]
 800ed58:	4770      	bx	lr
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d191      	bne.n	800ec84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800ed60:	69c0      	ldr	r0, [r0, #28]
 800ed62:	4770      	bx	lr
 800ed64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800ed66:	4770      	bx	lr
 800ed68:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ed6a:	4770      	bx	lr
 800ed6c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ed6e:	4770      	bx	lr

0800ed70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	b085      	sub	sp, #20
 800ed76:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ed78:	9203      	str	r2, [sp, #12]
 800ed7a:	6870      	ldr	r0, [r6, #4]
 800ed7c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800ed80:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800ed84:	9101      	str	r1, [sp, #4]
 800ed86:	fa1f f885 	uxth.w	r8, r5
 800ed8a:	43ed      	mvns	r5, r5
 800ed8c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800ed90:	b2ed      	uxtb	r5, r5
 800ed92:	fb00 2404 	mla	r4, r0, r4, r2
 800ed96:	6832      	ldr	r2, [r6, #0]
 800ed98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ed9c:	4414      	add	r4, r2
 800ed9e:	f8dc 2000 	ldr.w	r2, [ip]
 800eda2:	9202      	str	r2, [sp, #8]
 800eda4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800eda8:	f102 0e04 	add.w	lr, r2, #4
 800edac:	9a01      	ldr	r2, [sp, #4]
 800edae:	2a00      	cmp	r2, #0
 800edb0:	dc03      	bgt.n	800edba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 800edb2:	9a03      	ldr	r2, [sp, #12]
 800edb4:	2a00      	cmp	r2, #0
 800edb6:	f340 8116 	ble.w	800efe6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800edba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edbc:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 800edc0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800edc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800edc6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 800edca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800edce:	2b00      	cmp	r3, #0
 800edd0:	dd0e      	ble.n	800edf0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 800edd2:	1406      	asrs	r6, r0, #16
 800edd4:	d405      	bmi.n	800ede2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800edd6:	4556      	cmp	r6, sl
 800edd8:	da03      	bge.n	800ede2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800edda:	1416      	asrs	r6, r2, #16
 800eddc:	d401      	bmi.n	800ede2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800edde:	454e      	cmp	r6, r9
 800ede0:	db07      	blt.n	800edf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 800ede2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ede4:	3b01      	subs	r3, #1
 800ede6:	3403      	adds	r4, #3
 800ede8:	4430      	add	r0, r6
 800edea:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800edec:	4432      	add	r2, r6
 800edee:	e7ee      	b.n	800edce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 800edf0:	d063      	beq.n	800eeba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800edf2:	1e5e      	subs	r6, r3, #1
 800edf4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800edf6:	fb07 0706 	mla	r7, r7, r6, r0
 800edfa:	143f      	asrs	r7, r7, #16
 800edfc:	d454      	bmi.n	800eea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800edfe:	4557      	cmp	r7, sl
 800ee00:	da52      	bge.n	800eea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800ee02:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ee04:	fb07 2606 	mla	r6, r7, r6, r2
 800ee08:	1436      	asrs	r6, r6, #16
 800ee0a:	d44d      	bmi.n	800eea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800ee0c:	454e      	cmp	r6, r9
 800ee0e:	da4b      	bge.n	800eea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800ee10:	1ce6      	adds	r6, r4, #3
 800ee12:	4699      	mov	r9, r3
 800ee14:	f1b9 0f00 	cmp.w	r9, #0
 800ee18:	f106 0603 	add.w	r6, r6, #3
 800ee1c:	dd48      	ble.n	800eeb0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 800ee1e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 800ee22:	1417      	asrs	r7, r2, #16
 800ee24:	9902      	ldr	r1, [sp, #8]
 800ee26:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800ee2a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee2e:	fb0b 1707 	mla	r7, fp, r7, r1
 800ee32:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 800ee36:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ee38:	f817 700a 	ldrb.w	r7, [r7, sl]
 800ee3c:	fb1b fb05 	smulbb	fp, fp, r5
 800ee40:	4408      	add	r0, r1
 800ee42:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800ee48:	440a      	add	r2, r1
 800ee4a:	eb0e 0a07 	add.w	sl, lr, r7
 800ee4e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800ee52:	fb07 b708 	mla	r7, r7, r8, fp
 800ee56:	b2bf      	uxth	r7, r7
 800ee58:	f107 0b01 	add.w	fp, r7, #1
 800ee5c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800ee60:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 800ee64:	fb1b fb05 	smulbb	fp, fp, r5
 800ee68:	123f      	asrs	r7, r7, #8
 800ee6a:	f806 7c06 	strb.w	r7, [r6, #-6]
 800ee6e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800ee72:	fb07 b708 	mla	r7, r7, r8, fp
 800ee76:	b2bf      	uxth	r7, r7
 800ee78:	f107 0b01 	add.w	fp, r7, #1
 800ee7c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800ee80:	123f      	asrs	r7, r7, #8
 800ee82:	f806 7c05 	strb.w	r7, [r6, #-5]
 800ee86:	f89a 7002 	ldrb.w	r7, [sl, #2]
 800ee8a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 800ee8e:	fb1a fa05 	smulbb	sl, sl, r5
 800ee92:	fb07 a708 	mla	r7, r7, r8, sl
 800ee96:	b2bf      	uxth	r7, r7
 800ee98:	f107 0a01 	add.w	sl, r7, #1
 800ee9c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 800eea0:	123f      	asrs	r7, r7, #8
 800eea2:	f806 7c04 	strb.w	r7, [r6, #-4]
 800eea6:	e7b5      	b.n	800ee14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 800eea8:	2700      	movs	r7, #0
 800eeaa:	1bde      	subs	r6, r3, r7
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	dc42      	bgt.n	800ef36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 800eeb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eeb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eeb8:	441c      	add	r4, r3
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f340 8092 	ble.w	800efe6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800eec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eec8:	ee30 0a04 	vadd.f32	s0, s0, s8
 800eecc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800eed0:	eef0 6a62 	vmov.f32	s13, s5
 800eed4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eed8:	ee31 1a05 	vadd.f32	s2, s2, s10
 800eedc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800eee0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 800eee4:	eef0 6a43 	vmov.f32	s13, s6
 800eee8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800eeec:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800eef0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800eef4:	ee61 7a27 	vmul.f32	s15, s2, s15
 800eef8:	ee77 2a62 	vsub.f32	s5, s14, s5
 800eefc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800ef00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800ef04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800ef08:	ee12 2a90 	vmov	r2, s5
 800ef0c:	eef0 2a47 	vmov.f32	s5, s14
 800ef10:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef14:	ee13 2a10 	vmov	r2, s6
 800ef18:	9311      	str	r3, [sp, #68]	; 0x44
 800ef1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef1c:	eeb0 3a67 	vmov.f32	s6, s15
 800ef20:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef24:	9312      	str	r3, [sp, #72]	; 0x48
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	9a03      	ldr	r2, [sp, #12]
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef30:	bf08      	it	eq
 800ef32:	4613      	moveq	r3, r2
 800ef34:	e73a      	b.n	800edac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800ef36:	ea5f 4a20 	movs.w	sl, r0, asr #16
 800ef3a:	d44e      	bmi.n	800efda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ef3c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ef40:	4556      	cmp	r6, sl
 800ef42:	dd4a      	ble.n	800efda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ef44:	ea5f 4b22 	movs.w	fp, r2, asr #16
 800ef48:	d447      	bmi.n	800efda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ef4a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ef4e:	4559      	cmp	r1, fp
 800ef50:	dd43      	ble.n	800efda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ef52:	fa0f f986 	sxth.w	r9, r6
 800ef56:	9902      	ldr	r1, [sp, #8]
 800ef58:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800ef5c:	fb0b 1909 	mla	r9, fp, r9, r1
 800ef60:	f814 b006 	ldrb.w	fp, [r4, r6]
 800ef64:	f819 900a 	ldrb.w	r9, [r9, sl]
 800ef68:	fb1b fb05 	smulbb	fp, fp, r5
 800ef6c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800ef70:	eb0e 0a09 	add.w	sl, lr, r9
 800ef74:	f81e 9009 	ldrb.w	r9, [lr, r9]
 800ef78:	fb09 b908 	mla	r9, r9, r8, fp
 800ef7c:	fa1f f989 	uxth.w	r9, r9
 800ef80:	f109 0b01 	add.w	fp, r9, #1
 800ef84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800ef88:	ea4f 2929 	mov.w	r9, r9, asr #8
 800ef8c:	f804 9006 	strb.w	r9, [r4, r6]
 800ef90:	4426      	add	r6, r4
 800ef92:	f89a 9001 	ldrb.w	r9, [sl, #1]
 800ef96:	f896 b001 	ldrb.w	fp, [r6, #1]
 800ef9a:	fb1b fb05 	smulbb	fp, fp, r5
 800ef9e:	fb09 b908 	mla	r9, r9, r8, fp
 800efa2:	fa1f f989 	uxth.w	r9, r9
 800efa6:	f109 0b01 	add.w	fp, r9, #1
 800efaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800efae:	ea4f 2929 	mov.w	r9, r9, asr #8
 800efb2:	f886 9001 	strb.w	r9, [r6, #1]
 800efb6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800efba:	f896 a002 	ldrb.w	sl, [r6, #2]
 800efbe:	fb1a fa05 	smulbb	sl, sl, r5
 800efc2:	fb09 a908 	mla	r9, r9, r8, sl
 800efc6:	fa1f f989 	uxth.w	r9, r9
 800efca:	f109 0a01 	add.w	sl, r9, #1
 800efce:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 800efd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 800efd6:	f886 9002 	strb.w	r9, [r6, #2]
 800efda:	9911      	ldr	r1, [sp, #68]	; 0x44
 800efdc:	3701      	adds	r7, #1
 800efde:	4408      	add	r0, r1
 800efe0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800efe2:	440a      	add	r2, r1
 800efe4:	e761      	b.n	800eeaa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 800efe6:	b005      	add	sp, #20
 800efe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800efec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800eff2:	4693      	mov	fp, r2
 800eff4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800eff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800effa:	6868      	ldr	r0, [r5, #4]
 800effc:	6877      	ldr	r7, [r6, #4]
 800effe:	9100      	str	r1, [sp, #0]
 800f000:	3704      	adds	r7, #4
 800f002:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 800f006:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 800f00a:	fb00 2404 	mla	r4, r0, r4, r2
 800f00e:	682a      	ldr	r2, [r5, #0]
 800f010:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f014:	4414      	add	r4, r2
 800f016:	6832      	ldr	r2, [r6, #0]
 800f018:	9201      	str	r2, [sp, #4]
 800f01a:	9a00      	ldr	r2, [sp, #0]
 800f01c:	2a00      	cmp	r2, #0
 800f01e:	dc03      	bgt.n	800f028 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800f020:	f1bb 0f00 	cmp.w	fp, #0
 800f024:	f340 80bc 	ble.w	800f1a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 800f028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f02a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 800f02e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f034:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800f038:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	dd0c      	ble.n	800f05a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 800f040:	1405      	asrs	r5, r0, #16
 800f042:	d405      	bmi.n	800f050 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800f044:	4555      	cmp	r5, sl
 800f046:	da03      	bge.n	800f050 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800f048:	1415      	asrs	r5, r2, #16
 800f04a:	d401      	bmi.n	800f050 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800f04c:	454d      	cmp	r5, r9
 800f04e:	db05      	blt.n	800f05c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f050:	4440      	add	r0, r8
 800f052:	4472      	add	r2, lr
 800f054:	3b01      	subs	r3, #1
 800f056:	3403      	adds	r4, #3
 800f058:	e7f0      	b.n	800f03c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 800f05a:	d03f      	beq.n	800f0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 800f05c:	1e5d      	subs	r5, r3, #1
 800f05e:	fb08 0c05 	mla	ip, r8, r5, r0
 800f062:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 800f066:	d42e      	bmi.n	800f0c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 800f068:	45d4      	cmp	ip, sl
 800f06a:	da2c      	bge.n	800f0c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 800f06c:	fb0e 2505 	mla	r5, lr, r5, r2
 800f070:	142d      	asrs	r5, r5, #16
 800f072:	d428      	bmi.n	800f0c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 800f074:	454d      	cmp	r5, r9
 800f076:	da26      	bge.n	800f0c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 800f078:	1ce5      	adds	r5, r4, #3
 800f07a:	469c      	mov	ip, r3
 800f07c:	f1bc 0f00 	cmp.w	ip, #0
 800f080:	f105 0503 	add.w	r5, r5, #3
 800f084:	dd25      	ble.n	800f0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 800f086:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800f08a:	ea4f 4922 	mov.w	r9, r2, asr #16
 800f08e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f092:	4472      	add	r2, lr
 800f094:	468a      	mov	sl, r1
 800f096:	9901      	ldr	r1, [sp, #4]
 800f098:	fb0a 1909 	mla	r9, sl, r9, r1
 800f09c:	1401      	asrs	r1, r0, #16
 800f09e:	4440      	add	r0, r8
 800f0a0:	f819 9001 	ldrb.w	r9, [r9, r1]
 800f0a4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800f0a8:	eb07 0a09 	add.w	sl, r7, r9
 800f0ac:	f817 9009 	ldrb.w	r9, [r7, r9]
 800f0b0:	f805 9c06 	strb.w	r9, [r5, #-6]
 800f0b4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 800f0b8:	f805 9c05 	strb.w	r9, [r5, #-5]
 800f0bc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800f0c0:	f805 9c04 	strb.w	r9, [r5, #-4]
 800f0c4:	e7da      	b.n	800f07c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 800f0c6:	2500      	movs	r5, #0
 800f0c8:	eba3 0c05 	sub.w	ip, r3, r5
 800f0cc:	f1bc 0f00 	cmp.w	ip, #0
 800f0d0:	dc3b      	bgt.n	800f14a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 800f0d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f0d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f0da:	441c      	add	r4, r3
 800f0dc:	9b00      	ldr	r3, [sp, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	dd5e      	ble.n	800f1a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 800f0e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f0e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f0ec:	eeb0 6a62 	vmov.f32	s12, s5
 800f0f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800f0f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 800f0f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f0fc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 800f100:	eeb0 6a43 	vmov.f32	s12, s6
 800f104:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f108:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 800f10c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800f110:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f114:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f118:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800f11c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800f120:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800f124:	ee12 2a90 	vmov	r2, s5
 800f128:	eef0 2a47 	vmov.f32	s5, s14
 800f12c:	fb92 f8f3 	sdiv	r8, r2, r3
 800f130:	ee13 2a10 	vmov	r2, s6
 800f134:	eeb0 3a67 	vmov.f32	s6, s15
 800f138:	fb92 fef3 	sdiv	lr, r2, r3
 800f13c:	9b00      	ldr	r3, [sp, #0]
 800f13e:	3b01      	subs	r3, #1
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f144:	bf08      	it	eq
 800f146:	465b      	moveq	r3, fp
 800f148:	e767      	b.n	800f01a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 800f14a:	ea5f 4920 	movs.w	r9, r0, asr #16
 800f14e:	d423      	bmi.n	800f198 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 800f150:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800f154:	45cc      	cmp	ip, r9
 800f156:	dd1f      	ble.n	800f198 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 800f158:	ea5f 4a22 	movs.w	sl, r2, asr #16
 800f15c:	d41c      	bmi.n	800f198 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 800f15e:	68f1      	ldr	r1, [r6, #12]
 800f160:	4551      	cmp	r1, sl
 800f162:	dd19      	ble.n	800f198 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 800f164:	fa0f fc8c 	sxth.w	ip, ip
 800f168:	9901      	ldr	r1, [sp, #4]
 800f16a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 800f16e:	f81c c009 	ldrb.w	ip, [ip, r9]
 800f172:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800f176:	f817 a00c 	ldrb.w	sl, [r7, ip]
 800f17a:	eb07 090c 	add.w	r9, r7, ip
 800f17e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800f182:	f804 a00c 	strb.w	sl, [r4, ip]
 800f186:	44a4      	add	ip, r4
 800f188:	f899 a001 	ldrb.w	sl, [r9, #1]
 800f18c:	f88c a001 	strb.w	sl, [ip, #1]
 800f190:	f899 9002 	ldrb.w	r9, [r9, #2]
 800f194:	f88c 9002 	strb.w	r9, [ip, #2]
 800f198:	4440      	add	r0, r8
 800f19a:	4472      	add	r2, lr
 800f19c:	3501      	adds	r5, #1
 800f19e:	e793      	b.n	800f0c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 800f1a0:	b003      	add	sp, #12
 800f1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f1a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f1b2:	9202      	str	r2, [sp, #8]
 800f1b4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 800f1b8:	6860      	ldr	r0, [r4, #4]
 800f1ba:	9203      	str	r2, [sp, #12]
 800f1bc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800f1c0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800f1c4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 800f1c8:	fb00 2505 	mla	r5, r0, r5, r2
 800f1cc:	6822      	ldr	r2, [r4, #0]
 800f1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1d2:	4415      	add	r5, r2
 800f1d4:	f8dc 2000 	ldr.w	r2, [ip]
 800f1d8:	9200      	str	r2, [sp, #0]
 800f1da:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800f1de:	3204      	adds	r2, #4
 800f1e0:	9201      	str	r2, [sp, #4]
 800f1e2:	2900      	cmp	r1, #0
 800f1e4:	dc03      	bgt.n	800f1ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 800f1e6:	9a02      	ldr	r2, [sp, #8]
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	f340 8127 	ble.w	800f43c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 800f1ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1f0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800f1f4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 800f1f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1fa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 800f1fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f202:	2b00      	cmp	r3, #0
 800f204:	dd0d      	ble.n	800f222 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 800f206:	1422      	asrs	r2, r4, #16
 800f208:	d405      	bmi.n	800f216 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f20a:	4542      	cmp	r2, r8
 800f20c:	da03      	bge.n	800f216 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f20e:	1402      	asrs	r2, r0, #16
 800f210:	d401      	bmi.n	800f216 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f212:	42ba      	cmp	r2, r7
 800f214:	db06      	blt.n	800f224 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800f216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f218:	4474      	add	r4, lr
 800f21a:	3b01      	subs	r3, #1
 800f21c:	3503      	adds	r5, #3
 800f21e:	4410      	add	r0, r2
 800f220:	e7ef      	b.n	800f202 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800f222:	d075      	beq.n	800f310 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 800f224:	1e5a      	subs	r2, r3, #1
 800f226:	fb0e 4602 	mla	r6, lr, r2, r4
 800f22a:	1436      	asrs	r6, r6, #16
 800f22c:	d465      	bmi.n	800f2fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 800f22e:	4546      	cmp	r6, r8
 800f230:	da63      	bge.n	800f2fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 800f232:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f234:	fb06 0202 	mla	r2, r6, r2, r0
 800f238:	1412      	asrs	r2, r2, #16
 800f23a:	d45e      	bmi.n	800f2fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 800f23c:	42ba      	cmp	r2, r7
 800f23e:	da5c      	bge.n	800f2fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 800f240:	1cef      	adds	r7, r5, #3
 800f242:	4699      	mov	r9, r3
 800f244:	f1b9 0f00 	cmp.w	r9, #0
 800f248:	dd5d      	ble.n	800f306 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 800f24a:	1402      	asrs	r2, r0, #16
 800f24c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800f250:	1426      	asrs	r6, r4, #16
 800f252:	4692      	mov	sl, r2
 800f254:	9a00      	ldr	r2, [sp, #0]
 800f256:	fb08 220a 	mla	r2, r8, sl, r2
 800f25a:	5d92      	ldrb	r2, [r2, r6]
 800f25c:	9e01      	ldr	r6, [sp, #4]
 800f25e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 800f262:	ea5f 6816 	movs.w	r8, r6, lsr #24
 800f266:	d041      	beq.n	800f2ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 800f268:	9a03      	ldr	r2, [sp, #12]
 800f26a:	fa5f fb86 	uxtb.w	fp, r6
 800f26e:	fb02 f808 	mul.w	r8, r2, r8
 800f272:	f108 0201 	add.w	r2, r8, #1
 800f276:	eb02 2228 	add.w	r2, r2, r8, asr #8
 800f27a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 800f27e:	1212      	asrs	r2, r2, #8
 800f280:	fa1f fa82 	uxth.w	sl, r2
 800f284:	43d2      	mvns	r2, r2
 800f286:	fb1b fb0a 	smulbb	fp, fp, sl
 800f28a:	b2d2      	uxtb	r2, r2
 800f28c:	fb08 b802 	mla	r8, r8, r2, fp
 800f290:	fa1f f888 	uxth.w	r8, r8
 800f294:	f108 0b01 	add.w	fp, r8, #1
 800f298:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 800f29c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 800f2a0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800f2a4:	fb1b fb0a 	smulbb	fp, fp, sl
 800f2a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 800f2ac:	fb16 fa0a 	smulbb	sl, r6, sl
 800f2b0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 800f2b4:	f807 8c03 	strb.w	r8, [r7, #-3]
 800f2b8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 800f2bc:	fb06 aa02 	mla	sl, r6, r2, sl
 800f2c0:	fb08 b802 	mla	r8, r8, r2, fp
 800f2c4:	fa1f fa8a 	uxth.w	sl, sl
 800f2c8:	fa1f f888 	uxth.w	r8, r8
 800f2cc:	f10a 0601 	add.w	r6, sl, #1
 800f2d0:	f108 0b01 	add.w	fp, r8, #1
 800f2d4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 800f2d8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 800f2dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800f2e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 800f2e4:	f807 ac01 	strb.w	sl, [r7, #-1]
 800f2e8:	f807 8c02 	strb.w	r8, [r7, #-2]
 800f2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2ee:	4474      	add	r4, lr
 800f2f0:	3703      	adds	r7, #3
 800f2f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f2f6:	4410      	add	r0, r2
 800f2f8:	e7a4      	b.n	800f244 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 800f2fa:	f04f 0800 	mov.w	r8, #0
 800f2fe:	eba3 0208 	sub.w	r2, r3, r8
 800f302:	2a00      	cmp	r2, #0
 800f304:	dc3b      	bgt.n	800f37e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 800f306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f30a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f30e:	441d      	add	r5, r3
 800f310:	2900      	cmp	r1, #0
 800f312:	f340 8093 	ble.w	800f43c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 800f316:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f31c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f320:	3901      	subs	r1, #1
 800f322:	eeb0 6a62 	vmov.f32	s12, s5
 800f326:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800f32a:	ee31 1a05 	vadd.f32	s2, s2, s10
 800f32e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f332:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 800f336:	eeb0 6a43 	vmov.f32	s12, s6
 800f33a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f33e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 800f342:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800f346:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f34a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f34e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800f352:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800f356:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800f35a:	ee12 2a90 	vmov	r2, s5
 800f35e:	eef0 2a47 	vmov.f32	s5, s14
 800f362:	fb92 fef3 	sdiv	lr, r2, r3
 800f366:	ee13 2a10 	vmov	r2, s6
 800f36a:	eeb0 3a67 	vmov.f32	s6, s15
 800f36e:	fb92 f3f3 	sdiv	r3, r2, r3
 800f372:	9a02      	ldr	r2, [sp, #8]
 800f374:	9312      	str	r3, [sp, #72]	; 0x48
 800f376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f378:	bf08      	it	eq
 800f37a:	4613      	moveq	r3, r2
 800f37c:	e731      	b.n	800f1e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800f37e:	1427      	asrs	r7, r4, #16
 800f380:	d456      	bmi.n	800f430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800f382:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800f386:	42be      	cmp	r6, r7
 800f388:	dd52      	ble.n	800f430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800f38a:	ea5f 4920 	movs.w	r9, r0, asr #16
 800f38e:	d44f      	bmi.n	800f430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800f390:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800f394:	454a      	cmp	r2, r9
 800f396:	dd4b      	ble.n	800f430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800f398:	9a00      	ldr	r2, [sp, #0]
 800f39a:	b236      	sxth	r6, r6
 800f39c:	fb09 2606 	mla	r6, r9, r6, r2
 800f3a0:	5df2      	ldrb	r2, [r6, r7]
 800f3a2:	9e01      	ldr	r6, [sp, #4]
 800f3a4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 800f3a8:	0e3a      	lsrs	r2, r7, #24
 800f3aa:	d041      	beq.n	800f430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800f3ac:	9e03      	ldr	r6, [sp, #12]
 800f3ae:	fa5f fb87 	uxtb.w	fp, r7
 800f3b2:	4372      	muls	r2, r6
 800f3b4:	1c56      	adds	r6, r2, #1
 800f3b6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 800f3ba:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 800f3be:	1212      	asrs	r2, r2, #8
 800f3c0:	f815 9006 	ldrb.w	r9, [r5, r6]
 800f3c4:	fa1f fa82 	uxth.w	sl, r2
 800f3c8:	43d2      	mvns	r2, r2
 800f3ca:	fb1b fb0a 	smulbb	fp, fp, sl
 800f3ce:	b2d2      	uxtb	r2, r2
 800f3d0:	fb09 b902 	mla	r9, r9, r2, fp
 800f3d4:	fa1f f989 	uxth.w	r9, r9
 800f3d8:	f109 0b01 	add.w	fp, r9, #1
 800f3dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f3e0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800f3e4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 800f3e8:	fb1b fb0a 	smulbb	fp, fp, sl
 800f3ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f3f0:	fb17 fa0a 	smulbb	sl, r7, sl
 800f3f4:	f805 9006 	strb.w	r9, [r5, r6]
 800f3f8:	442e      	add	r6, r5
 800f3fa:	78b7      	ldrb	r7, [r6, #2]
 800f3fc:	f896 9001 	ldrb.w	r9, [r6, #1]
 800f400:	fb07 aa02 	mla	sl, r7, r2, sl
 800f404:	fb09 b902 	mla	r9, r9, r2, fp
 800f408:	fa1f fa8a 	uxth.w	sl, sl
 800f40c:	fa1f f989 	uxth.w	r9, r9
 800f410:	f10a 0701 	add.w	r7, sl, #1
 800f414:	f109 0b01 	add.w	fp, r9, #1
 800f418:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 800f41c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f420:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800f424:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f428:	f886 a002 	strb.w	sl, [r6, #2]
 800f42c:	f886 9001 	strb.w	r9, [r6, #1]
 800f430:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f432:	4474      	add	r4, lr
 800f434:	f108 0801 	add.w	r8, r8, #1
 800f438:	4410      	add	r0, r2
 800f43a:	e760      	b.n	800f2fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 800f43c:	b005      	add	sp, #20
 800f43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f442 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f446:	b085      	sub	sp, #20
 800f448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f44c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f44e:	9203      	str	r2, [sp, #12]
 800f450:	6868      	ldr	r0, [r5, #4]
 800f452:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800f456:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800f45a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800f45e:	fb00 2404 	mla	r4, r0, r4, r2
 800f462:	682a      	ldr	r2, [r5, #0]
 800f464:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f468:	4414      	add	r4, r2
 800f46a:	f8dc 2000 	ldr.w	r2, [ip]
 800f46e:	9201      	str	r2, [sp, #4]
 800f470:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800f474:	3204      	adds	r2, #4
 800f476:	9202      	str	r2, [sp, #8]
 800f478:	2900      	cmp	r1, #0
 800f47a:	dc03      	bgt.n	800f484 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 800f47c:	9a03      	ldr	r2, [sp, #12]
 800f47e:	2a00      	cmp	r2, #0
 800f480:	f340 8137 	ble.w	800f6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 800f484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f486:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800f48a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f490:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 800f494:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f498:	2b00      	cmp	r3, #0
 800f49a:	dd0d      	ble.n	800f4b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 800f49c:	1405      	asrs	r5, r0, #16
 800f49e:	d405      	bmi.n	800f4ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 800f4a0:	4545      	cmp	r5, r8
 800f4a2:	da03      	bge.n	800f4ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 800f4a4:	1415      	asrs	r5, r2, #16
 800f4a6:	d401      	bmi.n	800f4ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 800f4a8:	42bd      	cmp	r5, r7
 800f4aa:	db06      	blt.n	800f4ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 800f4ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f4ae:	4470      	add	r0, lr
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	3403      	adds	r4, #3
 800f4b4:	442a      	add	r2, r5
 800f4b6:	e7ef      	b.n	800f498 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 800f4b8:	d070      	beq.n	800f59c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 800f4ba:	1e5d      	subs	r5, r3, #1
 800f4bc:	fb0e 0605 	mla	r6, lr, r5, r0
 800f4c0:	1436      	asrs	r6, r6, #16
 800f4c2:	d462      	bmi.n	800f58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 800f4c4:	4546      	cmp	r6, r8
 800f4c6:	da60      	bge.n	800f58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 800f4c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f4ca:	fb06 2505 	mla	r5, r6, r5, r2
 800f4ce:	142d      	asrs	r5, r5, #16
 800f4d0:	d45b      	bmi.n	800f58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 800f4d2:	42bd      	cmp	r5, r7
 800f4d4:	da59      	bge.n	800f58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 800f4d6:	1ce5      	adds	r5, r4, #3
 800f4d8:	469a      	mov	sl, r3
 800f4da:	f1ba 0f00 	cmp.w	sl, #0
 800f4de:	dd58      	ble.n	800f592 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 800f4e0:	1416      	asrs	r6, r2, #16
 800f4e2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800f4e6:	1407      	asrs	r7, r0, #16
 800f4e8:	46b1      	mov	r9, r6
 800f4ea:	9e01      	ldr	r6, [sp, #4]
 800f4ec:	fb08 6609 	mla	r6, r8, r9, r6
 800f4f0:	5df6      	ldrb	r6, [r6, r7]
 800f4f2:	9f02      	ldr	r7, [sp, #8]
 800f4f4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800f4f8:	0e37      	lsrs	r7, r6, #24
 800f4fa:	2fff      	cmp	r7, #255	; 0xff
 800f4fc:	f000 80f0 	beq.w	800f6e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 800f500:	fa5f f887 	uxtb.w	r8, r7
 800f504:	b3d7      	cbz	r7, 800f57c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 800f506:	fa1f f788 	uxth.w	r7, r8
 800f50a:	ea6f 0808 	mvn.w	r8, r8
 800f50e:	fa5f fb86 	uxtb.w	fp, r6
 800f512:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 800f516:	fa5f f888 	uxtb.w	r8, r8
 800f51a:	fb1b fb07 	smulbb	fp, fp, r7
 800f51e:	fb09 b908 	mla	r9, r9, r8, fp
 800f522:	fa1f f989 	uxth.w	r9, r9
 800f526:	f109 0b01 	add.w	fp, r9, #1
 800f52a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f52e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 800f532:	fb1b fb08 	smulbb	fp, fp, r8
 800f536:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f53a:	f805 9c03 	strb.w	r9, [r5, #-3]
 800f53e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 800f542:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800f546:	fb09 b907 	mla	r9, r9, r7, fp
 800f54a:	fa1f f989 	uxth.w	r9, r9
 800f54e:	f109 0b01 	add.w	fp, r9, #1
 800f552:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f556:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f55a:	f805 9c02 	strb.w	r9, [r5, #-2]
 800f55e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 800f562:	fb19 f808 	smulbb	r8, r9, r8
 800f566:	fb06 8607 	mla	r6, r6, r7, r8
 800f56a:	b2b6      	uxth	r6, r6
 800f56c:	f106 0801 	add.w	r8, r6, #1
 800f570:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 800f574:	ea4f 2828 	mov.w	r8, r8, asr #8
 800f578:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f57c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f57e:	4470      	add	r0, lr
 800f580:	3503      	adds	r5, #3
 800f582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f586:	4432      	add	r2, r6
 800f588:	e7a7      	b.n	800f4da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 800f58a:	2600      	movs	r6, #0
 800f58c:	1b9d      	subs	r5, r3, r6
 800f58e:	2d00      	cmp	r5, #0
 800f590:	dc3b      	bgt.n	800f60a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 800f592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f596:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f59a:	441c      	add	r4, r3
 800f59c:	2900      	cmp	r1, #0
 800f59e:	f340 80a8 	ble.w	800f6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 800f5a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f5ac:	3901      	subs	r1, #1
 800f5ae:	eeb0 6a62 	vmov.f32	s12, s5
 800f5b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800f5b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 800f5ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f5be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 800f5c2:	eeb0 6a43 	vmov.f32	s12, s6
 800f5c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800f5ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 800f5ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800f5d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f5d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f5da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800f5de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800f5e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800f5e6:	ee12 2a90 	vmov	r2, s5
 800f5ea:	eef0 2a47 	vmov.f32	s5, s14
 800f5ee:	fb92 fef3 	sdiv	lr, r2, r3
 800f5f2:	ee13 2a10 	vmov	r2, s6
 800f5f6:	eeb0 3a67 	vmov.f32	s6, s15
 800f5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800f5fe:	9a03      	ldr	r2, [sp, #12]
 800f600:	9312      	str	r3, [sp, #72]	; 0x48
 800f602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f604:	bf08      	it	eq
 800f606:	4613      	moveq	r3, r2
 800f608:	e736      	b.n	800f478 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 800f60a:	ea5f 4820 	movs.w	r8, r0, asr #16
 800f60e:	d457      	bmi.n	800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f610:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800f614:	4547      	cmp	r7, r8
 800f616:	dd53      	ble.n	800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f618:	ea5f 4922 	movs.w	r9, r2, asr #16
 800f61c:	d450      	bmi.n	800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f61e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800f622:	454d      	cmp	r5, r9
 800f624:	dd4c      	ble.n	800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f626:	9d01      	ldr	r5, [sp, #4]
 800f628:	b23f      	sxth	r7, r7
 800f62a:	fb09 5707 	mla	r7, r9, r7, r5
 800f62e:	f817 5008 	ldrb.w	r5, [r7, r8]
 800f632:	9f02      	ldr	r7, [sp, #8]
 800f634:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800f638:	0e2f      	lsrs	r7, r5, #24
 800f63a:	2fff      	cmp	r7, #255	; 0xff
 800f63c:	d045      	beq.n	800f6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 800f63e:	fa5f f987 	uxtb.w	r9, r7
 800f642:	b3ef      	cbz	r7, 800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f644:	fa1f f889 	uxth.w	r8, r9
 800f648:	ea6f 0909 	mvn.w	r9, r9
 800f64c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 800f650:	fa5f fb85 	uxtb.w	fp, r5
 800f654:	f814 a007 	ldrb.w	sl, [r4, r7]
 800f658:	fa5f f989 	uxtb.w	r9, r9
 800f65c:	fb1b fb08 	smulbb	fp, fp, r8
 800f660:	fb0a ba09 	mla	sl, sl, r9, fp
 800f664:	fa1f fa8a 	uxth.w	sl, sl
 800f668:	f10a 0b01 	add.w	fp, sl, #1
 800f66c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 800f670:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800f674:	f804 a007 	strb.w	sl, [r4, r7]
 800f678:	4427      	add	r7, r4
 800f67a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800f67e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800f682:	f897 b001 	ldrb.w	fp, [r7, #1]
 800f686:	fb1b fb09 	smulbb	fp, fp, r9
 800f68a:	fb0a ba08 	mla	sl, sl, r8, fp
 800f68e:	fa1f fa8a 	uxth.w	sl, sl
 800f692:	f10a 0b01 	add.w	fp, sl, #1
 800f696:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 800f69a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800f69e:	f887 a001 	strb.w	sl, [r7, #1]
 800f6a2:	f897 a002 	ldrb.w	sl, [r7, #2]
 800f6a6:	fb1a f909 	smulbb	r9, sl, r9
 800f6aa:	fb05 9508 	mla	r5, r5, r8, r9
 800f6ae:	b2ad      	uxth	r5, r5
 800f6b0:	f105 0901 	add.w	r9, r5, #1
 800f6b4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 800f6b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f6bc:	f887 9002 	strb.w	r9, [r7, #2]
 800f6c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f6c2:	4470      	add	r0, lr
 800f6c4:	3601      	adds	r6, #1
 800f6c6:	442a      	add	r2, r5
 800f6c8:	e760      	b.n	800f58c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800f6ca:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 800f6ce:	ea4f 2815 	mov.w	r8, r5, lsr #8
 800f6d2:	55e5      	strb	r5, [r4, r7]
 800f6d4:	4427      	add	r7, r4
 800f6d6:	0c2d      	lsrs	r5, r5, #16
 800f6d8:	f887 8001 	strb.w	r8, [r7, #1]
 800f6dc:	70bd      	strb	r5, [r7, #2]
 800f6de:	e7ef      	b.n	800f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 800f6e0:	0a37      	lsrs	r7, r6, #8
 800f6e2:	f805 6c03 	strb.w	r6, [r5, #-3]
 800f6e6:	0c36      	lsrs	r6, r6, #16
 800f6e8:	f805 7c02 	strb.w	r7, [r5, #-2]
 800f6ec:	f805 6c01 	strb.w	r6, [r5, #-1]
 800f6f0:	e744      	b.n	800f57c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 800f6f2:	b005      	add	sp, #20
 800f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f6fe:	9201      	str	r2, [sp, #4]
 800f700:	6870      	ldr	r0, [r6, #4]
 800f702:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800f706:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800f70a:	fa1f fe85 	uxth.w	lr, r5
 800f70e:	43ed      	mvns	r5, r5
 800f710:	f8dc 8000 	ldr.w	r8, [ip]
 800f714:	b2ed      	uxtb	r5, r5
 800f716:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 800f71a:	fb00 2404 	mla	r4, r0, r4, r2
 800f71e:	6832      	ldr	r2, [r6, #0]
 800f720:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f724:	4414      	add	r4, r2
 800f726:	2900      	cmp	r1, #0
 800f728:	dc03      	bgt.n	800f732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 800f72a:	9a01      	ldr	r2, [sp, #4]
 800f72c:	2a00      	cmp	r2, #0
 800f72e:	f340 810d 	ble.w	800f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 800f732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f734:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 800f738:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f73c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f73e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 800f742:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f746:	2b00      	cmp	r3, #0
 800f748:	dd0e      	ble.n	800f768 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f74a:	1406      	asrs	r6, r0, #16
 800f74c:	d405      	bmi.n	800f75a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 800f74e:	4556      	cmp	r6, sl
 800f750:	da03      	bge.n	800f75a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 800f752:	1416      	asrs	r6, r2, #16
 800f754:	d401      	bmi.n	800f75a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 800f756:	454e      	cmp	r6, r9
 800f758:	db07      	blt.n	800f76a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800f75a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f75c:	3b01      	subs	r3, #1
 800f75e:	3403      	adds	r4, #3
 800f760:	4430      	add	r0, r6
 800f762:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f764:	4432      	add	r2, r6
 800f766:	e7ee      	b.n	800f746 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 800f768:	d060      	beq.n	800f82c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 800f76a:	1e5e      	subs	r6, r3, #1
 800f76c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f76e:	fb07 0706 	mla	r7, r7, r6, r0
 800f772:	143f      	asrs	r7, r7, #16
 800f774:	d451      	bmi.n	800f81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 800f776:	4557      	cmp	r7, sl
 800f778:	da4f      	bge.n	800f81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 800f77a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f77c:	fb07 2606 	mla	r6, r7, r6, r2
 800f780:	1436      	asrs	r6, r6, #16
 800f782:	d44a      	bmi.n	800f81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 800f784:	454e      	cmp	r6, r9
 800f786:	da48      	bge.n	800f81a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 800f788:	1ce6      	adds	r6, r4, #3
 800f78a:	4699      	mov	r9, r3
 800f78c:	f1b9 0f00 	cmp.w	r9, #0
 800f790:	f106 0603 	add.w	r6, r6, #3
 800f794:	dd45      	ble.n	800f822 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 800f796:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 800f79a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800f79e:	1417      	asrs	r7, r2, #16
 800f7a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f7a4:	fb0b a707 	mla	r7, fp, r7, sl
 800f7a8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 800f7ac:	fb1b fb05 	smulbb	fp, fp, r5
 800f7b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800f7b4:	eb08 0a07 	add.w	sl, r8, r7
 800f7b8:	f818 7007 	ldrb.w	r7, [r8, r7]
 800f7bc:	fb07 b70e 	mla	r7, r7, lr, fp
 800f7c0:	b2bf      	uxth	r7, r7
 800f7c2:	f107 0b01 	add.w	fp, r7, #1
 800f7c6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800f7ca:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 800f7ce:	fb1b fb05 	smulbb	fp, fp, r5
 800f7d2:	123f      	asrs	r7, r7, #8
 800f7d4:	f806 7c06 	strb.w	r7, [r6, #-6]
 800f7d8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800f7dc:	fb07 b70e 	mla	r7, r7, lr, fp
 800f7e0:	b2bf      	uxth	r7, r7
 800f7e2:	f107 0b01 	add.w	fp, r7, #1
 800f7e6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800f7ea:	123f      	asrs	r7, r7, #8
 800f7ec:	f806 7c05 	strb.w	r7, [r6, #-5]
 800f7f0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 800f7f4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 800f7f8:	fb1a fa05 	smulbb	sl, sl, r5
 800f7fc:	fb07 a70e 	mla	r7, r7, lr, sl
 800f800:	b2bf      	uxth	r7, r7
 800f802:	f107 0a01 	add.w	sl, r7, #1
 800f806:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 800f80a:	123f      	asrs	r7, r7, #8
 800f80c:	f806 7c04 	strb.w	r7, [r6, #-4]
 800f810:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f812:	4438      	add	r0, r7
 800f814:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f816:	443a      	add	r2, r7
 800f818:	e7b8      	b.n	800f78c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 800f81a:	2700      	movs	r7, #0
 800f81c:	1bde      	subs	r6, r3, r7
 800f81e:	2e00      	cmp	r6, #0
 800f820:	dc3f      	bgt.n	800f8a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 800f822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f82a:	441c      	add	r4, r3
 800f82c:	2900      	cmp	r1, #0
 800f82e:	f340 808d 	ble.w	800f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 800f832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f838:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f83c:	3901      	subs	r1, #1
 800f83e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f842:	eef0 6a62 	vmov.f32	s13, s5
 800f846:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f84a:	ee31 1a05 	vadd.f32	s2, s2, s10
 800f84e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f852:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 800f856:	eef0 6a43 	vmov.f32	s13, s6
 800f85a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f85e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800f862:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800f866:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f86a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f86e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800f872:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800f876:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800f87a:	ee12 2a90 	vmov	r2, s5
 800f87e:	eef0 2a47 	vmov.f32	s5, s14
 800f882:	fb92 f3f3 	sdiv	r3, r2, r3
 800f886:	ee13 2a10 	vmov	r2, s6
 800f88a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f88e:	eeb0 3a67 	vmov.f32	s6, s15
 800f892:	fb92 f3f3 	sdiv	r3, r2, r3
 800f896:	9a01      	ldr	r2, [sp, #4]
 800f898:	9310      	str	r3, [sp, #64]	; 0x40
 800f89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f89c:	bf08      	it	eq
 800f89e:	4613      	moveq	r3, r2
 800f8a0:	e741      	b.n	800f726 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 800f8a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 800f8a6:	d44b      	bmi.n	800f940 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 800f8a8:	f8dc b008 	ldr.w	fp, [ip, #8]
 800f8ac:	45cb      	cmp	fp, r9
 800f8ae:	dd47      	ble.n	800f940 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 800f8b0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 800f8b4:	d444      	bmi.n	800f940 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 800f8b6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800f8ba:	4556      	cmp	r6, sl
 800f8bc:	dd40      	ble.n	800f940 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 800f8be:	fa0f f68b 	sxth.w	r6, fp
 800f8c2:	fb0a 9906 	mla	r9, sl, r6, r9
 800f8c6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f8ca:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800f8ce:	f814 b006 	ldrb.w	fp, [r4, r6]
 800f8d2:	fb1b fb05 	smulbb	fp, fp, r5
 800f8d6:	eb08 0a09 	add.w	sl, r8, r9
 800f8da:	f818 9009 	ldrb.w	r9, [r8, r9]
 800f8de:	fb09 b90e 	mla	r9, r9, lr, fp
 800f8e2:	fa1f f989 	uxth.w	r9, r9
 800f8e6:	f109 0b01 	add.w	fp, r9, #1
 800f8ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f8ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f8f2:	f804 9006 	strb.w	r9, [r4, r6]
 800f8f6:	4426      	add	r6, r4
 800f8f8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 800f8fc:	f896 b001 	ldrb.w	fp, [r6, #1]
 800f900:	fb1b fb05 	smulbb	fp, fp, r5
 800f904:	fb09 b90e 	mla	r9, r9, lr, fp
 800f908:	fa1f f989 	uxth.w	r9, r9
 800f90c:	f109 0b01 	add.w	fp, r9, #1
 800f910:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800f914:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f918:	f886 9001 	strb.w	r9, [r6, #1]
 800f91c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800f920:	f896 a002 	ldrb.w	sl, [r6, #2]
 800f924:	fb1a fa05 	smulbb	sl, sl, r5
 800f928:	fb09 a90e 	mla	r9, r9, lr, sl
 800f92c:	fa1f f989 	uxth.w	r9, r9
 800f930:	f109 0a01 	add.w	sl, r9, #1
 800f934:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 800f938:	ea4f 2929 	mov.w	r9, r9, asr #8
 800f93c:	f886 9002 	strb.w	r9, [r6, #2]
 800f940:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f942:	3701      	adds	r7, #1
 800f944:	4430      	add	r0, r6
 800f946:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f948:	4432      	add	r2, r6
 800f94a:	e767      	b.n	800f81c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 800f94c:	b003      	add	sp, #12
 800f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f952 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f956:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f95c:	9201      	str	r2, [sp, #4]
 800f95e:	6868      	ldr	r0, [r5, #4]
 800f960:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f962:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 800f966:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 800f96a:	fb00 2404 	mla	r4, r0, r4, r2
 800f96e:	682a      	ldr	r2, [r5, #0]
 800f970:	f8d7 8000 	ldr.w	r8, [r7]
 800f974:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f978:	4414      	add	r4, r2
 800f97a:	2900      	cmp	r1, #0
 800f97c:	dc03      	bgt.n	800f986 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 800f97e:	9a01      	ldr	r2, [sp, #4]
 800f980:	2a00      	cmp	r2, #0
 800f982:	f340 80af 	ble.w	800fae4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 800f986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f988:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 800f98c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f992:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 800f996:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dd0c      	ble.n	800f9b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 800f99e:	1405      	asrs	r5, r0, #16
 800f9a0:	d405      	bmi.n	800f9ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800f9a2:	4555      	cmp	r5, sl
 800f9a4:	da03      	bge.n	800f9ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800f9a6:	1415      	asrs	r5, r2, #16
 800f9a8:	d401      	bmi.n	800f9ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800f9aa:	454d      	cmp	r5, r9
 800f9ac:	db05      	blt.n	800f9ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 800f9ae:	4470      	add	r0, lr
 800f9b0:	4462      	add	r2, ip
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	3403      	adds	r4, #3
 800f9b6:	e7f0      	b.n	800f99a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 800f9b8:	d038      	beq.n	800fa2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 800f9ba:	1e5d      	subs	r5, r3, #1
 800f9bc:	fb0e 0605 	mla	r6, lr, r5, r0
 800f9c0:	1436      	asrs	r6, r6, #16
 800f9c2:	d42a      	bmi.n	800fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 800f9c4:	4556      	cmp	r6, sl
 800f9c6:	da28      	bge.n	800fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 800f9c8:	fb0c 2505 	mla	r5, ip, r5, r2
 800f9cc:	142d      	asrs	r5, r5, #16
 800f9ce:	d424      	bmi.n	800fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 800f9d0:	454d      	cmp	r5, r9
 800f9d2:	da22      	bge.n	800fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 800f9d4:	1ce6      	adds	r6, r4, #3
 800f9d6:	4699      	mov	r9, r3
 800f9d8:	f1b9 0f00 	cmp.w	r9, #0
 800f9dc:	f106 0603 	add.w	r6, r6, #3
 800f9e0:	dd1f      	ble.n	800fa22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 800f9e2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 800f9e6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800f9ea:	1415      	asrs	r5, r2, #16
 800f9ec:	4470      	add	r0, lr
 800f9ee:	4462      	add	r2, ip
 800f9f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9f4:	fb0b a505 	mla	r5, fp, r5, sl
 800f9f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9fc:	eb08 0a05 	add.w	sl, r8, r5
 800fa00:	f818 5005 	ldrb.w	r5, [r8, r5]
 800fa04:	f806 5c06 	strb.w	r5, [r6, #-6]
 800fa08:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800fa0c:	f806 5c05 	strb.w	r5, [r6, #-5]
 800fa10:	f89a 5002 	ldrb.w	r5, [sl, #2]
 800fa14:	f806 5c04 	strb.w	r5, [r6, #-4]
 800fa18:	e7de      	b.n	800f9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 800fa1a:	2600      	movs	r6, #0
 800fa1c:	1b9d      	subs	r5, r3, r6
 800fa1e:	2d00      	cmp	r5, #0
 800fa20:	dc38      	bgt.n	800fa94 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 800fa22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fa26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa2a:	441c      	add	r4, r3
 800fa2c:	2900      	cmp	r1, #0
 800fa2e:	dd59      	ble.n	800fae4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 800fa30:	ee30 0a04 	vadd.f32	s0, s0, s8
 800fa34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800fa3a:	3901      	subs	r1, #1
 800fa3c:	eeb0 6a62 	vmov.f32	s12, s5
 800fa40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800fa44:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fa48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fa4c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 800fa50:	eeb0 6a43 	vmov.f32	s12, s6
 800fa54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fa58:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 800fa5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fa60:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fa64:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fa68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800fa6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800fa70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800fa74:	ee12 2a90 	vmov	r2, s5
 800fa78:	eef0 2a47 	vmov.f32	s5, s14
 800fa7c:	fb92 fef3 	sdiv	lr, r2, r3
 800fa80:	ee13 2a10 	vmov	r2, s6
 800fa84:	eeb0 3a67 	vmov.f32	s6, s15
 800fa88:	fb92 fcf3 	sdiv	ip, r2, r3
 800fa8c:	9a01      	ldr	r2, [sp, #4]
 800fa8e:	bf08      	it	eq
 800fa90:	4613      	moveq	r3, r2
 800fa92:	e772      	b.n	800f97a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 800fa94:	ea5f 4920 	movs.w	r9, r0, asr #16
 800fa98:	d420      	bmi.n	800fadc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 800fa9a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800fa9e:	45cb      	cmp	fp, r9
 800faa0:	dd1c      	ble.n	800fadc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 800faa2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 800faa6:	d419      	bmi.n	800fadc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 800faa8:	68fd      	ldr	r5, [r7, #12]
 800faaa:	4555      	cmp	r5, sl
 800faac:	dd16      	ble.n	800fadc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 800faae:	fa0f f58b 	sxth.w	r5, fp
 800fab2:	fb0a 9505 	mla	r5, sl, r5, r9
 800fab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800faba:	f818 9005 	ldrb.w	r9, [r8, r5]
 800fabe:	eb08 0b05 	add.w	fp, r8, r5
 800fac2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800fac6:	f804 9005 	strb.w	r9, [r4, r5]
 800faca:	4425      	add	r5, r4
 800facc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 800fad0:	f885 9001 	strb.w	r9, [r5, #1]
 800fad4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 800fad8:	f885 9002 	strb.w	r9, [r5, #2]
 800fadc:	4470      	add	r0, lr
 800fade:	4462      	add	r2, ip
 800fae0:	3601      	adds	r6, #1
 800fae2:	e79b      	b.n	800fa1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 800fae4:	b003      	add	sp, #12
 800fae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800faea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faee:	b085      	sub	sp, #20
 800faf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800faf4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800faf6:	9202      	str	r2, [sp, #8]
 800faf8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 800fafc:	6860      	ldr	r0, [r4, #4]
 800fafe:	9203      	str	r2, [sp, #12]
 800fb00:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800fb04:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800fb08:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 800fb0c:	fb00 2505 	mla	r5, r0, r5, r2
 800fb10:	6822      	ldr	r2, [r4, #0]
 800fb12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb16:	4415      	add	r5, r2
 800fb18:	f8dc 2000 	ldr.w	r2, [ip]
 800fb1c:	9201      	str	r2, [sp, #4]
 800fb1e:	2900      	cmp	r1, #0
 800fb20:	dc03      	bgt.n	800fb2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 800fb22:	9a02      	ldr	r2, [sp, #8]
 800fb24:	2a00      	cmp	r2, #0
 800fb26:	f340 8122 	ble.w	800fd6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 800fb2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb2c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800fb30:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 800fb34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb36:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 800fb3a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	dd0d      	ble.n	800fb5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 800fb42:	1422      	asrs	r2, r4, #16
 800fb44:	d405      	bmi.n	800fb52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 800fb46:	4542      	cmp	r2, r8
 800fb48:	da03      	bge.n	800fb52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 800fb4a:	1402      	asrs	r2, r0, #16
 800fb4c:	d401      	bmi.n	800fb52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 800fb4e:	42ba      	cmp	r2, r7
 800fb50:	db06      	blt.n	800fb60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 800fb52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb54:	4474      	add	r4, lr
 800fb56:	3b01      	subs	r3, #1
 800fb58:	3503      	adds	r5, #3
 800fb5a:	4410      	add	r0, r2
 800fb5c:	e7ef      	b.n	800fb3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 800fb5e:	d072      	beq.n	800fc46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 800fb60:	1e5a      	subs	r2, r3, #1
 800fb62:	fb0e 4602 	mla	r6, lr, r2, r4
 800fb66:	1436      	asrs	r6, r6, #16
 800fb68:	d462      	bmi.n	800fc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 800fb6a:	4546      	cmp	r6, r8
 800fb6c:	da60      	bge.n	800fc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 800fb6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fb70:	fb06 0202 	mla	r2, r6, r2, r0
 800fb74:	1412      	asrs	r2, r2, #16
 800fb76:	d45b      	bmi.n	800fc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 800fb78:	42ba      	cmp	r2, r7
 800fb7a:	da59      	bge.n	800fc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 800fb7c:	1cef      	adds	r7, r5, #3
 800fb7e:	4699      	mov	r9, r3
 800fb80:	f1b9 0f00 	cmp.w	r9, #0
 800fb84:	dd5a      	ble.n	800fc3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 800fb86:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 800fb8a:	1426      	asrs	r6, r4, #16
 800fb8c:	1402      	asrs	r2, r0, #16
 800fb8e:	fb08 6202 	mla	r2, r8, r2, r6
 800fb92:	9e01      	ldr	r6, [sp, #4]
 800fb94:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 800fb98:	ea5f 6816 	movs.w	r8, r6, lsr #24
 800fb9c:	d041      	beq.n	800fc22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fb9e:	9a03      	ldr	r2, [sp, #12]
 800fba0:	fa5f fb86 	uxtb.w	fp, r6
 800fba4:	fb02 f808 	mul.w	r8, r2, r8
 800fba8:	f108 0201 	add.w	r2, r8, #1
 800fbac:	eb02 2228 	add.w	r2, r2, r8, asr #8
 800fbb0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 800fbb4:	1212      	asrs	r2, r2, #8
 800fbb6:	fa1f fa82 	uxth.w	sl, r2
 800fbba:	43d2      	mvns	r2, r2
 800fbbc:	fb1b fb0a 	smulbb	fp, fp, sl
 800fbc0:	b2d2      	uxtb	r2, r2
 800fbc2:	fb08 b802 	mla	r8, r8, r2, fp
 800fbc6:	fa1f f888 	uxth.w	r8, r8
 800fbca:	f108 0b01 	add.w	fp, r8, #1
 800fbce:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 800fbd2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 800fbd6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800fbda:	fb1b fb0a 	smulbb	fp, fp, sl
 800fbde:	ea4f 2828 	mov.w	r8, r8, asr #8
 800fbe2:	fb16 fa0a 	smulbb	sl, r6, sl
 800fbe6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 800fbea:	f807 8c03 	strb.w	r8, [r7, #-3]
 800fbee:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 800fbf2:	fb06 aa02 	mla	sl, r6, r2, sl
 800fbf6:	fb08 b802 	mla	r8, r8, r2, fp
 800fbfa:	fa1f fa8a 	uxth.w	sl, sl
 800fbfe:	fa1f f888 	uxth.w	r8, r8
 800fc02:	f10a 0601 	add.w	r6, sl, #1
 800fc06:	f108 0b01 	add.w	fp, r8, #1
 800fc0a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 800fc0e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 800fc12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800fc16:	ea4f 2828 	mov.w	r8, r8, asr #8
 800fc1a:	f807 ac01 	strb.w	sl, [r7, #-1]
 800fc1e:	f807 8c02 	strb.w	r8, [r7, #-2]
 800fc22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc24:	4474      	add	r4, lr
 800fc26:	3703      	adds	r7, #3
 800fc28:	f109 39ff 	add.w	r9, r9, #4294967295
 800fc2c:	4410      	add	r0, r2
 800fc2e:	e7a7      	b.n	800fb80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 800fc30:	f04f 0800 	mov.w	r8, #0
 800fc34:	eba3 0208 	sub.w	r2, r3, r8
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	dc3b      	bgt.n	800fcb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 800fc3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fc44:	441d      	add	r5, r3
 800fc46:	2900      	cmp	r1, #0
 800fc48:	f340 8091 	ble.w	800fd6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 800fc4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 800fc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800fc56:	3901      	subs	r1, #1
 800fc58:	eeb0 6a62 	vmov.f32	s12, s5
 800fc5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800fc60:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fc64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fc68:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 800fc6c:	eeb0 6a43 	vmov.f32	s12, s6
 800fc70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fc74:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 800fc78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fc7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fc80:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fc84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800fc88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800fc8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800fc90:	ee12 2a90 	vmov	r2, s5
 800fc94:	eef0 2a47 	vmov.f32	s5, s14
 800fc98:	fb92 fef3 	sdiv	lr, r2, r3
 800fc9c:	ee13 2a10 	vmov	r2, s6
 800fca0:	eeb0 3a67 	vmov.f32	s6, s15
 800fca4:	fb92 f3f3 	sdiv	r3, r2, r3
 800fca8:	9a02      	ldr	r2, [sp, #8]
 800fcaa:	9312      	str	r3, [sp, #72]	; 0x48
 800fcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcae:	bf08      	it	eq
 800fcb0:	4613      	moveq	r3, r2
 800fcb2:	e734      	b.n	800fb1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 800fcb4:	1427      	asrs	r7, r4, #16
 800fcb6:	d454      	bmi.n	800fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 800fcb8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800fcbc:	42be      	cmp	r6, r7
 800fcbe:	dd50      	ble.n	800fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 800fcc0:	ea5f 4920 	movs.w	r9, r0, asr #16
 800fcc4:	d44d      	bmi.n	800fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 800fcc6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800fcca:	454a      	cmp	r2, r9
 800fccc:	dd49      	ble.n	800fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 800fcce:	b236      	sxth	r6, r6
 800fcd0:	9a01      	ldr	r2, [sp, #4]
 800fcd2:	fb09 7606 	mla	r6, r9, r6, r7
 800fcd6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 800fcda:	0e3a      	lsrs	r2, r7, #24
 800fcdc:	d041      	beq.n	800fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 800fcde:	9e03      	ldr	r6, [sp, #12]
 800fce0:	fa5f fb87 	uxtb.w	fp, r7
 800fce4:	4372      	muls	r2, r6
 800fce6:	1c56      	adds	r6, r2, #1
 800fce8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 800fcec:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 800fcf0:	1212      	asrs	r2, r2, #8
 800fcf2:	f815 9006 	ldrb.w	r9, [r5, r6]
 800fcf6:	fa1f fa82 	uxth.w	sl, r2
 800fcfa:	43d2      	mvns	r2, r2
 800fcfc:	fb1b fb0a 	smulbb	fp, fp, sl
 800fd00:	b2d2      	uxtb	r2, r2
 800fd02:	fb09 b902 	mla	r9, r9, r2, fp
 800fd06:	fa1f f989 	uxth.w	r9, r9
 800fd0a:	f109 0b01 	add.w	fp, r9, #1
 800fd0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800fd12:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800fd16:	f3c7 4707 	ubfx	r7, r7, #16, #8
 800fd1a:	fb1b fb0a 	smulbb	fp, fp, sl
 800fd1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 800fd22:	fb17 fa0a 	smulbb	sl, r7, sl
 800fd26:	f805 9006 	strb.w	r9, [r5, r6]
 800fd2a:	442e      	add	r6, r5
 800fd2c:	78b7      	ldrb	r7, [r6, #2]
 800fd2e:	f896 9001 	ldrb.w	r9, [r6, #1]
 800fd32:	fb07 aa02 	mla	sl, r7, r2, sl
 800fd36:	fb09 b902 	mla	r9, r9, r2, fp
 800fd3a:	fa1f fa8a 	uxth.w	sl, sl
 800fd3e:	fa1f f989 	uxth.w	r9, r9
 800fd42:	f10a 0701 	add.w	r7, sl, #1
 800fd46:	f109 0b01 	add.w	fp, r9, #1
 800fd4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 800fd4e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800fd52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800fd56:	ea4f 2929 	mov.w	r9, r9, asr #8
 800fd5a:	f886 a002 	strb.w	sl, [r6, #2]
 800fd5e:	f886 9001 	strb.w	r9, [r6, #1]
 800fd62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd64:	4474      	add	r4, lr
 800fd66:	f108 0801 	add.w	r8, r8, #1
 800fd6a:	4410      	add	r0, r2
 800fd6c:	e762      	b.n	800fc34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800fd6e:	b005      	add	sp, #20
 800fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800fd7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd7e:	9201      	str	r2, [sp, #4]
 800fd80:	6860      	ldr	r0, [r4, #4]
 800fd82:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800fd86:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 800fd8a:	fb00 2505 	mla	r5, r0, r5, r2
 800fd8e:	6822      	ldr	r2, [r4, #0]
 800fd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd94:	4415      	add	r5, r2
 800fd96:	f8dc 2000 	ldr.w	r2, [ip]
 800fd9a:	9200      	str	r2, [sp, #0]
 800fd9c:	2900      	cmp	r1, #0
 800fd9e:	dc03      	bgt.n	800fda8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 800fda0:	9a01      	ldr	r2, [sp, #4]
 800fda2:	2a00      	cmp	r2, #0
 800fda4:	f340 812b 	ble.w	800fffe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800fda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdaa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 800fdae:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 800fdb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdb4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 800fdb8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	dd0e      	ble.n	800fdde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 800fdc0:	1422      	asrs	r2, r4, #16
 800fdc2:	d405      	bmi.n	800fdd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800fdc4:	4572      	cmp	r2, lr
 800fdc6:	da03      	bge.n	800fdd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800fdc8:	1402      	asrs	r2, r0, #16
 800fdca:	d401      	bmi.n	800fdd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800fdcc:	42ba      	cmp	r2, r7
 800fdce:	db07      	blt.n	800fde0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 800fdd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	3503      	adds	r5, #3
 800fdd6:	4414      	add	r4, r2
 800fdd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fdda:	4410      	add	r0, r2
 800fddc:	e7ee      	b.n	800fdbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 800fdde:	d06f      	beq.n	800fec0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 800fde0:	1e5a      	subs	r2, r3, #1
 800fde2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fde4:	fb06 4602 	mla	r6, r6, r2, r4
 800fde8:	1436      	asrs	r6, r6, #16
 800fdea:	d45e      	bmi.n	800feaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 800fdec:	4576      	cmp	r6, lr
 800fdee:	da5c      	bge.n	800feaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 800fdf0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fdf2:	fb06 0202 	mla	r2, r6, r2, r0
 800fdf6:	1412      	asrs	r2, r2, #16
 800fdf8:	d457      	bmi.n	800feaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 800fdfa:	42ba      	cmp	r2, r7
 800fdfc:	da55      	bge.n	800feaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 800fdfe:	1cee      	adds	r6, r5, #3
 800fe00:	469a      	mov	sl, r3
 800fe02:	f1ba 0f00 	cmp.w	sl, #0
 800fe06:	dd56      	ble.n	800feb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 800fe08:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 800fe0c:	1427      	asrs	r7, r4, #16
 800fe0e:	1402      	asrs	r2, r0, #16
 800fe10:	fb0e 7202 	mla	r2, lr, r2, r7
 800fe14:	9f00      	ldr	r7, [sp, #0]
 800fe16:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 800fe1a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 800fe1e:	d03c      	beq.n	800fe9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 800fe20:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800fe24:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 800fe28:	f3c7 2907 	ubfx	r9, r7, #8, #8
 800fe2c:	fa5f f28e 	uxtb.w	r2, lr
 800fe30:	b2ff      	uxtb	r7, r7
 800fe32:	f000 80dd 	beq.w	800fff0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 800fe36:	fa1f f882 	uxth.w	r8, r2
 800fe3a:	43d2      	mvns	r2, r2
 800fe3c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 800fe40:	fb17 f708 	smulbb	r7, r7, r8
 800fe44:	b2d2      	uxtb	r2, r2
 800fe46:	fb19 f908 	smulbb	r9, r9, r8
 800fe4a:	fb0e 7702 	mla	r7, lr, r2, r7
 800fe4e:	fb1b f808 	smulbb	r8, fp, r8
 800fe52:	b2bf      	uxth	r7, r7
 800fe54:	f107 0e01 	add.w	lr, r7, #1
 800fe58:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800fe5c:	123f      	asrs	r7, r7, #8
 800fe5e:	f806 7c03 	strb.w	r7, [r6, #-3]
 800fe62:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 800fe66:	fb07 9902 	mla	r9, r7, r2, r9
 800fe6a:	fa1f f989 	uxth.w	r9, r9
 800fe6e:	f109 0701 	add.w	r7, r9, #1
 800fe72:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 800fe76:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 800fe7a:	fb07 8802 	mla	r8, r7, r2, r8
 800fe7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 800fe82:	fa1f f888 	uxth.w	r8, r8
 800fe86:	f806 9c02 	strb.w	r9, [r6, #-2]
 800fe8a:	f108 0201 	add.w	r2, r8, #1
 800fe8e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 800fe92:	ea4f 2828 	mov.w	r8, r8, asr #8
 800fe96:	f806 8c01 	strb.w	r8, [r6, #-1]
 800fe9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe9c:	3603      	adds	r6, #3
 800fe9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fea2:	4414      	add	r4, r2
 800fea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fea6:	4410      	add	r0, r2
 800fea8:	e7ab      	b.n	800fe02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 800feaa:	f04f 0e00 	mov.w	lr, #0
 800feae:	eba3 020e 	sub.w	r2, r3, lr
 800feb2:	2a00      	cmp	r2, #0
 800feb4:	dc3d      	bgt.n	800ff32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 800feb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800feba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800febe:	441d      	add	r5, r3
 800fec0:	2900      	cmp	r1, #0
 800fec2:	f340 809c 	ble.w	800fffe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 800fec6:	ee30 0a04 	vadd.f32	s0, s0, s8
 800feca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fecc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800fed0:	3901      	subs	r1, #1
 800fed2:	eeb0 6a62 	vmov.f32	s12, s5
 800fed6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800feda:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fede:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fee2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 800fee6:	eeb0 6a43 	vmov.f32	s12, s6
 800feea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800feee:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 800fef2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fef6:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fefa:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fefe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800ff02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800ff06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800ff0a:	ee12 2a90 	vmov	r2, s5
 800ff0e:	eef0 2a47 	vmov.f32	s5, s14
 800ff12:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff16:	ee13 2a10 	vmov	r2, s6
 800ff1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff1e:	eeb0 3a67 	vmov.f32	s6, s15
 800ff22:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff26:	9a01      	ldr	r2, [sp, #4]
 800ff28:	9310      	str	r3, [sp, #64]	; 0x40
 800ff2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff2c:	bf08      	it	eq
 800ff2e:	4613      	moveq	r3, r2
 800ff30:	e734      	b.n	800fd9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 800ff32:	1427      	asrs	r7, r4, #16
 800ff34:	d44d      	bmi.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800ff36:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ff3a:	42be      	cmp	r6, r7
 800ff3c:	dd49      	ble.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800ff3e:	ea5f 4820 	movs.w	r8, r0, asr #16
 800ff42:	d446      	bmi.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800ff44:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800ff48:	4542      	cmp	r2, r8
 800ff4a:	dd42      	ble.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800ff4c:	b236      	sxth	r6, r6
 800ff4e:	9a00      	ldr	r2, [sp, #0]
 800ff50:	fb08 7606 	mla	r6, r8, r6, r7
 800ff54:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 800ff58:	0e3a      	lsrs	r2, r7, #24
 800ff5a:	d03a      	beq.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800ff5c:	2aff      	cmp	r2, #255	; 0xff
 800ff5e:	b2d6      	uxtb	r6, r2
 800ff60:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 800ff64:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 800ff68:	ea4f 024e 	mov.w	r2, lr, lsl #1
 800ff6c:	b2ff      	uxtb	r7, r7
 800ff6e:	d037      	beq.n	800ffe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 800ff70:	fa1f f986 	uxth.w	r9, r6
 800ff74:	4472      	add	r2, lr
 800ff76:	43f6      	mvns	r6, r6
 800ff78:	f815 8002 	ldrb.w	r8, [r5, r2]
 800ff7c:	fb17 f709 	smulbb	r7, r7, r9
 800ff80:	fb1a fa09 	smulbb	sl, sl, r9
 800ff84:	b2f6      	uxtb	r6, r6
 800ff86:	fb1b f909 	smulbb	r9, fp, r9
 800ff8a:	fb08 7706 	mla	r7, r8, r6, r7
 800ff8e:	b2bf      	uxth	r7, r7
 800ff90:	f107 0801 	add.w	r8, r7, #1
 800ff94:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 800ff98:	123f      	asrs	r7, r7, #8
 800ff9a:	54af      	strb	r7, [r5, r2]
 800ff9c:	442a      	add	r2, r5
 800ff9e:	7857      	ldrb	r7, [r2, #1]
 800ffa0:	fb07 aa06 	mla	sl, r7, r6, sl
 800ffa4:	fa1f fa8a 	uxth.w	sl, sl
 800ffa8:	f10a 0701 	add.w	r7, sl, #1
 800ffac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 800ffb0:	7897      	ldrb	r7, [r2, #2]
 800ffb2:	fb07 9906 	mla	r9, r7, r6, r9
 800ffb6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 800ffba:	fa1f f989 	uxth.w	r9, r9
 800ffbe:	f882 a001 	strb.w	sl, [r2, #1]
 800ffc2:	f109 0601 	add.w	r6, r9, #1
 800ffc6:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 800ffca:	ea4f 2929 	mov.w	r9, r9, asr #8
 800ffce:	f882 9002 	strb.w	r9, [r2, #2]
 800ffd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffd4:	f10e 0e01 	add.w	lr, lr, #1
 800ffd8:	4414      	add	r4, r2
 800ffda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffdc:	4410      	add	r0, r2
 800ffde:	e766      	b.n	800feae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 800ffe0:	4472      	add	r2, lr
 800ffe2:	54af      	strb	r7, [r5, r2]
 800ffe4:	442a      	add	r2, r5
 800ffe6:	f882 a001 	strb.w	sl, [r2, #1]
 800ffea:	f882 b002 	strb.w	fp, [r2, #2]
 800ffee:	e7f0      	b.n	800ffd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 800fff0:	f806 7c03 	strb.w	r7, [r6, #-3]
 800fff4:	f806 9c02 	strb.w	r9, [r6, #-2]
 800fff8:	f806 bc01 	strb.w	fp, [r6, #-1]
 800fffc:	e74d      	b.n	800fe9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 800fffe:	b003      	add	sp, #12
 8010000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010004 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	b087      	sub	sp, #28
 801000a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801000e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010010:	9204      	str	r2, [sp, #16]
 8010012:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010016:	6860      	ldr	r0, [r4, #4]
 8010018:	9205      	str	r2, [sp, #20]
 801001a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801001e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8010022:	9101      	str	r1, [sp, #4]
 8010024:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8010028:	fb00 2505 	mla	r5, r0, r5, r2
 801002c:	6822      	ldr	r2, [r4, #0]
 801002e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010032:	4415      	add	r5, r2
 8010034:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8010038:	3201      	adds	r2, #1
 801003a:	f022 0201 	bic.w	r2, r2, #1
 801003e:	9202      	str	r2, [sp, #8]
 8010040:	f8dc 2000 	ldr.w	r2, [ip]
 8010044:	9203      	str	r2, [sp, #12]
 8010046:	9a01      	ldr	r2, [sp, #4]
 8010048:	2a00      	cmp	r2, #0
 801004a:	dc03      	bgt.n	8010054 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801004c:	9a04      	ldr	r2, [sp, #16]
 801004e:	2a00      	cmp	r2, #0
 8010050:	f340 8135 	ble.w	80102be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8010054:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010056:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801005a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801005e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010060:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010064:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010068:	2b00      	cmp	r3, #0
 801006a:	dd0d      	ble.n	8010088 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801006c:	1422      	asrs	r2, r4, #16
 801006e:	d405      	bmi.n	801007c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010070:	4542      	cmp	r2, r8
 8010072:	da03      	bge.n	801007c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010074:	1402      	asrs	r2, r0, #16
 8010076:	d401      	bmi.n	801007c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010078:	42ba      	cmp	r2, r7
 801007a:	db06      	blt.n	801008a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801007c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801007e:	4474      	add	r4, lr
 8010080:	3b01      	subs	r3, #1
 8010082:	3503      	adds	r5, #3
 8010084:	4410      	add	r0, r2
 8010086:	e7ef      	b.n	8010068 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010088:	d077      	beq.n	801017a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801008a:	1e5a      	subs	r2, r3, #1
 801008c:	fb0e 4602 	mla	r6, lr, r2, r4
 8010090:	1436      	asrs	r6, r6, #16
 8010092:	d469      	bmi.n	8010168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8010094:	4546      	cmp	r6, r8
 8010096:	da67      	bge.n	8010168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8010098:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801009a:	fb06 0202 	mla	r2, r6, r2, r0
 801009e:	1412      	asrs	r2, r2, #16
 80100a0:	d462      	bmi.n	8010168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80100a2:	42ba      	cmp	r2, r7
 80100a4:	da60      	bge.n	8010168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80100a6:	1cee      	adds	r6, r5, #3
 80100a8:	4699      	mov	r9, r3
 80100aa:	f1b9 0f00 	cmp.w	r9, #0
 80100ae:	dd5f      	ble.n	8010170 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80100b0:	1422      	asrs	r2, r4, #16
 80100b2:	9902      	ldr	r1, [sp, #8]
 80100b4:	1407      	asrs	r7, r0, #16
 80100b6:	fb01 2707 	mla	r7, r1, r7, r2
 80100ba:	9903      	ldr	r1, [sp, #12]
 80100bc:	087a      	lsrs	r2, r7, #1
 80100be:	5c8a      	ldrb	r2, [r1, r2]
 80100c0:	07f9      	lsls	r1, r7, #31
 80100c2:	bf54      	ite	pl
 80100c4:	f002 020f 	andpl.w	r2, r2, #15
 80100c8:	1112      	asrmi	r2, r2, #4
 80100ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80100ce:	b2d2      	uxtb	r2, r2
 80100d0:	2a00      	cmp	r2, #0
 80100d2:	d042      	beq.n	801015a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80100d4:	497b      	ldr	r1, [pc, #492]	; (80102c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80100d6:	680f      	ldr	r7, [r1, #0]
 80100d8:	9905      	ldr	r1, [sp, #20]
 80100da:	fa5f fb87 	uxtb.w	fp, r7
 80100de:	434a      	muls	r2, r1
 80100e0:	f102 0801 	add.w	r8, r2, #1
 80100e4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80100e8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80100ec:	1212      	asrs	r2, r2, #8
 80100ee:	fa1f fa82 	uxth.w	sl, r2
 80100f2:	43d2      	mvns	r2, r2
 80100f4:	fb1b fb0a 	smulbb	fp, fp, sl
 80100f8:	b2d2      	uxtb	r2, r2
 80100fa:	fb08 b802 	mla	r8, r8, r2, fp
 80100fe:	fa1f f888 	uxth.w	r8, r8
 8010102:	f108 0b01 	add.w	fp, r8, #1
 8010106:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801010a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801010e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010112:	fb1b fb0a 	smulbb	fp, fp, sl
 8010116:	ea4f 2828 	mov.w	r8, r8, asr #8
 801011a:	fb17 fa0a 	smulbb	sl, r7, sl
 801011e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8010122:	f806 8c03 	strb.w	r8, [r6, #-3]
 8010126:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801012a:	fb07 aa02 	mla	sl, r7, r2, sl
 801012e:	fb08 b802 	mla	r8, r8, r2, fp
 8010132:	fa1f fa8a 	uxth.w	sl, sl
 8010136:	fa1f f888 	uxth.w	r8, r8
 801013a:	f10a 0701 	add.w	r7, sl, #1
 801013e:	f108 0b01 	add.w	fp, r8, #1
 8010142:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010146:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801014a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801014e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010152:	f806 ac01 	strb.w	sl, [r6, #-1]
 8010156:	f806 8c02 	strb.w	r8, [r6, #-2]
 801015a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801015c:	4474      	add	r4, lr
 801015e:	3603      	adds	r6, #3
 8010160:	f109 39ff 	add.w	r9, r9, #4294967295
 8010164:	4410      	add	r0, r2
 8010166:	e7a0      	b.n	80100aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8010168:	2700      	movs	r7, #0
 801016a:	1bda      	subs	r2, r3, r7
 801016c:	2a00      	cmp	r2, #0
 801016e:	dc3e      	bgt.n	80101ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8010170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010178:	441d      	add	r5, r3
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	f340 809e 	ble.w	80102be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8010182:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010188:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801018c:	eeb0 6a62 	vmov.f32	s12, s5
 8010190:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010194:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010198:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801019c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80101a0:	eeb0 6a43 	vmov.f32	s12, s6
 80101a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80101a8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80101ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80101b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80101b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80101b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80101bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80101c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80101c4:	ee12 2a90 	vmov	r2, s5
 80101c8:	eef0 2a47 	vmov.f32	s5, s14
 80101cc:	fb92 fef3 	sdiv	lr, r2, r3
 80101d0:	ee13 2a10 	vmov	r2, s6
 80101d4:	eeb0 3a67 	vmov.f32	s6, s15
 80101d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80101dc:	9314      	str	r3, [sp, #80]	; 0x50
 80101de:	9b01      	ldr	r3, [sp, #4]
 80101e0:	9a04      	ldr	r2, [sp, #16]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101e8:	bf08      	it	eq
 80101ea:	4613      	moveq	r3, r2
 80101ec:	e72b      	b.n	8010046 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80101ee:	1426      	asrs	r6, r4, #16
 80101f0:	d460      	bmi.n	80102b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80101f2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80101f6:	42b2      	cmp	r2, r6
 80101f8:	dd5c      	ble.n	80102b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80101fa:	ea5f 4820 	movs.w	r8, r0, asr #16
 80101fe:	d459      	bmi.n	80102b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8010200:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010204:	4542      	cmp	r2, r8
 8010206:	dd55      	ble.n	80102b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8010208:	9a02      	ldr	r2, [sp, #8]
 801020a:	9903      	ldr	r1, [sp, #12]
 801020c:	fb08 6602 	mla	r6, r8, r2, r6
 8010210:	0872      	lsrs	r2, r6, #1
 8010212:	07f6      	lsls	r6, r6, #31
 8010214:	5c8a      	ldrb	r2, [r1, r2]
 8010216:	bf54      	ite	pl
 8010218:	f002 020f 	andpl.w	r2, r2, #15
 801021c:	1112      	asrmi	r2, r2, #4
 801021e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8010222:	b2d2      	uxtb	r2, r2
 8010224:	2a00      	cmp	r2, #0
 8010226:	d045      	beq.n	80102b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8010228:	4926      	ldr	r1, [pc, #152]	; (80102c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801022a:	f8d1 8000 	ldr.w	r8, [r1]
 801022e:	9905      	ldr	r1, [sp, #20]
 8010230:	fa5f fb88 	uxtb.w	fp, r8
 8010234:	434a      	muls	r2, r1
 8010236:	1c56      	adds	r6, r2, #1
 8010238:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801023c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010240:	1212      	asrs	r2, r2, #8
 8010242:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010246:	fa1f fa82 	uxth.w	sl, r2
 801024a:	43d2      	mvns	r2, r2
 801024c:	fb1b fb0a 	smulbb	fp, fp, sl
 8010250:	b2d2      	uxtb	r2, r2
 8010252:	fb09 b902 	mla	r9, r9, r2, fp
 8010256:	fa1f f989 	uxth.w	r9, r9
 801025a:	f109 0b01 	add.w	fp, r9, #1
 801025e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010262:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8010266:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801026a:	fb1b fb0a 	smulbb	fp, fp, sl
 801026e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010272:	fb18 fa0a 	smulbb	sl, r8, sl
 8010276:	f805 9006 	strb.w	r9, [r5, r6]
 801027a:	442e      	add	r6, r5
 801027c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8010280:	f896 9001 	ldrb.w	r9, [r6, #1]
 8010284:	fb08 aa02 	mla	sl, r8, r2, sl
 8010288:	fb09 b902 	mla	r9, r9, r2, fp
 801028c:	fa1f fa8a 	uxth.w	sl, sl
 8010290:	fa1f f989 	uxth.w	r9, r9
 8010294:	f10a 0801 	add.w	r8, sl, #1
 8010298:	f109 0b01 	add.w	fp, r9, #1
 801029c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80102a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80102a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80102a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80102ac:	f886 a002 	strb.w	sl, [r6, #2]
 80102b0:	f886 9001 	strb.w	r9, [r6, #1]
 80102b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102b6:	4474      	add	r4, lr
 80102b8:	3701      	adds	r7, #1
 80102ba:	4410      	add	r0, r2
 80102bc:	e755      	b.n	801016a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80102be:	b007      	add	sp, #28
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	24006a98 	.word	0x24006a98

080102c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	b085      	sub	sp, #20
 80102ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80102d4:	9203      	str	r2, [sp, #12]
 80102d6:	6860      	ldr	r0, [r4, #4]
 80102d8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80102dc:	9100      	str	r1, [sp, #0]
 80102de:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80102e2:	fb00 2606 	mla	r6, r0, r6, r2
 80102e6:	6822      	ldr	r2, [r4, #0]
 80102e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80102ec:	4416      	add	r6, r2
 80102ee:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80102f2:	3201      	adds	r2, #1
 80102f4:	f022 0201 	bic.w	r2, r2, #1
 80102f8:	9201      	str	r2, [sp, #4]
 80102fa:	f8dc 2000 	ldr.w	r2, [ip]
 80102fe:	9202      	str	r2, [sp, #8]
 8010300:	9a00      	ldr	r2, [sp, #0]
 8010302:	2a00      	cmp	r2, #0
 8010304:	dc03      	bgt.n	801030e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8010306:	9a03      	ldr	r2, [sp, #12]
 8010308:	2a00      	cmp	r2, #0
 801030a:	f340 8140 	ble.w	801058e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801030e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010310:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010314:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8010318:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801031a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801031e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010322:	2b00      	cmp	r3, #0
 8010324:	dd0e      	ble.n	8010344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010326:	142a      	asrs	r2, r5, #16
 8010328:	d405      	bmi.n	8010336 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801032a:	4572      	cmp	r2, lr
 801032c:	da03      	bge.n	8010336 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801032e:	1422      	asrs	r2, r4, #16
 8010330:	d401      	bmi.n	8010336 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8010332:	42ba      	cmp	r2, r7
 8010334:	db07      	blt.n	8010346 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010336:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010338:	3b01      	subs	r3, #1
 801033a:	3603      	adds	r6, #3
 801033c:	4415      	add	r5, r2
 801033e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010340:	4414      	add	r4, r2
 8010342:	e7ee      	b.n	8010322 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8010344:	d072      	beq.n	801042c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8010346:	1e5a      	subs	r2, r3, #1
 8010348:	9811      	ldr	r0, [sp, #68]	; 0x44
 801034a:	fb00 5002 	mla	r0, r0, r2, r5
 801034e:	1400      	asrs	r0, r0, #16
 8010350:	d463      	bmi.n	801041a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010352:	4570      	cmp	r0, lr
 8010354:	da61      	bge.n	801041a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010356:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010358:	fb00 4202 	mla	r2, r0, r2, r4
 801035c:	1412      	asrs	r2, r2, #16
 801035e:	d45c      	bmi.n	801041a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010360:	42ba      	cmp	r2, r7
 8010362:	da5a      	bge.n	801041a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010364:	1cf0      	adds	r0, r6, #3
 8010366:	469a      	mov	sl, r3
 8010368:	f1ba 0f00 	cmp.w	sl, #0
 801036c:	dd59      	ble.n	8010422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801036e:	142a      	asrs	r2, r5, #16
 8010370:	9901      	ldr	r1, [sp, #4]
 8010372:	1427      	asrs	r7, r4, #16
 8010374:	fb01 2707 	mla	r7, r1, r7, r2
 8010378:	9902      	ldr	r1, [sp, #8]
 801037a:	087a      	lsrs	r2, r7, #1
 801037c:	5c8a      	ldrb	r2, [r1, r2]
 801037e:	07f9      	lsls	r1, r7, #31
 8010380:	bf54      	ite	pl
 8010382:	f002 020f 	andpl.w	r2, r2, #15
 8010386:	1112      	asrmi	r2, r2, #4
 8010388:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801038c:	b2d2      	uxtb	r2, r2
 801038e:	2a00      	cmp	r2, #0
 8010390:	d03b      	beq.n	801040a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010392:	4980      	ldr	r1, [pc, #512]	; (8010594 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8010394:	2aff      	cmp	r2, #255	; 0xff
 8010396:	680f      	ldr	r7, [r1, #0]
 8010398:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801039c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80103a0:	b2ff      	uxtb	r7, r7
 80103a2:	f000 80ed 	beq.w	8010580 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80103a6:	fa1f f882 	uxth.w	r8, r2
 80103aa:	43d2      	mvns	r2, r2
 80103ac:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80103b0:	fb17 f708 	smulbb	r7, r7, r8
 80103b4:	b2d2      	uxtb	r2, r2
 80103b6:	fb19 f908 	smulbb	r9, r9, r8
 80103ba:	fb0e 7702 	mla	r7, lr, r2, r7
 80103be:	fb1b f808 	smulbb	r8, fp, r8
 80103c2:	b2bf      	uxth	r7, r7
 80103c4:	f107 0e01 	add.w	lr, r7, #1
 80103c8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80103cc:	123f      	asrs	r7, r7, #8
 80103ce:	f800 7c03 	strb.w	r7, [r0, #-3]
 80103d2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80103d6:	fb07 9902 	mla	r9, r7, r2, r9
 80103da:	fa1f f989 	uxth.w	r9, r9
 80103de:	f109 0701 	add.w	r7, r9, #1
 80103e2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80103e6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80103ea:	fb07 8802 	mla	r8, r7, r2, r8
 80103ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80103f2:	fa1f f888 	uxth.w	r8, r8
 80103f6:	f800 9c02 	strb.w	r9, [r0, #-2]
 80103fa:	f108 0201 	add.w	r2, r8, #1
 80103fe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8010402:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010406:	f800 8c01 	strb.w	r8, [r0, #-1]
 801040a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801040c:	3003      	adds	r0, #3
 801040e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010412:	4415      	add	r5, r2
 8010414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010416:	4414      	add	r4, r2
 8010418:	e7a6      	b.n	8010368 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801041a:	2700      	movs	r7, #0
 801041c:	1bda      	subs	r2, r3, r7
 801041e:	2a00      	cmp	r2, #0
 8010420:	dc40      	bgt.n	80104a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801042a:	441e      	add	r6, r3
 801042c:	9b00      	ldr	r3, [sp, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	f340 80ad 	ble.w	801058e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8010434:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801043a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801043e:	eeb0 6a62 	vmov.f32	s12, s5
 8010442:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010446:	ee31 1a05 	vadd.f32	s2, s2, s10
 801044a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801044e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010452:	eeb0 6a43 	vmov.f32	s12, s6
 8010456:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801045a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801045e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010462:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010466:	ee77 2a62 	vsub.f32	s5, s14, s5
 801046a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801046e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010472:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010476:	ee12 2a90 	vmov	r2, s5
 801047a:	eef0 2a47 	vmov.f32	s5, s14
 801047e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010482:	ee13 2a10 	vmov	r2, s6
 8010486:	9311      	str	r3, [sp, #68]	; 0x44
 8010488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801048a:	eeb0 3a67 	vmov.f32	s6, s15
 801048e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010492:	9312      	str	r3, [sp, #72]	; 0x48
 8010494:	9b00      	ldr	r3, [sp, #0]
 8010496:	9a03      	ldr	r2, [sp, #12]
 8010498:	3b01      	subs	r3, #1
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801049e:	bf08      	it	eq
 80104a0:	4613      	moveq	r3, r2
 80104a2:	e72d      	b.n	8010300 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80104a4:	1428      	asrs	r0, r5, #16
 80104a6:	d45c      	bmi.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80104a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80104ac:	4282      	cmp	r2, r0
 80104ae:	dd58      	ble.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80104b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80104b4:	d455      	bmi.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80104b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80104ba:	4572      	cmp	r2, lr
 80104bc:	dd51      	ble.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80104be:	9a01      	ldr	r2, [sp, #4]
 80104c0:	9902      	ldr	r1, [sp, #8]
 80104c2:	fb0e 0002 	mla	r0, lr, r2, r0
 80104c6:	0842      	lsrs	r2, r0, #1
 80104c8:	07c0      	lsls	r0, r0, #31
 80104ca:	5c8a      	ldrb	r2, [r1, r2]
 80104cc:	bf54      	ite	pl
 80104ce:	f002 020f 	andpl.w	r2, r2, #15
 80104d2:	1112      	asrmi	r2, r2, #4
 80104d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80104d8:	b2d2      	uxtb	r2, r2
 80104da:	2a00      	cmp	r2, #0
 80104dc:	d041      	beq.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80104de:	492d      	ldr	r1, [pc, #180]	; (8010594 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80104e0:	2aff      	cmp	r2, #255	; 0xff
 80104e2:	6808      	ldr	r0, [r1, #0]
 80104e4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80104e8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80104ec:	fa5f fe80 	uxtb.w	lr, r0
 80104f0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80104f4:	d03b      	beq.n	801056e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80104f6:	fa1f f982 	uxth.w	r9, r2
 80104fa:	4438      	add	r0, r7
 80104fc:	43d2      	mvns	r2, r2
 80104fe:	f816 8000 	ldrb.w	r8, [r6, r0]
 8010502:	fb1e fe09 	smulbb	lr, lr, r9
 8010506:	fb1a fa09 	smulbb	sl, sl, r9
 801050a:	b2d2      	uxtb	r2, r2
 801050c:	fb1b f909 	smulbb	r9, fp, r9
 8010510:	fb08 ee02 	mla	lr, r8, r2, lr
 8010514:	fa1f fe8e 	uxth.w	lr, lr
 8010518:	f10e 0801 	add.w	r8, lr, #1
 801051c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8010520:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010524:	f806 e000 	strb.w	lr, [r6, r0]
 8010528:	4430      	add	r0, r6
 801052a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801052e:	fb0e aa02 	mla	sl, lr, r2, sl
 8010532:	fa1f fa8a 	uxth.w	sl, sl
 8010536:	f10a 0e01 	add.w	lr, sl, #1
 801053a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801053e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8010542:	fb0e 9902 	mla	r9, lr, r2, r9
 8010546:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801054a:	fa1f f989 	uxth.w	r9, r9
 801054e:	f880 a001 	strb.w	sl, [r0, #1]
 8010552:	f109 0201 	add.w	r2, r9, #1
 8010556:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801055a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801055e:	f880 9002 	strb.w	r9, [r0, #2]
 8010562:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010564:	3701      	adds	r7, #1
 8010566:	4415      	add	r5, r2
 8010568:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801056a:	4414      	add	r4, r2
 801056c:	e756      	b.n	801041c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801056e:	4438      	add	r0, r7
 8010570:	f806 e000 	strb.w	lr, [r6, r0]
 8010574:	4430      	add	r0, r6
 8010576:	f880 a001 	strb.w	sl, [r0, #1]
 801057a:	f880 b002 	strb.w	fp, [r0, #2]
 801057e:	e7f0      	b.n	8010562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8010580:	f800 7c03 	strb.w	r7, [r0, #-3]
 8010584:	f800 9c02 	strb.w	r9, [r0, #-2]
 8010588:	f800 bc01 	strb.w	fp, [r0, #-1]
 801058c:	e73d      	b.n	801040a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801058e:	b005      	add	sp, #20
 8010590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010594:	24006a98 	.word	0x24006a98

08010598 <_ZN8touchgfx8LCD24bppD1Ev>:
 8010598:	4770      	bx	lr

0801059a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801059a:	4770      	bx	lr

0801059c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801059c:	4770      	bx	lr

0801059e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801059e:	4770      	bx	lr

080105a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80105a0:	4770      	bx	lr

080105a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80105a2:	4770      	bx	lr

080105a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80105a4:	4770      	bx	lr

080105a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80105a6:	4770      	bx	lr

080105a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80105a8:	4770      	bx	lr

080105aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80105aa:	4770      	bx	lr

080105ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80105ac:	4770      	bx	lr

080105ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80105ae:	4770      	bx	lr

080105b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80105b0:	4770      	bx	lr

080105b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80105b2:	4770      	bx	lr

080105b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80105b4:	4770      	bx	lr

080105b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80105b6:	4770      	bx	lr

080105b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80105b8:	4770      	bx	lr

080105ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80105ba:	4770      	bx	lr

080105bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80105bc:	4770      	bx	lr

080105be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80105be:	4770      	bx	lr

080105c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80105c0:	4770      	bx	lr
	...

080105c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80105c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c6:	4606      	mov	r6, r0
 80105c8:	b087      	sub	sp, #28
 80105ca:	4615      	mov	r5, r2
 80105cc:	461f      	mov	r7, r3
 80105ce:	b353      	cbz	r3, 8010626 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80105d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	dd26      	ble.n	8010626 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80105d8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	dd22      	ble.n	8010626 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80105e0:	6808      	ldr	r0, [r1, #0]
 80105e2:	aa04      	add	r2, sp, #16
 80105e4:	6849      	ldr	r1, [r1, #4]
 80105e6:	4c1b      	ldr	r4, [pc, #108]	; (8010654 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80105e8:	c203      	stmia	r2!, {r0, r1}
 80105ea:	a804      	add	r0, sp, #16
 80105ec:	f7fb fb46 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80105f0:	6820      	ldr	r0, [r4, #0]
 80105f2:	6803      	ldr	r3, [r0, #0]
 80105f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f6:	4798      	blx	r3
 80105f8:	2fff      	cmp	r7, #255	; 0xff
 80105fa:	d016      	beq.n	801062a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80105fc:	f010 0f08 	tst.w	r0, #8
 8010600:	6820      	ldr	r0, [r4, #0]
 8010602:	d015      	beq.n	8010630 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8010604:	2400      	movs	r4, #0
 8010606:	6801      	ldr	r1, [r0, #0]
 8010608:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801060c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010610:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8010614:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8010618:	9401      	str	r4, [sp, #4]
 801061a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801061e:	9400      	str	r4, [sp, #0]
 8010620:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8010622:	4629      	mov	r1, r5
 8010624:	47a0      	blx	r4
 8010626:	b007      	add	sp, #28
 8010628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062a:	f010 0f02 	tst.w	r0, #2
 801062e:	e7e7      	b.n	8010600 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8010630:	6803      	ldr	r3, [r0, #0]
 8010632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010634:	4798      	blx	r3
 8010636:	4b08      	ldr	r3, [pc, #32]	; (8010658 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8010638:	4601      	mov	r1, r0
 801063a:	4630      	mov	r0, r6
 801063c:	881a      	ldrh	r2, [r3, #0]
 801063e:	6833      	ldr	r3, [r6, #0]
 8010640:	e9cd 5700 	strd	r5, r7, [sp]
 8010644:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010646:	ab04      	add	r3, sp, #16
 8010648:	47a8      	blx	r5
 801064a:	6820      	ldr	r0, [r4, #0]
 801064c:	6803      	ldr	r3, [r0, #0]
 801064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010650:	4798      	blx	r3
 8010652:	e7e8      	b.n	8010626 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8010654:	24006a90 	.word	0x24006a90
 8010658:	24006a8a 	.word	0x24006a8a

0801065c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801065c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010660:	b08b      	sub	sp, #44	; 0x2c
 8010662:	460d      	mov	r5, r1
 8010664:	4616      	mov	r6, r2
 8010666:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801066a:	f1b8 0f00 	cmp.w	r8, #0
 801066e:	d047      	beq.n	8010700 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8010670:	6810      	ldr	r0, [r2, #0]
 8010672:	ac06      	add	r4, sp, #24
 8010674:	6851      	ldr	r1, [r2, #4]
 8010676:	4f51      	ldr	r7, [pc, #324]	; (80107bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8010678:	c403      	stmia	r4!, {r0, r1}
 801067a:	6818      	ldr	r0, [r3, #0]
 801067c:	ac08      	add	r4, sp, #32
 801067e:	6859      	ldr	r1, [r3, #4]
 8010680:	c403      	stmia	r4!, {r0, r1}
 8010682:	a806      	add	r0, sp, #24
 8010684:	f7fb fafa 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010688:	4631      	mov	r1, r6
 801068a:	a808      	add	r0, sp, #32
 801068c:	f7fb fb1e 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010690:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010694:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8010698:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801069c:	6838      	ldr	r0, [r7, #0]
 801069e:	fb11 2103 	smlabb	r1, r1, r3, r2
 80106a2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80106a6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80106aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80106ae:	440d      	add	r5, r1
 80106b0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80106b4:	440a      	add	r2, r1
 80106b6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80106ba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80106be:	4413      	add	r3, r2
 80106c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80106c4:	6803      	ldr	r3, [r0, #0]
 80106c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c8:	4798      	blx	r3
 80106ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80106ce:	d01a      	beq.n	8010706 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80106d0:	f010 0f04 	tst.w	r0, #4
 80106d4:	6838      	ldr	r0, [r7, #0]
 80106d6:	d019      	beq.n	801070c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80106d8:	2100      	movs	r1, #0
 80106da:	6807      	ldr	r7, [r0, #0]
 80106dc:	b2a4      	uxth	r4, r4
 80106de:	f8cd 800c 	str.w	r8, [sp, #12]
 80106e2:	b2b6      	uxth	r6, r6
 80106e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80106e8:	9401      	str	r4, [sp, #4]
 80106ea:	9600      	str	r6, [sp, #0]
 80106ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80106f0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80106f4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80106f8:	9102      	str	r1, [sp, #8]
 80106fa:	4629      	mov	r1, r5
 80106fc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80106fe:	47a0      	blx	r4
 8010700:	b00b      	add	sp, #44	; 0x2c
 8010702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010706:	f010 0f01 	tst.w	r0, #1
 801070a:	e7e3      	b.n	80106d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801070c:	6803      	ldr	r3, [r0, #0]
 801070e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010710:	4798      	blx	r3
 8010712:	4a2b      	ldr	r2, [pc, #172]	; (80107c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8010714:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8010718:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801071c:	8813      	ldrh	r3, [r2, #0]
 801071e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8010722:	fb03 f404 	mul.w	r4, r3, r4
 8010726:	fb03 c101 	mla	r1, r3, r1, ip
 801072a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801072e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010732:	4408      	add	r0, r1
 8010734:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010738:	4404      	add	r4, r0
 801073a:	d02e      	beq.n	801079a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801073c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8010740:	1b9b      	subs	r3, r3, r6
 8010742:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8010746:	1b96      	subs	r6, r2, r6
 8010748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801074c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010750:	42a0      	cmp	r0, r4
 8010752:	d22d      	bcs.n	80107b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8010754:	eb00 0e01 	add.w	lr, r0, r1
 8010758:	4570      	cmp	r0, lr
 801075a:	d210      	bcs.n	801077e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801075c:	f890 9000 	ldrb.w	r9, [r0]
 8010760:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010764:	fb19 f90c 	smulbb	r9, r9, ip
 8010768:	fb02 9208 	mla	r2, r2, r8, r9
 801076c:	b292      	uxth	r2, r2
 801076e:	f102 0901 	add.w	r9, r2, #1
 8010772:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8010776:	1212      	asrs	r2, r2, #8
 8010778:	f800 2b01 	strb.w	r2, [r0], #1
 801077c:	e7ec      	b.n	8010758 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801077e:	4418      	add	r0, r3
 8010780:	4435      	add	r5, r6
 8010782:	e7e5      	b.n	8010750 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8010784:	8813      	ldrh	r3, [r2, #0]
 8010786:	1b9b      	subs	r3, r3, r6
 8010788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801078c:	4418      	add	r0, r3
 801078e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010792:	1b9b      	subs	r3, r3, r6
 8010794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010798:	441d      	add	r5, r3
 801079a:	42a0      	cmp	r0, r4
 801079c:	d208      	bcs.n	80107b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801079e:	eb00 0c01 	add.w	ip, r0, r1
 80107a2:	4560      	cmp	r0, ip
 80107a4:	d2ee      	bcs.n	8010784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80107a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80107aa:	f800 3b01 	strb.w	r3, [r0], #1
 80107ae:	e7f8      	b.n	80107a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80107b0:	6838      	ldr	r0, [r7, #0]
 80107b2:	6803      	ldr	r3, [r0, #0]
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	4798      	blx	r3
 80107b8:	e7a2      	b.n	8010700 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80107ba:	bf00      	nop
 80107bc:	24006a90 	.word	0x24006a90
 80107c0:	24006a8a 	.word	0x24006a8a

080107c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80107c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107c6:	2300      	movs	r3, #0
 80107c8:	b085      	sub	sp, #20
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	4b41      	ldr	r3, [pc, #260]	; (80108d4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d136      	bne.n	8010842 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80107d4:	4a40      	ldr	r2, [pc, #256]	; (80108d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80107d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80107da:	f8ad 2004 	strh.w	r2, [sp, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d131      	bne.n	8010846 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80107e2:	4b3e      	ldr	r3, [pc, #248]	; (80108dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80107e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107e8:	ac02      	add	r4, sp, #8
 80107ea:	6808      	ldr	r0, [r1, #0]
 80107ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107f0:	ab02      	add	r3, sp, #8
 80107f2:	6849      	ldr	r1, [r1, #4]
 80107f4:	4d3a      	ldr	r5, [pc, #232]	; (80108e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80107f6:	c303      	stmia	r3!, {r0, r1}
 80107f8:	4669      	mov	r1, sp
 80107fa:	4620      	mov	r0, r4
 80107fc:	f7fb fa66 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010800:	4668      	mov	r0, sp
 8010802:	f7fb fa3b 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010806:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801080a:	f8bd 2000 	ldrh.w	r2, [sp]
 801080e:	462e      	mov	r6, r5
 8010810:	6828      	ldr	r0, [r5, #0]
 8010812:	4413      	add	r3, r2
 8010814:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010818:	f8ad 3008 	strh.w	r3, [sp, #8]
 801081c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010820:	4413      	add	r3, r2
 8010822:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010826:	6803      	ldr	r3, [r0, #0]
 8010828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801082a:	4798      	blx	r3
 801082c:	f010 0f01 	tst.w	r0, #1
 8010830:	d00b      	beq.n	801084a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8010832:	6828      	ldr	r0, [r5, #0]
 8010834:	6803      	ldr	r3, [r0, #0]
 8010836:	e894 0006 	ldmia.w	r4, {r1, r2}
 801083a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801083c:	4798      	blx	r3
 801083e:	b005      	add	sp, #20
 8010840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010842:	4a26      	ldr	r2, [pc, #152]	; (80108dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8010844:	e7c7      	b.n	80107d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8010846:	4b24      	ldr	r3, [pc, #144]	; (80108d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8010848:	e7cc      	b.n	80107e4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801084a:	6830      	ldr	r0, [r6, #0]
 801084c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8010850:	6803      	ldr	r3, [r0, #0]
 8010852:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8010856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010858:	4798      	blx	r3
 801085a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801085e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010862:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8010866:	fb14 3402 	smlabb	r4, r4, r2, r3
 801086a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801086e:	4404      	add	r4, r0
 8010870:	6830      	ldr	r0, [r6, #0]
 8010872:	6803      	ldr	r3, [r0, #0]
 8010874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010876:	4798      	blx	r3
 8010878:	4917      	ldr	r1, [pc, #92]	; (80108d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801087a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801087e:	880b      	ldrh	r3, [r1, #0]
 8010880:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8010884:	fb03 c202 	mla	r2, r3, r2, ip
 8010888:	437b      	muls	r3, r7
 801088a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801088e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010896:	4410      	add	r0, r2
 8010898:	18c2      	adds	r2, r0, r3
 801089a:	4290      	cmp	r0, r2
 801089c:	d214      	bcs.n	80108c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801089e:	eb00 0c07 	add.w	ip, r0, r7
 80108a2:	4560      	cmp	r0, ip
 80108a4:	d204      	bcs.n	80108b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80108a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80108aa:	f800 3b01 	strb.w	r3, [r0], #1
 80108ae:	e7f8      	b.n	80108a2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80108b0:	880b      	ldrh	r3, [r1, #0]
 80108b2:	1b5b      	subs	r3, r3, r5
 80108b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108b8:	4418      	add	r0, r3
 80108ba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80108be:	1b5b      	subs	r3, r3, r5
 80108c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108c4:	441c      	add	r4, r3
 80108c6:	e7e8      	b.n	801089a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80108c8:	6830      	ldr	r0, [r6, #0]
 80108ca:	6803      	ldr	r3, [r0, #0]
 80108cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ce:	4798      	blx	r3
 80108d0:	e7b5      	b.n	801083e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80108d2:	bf00      	nop
 80108d4:	24006a88 	.word	0x24006a88
 80108d8:	24006a8a 	.word	0x24006a8a
 80108dc:	24006a8c 	.word	0x24006a8c
 80108e0:	24006a90 	.word	0x24006a90

080108e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	b089      	sub	sp, #36	; 0x24
 80108ea:	4607      	mov	r7, r0
 80108ec:	4689      	mov	r9, r1
 80108ee:	4692      	mov	sl, r2
 80108f0:	ac08      	add	r4, sp, #32
 80108f2:	461e      	mov	r6, r3
 80108f4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80108f8:	4620      	mov	r0, r4
 80108fa:	f7fe f8ef 	bl	800eadc <_ZNK8touchgfx6Bitmap7getDataEv>
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	4605      	mov	r5, r0
 8010902:	4620      	mov	r0, r4
 8010904:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8010908:	f7fe f834 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801090c:	4683      	mov	fp, r0
 801090e:	4620      	mov	r0, r4
 8010910:	f7fe f864 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010914:	4653      	mov	r3, sl
 8010916:	464a      	mov	r2, r9
 8010918:	4639      	mov	r1, r7
 801091a:	9500      	str	r5, [sp, #0]
 801091c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8010920:	a806      	add	r0, sp, #24
 8010922:	47c0      	blx	r8
 8010924:	a906      	add	r1, sp, #24
 8010926:	4630      	mov	r0, r6
 8010928:	f7fd ff08 	bl	800e73c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801092c:	4628      	mov	r0, r5
 801092e:	b009      	add	sp, #36	; 0x24
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010934 <_ZN8touchgfx8LCD24bppD0Ev>:
 8010934:	b510      	push	{r4, lr}
 8010936:	4604      	mov	r4, r0
 8010938:	2158      	movs	r1, #88	; 0x58
 801093a:	f006 f915 	bl	8016b68 <_ZdlPvj>
 801093e:	4620      	mov	r0, r4
 8010940:	bd10      	pop	{r4, pc}

08010942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8010942:	b510      	push	{r4, lr}
 8010944:	4604      	mov	r4, r0
 8010946:	2104      	movs	r1, #4
 8010948:	f006 f90e 	bl	8016b68 <_ZdlPvj>
 801094c:	4620      	mov	r0, r4
 801094e:	bd10      	pop	{r4, pc}

08010950 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8010950:	b510      	push	{r4, lr}
 8010952:	4604      	mov	r4, r0
 8010954:	2104      	movs	r1, #4
 8010956:	f006 f907 	bl	8016b68 <_ZdlPvj>
 801095a:	4620      	mov	r0, r4
 801095c:	bd10      	pop	{r4, pc}

0801095e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801095e:	b510      	push	{r4, lr}
 8010960:	4604      	mov	r4, r0
 8010962:	2104      	movs	r1, #4
 8010964:	f006 f900 	bl	8016b68 <_ZdlPvj>
 8010968:	4620      	mov	r0, r4
 801096a:	bd10      	pop	{r4, pc}

0801096c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801096c:	b510      	push	{r4, lr}
 801096e:	4604      	mov	r4, r0
 8010970:	2104      	movs	r1, #4
 8010972:	f006 f8f9 	bl	8016b68 <_ZdlPvj>
 8010976:	4620      	mov	r0, r4
 8010978:	bd10      	pop	{r4, pc}

0801097a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801097a:	b510      	push	{r4, lr}
 801097c:	4604      	mov	r4, r0
 801097e:	2104      	movs	r1, #4
 8010980:	f006 f8f2 	bl	8016b68 <_ZdlPvj>
 8010984:	4620      	mov	r0, r4
 8010986:	bd10      	pop	{r4, pc}

08010988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8010988:	b510      	push	{r4, lr}
 801098a:	4604      	mov	r4, r0
 801098c:	2104      	movs	r1, #4
 801098e:	f006 f8eb 	bl	8016b68 <_ZdlPvj>
 8010992:	4620      	mov	r0, r4
 8010994:	bd10      	pop	{r4, pc}

08010996 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8010996:	b510      	push	{r4, lr}
 8010998:	4604      	mov	r4, r0
 801099a:	2104      	movs	r1, #4
 801099c:	f006 f8e4 	bl	8016b68 <_ZdlPvj>
 80109a0:	4620      	mov	r0, r4
 80109a2:	bd10      	pop	{r4, pc}

080109a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80109a4:	b510      	push	{r4, lr}
 80109a6:	4604      	mov	r4, r0
 80109a8:	2104      	movs	r1, #4
 80109aa:	f006 f8dd 	bl	8016b68 <_ZdlPvj>
 80109ae:	4620      	mov	r0, r4
 80109b0:	bd10      	pop	{r4, pc}

080109b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80109b2:	b510      	push	{r4, lr}
 80109b4:	4604      	mov	r4, r0
 80109b6:	2104      	movs	r1, #4
 80109b8:	f006 f8d6 	bl	8016b68 <_ZdlPvj>
 80109bc:	4620      	mov	r0, r4
 80109be:	bd10      	pop	{r4, pc}

080109c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80109c0:	b510      	push	{r4, lr}
 80109c2:	4604      	mov	r4, r0
 80109c4:	2104      	movs	r1, #4
 80109c6:	f006 f8cf 	bl	8016b68 <_ZdlPvj>
 80109ca:	4620      	mov	r0, r4
 80109cc:	bd10      	pop	{r4, pc}

080109ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80109ce:	b510      	push	{r4, lr}
 80109d0:	4604      	mov	r4, r0
 80109d2:	2104      	movs	r1, #4
 80109d4:	f006 f8c8 	bl	8016b68 <_ZdlPvj>
 80109d8:	4620      	mov	r0, r4
 80109da:	bd10      	pop	{r4, pc}

080109dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80109dc:	b510      	push	{r4, lr}
 80109de:	4604      	mov	r4, r0
 80109e0:	2104      	movs	r1, #4
 80109e2:	f006 f8c1 	bl	8016b68 <_ZdlPvj>
 80109e6:	4620      	mov	r0, r4
 80109e8:	bd10      	pop	{r4, pc}

080109ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80109ea:	b510      	push	{r4, lr}
 80109ec:	4604      	mov	r4, r0
 80109ee:	2104      	movs	r1, #4
 80109f0:	f006 f8ba 	bl	8016b68 <_ZdlPvj>
 80109f4:	4620      	mov	r0, r4
 80109f6:	bd10      	pop	{r4, pc}

080109f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80109f8:	b510      	push	{r4, lr}
 80109fa:	4604      	mov	r4, r0
 80109fc:	2104      	movs	r1, #4
 80109fe:	f006 f8b3 	bl	8016b68 <_ZdlPvj>
 8010a02:	4620      	mov	r0, r4
 8010a04:	bd10      	pop	{r4, pc}

08010a06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8010a06:	b510      	push	{r4, lr}
 8010a08:	4604      	mov	r4, r0
 8010a0a:	2104      	movs	r1, #4
 8010a0c:	f006 f8ac 	bl	8016b68 <_ZdlPvj>
 8010a10:	4620      	mov	r0, r4
 8010a12:	bd10      	pop	{r4, pc}

08010a14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	4604      	mov	r4, r0
 8010a18:	2104      	movs	r1, #4
 8010a1a:	f006 f8a5 	bl	8016b68 <_ZdlPvj>
 8010a1e:	4620      	mov	r0, r4
 8010a20:	bd10      	pop	{r4, pc}

08010a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8010a22:	b510      	push	{r4, lr}
 8010a24:	4604      	mov	r4, r0
 8010a26:	2104      	movs	r1, #4
 8010a28:	f006 f89e 	bl	8016b68 <_ZdlPvj>
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	bd10      	pop	{r4, pc}

08010a30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8010a30:	b510      	push	{r4, lr}
 8010a32:	4604      	mov	r4, r0
 8010a34:	2104      	movs	r1, #4
 8010a36:	f006 f897 	bl	8016b68 <_ZdlPvj>
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	bd10      	pop	{r4, pc}

08010a3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8010a3e:	b510      	push	{r4, lr}
 8010a40:	4604      	mov	r4, r0
 8010a42:	2104      	movs	r1, #4
 8010a44:	f006 f890 	bl	8016b68 <_ZdlPvj>
 8010a48:	4620      	mov	r0, r4
 8010a4a:	bd10      	pop	{r4, pc}

08010a4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8010a4c:	b510      	push	{r4, lr}
 8010a4e:	4604      	mov	r4, r0
 8010a50:	2104      	movs	r1, #4
 8010a52:	f006 f889 	bl	8016b68 <_ZdlPvj>
 8010a56:	4620      	mov	r0, r4
 8010a58:	bd10      	pop	{r4, pc}

08010a5a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8010a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a5e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010a62:	9c06      	ldr	r4, [sp, #24]
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d06e      	beq.n	8010b46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8010a68:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8010a6c:	2d00      	cmp	r5, #0
 8010a6e:	dd6a      	ble.n	8010b46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8010a70:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8010a74:	f1bc 0f00 	cmp.w	ip, #0
 8010a78:	dd65      	ble.n	8010b46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8010a7a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8010a7e:	28ff      	cmp	r0, #255	; 0xff
 8010a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a84:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8010a88:	fb02 3306 	mla	r3, r2, r6, r3
 8010a8c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8010a90:	b2e4      	uxtb	r4, r4
 8010a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a96:	4419      	add	r1, r3
 8010a98:	fb02 f30c 	mul.w	r3, r2, ip
 8010a9c:	eba2 0205 	sub.w	r2, r2, r5
 8010aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010aa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010aa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010aac:	440b      	add	r3, r1
 8010aae:	d03e      	beq.n	8010b2e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8010ab0:	fa1f fc80 	uxth.w	ip, r0
 8010ab4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8010ab8:	fb06 f60c 	mul.w	r6, r6, ip
 8010abc:	b280      	uxth	r0, r0
 8010abe:	fb07 f70c 	mul.w	r7, r7, ip
 8010ac2:	fb04 f40c 	mul.w	r4, r4, ip
 8010ac6:	4299      	cmp	r1, r3
 8010ac8:	d23d      	bcs.n	8010b46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8010aca:	eb01 0c05 	add.w	ip, r1, r5
 8010ace:	458c      	cmp	ip, r1
 8010ad0:	f101 0e03 	add.w	lr, r1, #3
 8010ad4:	d928      	bls.n	8010b28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8010ad6:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8010ada:	fb11 f100 	smulbb	r1, r1, r0
 8010ade:	4421      	add	r1, r4
 8010ae0:	b289      	uxth	r1, r1
 8010ae2:	f101 0801 	add.w	r8, r1, #1
 8010ae6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8010aea:	1209      	asrs	r1, r1, #8
 8010aec:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8010af0:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8010af4:	fb11 f100 	smulbb	r1, r1, r0
 8010af8:	4439      	add	r1, r7
 8010afa:	b289      	uxth	r1, r1
 8010afc:	f101 0801 	add.w	r8, r1, #1
 8010b00:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8010b04:	1209      	asrs	r1, r1, #8
 8010b06:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8010b0a:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8010b0e:	fb11 f100 	smulbb	r1, r1, r0
 8010b12:	4431      	add	r1, r6
 8010b14:	b289      	uxth	r1, r1
 8010b16:	f101 0801 	add.w	r8, r1, #1
 8010b1a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8010b1e:	1209      	asrs	r1, r1, #8
 8010b20:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8010b24:	4671      	mov	r1, lr
 8010b26:	e7d2      	b.n	8010ace <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8010b28:	4411      	add	r1, r2
 8010b2a:	e7cc      	b.n	8010ac6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8010b2c:	4411      	add	r1, r2
 8010b2e:	4299      	cmp	r1, r3
 8010b30:	d209      	bcs.n	8010b46 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8010b32:	1948      	adds	r0, r1, r5
 8010b34:	4281      	cmp	r1, r0
 8010b36:	d2f9      	bcs.n	8010b2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8010b38:	700c      	strb	r4, [r1, #0]
 8010b3a:	3103      	adds	r1, #3
 8010b3c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8010b40:	f801 6c01 	strb.w	r6, [r1, #-1]
 8010b44:	e7f6      	b.n	8010b34 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8010b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010b4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b50:	b093      	sub	sp, #76	; 0x4c
 8010b52:	4699      	mov	r9, r3
 8010b54:	4617      	mov	r7, r2
 8010b56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010b5a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8010b5e:	4604      	mov	r4, r0
 8010b60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b64:	a80c      	add	r0, sp, #48	; 0x30
 8010b66:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	4649      	mov	r1, r9
 8010b6e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8010b72:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010b76:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8010b7a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8010b7e:	f7f9 f837 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 8010b82:	4639      	mov	r1, r7
 8010b84:	a80c      	add	r0, sp, #48	; 0x30
 8010b86:	f7f9 f833 	bl	8009bf0 <_ZN8touchgfx4RectaNERKS0_>
 8010b8a:	4b78      	ldr	r3, [pc, #480]	; (8010d6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8010b8c:	8818      	ldrh	r0, [r3, #0]
 8010b8e:	4b78      	ldr	r3, [pc, #480]	; (8010d70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8010b90:	b202      	sxth	r2, r0
 8010b92:	8819      	ldrh	r1, [r3, #0]
 8010b94:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8010b98:	b20f      	sxth	r7, r1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	da07      	bge.n	8010bae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8010b9e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8010ba2:	4463      	add	r3, ip
 8010ba4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010ba8:	2300      	movs	r3, #0
 8010baa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8010bae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8010bb2:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	4594      	cmp	ip, r2
 8010bba:	bfc4      	itt	gt
 8010bbc:	1ac2      	subgt	r2, r0, r3
 8010bbe:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8010bc2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8010bc6:	2a00      	cmp	r2, #0
 8010bc8:	da07      	bge.n	8010bda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8010bca:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8010bce:	4462      	add	r2, ip
 8010bd0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8010bda:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8010bde:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8010be2:	1abf      	subs	r7, r7, r2
 8010be4:	45bc      	cmp	ip, r7
 8010be6:	f8df c190 	ldr.w	ip, [pc, #400]	; 8010d78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8010bea:	bfc8      	it	gt
 8010bec:	1a8f      	subgt	r7, r1, r2
 8010bee:	f89c c000 	ldrb.w	ip, [ip]
 8010bf2:	bfc8      	it	gt
 8010bf4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8010bf8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8010bfc:	f1bc 0f00 	cmp.w	ip, #0
 8010c00:	d176      	bne.n	8010cf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8010c02:	4287      	cmp	r7, r0
 8010c04:	bf14      	ite	ne
 8010c06:	2100      	movne	r1, #0
 8010c08:	2101      	moveq	r1, #1
 8010c0a:	2f00      	cmp	r7, #0
 8010c0c:	9107      	str	r1, [sp, #28]
 8010c0e:	dd73      	ble.n	8010cf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8010c10:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8010c14:	2900      	cmp	r1, #0
 8010c16:	9104      	str	r1, [sp, #16]
 8010c18:	dd6e      	ble.n	8010cf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8010c1a:	f8b9 1000 	ldrh.w	r1, [r9]
 8010c1e:	a80e      	add	r0, sp, #56	; 0x38
 8010c20:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8010c24:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010c28:	1a5b      	subs	r3, r3, r1
 8010c2a:	a910      	add	r1, sp, #64	; 0x40
 8010c2c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8010c30:	b21b      	sxth	r3, r3
 8010c32:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8010c36:	f8df a144 	ldr.w	sl, [pc, #324]	; 8010d7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8010c3a:	9305      	str	r3, [sp, #20]
 8010c3c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8010c40:	1ad2      	subs	r2, r2, r3
 8010c42:	b213      	sxth	r3, r2
 8010c44:	9306      	str	r3, [sp, #24]
 8010c46:	9b05      	ldr	r3, [sp, #20]
 8010c48:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8010c4c:	9b06      	ldr	r3, [sp, #24]
 8010c4e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8010c52:	9b04      	ldr	r3, [sp, #16]
 8010c54:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010c58:	2300      	movs	r3, #0
 8010c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8010c5c:	f7fb f836 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010c60:	4640      	mov	r0, r8
 8010c62:	f7fb f80b 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010c66:	a810      	add	r0, sp, #64	; 0x40
 8010c68:	f7fb f808 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010c6c:	4b41      	ldr	r3, [pc, #260]	; (8010d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8010c6e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8010c72:	4628      	mov	r0, r5
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	9308      	str	r3, [sp, #32]
 8010c78:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	9303      	str	r3, [sp, #12]
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c84:	4798      	blx	r3
 8010c86:	9a03      	ldr	r2, [sp, #12]
 8010c88:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010c8c:	4681      	mov	r9, r0
 8010c8e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010c92:	fb13 f302 	smulbb	r3, r3, r2
 8010c96:	2203      	movs	r2, #3
 8010c98:	f8da 0000 	ldr.w	r0, [sl]
 8010c9c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010ca0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8010ca2:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ca4:	441d      	add	r5, r3
 8010ca6:	6803      	ldr	r3, [r0, #0]
 8010ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010caa:	4798      	blx	r3
 8010cac:	9009      	str	r0, [sp, #36]	; 0x24
 8010cae:	f8da 0000 	ldr.w	r0, [sl]
 8010cb2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8010cb6:	6803      	ldr	r3, [r0, #0]
 8010cb8:	910a      	str	r1, [sp, #40]	; 0x28
 8010cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cbc:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8010cc0:	4798      	blx	r3
 8010cc2:	f010 0f01 	tst.w	r0, #1
 8010cc6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010cca:	d01e      	beq.n	8010d0a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8010ccc:	f8da 0000 	ldr.w	r0, [sl]
 8010cd0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8010cd4:	6803      	ldr	r3, [r0, #0]
 8010cd6:	9200      	str	r2, [sp, #0]
 8010cd8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010cda:	462b      	mov	r3, r5
 8010cdc:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010ce0:	47b0      	blx	r6
 8010ce2:	9b05      	ldr	r3, [sp, #20]
 8010ce4:	80a7      	strh	r7, [r4, #4]
 8010ce6:	8023      	strh	r3, [r4, #0]
 8010ce8:	9b06      	ldr	r3, [sp, #24]
 8010cea:	8063      	strh	r3, [r4, #2]
 8010cec:	9b04      	ldr	r3, [sp, #16]
 8010cee:	e007      	b.n	8010d00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8010cf0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8010cf4:	4288      	cmp	r0, r1
 8010cf6:	e785      	b.n	8010c04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	8023      	strh	r3, [r4, #0]
 8010cfc:	8063      	strh	r3, [r4, #2]
 8010cfe:	80a3      	strh	r3, [r4, #4]
 8010d00:	4620      	mov	r0, r4
 8010d02:	80e3      	strh	r3, [r4, #6]
 8010d04:	b013      	add	sp, #76	; 0x4c
 8010d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0a:	fb09 f606 	mul.w	r6, r9, r6
 8010d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d10:	fb11 6602 	smlabb	r6, r1, r2, r6
 8010d14:	9a07      	ldr	r2, [sp, #28]
 8010d16:	4433      	add	r3, r6
 8010d18:	461e      	mov	r6, r3
 8010d1a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8010d1e:	b16a      	cbz	r2, 8010d3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8010d20:	9a08      	ldr	r2, [sp, #32]
 8010d22:	4593      	cmp	fp, r2
 8010d24:	d10a      	bne.n	8010d3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8010d26:	f8da 0000 	ldr.w	r0, [sl]
 8010d2a:	fb09 f303 	mul.w	r3, r9, r3
 8010d2e:	4629      	mov	r1, r5
 8010d30:	6802      	ldr	r2, [r0, #0]
 8010d32:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8010d36:	4632      	mov	r2, r6
 8010d38:	47d0      	blx	sl
 8010d3a:	e7d2      	b.n	8010ce2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8010d3c:	9a03      	ldr	r2, [sp, #12]
 8010d3e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8010d7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8010d42:	fb02 5803 	mla	r8, r2, r3, r5
 8010d46:	4545      	cmp	r5, r8
 8010d48:	d2cb      	bcs.n	8010ce2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8010d4a:	f8db 0000 	ldr.w	r0, [fp]
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8010d54:	6802      	ldr	r2, [r0, #0]
 8010d56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d5a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8010d5e:	4632      	mov	r2, r6
 8010d60:	47d0      	blx	sl
 8010d62:	9b03      	ldr	r3, [sp, #12]
 8010d64:	444e      	add	r6, r9
 8010d66:	441d      	add	r5, r3
 8010d68:	e7ed      	b.n	8010d46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8010d6a:	bf00      	nop
 8010d6c:	24006a84 	.word	0x24006a84
 8010d70:	24006a86 	.word	0x24006a86
 8010d74:	24006a8a 	.word	0x24006a8a
 8010d78:	24006a88 	.word	0x24006a88
 8010d7c:	24006a90 	.word	0x24006a90

08010d80 <_ZN8touchgfx8LCD24bppC1Ev>:
 8010d80:	2200      	movs	r2, #0
 8010d82:	490c      	ldr	r1, [pc, #48]	; (8010db4 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8010d84:	6042      	str	r2, [r0, #4]
 8010d86:	6001      	str	r1, [r0, #0]
 8010d88:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8010d8c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8010d90:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010d94:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8010d98:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8010d9c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8010da0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8010da4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8010da8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8010dac:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	08019218 	.word	0x08019218

08010db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8010db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	b091      	sub	sp, #68	; 0x44
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	4688      	mov	r8, r1
 8010dc2:	6810      	ldr	r0, [r2, #0]
 8010dc4:	6851      	ldr	r1, [r2, #4]
 8010dc6:	ac0c      	add	r4, sp, #48	; 0x30
 8010dc8:	4616      	mov	r6, r2
 8010dca:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8010dce:	4d64      	ldr	r5, [pc, #400]	; (8010f60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8010dd0:	f8df a190 	ldr.w	sl, [pc, #400]	; 8010f64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8010dd4:	c403      	stmia	r4!, {r0, r1}
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	ac0e      	add	r4, sp, #56	; 0x38
 8010dda:	6859      	ldr	r1, [r3, #4]
 8010ddc:	c403      	stmia	r4!, {r0, r1}
 8010dde:	a80c      	add	r0, sp, #48	; 0x30
 8010de0:	f7fa ff4c 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010de4:	4631      	mov	r1, r6
 8010de6:	a80e      	add	r0, sp, #56	; 0x38
 8010de8:	f7fa ff70 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010dec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8010df0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010df4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8010df8:	6828      	ldr	r0, [r5, #0]
 8010dfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010dfe:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8010e02:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8010e06:	440f      	add	r7, r1
 8010e08:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8010e0c:	440a      	add	r2, r1
 8010e0e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8010e12:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8010e16:	4413      	add	r3, r2
 8010e18:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8010e1c:	6803      	ldr	r3, [r0, #0]
 8010e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e20:	4798      	blx	r3
 8010e22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010e26:	6828      	ldr	r0, [r5, #0]
 8010e28:	d01f      	beq.n	8010e6a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	2500      	movs	r5, #0
 8010e2e:	6801      	ldr	r1, [r0, #0]
 8010e30:	b2a4      	uxth	r4, r4
 8010e32:	b2b6      	uxth	r6, r6
 8010e34:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010e38:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8010e3c:	250b      	movs	r5, #11
 8010e3e:	9507      	str	r5, [sp, #28]
 8010e40:	f8ba 5000 	ldrh.w	r5, [sl]
 8010e44:	f8cd 9010 	str.w	r9, [sp, #16]
 8010e48:	9602      	str	r6, [sp, #8]
 8010e4a:	9401      	str	r4, [sp, #4]
 8010e4c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8010e50:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010e54:	9203      	str	r2, [sp, #12]
 8010e56:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010e5a:	9200      	str	r2, [sp, #0]
 8010e5c:	4642      	mov	r2, r8
 8010e5e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8010e60:	4639      	mov	r1, r7
 8010e62:	47a0      	blx	r4
 8010e64:	b011      	add	sp, #68	; 0x44
 8010e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6a:	6803      	ldr	r3, [r0, #0]
 8010e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e6e:	4798      	blx	r3
 8010e70:	f8ba 5000 	ldrh.w	r5, [sl]
 8010e74:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8010e78:	f04f 0e04 	mov.w	lr, #4
 8010e7c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010e80:	436e      	muls	r6, r5
 8010e82:	fb05 2303 	mla	r3, r5, r3, r2
 8010e86:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010e8a:	1b2d      	subs	r5, r5, r4
 8010e8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e94:	4418      	add	r0, r3
 8010e96:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8010e9a:	1982      	adds	r2, r0, r6
 8010e9c:	1b1b      	subs	r3, r3, r4
 8010e9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ea4:	4290      	cmp	r0, r2
 8010ea6:	d254      	bcs.n	8010f52 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8010ea8:	eb00 0a04 	add.w	sl, r0, r4
 8010eac:	4550      	cmp	r0, sl
 8010eae:	d24c      	bcs.n	8010f4a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8010eb0:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010eb4:	fb1e e101 	smlabb	r1, lr, r1, lr
 8010eb8:	eb08 0c01 	add.w	ip, r8, r1
 8010ebc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8010ec0:	b173      	cbz	r3, 8010ee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010ec2:	2bff      	cmp	r3, #255	; 0xff
 8010ec4:	f818 b001 	ldrb.w	fp, [r8, r1]
 8010ec8:	d10c      	bne.n	8010ee4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8010eca:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010ece:	d109      	bne.n	8010ee4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8010ed0:	f880 b000 	strb.w	fp, [r0]
 8010ed4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8010ed8:	7043      	strb	r3, [r0, #1]
 8010eda:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8010ede:	7083      	strb	r3, [r0, #2]
 8010ee0:	3003      	adds	r0, #3
 8010ee2:	e7e3      	b.n	8010eac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8010ee4:	fb09 f103 	mul.w	r1, r9, r3
 8010ee8:	1c4b      	adds	r3, r1, #1
 8010eea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8010eee:	7801      	ldrb	r1, [r0, #0]
 8010ef0:	121b      	asrs	r3, r3, #8
 8010ef2:	b29e      	uxth	r6, r3
 8010ef4:	43db      	mvns	r3, r3
 8010ef6:	fb1b fb06 	smulbb	fp, fp, r6
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	fb01 b103 	mla	r1, r1, r3, fp
 8010f00:	b289      	uxth	r1, r1
 8010f02:	f101 0b01 	add.w	fp, r1, #1
 8010f06:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8010f0a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8010f0e:	fb1b fb03 	smulbb	fp, fp, r3
 8010f12:	1209      	asrs	r1, r1, #8
 8010f14:	7001      	strb	r1, [r0, #0]
 8010f16:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8010f1a:	fb01 b106 	mla	r1, r1, r6, fp
 8010f1e:	b289      	uxth	r1, r1
 8010f20:	f101 0b01 	add.w	fp, r1, #1
 8010f24:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8010f28:	1209      	asrs	r1, r1, #8
 8010f2a:	7041      	strb	r1, [r0, #1]
 8010f2c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010f30:	f890 c002 	ldrb.w	ip, [r0, #2]
 8010f34:	fb1c f303 	smulbb	r3, ip, r3
 8010f38:	fb01 3606 	mla	r6, r1, r6, r3
 8010f3c:	b2b6      	uxth	r6, r6
 8010f3e:	1c73      	adds	r3, r6, #1
 8010f40:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8010f44:	1236      	asrs	r6, r6, #8
 8010f46:	7086      	strb	r6, [r0, #2]
 8010f48:	e7ca      	b.n	8010ee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f4c:	4428      	add	r0, r5
 8010f4e:	441f      	add	r7, r3
 8010f50:	e7a8      	b.n	8010ea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8010f52:	4b03      	ldr	r3, [pc, #12]	; (8010f60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8010f54:	6818      	ldr	r0, [r3, #0]
 8010f56:	6803      	ldr	r3, [r0, #0]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	4798      	blx	r3
 8010f5c:	e782      	b.n	8010e64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8010f5e:	bf00      	nop
 8010f60:	24006a90 	.word	0x24006a90
 8010f64:	24006a8a 	.word	0x24006a8a

08010f68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8010f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6c:	b091      	sub	sp, #68	; 0x44
 8010f6e:	4680      	mov	r8, r0
 8010f70:	460e      	mov	r6, r1
 8010f72:	6810      	ldr	r0, [r2, #0]
 8010f74:	6851      	ldr	r1, [r2, #4]
 8010f76:	ad0c      	add	r5, sp, #48	; 0x30
 8010f78:	4614      	mov	r4, r2
 8010f7a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8010f7e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8011118 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8010f82:	f8df a198 	ldr.w	sl, [pc, #408]	; 801111c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8010f86:	c503      	stmia	r5!, {r0, r1}
 8010f88:	6818      	ldr	r0, [r3, #0]
 8010f8a:	ad0e      	add	r5, sp, #56	; 0x38
 8010f8c:	6859      	ldr	r1, [r3, #4]
 8010f8e:	c503      	stmia	r5!, {r0, r1}
 8010f90:	a80c      	add	r0, sp, #48	; 0x30
 8010f92:	f7fa fe73 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010f96:	4621      	mov	r1, r4
 8010f98:	a80e      	add	r0, sp, #56	; 0x38
 8010f9a:	f7fa fe97 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010f9e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8010fa2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010fa6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8010faa:	f8d9 0000 	ldr.w	r0, [r9]
 8010fae:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010fb2:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8010fb6:	eb08 0401 	add.w	r4, r8, r1
 8010fba:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8010fbe:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8010fc2:	440a      	add	r2, r1
 8010fc4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8010fc8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8010fcc:	4413      	add	r3, r2
 8010fce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8010fd2:	6803      	ldr	r3, [r0, #0]
 8010fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fd6:	4798      	blx	r3
 8010fd8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010fdc:	f8d9 0000 	ldr.w	r0, [r9]
 8010fe0:	d022      	beq.n	8011028 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f04f 0c01 	mov.w	ip, #1
 8010fe8:	6801      	ldr	r1, [r0, #0]
 8010fea:	b2ad      	uxth	r5, r5
 8010fec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010ff0:	e9cd c208 	strd	ip, r2, [sp, #32]
 8010ff4:	f04f 0c0b 	mov.w	ip, #11
 8010ff8:	f8cd c01c 	str.w	ip, [sp, #28]
 8010ffc:	f8ba c000 	ldrh.w	ip, [sl]
 8011000:	9704      	str	r7, [sp, #16]
 8011002:	9502      	str	r5, [sp, #8]
 8011004:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8011008:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801100c:	9203      	str	r2, [sp, #12]
 801100e:	fa1f f288 	uxth.w	r2, r8
 8011012:	9201      	str	r2, [sp, #4]
 8011014:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011018:	9200      	str	r2, [sp, #0]
 801101a:	4632      	mov	r2, r6
 801101c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801101e:	4621      	mov	r1, r4
 8011020:	47a8      	blx	r5
 8011022:	b011      	add	sp, #68	; 0x44
 8011024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011028:	6803      	ldr	r3, [r0, #0]
 801102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801102c:	4798      	blx	r3
 801102e:	f8ba 2000 	ldrh.w	r2, [sl]
 8011032:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011036:	f04f 0e03 	mov.w	lr, #3
 801103a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801103e:	4355      	muls	r5, r2
 8011040:	fa1f fc87 	uxth.w	ip, r7
 8011044:	fb02 1303 	mla	r3, r2, r3, r1
 8011048:	eba2 0208 	sub.w	r2, r2, r8
 801104c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011054:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011058:	4418      	add	r0, r3
 801105a:	920b      	str	r2, [sp, #44]	; 0x2c
 801105c:	1943      	adds	r3, r0, r5
 801105e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8011062:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8011066:	eba2 0208 	sub.w	r2, r2, r8
 801106a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801106e:	b2ad      	uxth	r5, r5
 8011070:	4298      	cmp	r0, r3
 8011072:	d24a      	bcs.n	801110a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8011074:	eb00 0908 	add.w	r9, r0, r8
 8011078:	4621      	mov	r1, r4
 801107a:	4548      	cmp	r0, r9
 801107c:	460c      	mov	r4, r1
 801107e:	d240      	bcs.n	8011102 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8011080:	f04f 0a04 	mov.w	sl, #4
 8011084:	7824      	ldrb	r4, [r4, #0]
 8011086:	2fff      	cmp	r7, #255	; 0xff
 8011088:	f101 0101 	add.w	r1, r1, #1
 801108c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8011090:	eb06 0a04 	add.w	sl, r6, r4
 8011094:	f816 b004 	ldrb.w	fp, [r6, r4]
 8011098:	d02b      	beq.n	80110f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801109a:	7804      	ldrb	r4, [r0, #0]
 801109c:	fb14 f405 	smulbb	r4, r4, r5
 80110a0:	fb0b 440c 	mla	r4, fp, ip, r4
 80110a4:	b2a4      	uxth	r4, r4
 80110a6:	f104 0b01 	add.w	fp, r4, #1
 80110aa:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80110ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 80110b2:	fb1b fb05 	smulbb	fp, fp, r5
 80110b6:	1224      	asrs	r4, r4, #8
 80110b8:	7004      	strb	r4, [r0, #0]
 80110ba:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80110be:	fb04 b40c 	mla	r4, r4, ip, fp
 80110c2:	b2a4      	uxth	r4, r4
 80110c4:	f104 0b01 	add.w	fp, r4, #1
 80110c8:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80110cc:	1224      	asrs	r4, r4, #8
 80110ce:	7044      	strb	r4, [r0, #1]
 80110d0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80110d4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80110d8:	fb1a fa05 	smulbb	sl, sl, r5
 80110dc:	fb04 a40c 	mla	r4, r4, ip, sl
 80110e0:	b2a4      	uxth	r4, r4
 80110e2:	f104 0a01 	add.w	sl, r4, #1
 80110e6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80110ea:	1224      	asrs	r4, r4, #8
 80110ec:	7084      	strb	r4, [r0, #2]
 80110ee:	3003      	adds	r0, #3
 80110f0:	e7c3      	b.n	801107a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80110f2:	f880 b000 	strb.w	fp, [r0]
 80110f6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80110fa:	7044      	strb	r4, [r0, #1]
 80110fc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8011100:	e7f4      	b.n	80110ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8011102:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011104:	4420      	add	r0, r4
 8011106:	188c      	adds	r4, r1, r2
 8011108:	e7b2      	b.n	8011070 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801110a:	4b03      	ldr	r3, [pc, #12]	; (8011118 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801110c:	6818      	ldr	r0, [r3, #0]
 801110e:	6803      	ldr	r3, [r0, #0]
 8011110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011112:	4798      	blx	r3
 8011114:	e785      	b.n	8011022 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8011116:	bf00      	nop
 8011118:	24006a90 	.word	0x24006a90
 801111c:	24006a8a 	.word	0x24006a8a

08011120 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8011120:	b430      	push	{r4, r5}
 8011122:	780d      	ldrb	r5, [r1, #0]
 8011124:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8011128:	b11d      	cbz	r5, 8011132 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801112a:	2d01      	cmp	r5, #1
 801112c:	d005      	beq.n	801113a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801112e:	bc30      	pop	{r4, r5}
 8011130:	4770      	bx	lr
 8011132:	9402      	str	r4, [sp, #8]
 8011134:	bc30      	pop	{r4, r5}
 8011136:	f7ff be3f 	b.w	8010db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801113a:	9402      	str	r4, [sp, #8]
 801113c:	bc30      	pop	{r4, r5}
 801113e:	f7ff bf13 	b.w	8010f68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08011144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8011144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011148:	4605      	mov	r5, r0
 801114a:	b08f      	sub	sp, #60	; 0x3c
 801114c:	460c      	mov	r4, r1
 801114e:	461f      	mov	r7, r3
 8011150:	2b00      	cmp	r3, #0
 8011152:	d052      	beq.n	80111fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8011154:	6808      	ldr	r0, [r1, #0]
 8011156:	ab0a      	add	r3, sp, #40	; 0x28
 8011158:	6849      	ldr	r1, [r1, #4]
 801115a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8011324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801115e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8011328 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8011162:	c303      	stmia	r3!, {r0, r1}
 8011164:	6810      	ldr	r0, [r2, #0]
 8011166:	ab0c      	add	r3, sp, #48	; 0x30
 8011168:	6851      	ldr	r1, [r2, #4]
 801116a:	c303      	stmia	r3!, {r0, r1}
 801116c:	a80a      	add	r0, sp, #40	; 0x28
 801116e:	f7fa fd85 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011172:	4621      	mov	r1, r4
 8011174:	a80c      	add	r0, sp, #48	; 0x30
 8011176:	f7fa fda9 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801117a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801117e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011182:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8011186:	f8d8 0000 	ldr.w	r0, [r8]
 801118a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801118e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8011192:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8011196:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801119a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801119e:	440a      	add	r2, r1
 80111a0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80111a4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80111a8:	4413      	add	r3, r2
 80111aa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80111ae:	6803      	ldr	r3, [r0, #0]
 80111b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b2:	4798      	blx	r3
 80111b4:	2fff      	cmp	r7, #255	; 0xff
 80111b6:	d023      	beq.n	8011200 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80111b8:	f010 0f04 	tst.w	r0, #4
 80111bc:	f8d8 0000 	ldr.w	r0, [r8]
 80111c0:	d021      	beq.n	8011206 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80111c2:	2100      	movs	r1, #0
 80111c4:	f04f 0e01 	mov.w	lr, #1
 80111c8:	f8d0 c000 	ldr.w	ip, [r0]
 80111cc:	b2a4      	uxth	r4, r4
 80111ce:	9106      	str	r1, [sp, #24]
 80111d0:	b2b6      	uxth	r6, r6
 80111d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80111d6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80111da:	e9cd e107 	strd	lr, r1, [sp, #28]
 80111de:	f8b9 e000 	ldrh.w	lr, [r9]
 80111e2:	9703      	str	r7, [sp, #12]
 80111e4:	9401      	str	r4, [sp, #4]
 80111e6:	9600      	str	r6, [sp, #0]
 80111e8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80111ec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80111f0:	9102      	str	r1, [sp, #8]
 80111f2:	4629      	mov	r1, r5
 80111f4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80111f8:	47a0      	blx	r4
 80111fa:	b00f      	add	sp, #60	; 0x3c
 80111fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011200:	f010 0f01 	tst.w	r0, #1
 8011204:	e7da      	b.n	80111bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8011206:	6803      	ldr	r3, [r0, #0]
 8011208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120a:	4798      	blx	r3
 801120c:	f8b9 1000 	ldrh.w	r1, [r9]
 8011210:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011214:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8011218:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801121c:	434c      	muls	r4, r1
 801121e:	2fff      	cmp	r7, #255	; 0xff
 8011220:	fb01 2303 	mla	r3, r1, r3, r2
 8011224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011228:	eba1 0106 	sub.w	r1, r1, r6
 801122c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011234:	4418      	add	r0, r3
 8011236:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801123a:	eba3 0606 	sub.w	r6, r3, r6
 801123e:	4404      	add	r4, r0
 8011240:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8011244:	d04a      	beq.n	80112dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8011246:	43fa      	mvns	r2, r7
 8011248:	b2bb      	uxth	r3, r7
 801124a:	b2d7      	uxtb	r7, r2
 801124c:	42a0      	cmp	r0, r4
 801124e:	d263      	bcs.n	8011318 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8011250:	eb00 0e0c 	add.w	lr, r0, ip
 8011254:	4586      	cmp	lr, r0
 8011256:	f100 0803 	add.w	r8, r0, #3
 801125a:	d93a      	bls.n	80112d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801125c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8011260:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8011264:	00d0      	lsls	r0, r2, #3
 8011266:	fb19 f907 	smulbb	r9, r9, r7
 801126a:	b2c0      	uxtb	r0, r0
 801126c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8011270:	fb00 9003 	mla	r0, r0, r3, r9
 8011274:	b280      	uxth	r0, r0
 8011276:	f100 0901 	add.w	r9, r0, #1
 801127a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801127e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8011282:	fb19 f907 	smulbb	r9, r9, r7
 8011286:	1200      	asrs	r0, r0, #8
 8011288:	f808 0c03 	strb.w	r0, [r8, #-3]
 801128c:	10d0      	asrs	r0, r2, #3
 801128e:	1212      	asrs	r2, r2, #8
 8011290:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8011294:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8011298:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801129c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80112a0:	fb00 9003 	mla	r0, r0, r3, r9
 80112a4:	b280      	uxth	r0, r0
 80112a6:	f100 0901 	add.w	r9, r0, #1
 80112aa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80112ae:	1200      	asrs	r0, r0, #8
 80112b0:	f808 0c02 	strb.w	r0, [r8, #-2]
 80112b4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80112b8:	fb10 f007 	smulbb	r0, r0, r7
 80112bc:	fb02 0203 	mla	r2, r2, r3, r0
 80112c0:	b292      	uxth	r2, r2
 80112c2:	1c50      	adds	r0, r2, #1
 80112c4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80112c8:	4640      	mov	r0, r8
 80112ca:	1212      	asrs	r2, r2, #8
 80112cc:	f808 2c01 	strb.w	r2, [r8, #-1]
 80112d0:	e7c0      	b.n	8011254 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80112d2:	4408      	add	r0, r1
 80112d4:	4435      	add	r5, r6
 80112d6:	e7b9      	b.n	801124c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80112d8:	4408      	add	r0, r1
 80112da:	4435      	add	r5, r6
 80112dc:	42a0      	cmp	r0, r4
 80112de:	d21b      	bcs.n	8011318 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80112e0:	eb00 070c 	add.w	r7, r0, ip
 80112e4:	42b8      	cmp	r0, r7
 80112e6:	d2f7      	bcs.n	80112d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80112e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80112ec:	3003      	adds	r0, #3
 80112ee:	00da      	lsls	r2, r3, #3
 80112f0:	b2d2      	uxtb	r2, r2
 80112f2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80112f6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80112fa:	10da      	asrs	r2, r3, #3
 80112fc:	121b      	asrs	r3, r3, #8
 80112fe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8011302:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011306:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801130a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801130e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8011312:	f800 3c01 	strb.w	r3, [r0, #-1]
 8011316:	e7e5      	b.n	80112e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8011318:	4b02      	ldr	r3, [pc, #8]	; (8011324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801131a:	6818      	ldr	r0, [r3, #0]
 801131c:	6803      	ldr	r3, [r0, #0]
 801131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011320:	4798      	blx	r3
 8011322:	e76a      	b.n	80111fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8011324:	24006a90 	.word	0x24006a90
 8011328:	24006a8a 	.word	0x24006a8a

0801132c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011330:	b08a      	sub	sp, #40	; 0x28
 8011332:	460d      	mov	r5, r1
 8011334:	4604      	mov	r4, r0
 8011336:	461e      	mov	r6, r3
 8011338:	6808      	ldr	r0, [r1, #0]
 801133a:	ab06      	add	r3, sp, #24
 801133c:	6849      	ldr	r1, [r1, #4]
 801133e:	4f5d      	ldr	r7, [pc, #372]	; (80114b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8011340:	c303      	stmia	r3!, {r0, r1}
 8011342:	6810      	ldr	r0, [r2, #0]
 8011344:	ab08      	add	r3, sp, #32
 8011346:	6851      	ldr	r1, [r2, #4]
 8011348:	c303      	stmia	r3!, {r0, r1}
 801134a:	a806      	add	r0, sp, #24
 801134c:	f7fa fc96 	bl	800bc7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011350:	4629      	mov	r1, r5
 8011352:	a808      	add	r0, sp, #32
 8011354:	f7fa fcba 	bl	800bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011358:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801135c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011360:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011364:	6838      	ldr	r0, [r7, #0]
 8011366:	fb11 2103 	smlabb	r1, r1, r3, r2
 801136a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801136e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8011372:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011376:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801137a:	440a      	add	r2, r1
 801137c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011380:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011384:	4413      	add	r3, r2
 8011386:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801138a:	6803      	ldr	r3, [r0, #0]
 801138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801138e:	4798      	blx	r3
 8011390:	2eff      	cmp	r6, #255	; 0xff
 8011392:	d119      	bne.n	80113c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8011394:	f010 0f20 	tst.w	r0, #32
 8011398:	6838      	ldr	r0, [r7, #0]
 801139a:	d018      	beq.n	80113ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801139c:	b2ad      	uxth	r5, r5
 801139e:	2700      	movs	r7, #0
 80113a0:	6801      	ldr	r1, [r0, #0]
 80113a2:	9501      	str	r5, [sp, #4]
 80113a4:	fa1f f588 	uxth.w	r5, r8
 80113a8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80113ac:	9500      	str	r5, [sp, #0]
 80113ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80113b2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80113b6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80113ba:	9602      	str	r6, [sp, #8]
 80113bc:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80113be:	4621      	mov	r1, r4
 80113c0:	47a8      	blx	r5
 80113c2:	b00a      	add	sp, #40	; 0x28
 80113c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113cc:	e7e4      	b.n	8011398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80113ce:	6803      	ldr	r3, [r0, #0]
 80113d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d2:	4798      	blx	r3
 80113d4:	4b38      	ldr	r3, [pc, #224]	; (80114b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80113d6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80113da:	f8b3 c000 	ldrh.w	ip, [r3]
 80113de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80113e2:	fb0c f505 	mul.w	r5, ip, r5
 80113e6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80113ea:	fb0c 2303 	mla	r3, ip, r3, r2
 80113ee:	ebac 0c08 	sub.w	ip, ip, r8
 80113f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113f6:	ebae 0e08 	sub.w	lr, lr, r8
 80113fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80113fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011402:	4418      	add	r0, r3
 8011404:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8011408:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801140c:	4405      	add	r5, r0
 801140e:	42a8      	cmp	r0, r5
 8011410:	d24a      	bcs.n	80114a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8011412:	eb00 0803 	add.w	r8, r0, r3
 8011416:	4540      	cmp	r0, r8
 8011418:	d243      	bcs.n	80114a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801141a:	78e2      	ldrb	r2, [r4, #3]
 801141c:	b15a      	cbz	r2, 8011436 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801141e:	2aff      	cmp	r2, #255	; 0xff
 8011420:	f894 9000 	ldrb.w	r9, [r4]
 8011424:	d10a      	bne.n	801143c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8011426:	2eff      	cmp	r6, #255	; 0xff
 8011428:	d108      	bne.n	801143c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801142a:	f880 9000 	strb.w	r9, [r0]
 801142e:	7862      	ldrb	r2, [r4, #1]
 8011430:	7042      	strb	r2, [r0, #1]
 8011432:	78a2      	ldrb	r2, [r4, #2]
 8011434:	7082      	strb	r2, [r0, #2]
 8011436:	3003      	adds	r0, #3
 8011438:	3404      	adds	r4, #4
 801143a:	e7ec      	b.n	8011416 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801143c:	4372      	muls	r2, r6
 801143e:	1c51      	adds	r1, r2, #1
 8011440:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8011444:	1209      	asrs	r1, r1, #8
 8011446:	fa1f fa81 	uxth.w	sl, r1
 801144a:	43c9      	mvns	r1, r1
 801144c:	fb19 f90a 	smulbb	r9, r9, sl
 8011450:	b2ca      	uxtb	r2, r1
 8011452:	7801      	ldrb	r1, [r0, #0]
 8011454:	fb01 9902 	mla	r9, r1, r2, r9
 8011458:	fa1f f989 	uxth.w	r9, r9
 801145c:	f109 0101 	add.w	r1, r9, #1
 8011460:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8011464:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011468:	f880 9000 	strb.w	r9, [r0]
 801146c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8011470:	7861      	ldrb	r1, [r4, #1]
 8011472:	fb19 f902 	smulbb	r9, r9, r2
 8011476:	fb01 910a 	mla	r1, r1, sl, r9
 801147a:	b289      	uxth	r1, r1
 801147c:	f101 0901 	add.w	r9, r1, #1
 8011480:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8011484:	1209      	asrs	r1, r1, #8
 8011486:	7041      	strb	r1, [r0, #1]
 8011488:	7881      	ldrb	r1, [r0, #2]
 801148a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801148e:	fb11 f202 	smulbb	r2, r1, r2
 8011492:	fb09 220a 	mla	r2, r9, sl, r2
 8011496:	b292      	uxth	r2, r2
 8011498:	1c51      	adds	r1, r2, #1
 801149a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801149e:	1212      	asrs	r2, r2, #8
 80114a0:	e7c8      	b.n	8011434 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80114a2:	4460      	add	r0, ip
 80114a4:	4474      	add	r4, lr
 80114a6:	e7b2      	b.n	801140e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80114a8:	6838      	ldr	r0, [r7, #0]
 80114aa:	6803      	ldr	r3, [r0, #0]
 80114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ae:	4798      	blx	r3
 80114b0:	e787      	b.n	80113c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80114b2:	bf00      	nop
 80114b4:	24006a90 	.word	0x24006a90
 80114b8:	24006a8a 	.word	0x24006a8a

080114bc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80114bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114c0:	b085      	sub	sp, #20
 80114c2:	4606      	mov	r6, r0
 80114c4:	460c      	mov	r4, r1
 80114c6:	4691      	mov	r9, r2
 80114c8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80114cc:	4698      	mov	r8, r3
 80114ce:	b31d      	cbz	r5, 8011518 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80114d0:	4608      	mov	r0, r1
 80114d2:	f7fd fa4f 	bl	800e974 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80114d6:	4607      	mov	r7, r0
 80114d8:	4620      	mov	r0, r4
 80114da:	f7fd fa7f 	bl	800e9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80114de:	f8ad 000e 	strh.w	r0, [sp, #14]
 80114e2:	4620      	mov	r0, r4
 80114e4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80114e8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80114ec:	f8ad 700c 	strh.w	r7, [sp, #12]
 80114f0:	f7fd fb78 	bl	800ebe4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80114f4:	280b      	cmp	r0, #11
 80114f6:	d80f      	bhi.n	8011518 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80114f8:	e8df f000 	tbb	[pc, r0]
 80114fc:	0e062920 	.word	0x0e062920
 8011500:	0e0e0e0e 	.word	0x0e0e0e0e
 8011504:	110e0e0e 	.word	0x110e0e0e
 8011508:	4620      	mov	r0, r4
 801150a:	f7fd fae7 	bl	800eadc <_ZNK8touchgfx6Bitmap7getDataEv>
 801150e:	462b      	mov	r3, r5
 8011510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011512:	a902      	add	r1, sp, #8
 8011514:	f7ff ff0a 	bl	801132c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011518:	b005      	add	sp, #20
 801151a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801151e:	4620      	mov	r0, r4
 8011520:	f7fd fadc 	bl	800eadc <_ZNK8touchgfx6Bitmap7getDataEv>
 8011524:	4606      	mov	r6, r0
 8011526:	4620      	mov	r0, r4
 8011528:	f7fd fb08 	bl	800eb3c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801152c:	9500      	str	r5, [sp, #0]
 801152e:	4601      	mov	r1, r0
 8011530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011532:	aa02      	add	r2, sp, #8
 8011534:	4630      	mov	r0, r6
 8011536:	f7ff fdf3 	bl	8011120 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801153a:	e7ed      	b.n	8011518 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801153c:	4620      	mov	r0, r4
 801153e:	f7fd facd 	bl	800eadc <_ZNK8touchgfx6Bitmap7getDataEv>
 8011542:	462b      	mov	r3, r5
 8011544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011546:	a902      	add	r1, sp, #8
 8011548:	f7ff fdfc 	bl	8011144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801154c:	e7e4      	b.n	8011518 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801154e:	6833      	ldr	r3, [r6, #0]
 8011550:	4620      	mov	r0, r4
 8011552:	68df      	ldr	r7, [r3, #12]
 8011554:	f7fd fac2 	bl	800eadc <_ZNK8touchgfx6Bitmap7getDataEv>
 8011558:	2300      	movs	r3, #0
 801155a:	4601      	mov	r1, r0
 801155c:	aa02      	add	r2, sp, #8
 801155e:	4630      	mov	r0, r6
 8011560:	e9cd 5300 	strd	r5, r3, [sp]
 8011564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011566:	47b8      	blx	r7
 8011568:	e7d6      	b.n	8011518 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801156a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801156a:	b4f0      	push	{r4, r5, r6, r7}
 801156c:	4616      	mov	r6, r2
 801156e:	461c      	mov	r4, r3
 8011570:	460d      	mov	r5, r1
 8011572:	9a04      	ldr	r2, [sp, #16]
 8011574:	2e01      	cmp	r6, #1
 8011576:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801157a:	d00e      	beq.n	801159a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801157c:	d303      	bcc.n	8011586 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801157e:	2e02      	cmp	r6, #2
 8011580:	d006      	beq.n	8011590 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8011582:	bcf0      	pop	{r4, r5, r6, r7}
 8011584:	4770      	bx	lr
 8011586:	4621      	mov	r1, r4
 8011588:	4628      	mov	r0, r5
 801158a:	bcf0      	pop	{r4, r5, r6, r7}
 801158c:	f7ff bdda 	b.w	8011144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8011590:	4621      	mov	r1, r4
 8011592:	4628      	mov	r0, r5
 8011594:	bcf0      	pop	{r4, r5, r6, r7}
 8011596:	f7ff bec9 	b.w	801132c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801159a:	6805      	ldr	r5, [r0, #0]
 801159c:	2600      	movs	r6, #0
 801159e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80115a2:	68ed      	ldr	r5, [r5, #12]
 80115a4:	4613      	mov	r3, r2
 80115a6:	4622      	mov	r2, r4
 80115a8:	46ac      	mov	ip, r5
 80115aa:	bcf0      	pop	{r4, r5, r6, r7}
 80115ac:	4760      	bx	ip
	...

080115b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80115b0:	b160      	cbz	r0, 80115cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80115b2:	2903      	cmp	r1, #3
 80115b4:	d818      	bhi.n	80115e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80115b6:	e8df f001 	tbb	[pc, r1]
 80115ba:	1902      	.short	0x1902
 80115bc:	1b06      	.short	0x1b06
 80115be:	4b0e      	ldr	r3, [pc, #56]	; (80115f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80115c0:	8818      	ldrh	r0, [r3, #0]
 80115c2:	4240      	negs	r0, r0
 80115c4:	4770      	bx	lr
 80115c6:	4b0c      	ldr	r3, [pc, #48]	; (80115f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80115c8:	8818      	ldrh	r0, [r3, #0]
 80115ca:	4770      	bx	lr
 80115cc:	2903      	cmp	r1, #3
 80115ce:	d80b      	bhi.n	80115e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80115d0:	a301      	add	r3, pc, #4	; (adr r3, 80115d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80115d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80115d6:	bf00      	nop
 80115d8:	080115ed 	.word	0x080115ed
 80115dc:	080115c7 	.word	0x080115c7
 80115e0:	080115f1 	.word	0x080115f1
 80115e4:	080115bf 	.word	0x080115bf
 80115e8:	2000      	movs	r0, #0
 80115ea:	4770      	bx	lr
 80115ec:	2001      	movs	r0, #1
 80115ee:	4770      	bx	lr
 80115f0:	f04f 30ff 	mov.w	r0, #4294967295
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	24006a8a 	.word	0x24006a8a

080115fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80115fc:	b160      	cbz	r0, 8011618 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80115fe:	2903      	cmp	r1, #3
 8011600:	d818      	bhi.n	8011634 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8011602:	e8df f001 	tbb	[pc, r1]
 8011606:	0219      	.short	0x0219
 8011608:	051b      	.short	0x051b
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801160c:	8818      	ldrh	r0, [r3, #0]
 801160e:	4770      	bx	lr
 8011610:	4b0c      	ldr	r3, [pc, #48]	; (8011644 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8011612:	8818      	ldrh	r0, [r3, #0]
 8011614:	4240      	negs	r0, r0
 8011616:	4770      	bx	lr
 8011618:	2903      	cmp	r1, #3
 801161a:	d80b      	bhi.n	8011634 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801161c:	a301      	add	r3, pc, #4	; (adr r3, 8011624 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801161e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011622:	bf00      	nop
 8011624:	0801160b 	.word	0x0801160b
 8011628:	0801163d 	.word	0x0801163d
 801162c:	08011611 	.word	0x08011611
 8011630:	08011639 	.word	0x08011639
 8011634:	2000      	movs	r0, #0
 8011636:	4770      	bx	lr
 8011638:	2001      	movs	r0, #1
 801163a:	4770      	bx	lr
 801163c:	f04f 30ff 	mov.w	r0, #4294967295
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	24006a8a 	.word	0x24006a8a

08011648 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8011648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164c:	b097      	sub	sp, #92	; 0x5c
 801164e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011650:	a912      	add	r1, sp, #72	; 0x48
 8011652:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8011656:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801165a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801165e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8011662:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8011666:	e881 000c 	stmia.w	r1, {r2, r3}
 801166a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801166e:	930a      	str	r3, [sp, #40]	; 0x28
 8011670:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8011674:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8011678:	9311      	str	r3, [sp, #68]	; 0x44
 801167a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801167e:	798d      	ldrb	r5, [r1, #6]
 8011680:	930c      	str	r3, [sp, #48]	; 0x30
 8011682:	7b4b      	ldrb	r3, [r1, #13]
 8011684:	0158      	lsls	r0, r3, #5
 8011686:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801168a:	4328      	orrs	r0, r5
 801168c:	9009      	str	r0, [sp, #36]	; 0x24
 801168e:	f000 817c 	beq.w	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8011692:	011b      	lsls	r3, r3, #4
 8011694:	79c8      	ldrb	r0, [r1, #7]
 8011696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801169a:	4303      	orrs	r3, r0
 801169c:	930e      	str	r3, [sp, #56]	; 0x38
 801169e:	f000 8174 	beq.w	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80116a2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	2f00      	cmp	r7, #0
 80116aa:	f000 8116 	beq.w	80118da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80116ae:	1aff      	subs	r7, r7, r3
 80116b0:	b2bf      	uxth	r7, r7
 80116b2:	043b      	lsls	r3, r7, #16
 80116b4:	d502      	bpl.n	80116bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80116b6:	1bf6      	subs	r6, r6, r7
 80116b8:	2700      	movs	r7, #0
 80116ba:	b236      	sxth	r6, r6
 80116bc:	f9b2 1000 	ldrsh.w	r1, [r2]
 80116c0:	a812      	add	r0, sp, #72	; 0x48
 80116c2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80116c6:	428e      	cmp	r6, r1
 80116c8:	b28b      	uxth	r3, r1
 80116ca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80116ce:	bfbf      	itttt	lt
 80116d0:	18ff      	addlt	r7, r7, r3
 80116d2:	1bbe      	sublt	r6, r7, r6
 80116d4:	b2b7      	uxthlt	r7, r6
 80116d6:	460e      	movlt	r6, r1
 80116d8:	8891      	ldrh	r1, [r2, #4]
 80116da:	440b      	add	r3, r1
 80116dc:	4631      	mov	r1, r6
 80116de:	b21b      	sxth	r3, r3
 80116e0:	9310      	str	r3, [sp, #64]	; 0x40
 80116e2:	88d3      	ldrh	r3, [r2, #6]
 80116e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116e6:	449a      	add	sl, r3
 80116e8:	fa0f f38a 	sxth.w	r3, sl
 80116ec:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80116f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80116f2:	4bb5      	ldr	r3, [pc, #724]	; (80119c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80116f4:	f893 b000 	ldrb.w	fp, [r3]
 80116f8:	f10b 3cff 	add.w	ip, fp, #4294967295
 80116fc:	f1dc 0300 	rsbs	r3, ip, #0
 8011700:	eb43 030c 	adc.w	r3, r3, ip
 8011704:	930d      	str	r3, [sp, #52]	; 0x34
 8011706:	464b      	mov	r3, r9
 8011708:	f7fa f932 	bl	800b970 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801170c:	4631      	mov	r1, r6
 801170e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8011712:	464b      	mov	r3, r9
 8011714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011716:	a812      	add	r0, sp, #72	; 0x48
 8011718:	f7fa f947 	bl	800b9aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801171c:	a916      	add	r1, sp, #88	; 0x58
 801171e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8011722:	a815      	add	r0, sp, #84	; 0x54
 8011724:	f7fa fa68 	bl	800bbf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8011728:	f1b9 0f00 	cmp.w	r9, #0
 801172c:	f040 80d8 	bne.w	80118e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8011730:	f1bb 0f01 	cmp.w	fp, #1
 8011734:	f040 80dc 	bne.w	80118f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8011738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801173a:	b153      	cbz	r3, 8011752 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801173c:	2508      	movs	r5, #8
 801173e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011740:	fb95 f3f8 	sdiv	r3, r5, r8
 8011744:	1e5d      	subs	r5, r3, #1
 8011746:	4415      	add	r5, r2
 8011748:	fb95 f5f3 	sdiv	r5, r5, r3
 801174c:	fb15 f503 	smulbb	r5, r5, r3
 8011750:	b2ad      	uxth	r5, r5
 8011752:	b907      	cbnz	r7, 8011756 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8011754:	b16c      	cbz	r4, 8011772 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8011756:	fb04 7305 	mla	r3, r4, r5, r7
 801175a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801175c:	ebaa 0a04 	sub.w	sl, sl, r4
 8011760:	fb08 f303 	mul.w	r3, r8, r3
 8011764:	fa1f fa8a 	uxth.w	sl, sl
 8011768:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801176c:	f003 0407 	and.w	r4, r3, #7
 8011770:	9226      	str	r2, [sp, #152]	; 0x98
 8011772:	4649      	mov	r1, r9
 8011774:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011776:	f7ff ff1b 	bl	80115b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801177a:	4683      	mov	fp, r0
 801177c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801177e:	f7ff ff3d 	bl	80115fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8011782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011786:	4681      	mov	r9, r0
 8011788:	1a9b      	subs	r3, r3, r2
 801178a:	459a      	cmp	sl, r3
 801178c:	bfa8      	it	ge
 801178e:	469a      	movge	sl, r3
 8011790:	f1ba 0f00 	cmp.w	sl, #0
 8011794:	f340 80f9 	ble.w	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8011798:	1bf6      	subs	r6, r6, r7
 801179a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801179c:	1b9e      	subs	r6, r3, r6
 801179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117a0:	429e      	cmp	r6, r3
 80117a2:	bfd4      	ite	le
 80117a4:	ebc7 0706 	rsble	r7, r7, r6
 80117a8:	ebc7 0703 	rsbgt	r7, r7, r3
 80117ac:	2f00      	cmp	r7, #0
 80117ae:	f340 80ec 	ble.w	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80117b2:	1bed      	subs	r5, r5, r7
 80117b4:	fb08 f305 	mul.w	r3, r8, r5
 80117b8:	930d      	str	r3, [sp, #52]	; 0x34
 80117ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80117bc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80117c0:	930e      	str	r3, [sp, #56]	; 0x38
 80117c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80117c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80117c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	9310      	str	r3, [sp, #64]	; 0x40
 80117d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f040 80de 	bne.w	8011994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80117d8:	4b7c      	ldr	r3, [pc, #496]	; (80119cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80117da:	6818      	ldr	r0, [r3, #0]
 80117dc:	6803      	ldr	r3, [r0, #0]
 80117de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e0:	4798      	blx	r3
 80117e2:	2301      	movs	r3, #1
 80117e4:	4a7a      	ldr	r2, [pc, #488]	; (80119d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80117e6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80117ea:	fb07 9b1b 	mls	fp, r7, fp, r9
 80117ee:	fa03 f308 	lsl.w	r3, r3, r8
 80117f2:	8811      	ldrh	r1, [r2, #0]
 80117f4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80117f8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80117fc:	3b01      	subs	r3, #1
 80117fe:	fb06 bb07 	mla	fp, r6, r7, fp
 8011802:	b2db      	uxtb	r3, r3
 8011804:	930a      	str	r3, [sp, #40]	; 0x28
 8011806:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801180a:	fb01 2303 	mla	r3, r1, r3, r2
 801180e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011812:	18c3      	adds	r3, r0, r3
 8011814:	9309      	str	r3, [sp, #36]	; 0x24
 8011816:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011818:	781a      	ldrb	r2, [r3, #0]
 801181a:	4122      	asrs	r2, r4
 801181c:	b2d2      	uxtb	r2, r2
 801181e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8011822:	f0c0 80d7 	bcc.w	80119d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8011826:	46be      	mov	lr, r7
 8011828:	9909      	ldr	r1, [sp, #36]	; 0x24
 801182a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801182e:	f0c0 80ba 	bcc.w	80119a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8011832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011834:	4013      	ands	r3, r2
 8011836:	d041      	beq.n	80118bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8011838:	20ff      	movs	r0, #255	; 0xff
 801183a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801183c:	fb90 f5f5 	sdiv	r5, r0, r5
 8011840:	436b      	muls	r3, r5
 8011842:	2bfe      	cmp	r3, #254	; 0xfe
 8011844:	dd03      	ble.n	801184e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8011846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011848:	4285      	cmp	r5, r0
 801184a:	f000 80a5 	beq.w	8011998 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801184e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011850:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011852:	fb15 f303 	smulbb	r3, r5, r3
 8011856:	b29b      	uxth	r3, r3
 8011858:	1c5d      	adds	r5, r3, #1
 801185a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801185e:	780d      	ldrb	r5, [r1, #0]
 8011860:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011864:	fa1f fc83 	uxth.w	ip, r3
 8011868:	43db      	mvns	r3, r3
 801186a:	fb10 f90c 	smulbb	r9, r0, ip
 801186e:	b2db      	uxtb	r3, r3
 8011870:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011872:	fb05 9503 	mla	r5, r5, r3, r9
 8011876:	b2ad      	uxth	r5, r5
 8011878:	f105 0901 	add.w	r9, r5, #1
 801187c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8011880:	fb10 f90c 	smulbb	r9, r0, ip
 8011884:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011886:	122d      	asrs	r5, r5, #8
 8011888:	fb10 fc0c 	smulbb	ip, r0, ip
 801188c:	700d      	strb	r5, [r1, #0]
 801188e:	784d      	ldrb	r5, [r1, #1]
 8011890:	fb05 9503 	mla	r5, r5, r3, r9
 8011894:	b2ad      	uxth	r5, r5
 8011896:	f105 0901 	add.w	r9, r5, #1
 801189a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801189e:	122d      	asrs	r5, r5, #8
 80118a0:	704d      	strb	r5, [r1, #1]
 80118a2:	788d      	ldrb	r5, [r1, #2]
 80118a4:	fb05 cc03 	mla	ip, r5, r3, ip
 80118a8:	fa1f fc8c 	uxth.w	ip, ip
 80118ac:	f10c 0301 	add.w	r3, ip, #1
 80118b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80118b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80118b8:	f881 c002 	strb.w	ip, [r1, #2]
 80118bc:	4444      	add	r4, r8
 80118be:	4431      	add	r1, r6
 80118c0:	b2a4      	uxth	r4, r4
 80118c2:	2c07      	cmp	r4, #7
 80118c4:	bf89      	itett	hi
 80118c6:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80118c8:	fa42 f208 	asrls.w	r2, r2, r8
 80118cc:	2400      	movhi	r4, #0
 80118ce:	785a      	ldrbhi	r2, [r3, #1]
 80118d0:	bf8a      	itet	hi
 80118d2:	3301      	addhi	r3, #1
 80118d4:	b2d2      	uxtbls	r2, r2
 80118d6:	9326      	strhi	r3, [sp, #152]	; 0x98
 80118d8:	e7a7      	b.n	801182a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80118da:	441e      	add	r6, r3
 80118dc:	b236      	sxth	r6, r6
 80118de:	e6ed      	b.n	80116bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80118e0:	f1b9 0f01 	cmp.w	r9, #1
 80118e4:	f47f af28 	bne.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80118e8:	f1bb 0f01 	cmp.w	fp, #1
 80118ec:	f47f af24 	bne.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80118f0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80119cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80118f4:	f8db 0000 	ldr.w	r0, [fp]
 80118f8:	6803      	ldr	r3, [r0, #0]
 80118fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118fc:	4798      	blx	r3
 80118fe:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8011902:	465a      	mov	r2, fp
 8011904:	d006      	beq.n	8011914 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8011906:	f1b8 0f04 	cmp.w	r8, #4
 801190a:	d141      	bne.n	8011990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801190c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801190e:	3300      	adds	r3, #0
 8011910:	bf18      	it	ne
 8011912:	2301      	movne	r3, #1
 8011914:	0580      	lsls	r0, r0, #22
 8011916:	d566      	bpl.n	80119e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8011918:	f1b8 0f08 	cmp.w	r8, #8
 801191c:	d163      	bne.n	80119e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801191e:	2b00      	cmp	r3, #0
 8011920:	bf0c      	ite	eq
 8011922:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8011926:	f44f 7180 	movne.w	r1, #256	; 0x100
 801192a:	2f00      	cmp	r7, #0
 801192c:	f47f af04 	bne.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8011930:	2c00      	cmp	r4, #0
 8011932:	f47f af01 	bne.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8011936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011938:	9810      	ldr	r0, [sp, #64]	; 0x40
 801193a:	18f3      	adds	r3, r6, r3
 801193c:	4283      	cmp	r3, r0
 801193e:	f73f aefb 	bgt.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8011942:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011946:	4403      	add	r3, r0
 8011948:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801194a:	4283      	cmp	r3, r0
 801194c:	f73f aef4 	bgt.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8011950:	f1b8 0f08 	cmp.w	r8, #8
 8011954:	6810      	ldr	r0, [r2, #0]
 8011956:	f04f 0600 	mov.w	r6, #0
 801195a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801195e:	bf18      	it	ne
 8011960:	3501      	addne	r5, #1
 8011962:	6804      	ldr	r4, [r0, #0]
 8011964:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8011968:	bf18      	it	ne
 801196a:	f025 0501 	bicne.w	r5, r5, #1
 801196e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8011972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011974:	bf18      	it	ne
 8011976:	b2ad      	uxthne	r5, r5
 8011978:	9104      	str	r1, [sp, #16]
 801197a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801197c:	e9cd 5a00 	strd	r5, sl, [sp]
 8011980:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8011984:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011986:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8011988:	47a0      	blx	r4
 801198a:	b017      	add	sp, #92	; 0x5c
 801198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011990:	2300      	movs	r3, #0
 8011992:	e7bf      	b.n	8011914 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8011994:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011996:	e724      	b.n	80117e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8011998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801199a:	700b      	strb	r3, [r1, #0]
 801199c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801199e:	704b      	strb	r3, [r1, #1]
 80119a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119a2:	708b      	strb	r3, [r1, #2]
 80119a4:	e78a      	b.n	80118bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80119a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119a8:	b153      	cbz	r3, 80119c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80119aa:	441c      	add	r4, r3
 80119ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80119ae:	b2a4      	uxth	r4, r4
 80119b0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80119b4:	f004 0407 	and.w	r4, r4, #7
 80119b8:	781a      	ldrb	r2, [r3, #0]
 80119ba:	9326      	str	r3, [sp, #152]	; 0x98
 80119bc:	4122      	asrs	r2, r4
 80119be:	b2d2      	uxtb	r2, r2
 80119c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119c2:	445b      	add	r3, fp
 80119c4:	9309      	str	r3, [sp, #36]	; 0x24
 80119c6:	e72a      	b.n	801181e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80119c8:	24006a88 	.word	0x24006a88
 80119cc:	24006a90 	.word	0x24006a90
 80119d0:	24006a8a 	.word	0x24006a8a
 80119d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1d7      	bne.n	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80119da:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80119dc:	6818      	ldr	r0, [r3, #0]
 80119de:	6803      	ldr	r3, [r0, #0]
 80119e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e2:	4798      	blx	r3
 80119e4:	e7d1      	b.n	801198a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f43f aea6 	beq.w	8011738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80119ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119f0:	e79b      	b.n	801192a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80119f2:	bf00      	nop
 80119f4:	24006a90 	.word	0x24006a90

080119f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80119f8:	b538      	push	{r3, r4, r5, lr}
 80119fa:	4c15      	ldr	r4, [pc, #84]	; (8011a50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80119fc:	4605      	mov	r5, r0
 80119fe:	7823      	ldrb	r3, [r4, #0]
 8011a00:	f3bf 8f5b 	dmb	ish
 8011a04:	07da      	lsls	r2, r3, #31
 8011a06:	d40b      	bmi.n	8011a20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f005 f8af 	bl	8016b6c <__cxa_guard_acquire>
 8011a0e:	b138      	cbz	r0, 8011a20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8011a10:	4620      	mov	r0, r4
 8011a12:	f005 f8b7 	bl	8016b84 <__cxa_guard_release>
 8011a16:	4a0f      	ldr	r2, [pc, #60]	; (8011a54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8011a18:	490f      	ldr	r1, [pc, #60]	; (8011a58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8011a1a:	4810      	ldr	r0, [pc, #64]	; (8011a5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8011a1c:	f005 f89f 	bl	8016b5e <__aeabi_atexit>
 8011a20:	4c0f      	ldr	r4, [pc, #60]	; (8011a60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8011a22:	7823      	ldrb	r3, [r4, #0]
 8011a24:	f3bf 8f5b 	dmb	ish
 8011a28:	07db      	lsls	r3, r3, #31
 8011a2a:	d40b      	bmi.n	8011a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f005 f89d 	bl	8016b6c <__cxa_guard_acquire>
 8011a32:	b138      	cbz	r0, 8011a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8011a34:	4620      	mov	r0, r4
 8011a36:	f005 f8a5 	bl	8016b84 <__cxa_guard_release>
 8011a3a:	4a06      	ldr	r2, [pc, #24]	; (8011a54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8011a3c:	4909      	ldr	r1, [pc, #36]	; (8011a64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8011a3e:	480a      	ldr	r0, [pc, #40]	; (8011a68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8011a40:	f005 f88d 	bl	8016b5e <__aeabi_atexit>
 8011a44:	4b05      	ldr	r3, [pc, #20]	; (8011a5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8011a46:	612b      	str	r3, [r5, #16]
 8011a48:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8011a4a:	616b      	str	r3, [r5, #20]
 8011a4c:	bd38      	pop	{r3, r4, r5, pc}
 8011a4e:	bf00      	nop
 8011a50:	24006b5c 	.word	0x24006b5c
 8011a54:	24000000 	.word	0x24000000
 8011a58:	080105bd 	.word	0x080105bd
 8011a5c:	24000094 	.word	0x24000094
 8011a60:	24006b60 	.word	0x24006b60
 8011a64:	080105bb 	.word	0x080105bb
 8011a68:	24000098 	.word	0x24000098

08011a6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4c15      	ldr	r4, [pc, #84]	; (8011ac4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8011a70:	4605      	mov	r5, r0
 8011a72:	7823      	ldrb	r3, [r4, #0]
 8011a74:	f3bf 8f5b 	dmb	ish
 8011a78:	07da      	lsls	r2, r3, #31
 8011a7a:	d40b      	bmi.n	8011a94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f005 f875 	bl	8016b6c <__cxa_guard_acquire>
 8011a82:	b138      	cbz	r0, 8011a94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8011a84:	4620      	mov	r0, r4
 8011a86:	f005 f87d 	bl	8016b84 <__cxa_guard_release>
 8011a8a:	4a0f      	ldr	r2, [pc, #60]	; (8011ac8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8011a8c:	490f      	ldr	r1, [pc, #60]	; (8011acc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8011a8e:	4810      	ldr	r0, [pc, #64]	; (8011ad0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8011a90:	f005 f865 	bl	8016b5e <__aeabi_atexit>
 8011a94:	4c0f      	ldr	r4, [pc, #60]	; (8011ad4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8011a96:	7823      	ldrb	r3, [r4, #0]
 8011a98:	f3bf 8f5b 	dmb	ish
 8011a9c:	07db      	lsls	r3, r3, #31
 8011a9e:	d40b      	bmi.n	8011ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f005 f863 	bl	8016b6c <__cxa_guard_acquire>
 8011aa6:	b138      	cbz	r0, 8011ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f005 f86b 	bl	8016b84 <__cxa_guard_release>
 8011aae:	4a06      	ldr	r2, [pc, #24]	; (8011ac8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8011ab0:	4909      	ldr	r1, [pc, #36]	; (8011ad8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8011ab2:	480a      	ldr	r0, [pc, #40]	; (8011adc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8011ab4:	f005 f853 	bl	8016b5e <__aeabi_atexit>
 8011ab8:	4b05      	ldr	r3, [pc, #20]	; (8011ad0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8011aba:	60ab      	str	r3, [r5, #8]
 8011abc:	4b07      	ldr	r3, [pc, #28]	; (8011adc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8011abe:	60eb      	str	r3, [r5, #12]
 8011ac0:	bd38      	pop	{r3, r4, r5, pc}
 8011ac2:	bf00      	nop
 8011ac4:	24006b3c 	.word	0x24006b3c
 8011ac8:	24000000 	.word	0x24000000
 8011acc:	080105c1 	.word	0x080105c1
 8011ad0:	24000074 	.word	0x24000074
 8011ad4:	24006b40 	.word	0x24006b40
 8011ad8:	080105bf 	.word	0x080105bf
 8011adc:	24000078 	.word	0x24000078

08011ae0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8011ae0:	b510      	push	{r4, lr}
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	f7ff ff88 	bl	80119f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8011ae8:	4620      	mov	r0, r4
 8011aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aee:	f7ff bfbd 	b.w	8011a6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08011af4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4c15      	ldr	r4, [pc, #84]	; (8011b4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8011af8:	4605      	mov	r5, r0
 8011afa:	7823      	ldrb	r3, [r4, #0]
 8011afc:	f3bf 8f5b 	dmb	ish
 8011b00:	07da      	lsls	r2, r3, #31
 8011b02:	d40b      	bmi.n	8011b1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8011b04:	4620      	mov	r0, r4
 8011b06:	f005 f831 	bl	8016b6c <__cxa_guard_acquire>
 8011b0a:	b138      	cbz	r0, 8011b1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f005 f839 	bl	8016b84 <__cxa_guard_release>
 8011b12:	4a0f      	ldr	r2, [pc, #60]	; (8011b50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8011b14:	490f      	ldr	r1, [pc, #60]	; (8011b54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8011b16:	4810      	ldr	r0, [pc, #64]	; (8011b58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8011b18:	f005 f821 	bl	8016b5e <__aeabi_atexit>
 8011b1c:	4c0f      	ldr	r4, [pc, #60]	; (8011b5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8011b1e:	7823      	ldrb	r3, [r4, #0]
 8011b20:	f3bf 8f5b 	dmb	ish
 8011b24:	07db      	lsls	r3, r3, #31
 8011b26:	d40b      	bmi.n	8011b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f005 f81f 	bl	8016b6c <__cxa_guard_acquire>
 8011b2e:	b138      	cbz	r0, 8011b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8011b30:	4620      	mov	r0, r4
 8011b32:	f005 f827 	bl	8016b84 <__cxa_guard_release>
 8011b36:	4a06      	ldr	r2, [pc, #24]	; (8011b50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8011b38:	4909      	ldr	r1, [pc, #36]	; (8011b60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8011b3a:	480a      	ldr	r0, [pc, #40]	; (8011b64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8011b3c:	f005 f80f 	bl	8016b5e <__aeabi_atexit>
 8011b40:	4b05      	ldr	r3, [pc, #20]	; (8011b58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8011b42:	622b      	str	r3, [r5, #32]
 8011b44:	4b07      	ldr	r3, [pc, #28]	; (8011b64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8011b46:	626b      	str	r3, [r5, #36]	; 0x24
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	bf00      	nop
 8011b4c:	24006b64 	.word	0x24006b64
 8011b50:	24000000 	.word	0x24000000
 8011b54:	080105b5 	.word	0x080105b5
 8011b58:	2400009c 	.word	0x2400009c
 8011b5c:	24006b68 	.word	0x24006b68
 8011b60:	080105b3 	.word	0x080105b3
 8011b64:	240000a0 	.word	0x240000a0

08011b68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4c15      	ldr	r4, [pc, #84]	; (8011bc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8011b6c:	4605      	mov	r5, r0
 8011b6e:	7823      	ldrb	r3, [r4, #0]
 8011b70:	f3bf 8f5b 	dmb	ish
 8011b74:	07da      	lsls	r2, r3, #31
 8011b76:	d40b      	bmi.n	8011b90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f004 fff7 	bl	8016b6c <__cxa_guard_acquire>
 8011b7e:	b138      	cbz	r0, 8011b90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8011b80:	4620      	mov	r0, r4
 8011b82:	f004 ffff 	bl	8016b84 <__cxa_guard_release>
 8011b86:	4a0f      	ldr	r2, [pc, #60]	; (8011bc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8011b88:	490f      	ldr	r1, [pc, #60]	; (8011bc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8011b8a:	4810      	ldr	r0, [pc, #64]	; (8011bcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8011b8c:	f004 ffe7 	bl	8016b5e <__aeabi_atexit>
 8011b90:	4c0f      	ldr	r4, [pc, #60]	; (8011bd0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8011b92:	7823      	ldrb	r3, [r4, #0]
 8011b94:	f3bf 8f5b 	dmb	ish
 8011b98:	07db      	lsls	r3, r3, #31
 8011b9a:	d40b      	bmi.n	8011bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f004 ffe5 	bl	8016b6c <__cxa_guard_acquire>
 8011ba2:	b138      	cbz	r0, 8011bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f004 ffed 	bl	8016b84 <__cxa_guard_release>
 8011baa:	4a06      	ldr	r2, [pc, #24]	; (8011bc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8011bac:	4909      	ldr	r1, [pc, #36]	; (8011bd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8011bae:	480a      	ldr	r0, [pc, #40]	; (8011bd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8011bb0:	f004 ffd5 	bl	8016b5e <__aeabi_atexit>
 8011bb4:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8011bb6:	61ab      	str	r3, [r5, #24]
 8011bb8:	4b07      	ldr	r3, [pc, #28]	; (8011bd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8011bba:	61eb      	str	r3, [r5, #28]
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
 8011bbe:	bf00      	nop
 8011bc0:	24006b44 	.word	0x24006b44
 8011bc4:	24000000 	.word	0x24000000
 8011bc8:	080105b9 	.word	0x080105b9
 8011bcc:	2400007c 	.word	0x2400007c
 8011bd0:	24006b48 	.word	0x24006b48
 8011bd4:	080105b7 	.word	0x080105b7
 8011bd8:	24000080 	.word	0x24000080

08011bdc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4604      	mov	r4, r0
 8011be0:	f7ff ff88 	bl	8011af4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8011be4:	4620      	mov	r0, r4
 8011be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bea:	f7ff bfbd 	b.w	8011b68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08011bf0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4c15      	ldr	r4, [pc, #84]	; (8011c48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	7823      	ldrb	r3, [r4, #0]
 8011bf8:	f3bf 8f5b 	dmb	ish
 8011bfc:	07da      	lsls	r2, r3, #31
 8011bfe:	d40b      	bmi.n	8011c18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8011c00:	4620      	mov	r0, r4
 8011c02:	f004 ffb3 	bl	8016b6c <__cxa_guard_acquire>
 8011c06:	b138      	cbz	r0, 8011c18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f004 ffbb 	bl	8016b84 <__cxa_guard_release>
 8011c0e:	4a0f      	ldr	r2, [pc, #60]	; (8011c4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8011c10:	490f      	ldr	r1, [pc, #60]	; (8011c50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8011c12:	4810      	ldr	r0, [pc, #64]	; (8011c54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8011c14:	f004 ffa3 	bl	8016b5e <__aeabi_atexit>
 8011c18:	4c0f      	ldr	r4, [pc, #60]	; (8011c58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8011c1a:	7823      	ldrb	r3, [r4, #0]
 8011c1c:	f3bf 8f5b 	dmb	ish
 8011c20:	07db      	lsls	r3, r3, #31
 8011c22:	d40b      	bmi.n	8011c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8011c24:	4620      	mov	r0, r4
 8011c26:	f004 ffa1 	bl	8016b6c <__cxa_guard_acquire>
 8011c2a:	b138      	cbz	r0, 8011c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f004 ffa9 	bl	8016b84 <__cxa_guard_release>
 8011c32:	4a06      	ldr	r2, [pc, #24]	; (8011c4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8011c34:	4909      	ldr	r1, [pc, #36]	; (8011c5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8011c36:	480a      	ldr	r0, [pc, #40]	; (8011c60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8011c38:	f004 ff91 	bl	8016b5e <__aeabi_atexit>
 8011c3c:	4b05      	ldr	r3, [pc, #20]	; (8011c54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8011c3e:	632b      	str	r3, [r5, #48]	; 0x30
 8011c40:	4b07      	ldr	r3, [pc, #28]	; (8011c60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8011c42:	636b      	str	r3, [r5, #52]	; 0x34
 8011c44:	bd38      	pop	{r3, r4, r5, pc}
 8011c46:	bf00      	nop
 8011c48:	24006b4c 	.word	0x24006b4c
 8011c4c:	24000000 	.word	0x24000000
 8011c50:	080105ad 	.word	0x080105ad
 8011c54:	24000084 	.word	0x24000084
 8011c58:	24006b50 	.word	0x24006b50
 8011c5c:	080105ab 	.word	0x080105ab
 8011c60:	24000088 	.word	0x24000088

08011c64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8011c64:	b538      	push	{r3, r4, r5, lr}
 8011c66:	4c15      	ldr	r4, [pc, #84]	; (8011cbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8011c68:	4605      	mov	r5, r0
 8011c6a:	7823      	ldrb	r3, [r4, #0]
 8011c6c:	f3bf 8f5b 	dmb	ish
 8011c70:	07da      	lsls	r2, r3, #31
 8011c72:	d40b      	bmi.n	8011c8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8011c74:	4620      	mov	r0, r4
 8011c76:	f004 ff79 	bl	8016b6c <__cxa_guard_acquire>
 8011c7a:	b138      	cbz	r0, 8011c8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	f004 ff81 	bl	8016b84 <__cxa_guard_release>
 8011c82:	4a0f      	ldr	r2, [pc, #60]	; (8011cc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8011c84:	490f      	ldr	r1, [pc, #60]	; (8011cc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8011c86:	4810      	ldr	r0, [pc, #64]	; (8011cc8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8011c88:	f004 ff69 	bl	8016b5e <__aeabi_atexit>
 8011c8c:	4c0f      	ldr	r4, [pc, #60]	; (8011ccc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8011c8e:	7823      	ldrb	r3, [r4, #0]
 8011c90:	f3bf 8f5b 	dmb	ish
 8011c94:	07db      	lsls	r3, r3, #31
 8011c96:	d40b      	bmi.n	8011cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f004 ff67 	bl	8016b6c <__cxa_guard_acquire>
 8011c9e:	b138      	cbz	r0, 8011cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f004 ff6f 	bl	8016b84 <__cxa_guard_release>
 8011ca6:	4a06      	ldr	r2, [pc, #24]	; (8011cc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8011ca8:	4909      	ldr	r1, [pc, #36]	; (8011cd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8011caa:	480a      	ldr	r0, [pc, #40]	; (8011cd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8011cac:	f004 ff57 	bl	8016b5e <__aeabi_atexit>
 8011cb0:	4b05      	ldr	r3, [pc, #20]	; (8011cc8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8011cb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8011cb4:	4b07      	ldr	r3, [pc, #28]	; (8011cd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8011cb6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011cb8:	bd38      	pop	{r3, r4, r5, pc}
 8011cba:	bf00      	nop
 8011cbc:	24006b24 	.word	0x24006b24
 8011cc0:	24000000 	.word	0x24000000
 8011cc4:	080105b1 	.word	0x080105b1
 8011cc8:	2400005c 	.word	0x2400005c
 8011ccc:	24006b28 	.word	0x24006b28
 8011cd0:	080105af 	.word	0x080105af
 8011cd4:	24000060 	.word	0x24000060

08011cd8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8011cd8:	b510      	push	{r4, lr}
 8011cda:	4604      	mov	r4, r0
 8011cdc:	f7ff ff88 	bl	8011bf0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ce6:	f7ff bfbd 	b.w	8011c64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08011cec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4c15      	ldr	r4, [pc, #84]	; (8011d44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	7823      	ldrb	r3, [r4, #0]
 8011cf4:	f3bf 8f5b 	dmb	ish
 8011cf8:	07da      	lsls	r2, r3, #31
 8011cfa:	d40b      	bmi.n	8011d14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f004 ff35 	bl	8016b6c <__cxa_guard_acquire>
 8011d02:	b138      	cbz	r0, 8011d14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8011d04:	4620      	mov	r0, r4
 8011d06:	f004 ff3d 	bl	8016b84 <__cxa_guard_release>
 8011d0a:	4a0f      	ldr	r2, [pc, #60]	; (8011d48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8011d0c:	490f      	ldr	r1, [pc, #60]	; (8011d4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8011d0e:	4810      	ldr	r0, [pc, #64]	; (8011d50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8011d10:	f004 ff25 	bl	8016b5e <__aeabi_atexit>
 8011d14:	4c0f      	ldr	r4, [pc, #60]	; (8011d54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8011d16:	7823      	ldrb	r3, [r4, #0]
 8011d18:	f3bf 8f5b 	dmb	ish
 8011d1c:	07db      	lsls	r3, r3, #31
 8011d1e:	d40b      	bmi.n	8011d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8011d20:	4620      	mov	r0, r4
 8011d22:	f004 ff23 	bl	8016b6c <__cxa_guard_acquire>
 8011d26:	b138      	cbz	r0, 8011d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f004 ff2b 	bl	8016b84 <__cxa_guard_release>
 8011d2e:	4a06      	ldr	r2, [pc, #24]	; (8011d48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8011d30:	4909      	ldr	r1, [pc, #36]	; (8011d58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8011d32:	480a      	ldr	r0, [pc, #40]	; (8011d5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8011d34:	f004 ff13 	bl	8016b5e <__aeabi_atexit>
 8011d38:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8011d3a:	642b      	str	r3, [r5, #64]	; 0x40
 8011d3c:	4b07      	ldr	r3, [pc, #28]	; (8011d5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8011d3e:	646b      	str	r3, [r5, #68]	; 0x44
 8011d40:	bd38      	pop	{r3, r4, r5, pc}
 8011d42:	bf00      	nop
 8011d44:	24006b54 	.word	0x24006b54
 8011d48:	24000000 	.word	0x24000000
 8011d4c:	080105a5 	.word	0x080105a5
 8011d50:	2400008c 	.word	0x2400008c
 8011d54:	24006b58 	.word	0x24006b58
 8011d58:	080105a3 	.word	0x080105a3
 8011d5c:	24000090 	.word	0x24000090

08011d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	4c15      	ldr	r4, [pc, #84]	; (8011db8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8011d64:	4605      	mov	r5, r0
 8011d66:	7823      	ldrb	r3, [r4, #0]
 8011d68:	f3bf 8f5b 	dmb	ish
 8011d6c:	07da      	lsls	r2, r3, #31
 8011d6e:	d40b      	bmi.n	8011d88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8011d70:	4620      	mov	r0, r4
 8011d72:	f004 fefb 	bl	8016b6c <__cxa_guard_acquire>
 8011d76:	b138      	cbz	r0, 8011d88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f004 ff03 	bl	8016b84 <__cxa_guard_release>
 8011d7e:	4a0f      	ldr	r2, [pc, #60]	; (8011dbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8011d80:	490f      	ldr	r1, [pc, #60]	; (8011dc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8011d82:	4810      	ldr	r0, [pc, #64]	; (8011dc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8011d84:	f004 feeb 	bl	8016b5e <__aeabi_atexit>
 8011d88:	4c0f      	ldr	r4, [pc, #60]	; (8011dc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8011d8a:	7823      	ldrb	r3, [r4, #0]
 8011d8c:	f3bf 8f5b 	dmb	ish
 8011d90:	07db      	lsls	r3, r3, #31
 8011d92:	d40b      	bmi.n	8011dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8011d94:	4620      	mov	r0, r4
 8011d96:	f004 fee9 	bl	8016b6c <__cxa_guard_acquire>
 8011d9a:	b138      	cbz	r0, 8011dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f004 fef1 	bl	8016b84 <__cxa_guard_release>
 8011da2:	4a06      	ldr	r2, [pc, #24]	; (8011dbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8011da4:	4909      	ldr	r1, [pc, #36]	; (8011dcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8011da6:	480a      	ldr	r0, [pc, #40]	; (8011dd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8011da8:	f004 fed9 	bl	8016b5e <__aeabi_atexit>
 8011dac:	4b05      	ldr	r3, [pc, #20]	; (8011dc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8011dae:	63ab      	str	r3, [r5, #56]	; 0x38
 8011db0:	4b07      	ldr	r3, [pc, #28]	; (8011dd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8011db2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	bf00      	nop
 8011db8:	24006b34 	.word	0x24006b34
 8011dbc:	24000000 	.word	0x24000000
 8011dc0:	080105a9 	.word	0x080105a9
 8011dc4:	2400006c 	.word	0x2400006c
 8011dc8:	24006b38 	.word	0x24006b38
 8011dcc:	080105a7 	.word	0x080105a7
 8011dd0:	24000070 	.word	0x24000070

08011dd4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8011dd4:	b510      	push	{r4, lr}
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	f7ff ff88 	bl	8011cec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8011ddc:	4620      	mov	r0, r4
 8011dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de2:	f7ff bfbd 	b.w	8011d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08011de8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4c15      	ldr	r4, [pc, #84]	; (8011e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8011dec:	4605      	mov	r5, r0
 8011dee:	7823      	ldrb	r3, [r4, #0]
 8011df0:	f3bf 8f5b 	dmb	ish
 8011df4:	07da      	lsls	r2, r3, #31
 8011df6:	d40b      	bmi.n	8011e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f004 feb7 	bl	8016b6c <__cxa_guard_acquire>
 8011dfe:	b138      	cbz	r0, 8011e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8011e00:	4620      	mov	r0, r4
 8011e02:	f004 febf 	bl	8016b84 <__cxa_guard_release>
 8011e06:	4a0f      	ldr	r2, [pc, #60]	; (8011e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8011e08:	490f      	ldr	r1, [pc, #60]	; (8011e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8011e0a:	4810      	ldr	r0, [pc, #64]	; (8011e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8011e0c:	f004 fea7 	bl	8016b5e <__aeabi_atexit>
 8011e10:	4c0f      	ldr	r4, [pc, #60]	; (8011e50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8011e12:	7823      	ldrb	r3, [r4, #0]
 8011e14:	f3bf 8f5b 	dmb	ish
 8011e18:	07db      	lsls	r3, r3, #31
 8011e1a:	d40b      	bmi.n	8011e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f004 fea5 	bl	8016b6c <__cxa_guard_acquire>
 8011e22:	b138      	cbz	r0, 8011e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8011e24:	4620      	mov	r0, r4
 8011e26:	f004 fead 	bl	8016b84 <__cxa_guard_release>
 8011e2a:	4a06      	ldr	r2, [pc, #24]	; (8011e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8011e2c:	4909      	ldr	r1, [pc, #36]	; (8011e54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8011e2e:	480a      	ldr	r0, [pc, #40]	; (8011e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8011e30:	f004 fe95 	bl	8016b5e <__aeabi_atexit>
 8011e34:	4b05      	ldr	r3, [pc, #20]	; (8011e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8011e36:	652b      	str	r3, [r5, #80]	; 0x50
 8011e38:	4b07      	ldr	r3, [pc, #28]	; (8011e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8011e3a:	656b      	str	r3, [r5, #84]	; 0x54
 8011e3c:	bd38      	pop	{r3, r4, r5, pc}
 8011e3e:	bf00      	nop
 8011e40:	24006b2c 	.word	0x24006b2c
 8011e44:	24000000 	.word	0x24000000
 8011e48:	0801059d 	.word	0x0801059d
 8011e4c:	24000064 	.word	0x24000064
 8011e50:	24006b30 	.word	0x24006b30
 8011e54:	0801059b 	.word	0x0801059b
 8011e58:	24000068 	.word	0x24000068

08011e5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	4c15      	ldr	r4, [pc, #84]	; (8011eb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8011e60:	4605      	mov	r5, r0
 8011e62:	7823      	ldrb	r3, [r4, #0]
 8011e64:	f3bf 8f5b 	dmb	ish
 8011e68:	07da      	lsls	r2, r3, #31
 8011e6a:	d40b      	bmi.n	8011e84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f004 fe7d 	bl	8016b6c <__cxa_guard_acquire>
 8011e72:	b138      	cbz	r0, 8011e84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8011e74:	4620      	mov	r0, r4
 8011e76:	f004 fe85 	bl	8016b84 <__cxa_guard_release>
 8011e7a:	4a0f      	ldr	r2, [pc, #60]	; (8011eb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8011e7c:	490f      	ldr	r1, [pc, #60]	; (8011ebc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8011e7e:	4810      	ldr	r0, [pc, #64]	; (8011ec0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8011e80:	f004 fe6d 	bl	8016b5e <__aeabi_atexit>
 8011e84:	4c0f      	ldr	r4, [pc, #60]	; (8011ec4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8011e86:	7823      	ldrb	r3, [r4, #0]
 8011e88:	f3bf 8f5b 	dmb	ish
 8011e8c:	07db      	lsls	r3, r3, #31
 8011e8e:	d40b      	bmi.n	8011ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8011e90:	4620      	mov	r0, r4
 8011e92:	f004 fe6b 	bl	8016b6c <__cxa_guard_acquire>
 8011e96:	b138      	cbz	r0, 8011ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f004 fe73 	bl	8016b84 <__cxa_guard_release>
 8011e9e:	4a06      	ldr	r2, [pc, #24]	; (8011eb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8011ea0:	4909      	ldr	r1, [pc, #36]	; (8011ec8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8011ea2:	480a      	ldr	r0, [pc, #40]	; (8011ecc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8011ea4:	f004 fe5b 	bl	8016b5e <__aeabi_atexit>
 8011ea8:	4b05      	ldr	r3, [pc, #20]	; (8011ec0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8011eaa:	64ab      	str	r3, [r5, #72]	; 0x48
 8011eac:	4b07      	ldr	r3, [pc, #28]	; (8011ecc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8011eae:	64eb      	str	r3, [r5, #76]	; 0x4c
 8011eb0:	bd38      	pop	{r3, r4, r5, pc}
 8011eb2:	bf00      	nop
 8011eb4:	24006b1c 	.word	0x24006b1c
 8011eb8:	24000000 	.word	0x24000000
 8011ebc:	080105a1 	.word	0x080105a1
 8011ec0:	24000054 	.word	0x24000054
 8011ec4:	24006b20 	.word	0x24006b20
 8011ec8:	0801059f 	.word	0x0801059f
 8011ecc:	24000058 	.word	0x24000058

08011ed0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8011ed0:	b510      	push	{r4, lr}
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	f7ff ff88 	bl	8011de8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8011ed8:	4620      	mov	r0, r4
 8011eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ede:	f7ff bfbd 	b.w	8011e5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08011ee2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	f7ff fff3 	bl	8011ed0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8011eea:	4620      	mov	r0, r4
 8011eec:	f7ff ff72 	bl	8011dd4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	f7ff fe73 	bl	8011bdc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff fdf2 	bl	8011ae0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8011efc:	4620      	mov	r0, r4
 8011efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f02:	f7ff bee9 	b.w	8011cd8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08011f06 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8011f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0a:	b087      	sub	sp, #28
 8011f0c:	788d      	ldrb	r5, [r1, #2]
 8011f0e:	f891 9000 	ldrb.w	r9, [r1]
 8011f12:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8011f16:	9501      	str	r5, [sp, #4]
 8011f18:	784d      	ldrb	r5, [r1, #1]
 8011f1a:	9203      	str	r2, [sp, #12]
 8011f1c:	9502      	str	r5, [sp, #8]
 8011f1e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8011f22:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8011f26:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011f2a:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8011f2e:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8011f32:	fb06 0708 	mla	r7, r6, r8, r0
 8011f36:	2e00      	cmp	r6, #0
 8011f38:	eb02 0a07 	add.w	sl, r2, r7
 8011f3c:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8011f40:	9d01      	ldr	r5, [sp, #4]
 8011f42:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8011f46:	ea45 0509 	orr.w	r5, r5, r9
 8011f4a:	9505      	str	r5, [sp, #20]
 8011f4c:	f2c0 80b2 	blt.w	80120b4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8011f50:	45b3      	cmp	fp, r6
 8011f52:	f340 80af 	ble.w	80120b4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	f2c0 80aa 	blt.w	80120b0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8011f5c:	4580      	cmp	r8, r0
 8011f5e:	f340 80a7 	ble.w	80120b0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8011f62:	9a03      	ldr	r2, [sp, #12]
 8011f64:	5dd7      	ldrb	r7, [r2, r7]
 8011f66:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011f6a:	441f      	add	r7, r3
 8011f6c:	1c42      	adds	r2, r0, #1
 8011f6e:	f100 80a4 	bmi.w	80120ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8011f72:	4590      	cmp	r8, r2
 8011f74:	f340 80a1 	ble.w	80120ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8011f78:	2c00      	cmp	r4, #0
 8011f7a:	f000 809e 	beq.w	80120ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8011f7e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8011f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f86:	441d      	add	r5, r3
 8011f88:	3601      	adds	r6, #1
 8011f8a:	f100 809a 	bmi.w	80120c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8011f8e:	45b3      	cmp	fp, r6
 8011f90:	f340 8097 	ble.w	80120c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8011f94:	f1bc 0f00 	cmp.w	ip, #0
 8011f98:	f000 8093 	beq.w	80120c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	f2c0 808e 	blt.w	80120be <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8011fa2:	4580      	cmp	r8, r0
 8011fa4:	f340 808b 	ble.w	80120be <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8011fa8:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8011fac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011fb0:	441e      	add	r6, r3
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	f100 8088 	bmi.w	80120c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8011fb8:	4580      	cmp	r8, r0
 8011fba:	f340 8085 	ble.w	80120c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8011fbe:	2c00      	cmp	r4, #0
 8011fc0:	f000 8082 	beq.w	80120c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8011fc4:	44d0      	add	r8, sl
 8011fc6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011fca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011fce:	4413      	add	r3, r2
 8011fd0:	b2a4      	uxth	r4, r4
 8011fd2:	f895 a000 	ldrb.w	sl, [r5]
 8011fd6:	fa1f fc8c 	uxth.w	ip, ip
 8011fda:	fb04 fb0c 	mul.w	fp, r4, ip
 8011fde:	0124      	lsls	r4, r4, #4
 8011fe0:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8011fe4:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8011fe8:	eba4 040b 	sub.w	r4, r4, fp
 8011fec:	fa1f f08c 	uxth.w	r0, ip
 8011ff0:	b2a2      	uxth	r2, r4
 8011ff2:	783c      	ldrb	r4, [r7, #0]
 8011ff4:	eba8 0800 	sub.w	r8, r8, r0
 8011ff8:	fa1f fc8e 	uxth.w	ip, lr
 8011ffc:	fb02 fa0a 	mul.w	sl, r2, sl
 8012000:	ea6f 0e0e 	mvn.w	lr, lr
 8012004:	fa1f f888 	uxth.w	r8, r8
 8012008:	fa5f fe8e 	uxtb.w	lr, lr
 801200c:	fb08 aa04 	mla	sl, r8, r4, sl
 8012010:	7834      	ldrb	r4, [r6, #0]
 8012012:	fb19 f90e 	smulbb	r9, r9, lr
 8012016:	fb00 aa04 	mla	sl, r0, r4, sl
 801201a:	781c      	ldrb	r4, [r3, #0]
 801201c:	fb0b a404 	mla	r4, fp, r4, sl
 8012020:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8012024:	fb04 990c 	mla	r9, r4, ip, r9
 8012028:	fa1f f989 	uxth.w	r9, r9
 801202c:	f109 0401 	add.w	r4, r9, #1
 8012030:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8012034:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012038:	f881 9000 	strb.w	r9, [r1]
 801203c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8012040:	787c      	ldrb	r4, [r7, #1]
 8012042:	fb02 f909 	mul.w	r9, r2, r9
 8012046:	fb08 9904 	mla	r9, r8, r4, r9
 801204a:	7874      	ldrb	r4, [r6, #1]
 801204c:	fb00 9904 	mla	r9, r0, r4, r9
 8012050:	785c      	ldrb	r4, [r3, #1]
 8012052:	fb0b 9404 	mla	r4, fp, r4, r9
 8012056:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801205a:	9c02      	ldr	r4, [sp, #8]
 801205c:	fb14 f90e 	smulbb	r9, r4, lr
 8012060:	fb0a 940c 	mla	r4, sl, ip, r9
 8012064:	b2a4      	uxth	r4, r4
 8012066:	f104 0901 	add.w	r9, r4, #1
 801206a:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801206e:	1224      	asrs	r4, r4, #8
 8012070:	704c      	strb	r4, [r1, #1]
 8012072:	78ad      	ldrb	r5, [r5, #2]
 8012074:	78bc      	ldrb	r4, [r7, #2]
 8012076:	436a      	muls	r2, r5
 8012078:	789b      	ldrb	r3, [r3, #2]
 801207a:	fb08 2204 	mla	r2, r8, r4, r2
 801207e:	78b4      	ldrb	r4, [r6, #2]
 8012080:	fb00 2004 	mla	r0, r0, r4, r2
 8012084:	fb0b 0b03 	mla	fp, fp, r3, r0
 8012088:	9b01      	ldr	r3, [sp, #4]
 801208a:	fb13 fe0e 	smulbb	lr, r3, lr
 801208e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8012092:	fb0b ec0c 	mla	ip, fp, ip, lr
 8012096:	fa1f fc8c 	uxth.w	ip, ip
 801209a:	f10c 0e01 	add.w	lr, ip, #1
 801209e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80120a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80120a6:	f881 c002 	strb.w	ip, [r1, #2]
 80120aa:	b007      	add	sp, #28
 80120ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b0:	af05      	add	r7, sp, #20
 80120b2:	e75b      	b.n	8011f6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80120b4:	ad05      	add	r5, sp, #20
 80120b6:	462f      	mov	r7, r5
 80120b8:	e766      	b.n	8011f88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80120ba:	ad05      	add	r5, sp, #20
 80120bc:	e764      	b.n	8011f88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80120be:	ae05      	add	r6, sp, #20
 80120c0:	e777      	b.n	8011fb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80120c2:	ab05      	add	r3, sp, #20
 80120c4:	461e      	mov	r6, r3
 80120c6:	e783      	b.n	8011fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80120c8:	ab05      	add	r3, sp, #20
 80120ca:	e781      	b.n	8011fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080120cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80120cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d0:	b093      	sub	sp, #76	; 0x4c
 80120d2:	9210      	str	r2, [sp, #64]	; 0x40
 80120d4:	9309      	str	r3, [sp, #36]	; 0x24
 80120d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120d8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80120dc:	9011      	str	r0, [sp, #68]	; 0x44
 80120de:	930e      	str	r3, [sp, #56]	; 0x38
 80120e0:	6850      	ldr	r0, [r2, #4]
 80120e2:	910d      	str	r1, [sp, #52]	; 0x34
 80120e4:	6812      	ldr	r2, [r2, #0]
 80120e6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80120ea:	fb00 1303 	mla	r3, r0, r3, r1
 80120ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120f2:	18d3      	adds	r3, r2, r3
 80120f4:	930a      	str	r3, [sp, #40]	; 0x28
 80120f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	930c      	str	r3, [sp, #48]	; 0x30
 80120fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80120fe:	685c      	ldr	r4, [r3, #4]
 8012100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012102:	3404      	adds	r4, #4
 8012104:	43db      	mvns	r3, r3
 8012106:	b2db      	uxtb	r3, r3
 8012108:	930b      	str	r3, [sp, #44]	; 0x2c
 801210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801210c:	2b00      	cmp	r3, #0
 801210e:	dc03      	bgt.n	8012118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8012110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012112:	2b00      	cmp	r3, #0
 8012114:	f340 8250 	ble.w	80125b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8012118:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801211a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801211e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012122:	1e48      	subs	r0, r1, #1
 8012124:	1e55      	subs	r5, r2, #1
 8012126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012128:	2b00      	cmp	r3, #0
 801212a:	f340 80ee 	ble.w	801230a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801212e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012130:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012132:	1436      	asrs	r6, r6, #16
 8012134:	ea4f 4323 	mov.w	r3, r3, asr #16
 8012138:	d406      	bmi.n	8012148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801213a:	4286      	cmp	r6, r0
 801213c:	da04      	bge.n	8012148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801213e:	2b00      	cmp	r3, #0
 8012140:	db02      	blt.n	8012148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012142:	42ab      	cmp	r3, r5
 8012144:	f2c0 80e2 	blt.w	801230c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8012148:	3601      	adds	r6, #1
 801214a:	f100 80cf 	bmi.w	80122ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801214e:	42b1      	cmp	r1, r6
 8012150:	f2c0 80cc 	blt.w	80122ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8012154:	3301      	adds	r3, #1
 8012156:	f100 80c9 	bmi.w	80122ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801215a:	429a      	cmp	r2, r3
 801215c:	f2c0 80c6 	blt.w	80122ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8012160:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8012164:	f1bb 0f00 	cmp.w	fp, #0
 8012168:	f340 80f1 	ble.w	801234e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801216c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801216e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012170:	9824      	ldr	r0, [sp, #144]	; 0x90
 8012172:	141d      	asrs	r5, r3, #16
 8012174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012176:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801217a:	68c7      	ldr	r7, [r0, #12]
 801217c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801217e:	1418      	asrs	r0, r3, #16
 8012180:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8012184:	6892      	ldr	r2, [r2, #8]
 8012186:	f100 8137 	bmi.w	80123f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801218a:	f102 3cff 	add.w	ip, r2, #4294967295
 801218e:	4560      	cmp	r0, ip
 8012190:	f280 8132 	bge.w	80123f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8012194:	2d00      	cmp	r5, #0
 8012196:	f2c0 812f 	blt.w	80123f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801219a:	f107 3cff 	add.w	ip, r7, #4294967295
 801219e:	4565      	cmp	r5, ip
 80121a0:	f280 812a 	bge.w	80123f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80121a4:	b212      	sxth	r2, r2
 80121a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80121a8:	fb05 0002 	mla	r0, r5, r2, r0
 80121ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121ae:	f817 c000 	ldrb.w	ip, [r7, r0]
 80121b2:	4405      	add	r5, r0
 80121b4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80121b8:	eb04 0e0c 	add.w	lr, r4, ip
 80121bc:	f1b8 0f00 	cmp.w	r8, #0
 80121c0:	f000 810c 	beq.w	80123dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80121c4:	786f      	ldrb	r7, [r5, #1]
 80121c6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80121ca:	4427      	add	r7, r4
 80121cc:	2900      	cmp	r1, #0
 80121ce:	f000 810d 	beq.w	80123ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80121d2:	18a8      	adds	r0, r5, r2
 80121d4:	5caa      	ldrb	r2, [r5, r2]
 80121d6:	7840      	ldrb	r0, [r0, #1]
 80121d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80121dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80121e0:	4422      	add	r2, r4
 80121e2:	4420      	add	r0, r4
 80121e4:	fa1f f388 	uxth.w	r3, r8
 80121e8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80121ec:	b289      	uxth	r1, r1
 80121ee:	f897 c000 	ldrb.w	ip, [r7]
 80121f2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80121f6:	fb03 f901 	mul.w	r9, r3, r1
 80121fa:	011b      	lsls	r3, r3, #4
 80121fc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8012200:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8012204:	eba3 0309 	sub.w	r3, r3, r9
 8012208:	b289      	uxth	r1, r1
 801220a:	b29b      	uxth	r3, r3
 801220c:	eba8 0801 	sub.w	r8, r8, r1
 8012210:	fb03 fc0c 	mul.w	ip, r3, ip
 8012214:	fa1f f888 	uxth.w	r8, r8
 8012218:	930f      	str	r3, [sp, #60]	; 0x3c
 801221a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801221c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8012220:	f892 a000 	ldrb.w	sl, [r2]
 8012224:	fb01 cc0a 	mla	ip, r1, sl, ip
 8012228:	f890 a000 	ldrb.w	sl, [r0]
 801222c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8012230:	f896 a000 	ldrb.w	sl, [r6]
 8012234:	fb1a fa03 	smulbb	sl, sl, r3
 8012238:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801223e:	fb0c ac05 	mla	ip, ip, r5, sl
 8012242:	fa1f fc8c 	uxth.w	ip, ip
 8012246:	f10c 0a01 	add.w	sl, ip, #1
 801224a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801224e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012252:	f886 a000 	strb.w	sl, [r6]
 8012256:	f897 c001 	ldrb.w	ip, [r7, #1]
 801225a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801225e:	fb03 fc0c 	mul.w	ip, r3, ip
 8012262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012264:	fb08 cc0a 	mla	ip, r8, sl, ip
 8012268:	f892 a001 	ldrb.w	sl, [r2, #1]
 801226c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8012270:	f890 a001 	ldrb.w	sl, [r0, #1]
 8012274:	fb09 cc0a 	mla	ip, r9, sl, ip
 8012278:	f896 a001 	ldrb.w	sl, [r6, #1]
 801227c:	fb1a fa03 	smulbb	sl, sl, r3
 8012280:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8012284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012286:	fb0c ac05 	mla	ip, ip, r5, sl
 801228a:	fa1f fc8c 	uxth.w	ip, ip
 801228e:	f10c 0a01 	add.w	sl, ip, #1
 8012292:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8012296:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801229a:	f886 c001 	strb.w	ip, [r6, #1]
 801229e:	78bf      	ldrb	r7, [r7, #2]
 80122a0:	f89e c002 	ldrb.w	ip, [lr, #2]
 80122a4:	437b      	muls	r3, r7
 80122a6:	fb08 330c 	mla	r3, r8, ip, r3
 80122aa:	f892 c002 	ldrb.w	ip, [r2, #2]
 80122ae:	7882      	ldrb	r2, [r0, #2]
 80122b0:	fb01 310c 	mla	r1, r1, ip, r3
 80122b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122b6:	fb09 1902 	mla	r9, r9, r2, r1
 80122ba:	78b1      	ldrb	r1, [r6, #2]
 80122bc:	fb11 f103 	smulbb	r1, r1, r3
 80122c0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80122c4:	fb09 1505 	mla	r5, r9, r5, r1
 80122c8:	b2ad      	uxth	r5, r5
 80122ca:	1c6b      	adds	r3, r5, #1
 80122cc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80122d0:	122d      	asrs	r5, r5, #8
 80122d2:	70b5      	strb	r5, [r6, #2]
 80122d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122d6:	3603      	adds	r6, #3
 80122d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80122da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122de:	4413      	add	r3, r2
 80122e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80122e2:	931d      	str	r3, [sp, #116]	; 0x74
 80122e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80122e6:	4413      	add	r3, r2
 80122e8:	931e      	str	r3, [sp, #120]	; 0x78
 80122ea:	e73b      	b.n	8012164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80122ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122ee:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80122f0:	4433      	add	r3, r6
 80122f2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80122f4:	931d      	str	r3, [sp, #116]	; 0x74
 80122f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80122f8:	4433      	add	r3, r6
 80122fa:	931e      	str	r3, [sp, #120]	; 0x78
 80122fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fe:	3b01      	subs	r3, #1
 8012300:	9309      	str	r3, [sp, #36]	; 0x24
 8012302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012304:	3303      	adds	r3, #3
 8012306:	930a      	str	r3, [sp, #40]	; 0x28
 8012308:	e70d      	b.n	8012126 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801230a:	d028      	beq.n	801235e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801230e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012310:	3b01      	subs	r3, #1
 8012312:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012314:	fb00 5003 	mla	r0, r0, r3, r5
 8012318:	1400      	asrs	r0, r0, #16
 801231a:	f53f af21 	bmi.w	8012160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801231e:	3901      	subs	r1, #1
 8012320:	4288      	cmp	r0, r1
 8012322:	f6bf af1d 	bge.w	8012160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8012326:	9920      	ldr	r1, [sp, #128]	; 0x80
 8012328:	981e      	ldr	r0, [sp, #120]	; 0x78
 801232a:	fb01 0303 	mla	r3, r1, r3, r0
 801232e:	141b      	asrs	r3, r3, #16
 8012330:	f53f af16 	bmi.w	8012160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8012334:	3a01      	subs	r2, #1
 8012336:	4293      	cmp	r3, r2
 8012338:	f6bf af12 	bge.w	8012160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801233c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801233e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012342:	1cdf      	adds	r7, r3, #3
 8012344:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8012348:	f1b9 0f00 	cmp.w	r9, #0
 801234c:	dc73      	bgt.n	8012436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801234e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801235a:	441a      	add	r2, r3
 801235c:	920a      	str	r2, [sp, #40]	; 0x28
 801235e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012360:	2b00      	cmp	r3, #0
 8012362:	f340 8129 	ble.w	80125b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8012366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801236a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801236c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012370:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012374:	eef0 6a62 	vmov.f32	s13, s5
 8012378:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801237c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012380:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012384:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8012388:	eef0 6a43 	vmov.f32	s13, s6
 801238c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012390:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8012394:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012398:	ee61 7a27 	vmul.f32	s15, s2, s15
 801239c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80123a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80123a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80123a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80123ac:	ee12 2a90 	vmov	r2, s5
 80123b0:	eef0 2a47 	vmov.f32	s5, s14
 80123b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80123b8:	ee13 2a10 	vmov	r2, s6
 80123bc:	931f      	str	r3, [sp, #124]	; 0x7c
 80123be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80123c0:	eeb0 3a67 	vmov.f32	s6, s15
 80123c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80123c8:	9320      	str	r3, [sp, #128]	; 0x80
 80123ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80123ce:	3b01      	subs	r3, #1
 80123d0:	930d      	str	r3, [sp, #52]	; 0x34
 80123d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80123d4:	bf08      	it	eq
 80123d6:	4613      	moveq	r3, r2
 80123d8:	9309      	str	r3, [sp, #36]	; 0x24
 80123da:	e696      	b.n	801210a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80123dc:	b149      	cbz	r1, 80123f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80123de:	5caa      	ldrb	r2, [r5, r2]
 80123e0:	4670      	mov	r0, lr
 80123e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80123e6:	4422      	add	r2, r4
 80123e8:	4677      	mov	r7, lr
 80123ea:	e6fb      	b.n	80121e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80123ec:	4670      	mov	r0, lr
 80123ee:	4672      	mov	r2, lr
 80123f0:	e6f8      	b.n	80121e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80123f2:	4670      	mov	r0, lr
 80123f4:	4672      	mov	r2, lr
 80123f6:	e7f7      	b.n	80123e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80123f8:	f110 0c01 	adds.w	ip, r0, #1
 80123fc:	f53f af6a 	bmi.w	80122d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8012400:	4562      	cmp	r2, ip
 8012402:	f6ff af67 	blt.w	80122d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8012406:	f115 0c01 	adds.w	ip, r5, #1
 801240a:	f53f af63 	bmi.w	80122d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801240e:	4567      	cmp	r7, ip
 8012410:	f6ff af60 	blt.w	80122d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8012414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012416:	b23f      	sxth	r7, r7
 8012418:	b212      	sxth	r2, r2
 801241a:	9002      	str	r0, [sp, #8]
 801241c:	9701      	str	r7, [sp, #4]
 801241e:	9200      	str	r2, [sp, #0]
 8012420:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012424:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8012428:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801242c:	4623      	mov	r3, r4
 801242e:	4631      	mov	r1, r6
 8012430:	f7ff fd69 	bl	8011f06 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8012434:	e74e      	b.n	80122d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8012436:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012438:	981e      	ldr	r0, [sp, #120]	; 0x78
 801243a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801243e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012440:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012442:	1400      	asrs	r0, r0, #16
 8012444:	142d      	asrs	r5, r5, #16
 8012446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012448:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801244c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8012450:	fb02 5000 	mla	r0, r2, r0, r5
 8012454:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012456:	f815 e000 	ldrb.w	lr, [r5, r0]
 801245a:	eb05 0c00 	add.w	ip, r5, r0
 801245e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8012462:	eb04 060e 	add.w	r6, r4, lr
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 8097 	beq.w	801259a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801246c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8012470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012474:	4425      	add	r5, r4
 8012476:	2900      	cmp	r1, #0
 8012478:	f000 8098 	beq.w	80125ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801247c:	eb0c 0002 	add.w	r0, ip, r2
 8012480:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012484:	7840      	ldrb	r0, [r0, #1]
 8012486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801248a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801248e:	4422      	add	r2, r4
 8012490:	4420      	add	r0, r4
 8012492:	b29b      	uxth	r3, r3
 8012494:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8012498:	b289      	uxth	r1, r1
 801249a:	f895 e000 	ldrb.w	lr, [r5]
 801249e:	3703      	adds	r7, #3
 80124a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80124a4:	fb03 f801 	mul.w	r8, r3, r1
 80124a8:	011b      	lsls	r3, r3, #4
 80124aa:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80124ae:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80124b2:	eba3 0308 	sub.w	r3, r3, r8
 80124b6:	b289      	uxth	r1, r1
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	ebac 0c01 	sub.w	ip, ip, r1
 80124be:	fb03 fe0e 	mul.w	lr, r3, lr
 80124c2:	fa1f fc8c 	uxth.w	ip, ip
 80124c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80124c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ca:	fb0c ee0b 	mla	lr, ip, fp, lr
 80124ce:	f892 b000 	ldrb.w	fp, [r2]
 80124d2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80124d6:	f890 b000 	ldrb.w	fp, [r0]
 80124da:	fb08 ee0b 	mla	lr, r8, fp, lr
 80124de:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80124e2:	fb1b fb03 	smulbb	fp, fp, r3
 80124e6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80124ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124ec:	fb0e be0a 	mla	lr, lr, sl, fp
 80124f0:	fa1f fe8e 	uxth.w	lr, lr
 80124f4:	f10e 0b01 	add.w	fp, lr, #1
 80124f8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80124fc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012500:	f807 ec06 	strb.w	lr, [r7, #-6]
 8012504:	f895 e001 	ldrb.w	lr, [r5, #1]
 8012508:	f896 b001 	ldrb.w	fp, [r6, #1]
 801250c:	fb03 fe0e 	mul.w	lr, r3, lr
 8012510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012512:	fb0c ee0b 	mla	lr, ip, fp, lr
 8012516:	f892 b001 	ldrb.w	fp, [r2, #1]
 801251a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801251e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012522:	fb08 ee0b 	mla	lr, r8, fp, lr
 8012526:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801252a:	fb1b fb03 	smulbb	fp, fp, r3
 801252e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8012532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012534:	fb0e be0a 	mla	lr, lr, sl, fp
 8012538:	fa1f fe8e 	uxth.w	lr, lr
 801253c:	f10e 0b01 	add.w	fp, lr, #1
 8012540:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8012544:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012548:	f807 ec05 	strb.w	lr, [r7, #-5]
 801254c:	78ad      	ldrb	r5, [r5, #2]
 801254e:	78b6      	ldrb	r6, [r6, #2]
 8012550:	436b      	muls	r3, r5
 8012552:	7895      	ldrb	r5, [r2, #2]
 8012554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012556:	fb0c 3306 	mla	r3, ip, r6, r3
 801255a:	fb01 3305 	mla	r3, r1, r5, r3
 801255e:	7885      	ldrb	r5, [r0, #2]
 8012560:	fb08 3805 	mla	r8, r8, r5, r3
 8012564:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8012568:	fb13 f302 	smulbb	r3, r3, r2
 801256c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8012570:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012572:	fb08 380a 	mla	r8, r8, sl, r3
 8012576:	fa1f f888 	uxth.w	r8, r8
 801257a:	f108 0301 	add.w	r3, r8, #1
 801257e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8012582:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012584:	4413      	add	r3, r2
 8012586:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012588:	ea4f 2828 	mov.w	r8, r8, asr #8
 801258c:	931d      	str	r3, [sp, #116]	; 0x74
 801258e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012590:	f807 8c04 	strb.w	r8, [r7, #-4]
 8012594:	4413      	add	r3, r2
 8012596:	931e      	str	r3, [sp, #120]	; 0x78
 8012598:	e6d6      	b.n	8012348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801259a:	b151      	cbz	r1, 80125b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801259c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80125a0:	4630      	mov	r0, r6
 80125a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80125a6:	4422      	add	r2, r4
 80125a8:	4635      	mov	r5, r6
 80125aa:	e772      	b.n	8012492 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80125ac:	4630      	mov	r0, r6
 80125ae:	4632      	mov	r2, r6
 80125b0:	e76f      	b.n	8012492 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80125b2:	4630      	mov	r0, r6
 80125b4:	4632      	mov	r2, r6
 80125b6:	e7f7      	b.n	80125a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80125b8:	b013      	add	sp, #76	; 0x4c
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80125be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80125c2:	784c      	ldrb	r4, [r1, #1]
 80125c4:	f891 a002 	ldrb.w	sl, [r1, #2]
 80125c8:	0224      	lsls	r4, r4, #8
 80125ca:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80125ce:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80125d2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80125d6:	f891 a000 	ldrb.w	sl, [r1]
 80125da:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80125de:	ea44 040a 	orr.w	r4, r4, sl
 80125e2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80125e6:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80125ea:	9401      	str	r4, [sp, #4]
 80125ec:	fb05 c70e 	mla	r7, r5, lr, ip
 80125f0:	2d00      	cmp	r5, #0
 80125f2:	eb02 0807 	add.w	r8, r2, r7
 80125f6:	db72      	blt.n	80126de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80125f8:	45a9      	cmp	r9, r5
 80125fa:	dd70      	ble.n	80126de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80125fc:	f1bc 0f00 	cmp.w	ip, #0
 8012600:	db6b      	blt.n	80126da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8012602:	45e6      	cmp	lr, ip
 8012604:	dd69      	ble.n	80126da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8012606:	5dd7      	ldrb	r7, [r2, r7]
 8012608:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801260c:	441f      	add	r7, r3
 801260e:	f11c 0201 	adds.w	r2, ip, #1
 8012612:	d467      	bmi.n	80126e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8012614:	4596      	cmp	lr, r2
 8012616:	dd65      	ble.n	80126e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8012618:	2800      	cmp	r0, #0
 801261a:	d063      	beq.n	80126e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801261c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8012620:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012624:	441c      	add	r4, r3
 8012626:	3501      	adds	r5, #1
 8012628:	d460      	bmi.n	80126ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801262a:	45a9      	cmp	r9, r5
 801262c:	dd5e      	ble.n	80126ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801262e:	2e00      	cmp	r6, #0
 8012630:	d05c      	beq.n	80126ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8012632:	f1bc 0f00 	cmp.w	ip, #0
 8012636:	db57      	blt.n	80126e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8012638:	45e6      	cmp	lr, ip
 801263a:	dd55      	ble.n	80126e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801263c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8012640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012644:	441d      	add	r5, r3
 8012646:	f11c 0201 	adds.w	r2, ip, #1
 801264a:	d452      	bmi.n	80126f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801264c:	4596      	cmp	lr, r2
 801264e:	dd50      	ble.n	80126f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8012650:	2800      	cmp	r0, #0
 8012652:	d04e      	beq.n	80126f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8012654:	44c6      	add	lr, r8
 8012656:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801265a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801265e:	4413      	add	r3, r2
 8012660:	b280      	uxth	r0, r0
 8012662:	f897 8000 	ldrb.w	r8, [r7]
 8012666:	b2b2      	uxth	r2, r6
 8012668:	fb00 f602 	mul.w	r6, r0, r2
 801266c:	0100      	lsls	r0, r0, #4
 801266e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8012672:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8012676:	1b80      	subs	r0, r0, r6
 8012678:	fa1f fc82 	uxth.w	ip, r2
 801267c:	b282      	uxth	r2, r0
 801267e:	7820      	ldrb	r0, [r4, #0]
 8012680:	ebae 0e0c 	sub.w	lr, lr, ip
 8012684:	4350      	muls	r0, r2
 8012686:	fa1f fe8e 	uxth.w	lr, lr
 801268a:	fb0e 0808 	mla	r8, lr, r8, r0
 801268e:	7828      	ldrb	r0, [r5, #0]
 8012690:	fb0c 8800 	mla	r8, ip, r0, r8
 8012694:	7818      	ldrb	r0, [r3, #0]
 8012696:	fb06 8000 	mla	r0, r6, r0, r8
 801269a:	1200      	asrs	r0, r0, #8
 801269c:	7008      	strb	r0, [r1, #0]
 801269e:	7860      	ldrb	r0, [r4, #1]
 80126a0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80126a4:	4350      	muls	r0, r2
 80126a6:	fb0e 0808 	mla	r8, lr, r8, r0
 80126aa:	7868      	ldrb	r0, [r5, #1]
 80126ac:	fb0c 8800 	mla	r8, ip, r0, r8
 80126b0:	7858      	ldrb	r0, [r3, #1]
 80126b2:	fb06 8000 	mla	r0, r6, r0, r8
 80126b6:	1200      	asrs	r0, r0, #8
 80126b8:	7048      	strb	r0, [r1, #1]
 80126ba:	78a0      	ldrb	r0, [r4, #2]
 80126bc:	78bf      	ldrb	r7, [r7, #2]
 80126be:	4350      	muls	r0, r2
 80126c0:	78aa      	ldrb	r2, [r5, #2]
 80126c2:	fb0e 0007 	mla	r0, lr, r7, r0
 80126c6:	fb0c 0c02 	mla	ip, ip, r2, r0
 80126ca:	789a      	ldrb	r2, [r3, #2]
 80126cc:	fb06 c202 	mla	r2, r6, r2, ip
 80126d0:	1212      	asrs	r2, r2, #8
 80126d2:	708a      	strb	r2, [r1, #2]
 80126d4:	b002      	add	sp, #8
 80126d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126da:	af01      	add	r7, sp, #4
 80126dc:	e797      	b.n	801260e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80126de:	ac01      	add	r4, sp, #4
 80126e0:	4627      	mov	r7, r4
 80126e2:	e7a0      	b.n	8012626 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80126e4:	ac01      	add	r4, sp, #4
 80126e6:	e79e      	b.n	8012626 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80126e8:	ad01      	add	r5, sp, #4
 80126ea:	e7ac      	b.n	8012646 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80126ec:	ab01      	add	r3, sp, #4
 80126ee:	461d      	mov	r5, r3
 80126f0:	e7b6      	b.n	8012660 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80126f2:	ab01      	add	r3, sp, #4
 80126f4:	e7b4      	b.n	8012660 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080126f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80126f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fa:	b08d      	sub	sp, #52	; 0x34
 80126fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012700:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8012704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012706:	900b      	str	r0, [sp, #44]	; 0x2c
 8012708:	9306      	str	r3, [sp, #24]
 801270a:	6850      	ldr	r0, [r2, #4]
 801270c:	6812      	ldr	r2, [r2, #0]
 801270e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8012710:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8012714:	fb00 1303 	mla	r3, r0, r3, r1
 8012718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801271c:	18d3      	adds	r3, r2, r3
 801271e:	9307      	str	r3, [sp, #28]
 8012720:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	9308      	str	r3, [sp, #32]
 8012726:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012728:	685d      	ldr	r5, [r3, #4]
 801272a:	3504      	adds	r5, #4
 801272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801272e:	2b00      	cmp	r3, #0
 8012730:	dc03      	bgt.n	801273a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8012732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012734:	2b00      	cmp	r3, #0
 8012736:	f340 81e6 	ble.w	8012b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801273a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801273c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8012740:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012744:	1e48      	subs	r0, r1, #1
 8012746:	1e56      	subs	r6, r2, #1
 8012748:	9b06      	ldr	r3, [sp, #24]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f340 80bd 	ble.w	80128ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8012750:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012752:	1427      	asrs	r7, r4, #16
 8012754:	ea4f 4323 	mov.w	r3, r3, asr #16
 8012758:	d406      	bmi.n	8012768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801275a:	4287      	cmp	r7, r0
 801275c:	da04      	bge.n	8012768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801275e:	2b00      	cmp	r3, #0
 8012760:	db02      	blt.n	8012768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012762:	42b3      	cmp	r3, r6
 8012764:	f2c0 80b2 	blt.w	80128cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8012768:	3701      	adds	r7, #1
 801276a:	f100 80a1 	bmi.w	80128b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801276e:	42b9      	cmp	r1, r7
 8012770:	f2c0 809e 	blt.w	80128b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8012774:	3301      	adds	r3, #1
 8012776:	f100 809b 	bmi.w	80128b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801277a:	429a      	cmp	r2, r3
 801277c:	f2c0 8098 	blt.w	80128b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8012780:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8012784:	f1bb 0f00 	cmp.w	fp, #0
 8012788:	f340 80bf 	ble.w	801290a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801278c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801278e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8012790:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012792:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8012796:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801279a:	1420      	asrs	r0, r4, #16
 801279c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801279e:	ea4f 4723 	mov.w	r7, r3, asr #16
 80127a2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80127a6:	6892      	ldr	r2, [r2, #8]
 80127a8:	f100 8103 	bmi.w	80129b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80127ac:	f102 3eff 	add.w	lr, r2, #4294967295
 80127b0:	4570      	cmp	r0, lr
 80127b2:	f280 80fe 	bge.w	80129b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80127b6:	2f00      	cmp	r7, #0
 80127b8:	f2c0 80fb 	blt.w	80129b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80127bc:	f10c 3eff 	add.w	lr, ip, #4294967295
 80127c0:	4577      	cmp	r7, lr
 80127c2:	f280 80f6 	bge.w	80129b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80127c6:	b212      	sxth	r2, r2
 80127c8:	fb07 0002 	mla	r0, r7, r2, r0
 80127cc:	9f08      	ldr	r7, [sp, #32]
 80127ce:	f817 8000 	ldrb.w	r8, [r7, r0]
 80127d2:	eb07 0e00 	add.w	lr, r7, r0
 80127d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80127da:	eb05 0c08 	add.w	ip, r5, r8
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f000 80d8 	beq.w	8012994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80127e4:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80127e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80127ec:	442f      	add	r7, r5
 80127ee:	2900      	cmp	r1, #0
 80127f0:	f000 80d9 	beq.w	80129a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80127f4:	eb0e 0002 	add.w	r0, lr, r2
 80127f8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80127fc:	7840      	ldrb	r0, [r0, #1]
 80127fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012802:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012806:	442a      	add	r2, r5
 8012808:	4428      	add	r0, r5
 801280a:	b29b      	uxth	r3, r3
 801280c:	f815 a008 	ldrb.w	sl, [r5, r8]
 8012810:	b289      	uxth	r1, r1
 8012812:	f897 8000 	ldrb.w	r8, [r7]
 8012816:	fb03 f901 	mul.w	r9, r3, r1
 801281a:	011b      	lsls	r3, r3, #4
 801281c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8012820:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8012824:	eba3 0309 	sub.w	r3, r3, r9
 8012828:	b289      	uxth	r1, r1
 801282a:	b29b      	uxth	r3, r3
 801282c:	ebae 0e01 	sub.w	lr, lr, r1
 8012830:	fb03 f808 	mul.w	r8, r3, r8
 8012834:	fa1f fe8e 	uxth.w	lr, lr
 8012838:	fb0e 880a 	mla	r8, lr, sl, r8
 801283c:	f892 a000 	ldrb.w	sl, [r2]
 8012840:	fb01 880a 	mla	r8, r1, sl, r8
 8012844:	f890 a000 	ldrb.w	sl, [r0]
 8012848:	fb09 880a 	mla	r8, r9, sl, r8
 801284c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012850:	f886 8000 	strb.w	r8, [r6]
 8012854:	f897 8001 	ldrb.w	r8, [r7, #1]
 8012858:	f89c a001 	ldrb.w	sl, [ip, #1]
 801285c:	fb03 f808 	mul.w	r8, r3, r8
 8012860:	fb0e 880a 	mla	r8, lr, sl, r8
 8012864:	f892 a001 	ldrb.w	sl, [r2, #1]
 8012868:	fb01 880a 	mla	r8, r1, sl, r8
 801286c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8012870:	fb09 880a 	mla	r8, r9, sl, r8
 8012874:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012878:	f886 8001 	strb.w	r8, [r6, #1]
 801287c:	78bf      	ldrb	r7, [r7, #2]
 801287e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8012882:	437b      	muls	r3, r7
 8012884:	7892      	ldrb	r2, [r2, #2]
 8012886:	fb0e 330c 	mla	r3, lr, ip, r3
 801288a:	fb01 3102 	mla	r1, r1, r2, r3
 801288e:	7882      	ldrb	r2, [r0, #2]
 8012890:	fb09 1902 	mla	r9, r9, r2, r1
 8012894:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012898:	f886 9002 	strb.w	r9, [r6, #2]
 801289c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801289e:	3603      	adds	r6, #3
 80128a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80128a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128a6:	441c      	add	r4, r3
 80128a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80128aa:	4413      	add	r3, r2
 80128ac:	9318      	str	r3, [sp, #96]	; 0x60
 80128ae:	e769      	b.n	8012784 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80128b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80128b4:	441c      	add	r4, r3
 80128b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80128b8:	443b      	add	r3, r7
 80128ba:	9318      	str	r3, [sp, #96]	; 0x60
 80128bc:	9b06      	ldr	r3, [sp, #24]
 80128be:	3b01      	subs	r3, #1
 80128c0:	9306      	str	r3, [sp, #24]
 80128c2:	9b07      	ldr	r3, [sp, #28]
 80128c4:	3303      	adds	r3, #3
 80128c6:	9307      	str	r3, [sp, #28]
 80128c8:	e73e      	b.n	8012748 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80128ca:	d026      	beq.n	801291a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80128cc:	9b06      	ldr	r3, [sp, #24]
 80128ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80128d0:	3b01      	subs	r3, #1
 80128d2:	fb00 4003 	mla	r0, r0, r3, r4
 80128d6:	1400      	asrs	r0, r0, #16
 80128d8:	f53f af52 	bmi.w	8012780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80128dc:	3901      	subs	r1, #1
 80128de:	4288      	cmp	r0, r1
 80128e0:	f6bf af4e 	bge.w	8012780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80128e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80128e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80128e8:	fb01 0303 	mla	r3, r1, r3, r0
 80128ec:	141b      	asrs	r3, r3, #16
 80128ee:	f53f af47 	bmi.w	8012780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80128f2:	3a01      	subs	r2, #1
 80128f4:	4293      	cmp	r3, r2
 80128f6:	f6bf af43 	bge.w	8012780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80128fa:	9b07      	ldr	r3, [sp, #28]
 80128fc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8012900:	f103 0803 	add.w	r8, r3, #3
 8012904:	f1ba 0f00 	cmp.w	sl, #0
 8012908:	dc71      	bgt.n	80129ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801290a:	9b06      	ldr	r3, [sp, #24]
 801290c:	9a07      	ldr	r2, [sp, #28]
 801290e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012912:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012916:	441a      	add	r2, r3
 8012918:	9207      	str	r2, [sp, #28]
 801291a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801291c:	2b00      	cmp	r3, #0
 801291e:	f340 80f2 	ble.w	8012b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8012922:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012926:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012928:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801292c:	eeb0 6a62 	vmov.f32	s12, s5
 8012930:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012934:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012938:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801293c:	ee16 4a10 	vmov	r4, s12
 8012940:	eeb0 6a43 	vmov.f32	s12, s6
 8012944:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012948:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801294c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012950:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012954:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012958:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801295c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012960:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012964:	ee12 2a90 	vmov	r2, s5
 8012968:	eef0 2a47 	vmov.f32	s5, s14
 801296c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012970:	ee13 2a10 	vmov	r2, s6
 8012974:	9319      	str	r3, [sp, #100]	; 0x64
 8012976:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012978:	eeb0 3a67 	vmov.f32	s6, s15
 801297c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012980:	931a      	str	r3, [sp, #104]	; 0x68
 8012982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012986:	3b01      	subs	r3, #1
 8012988:	9309      	str	r3, [sp, #36]	; 0x24
 801298a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801298c:	bf08      	it	eq
 801298e:	4613      	moveq	r3, r2
 8012990:	9306      	str	r3, [sp, #24]
 8012992:	e6cb      	b.n	801272c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8012994:	b151      	cbz	r1, 80129ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8012996:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801299a:	4660      	mov	r0, ip
 801299c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129a0:	442a      	add	r2, r5
 80129a2:	4667      	mov	r7, ip
 80129a4:	e731      	b.n	801280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80129a6:	4660      	mov	r0, ip
 80129a8:	4662      	mov	r2, ip
 80129aa:	e72e      	b.n	801280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80129ac:	4660      	mov	r0, ip
 80129ae:	4662      	mov	r2, ip
 80129b0:	e7f7      	b.n	80129a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80129b2:	f110 0e01 	adds.w	lr, r0, #1
 80129b6:	f53f af71 	bmi.w	801289c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80129ba:	4572      	cmp	r2, lr
 80129bc:	f6ff af6e 	blt.w	801289c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80129c0:	f117 0e01 	adds.w	lr, r7, #1
 80129c4:	f53f af6a 	bmi.w	801289c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80129c8:	45f4      	cmp	ip, lr
 80129ca:	f6ff af67 	blt.w	801289c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80129ce:	b212      	sxth	r2, r2
 80129d0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80129d4:	fa0f f38c 	sxth.w	r3, ip
 80129d8:	9200      	str	r2, [sp, #0]
 80129da:	4631      	mov	r1, r6
 80129dc:	9a08      	ldr	r2, [sp, #32]
 80129de:	9301      	str	r3, [sp, #4]
 80129e0:	462b      	mov	r3, r5
 80129e2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80129e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80129e8:	f7ff fde9 	bl	80125be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80129ec:	e756      	b.n	801289c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80129ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80129f0:	1426      	asrs	r6, r4, #16
 80129f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80129f4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80129f8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80129fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80129fe:	1400      	asrs	r0, r0, #16
 8012a00:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8012a04:	fb02 6000 	mla	r0, r2, r0, r6
 8012a08:	9e08      	ldr	r6, [sp, #32]
 8012a0a:	f816 e000 	ldrb.w	lr, [r6, r0]
 8012a0e:	eb06 0c00 	add.w	ip, r6, r0
 8012a12:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8012a16:	eb05 070e 	add.w	r7, r5, lr
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d064      	beq.n	8012ae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8012a1e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8012a22:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012a26:	442e      	add	r6, r5
 8012a28:	2900      	cmp	r1, #0
 8012a2a:	d066      	beq.n	8012afa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8012a2c:	eb0c 0002 	add.w	r0, ip, r2
 8012a30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012a34:	7840      	ldrb	r0, [r0, #1]
 8012a36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012a3e:	442a      	add	r2, r5
 8012a40:	4428      	add	r0, r5
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8012a48:	b289      	uxth	r1, r1
 8012a4a:	f896 e000 	ldrb.w	lr, [r6]
 8012a4e:	f108 0803 	add.w	r8, r8, #3
 8012a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a56:	fb03 f901 	mul.w	r9, r3, r1
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8012a60:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8012a64:	eba3 0309 	sub.w	r3, r3, r9
 8012a68:	b289      	uxth	r1, r1
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	ebac 0c01 	sub.w	ip, ip, r1
 8012a70:	fb03 fe0e 	mul.w	lr, r3, lr
 8012a74:	fa1f fc8c 	uxth.w	ip, ip
 8012a78:	fb0c ee0b 	mla	lr, ip, fp, lr
 8012a7c:	f892 b000 	ldrb.w	fp, [r2]
 8012a80:	fb01 ee0b 	mla	lr, r1, fp, lr
 8012a84:	f890 b000 	ldrb.w	fp, [r0]
 8012a88:	fb09 ee0b 	mla	lr, r9, fp, lr
 8012a8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012a90:	f808 ec06 	strb.w	lr, [r8, #-6]
 8012a94:	f896 e001 	ldrb.w	lr, [r6, #1]
 8012a98:	f897 b001 	ldrb.w	fp, [r7, #1]
 8012a9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8012aa0:	fb0c ee0b 	mla	lr, ip, fp, lr
 8012aa4:	f892 b001 	ldrb.w	fp, [r2, #1]
 8012aa8:	fb01 ee0b 	mla	lr, r1, fp, lr
 8012aac:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012ab0:	fb09 ee0b 	mla	lr, r9, fp, lr
 8012ab4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012ab8:	f808 ec05 	strb.w	lr, [r8, #-5]
 8012abc:	78b6      	ldrb	r6, [r6, #2]
 8012abe:	78bf      	ldrb	r7, [r7, #2]
 8012ac0:	4373      	muls	r3, r6
 8012ac2:	7896      	ldrb	r6, [r2, #2]
 8012ac4:	7882      	ldrb	r2, [r0, #2]
 8012ac6:	fb0c 3307 	mla	r3, ip, r7, r3
 8012aca:	fb01 3306 	mla	r3, r1, r6, r3
 8012ace:	fb09 3902 	mla	r9, r9, r2, r3
 8012ad2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ad4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012ad6:	441c      	add	r4, r3
 8012ad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ada:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012ade:	4413      	add	r3, r2
 8012ae0:	f808 9c04 	strb.w	r9, [r8, #-4]
 8012ae4:	9318      	str	r3, [sp, #96]	; 0x60
 8012ae6:	e70d      	b.n	8012904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8012ae8:	b151      	cbz	r1, 8012b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8012aea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012aee:	4638      	mov	r0, r7
 8012af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012af4:	442a      	add	r2, r5
 8012af6:	463e      	mov	r6, r7
 8012af8:	e7a3      	b.n	8012a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8012afa:	4638      	mov	r0, r7
 8012afc:	463a      	mov	r2, r7
 8012afe:	e7a0      	b.n	8012a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8012b00:	4638      	mov	r0, r7
 8012b02:	463a      	mov	r2, r7
 8012b04:	e7f7      	b.n	8012af6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8012b06:	b00d      	add	sp, #52	; 0x34
 8012b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8012b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8012b14:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8012b18:	2d00      	cmp	r5, #0
 8012b1a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8012b1e:	fb05 700c 	mla	r0, r5, ip, r7
 8012b22:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8012b26:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8012b2a:	eb02 0800 	add.w	r8, r2, r0
 8012b2e:	f2c0 8118 	blt.w	8012d62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8012b32:	45a9      	cmp	r9, r5
 8012b34:	f340 8115 	ble.w	8012d62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8012b38:	2f00      	cmp	r7, #0
 8012b3a:	f2c0 8110 	blt.w	8012d5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8012b3e:	45bc      	cmp	ip, r7
 8012b40:	f340 810d 	ble.w	8012d5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8012b44:	5c12      	ldrb	r2, [r2, r0]
 8012b46:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012b4a:	1c7a      	adds	r2, r7, #1
 8012b4c:	f100 810c 	bmi.w	8012d68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8012b50:	4594      	cmp	ip, r2
 8012b52:	f340 8109 	ble.w	8012d68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8012b56:	2c00      	cmp	r4, #0
 8012b58:	f000 8108 	beq.w	8012d6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8012b5c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012b60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b64:	3501      	adds	r5, #1
 8012b66:	f100 8105 	bmi.w	8012d74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8012b6a:	45a9      	cmp	r9, r5
 8012b6c:	f340 8102 	ble.w	8012d74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8012b70:	f1be 0f00 	cmp.w	lr, #0
 8012b74:	f000 8101 	beq.w	8012d7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8012b78:	2f00      	cmp	r7, #0
 8012b7a:	f2c0 80f9 	blt.w	8012d70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8012b7e:	45bc      	cmp	ip, r7
 8012b80:	f340 80f6 	ble.w	8012d70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8012b84:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012b88:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012b8c:	3701      	adds	r7, #1
 8012b8e:	f100 80f7 	bmi.w	8012d80 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8012b92:	45bc      	cmp	ip, r7
 8012b94:	f340 80f4 	ble.w	8012d80 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8012b98:	2c00      	cmp	r4, #0
 8012b9a:	f000 80f3 	beq.w	8012d84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8012b9e:	44c4      	add	ip, r8
 8012ba0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8012ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ba8:	fa1f fc84 	uxth.w	ip, r4
 8012bac:	fa1f f48e 	uxth.w	r4, lr
 8012bb0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8012bb4:	fb04 fe0c 	mul.w	lr, r4, ip
 8012bb8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8012bbc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8012bc0:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8012bc4:	ebac 070e 	sub.w	r7, ip, lr
 8012bc8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8012bcc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8012bd0:	b2a4      	uxth	r4, r4
 8012bd2:	b2bf      	uxth	r7, r7
 8012bd4:	1b1b      	subs	r3, r3, r4
 8012bd6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8012bda:	fb07 fc0a 	mul.w	ip, r7, sl
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	fb03 cc0b 	mla	ip, r3, fp, ip
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	fb04 cc09 	mla	ip, r4, r9, ip
 8012bea:	fb0e cc08 	mla	ip, lr, r8, ip
 8012bee:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8012bf2:	9301      	str	r3, [sp, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	f000 80af 	beq.w	8012d58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8012bfa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8012bfe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8012c02:	fb0b fc0c 	mul.w	ip, fp, ip
 8012c06:	fb0b f606 	mul.w	r6, fp, r6
 8012c0a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8012c0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8012c12:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8012c16:	44dc      	add	ip, fp
 8012c18:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8012c1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8012c20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8012c24:	fb0a fb0b 	mul.w	fp, sl, fp
 8012c28:	fb0a fa00 	mul.w	sl, sl, r0
 8012c2c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8012c30:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8012c34:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8012c38:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8012c3c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8012c40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8012c44:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8012c48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8012c4c:	0a36      	lsrs	r6, r6, #8
 8012c4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8012c52:	44dc      	add	ip, fp
 8012c54:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8012c58:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8012c5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8012c60:	fb09 fb0b 	mul.w	fp, r9, fp
 8012c64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8012c68:	fb09 f905 	mul.w	r9, r9, r5
 8012c6c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8012c70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8012c74:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8012c78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8012c7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8012c80:	fb0c fc07 	mul.w	ip, ip, r7
 8012c84:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8012c88:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8012c8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8012c90:	4458      	add	r0, fp
 8012c92:	fb08 f505 	mul.w	r5, r8, r5
 8012c96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8012c9a:	fb08 f802 	mul.w	r8, r8, r2
 8012c9e:	0a00      	lsrs	r0, r0, #8
 8012ca0:	0a2a      	lsrs	r2, r5, #8
 8012ca2:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8012ca6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8012caa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8012cae:	4415      	add	r5, r2
 8012cb0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8012cb4:	0a2d      	lsrs	r5, r5, #8
 8012cb6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8012cba:	9a00      	ldr	r2, [sp, #0]
 8012cbc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8012cc0:	fb03 cc02 	mla	ip, r3, r2, ip
 8012cc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8012cc8:	9b01      	ldr	r3, [sp, #4]
 8012cca:	fb05 c50e 	mla	r5, r5, lr, ip
 8012cce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8012cd2:	fb00 5004 	mla	r0, r0, r4, r5
 8012cd6:	0a00      	lsrs	r0, r0, #8
 8012cd8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8012cdc:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8012ce0:	4378      	muls	r0, r7
 8012ce2:	fb02 0006 	mla	r0, r2, r6, r0
 8012ce6:	fb0e 0e08 	mla	lr, lr, r8, r0
 8012cea:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8012cee:	fb04 e000 	mla	r0, r4, r0, lr
 8012cf2:	0a00      	lsrs	r0, r0, #8
 8012cf4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8012cf8:	4328      	orrs	r0, r5
 8012cfa:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012cfe:	b2ad      	uxth	r5, r5
 8012d00:	b2c4      	uxtb	r4, r0
 8012d02:	436b      	muls	r3, r5
 8012d04:	fb14 f405 	smulbb	r4, r4, r5
 8012d08:	1c5a      	adds	r2, r3, #1
 8012d0a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8012d0e:	780b      	ldrb	r3, [r1, #0]
 8012d10:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8012d14:	b2d2      	uxtb	r2, r2
 8012d16:	fb03 4302 	mla	r3, r3, r2, r4
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	1c5c      	adds	r4, r3, #1
 8012d1e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8012d22:	784c      	ldrb	r4, [r1, #1]
 8012d24:	fb14 f402 	smulbb	r4, r4, r2
 8012d28:	121b      	asrs	r3, r3, #8
 8012d2a:	700b      	strb	r3, [r1, #0]
 8012d2c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012d30:	fb03 4305 	mla	r3, r3, r5, r4
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	1c5c      	adds	r4, r3, #1
 8012d38:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8012d3c:	0c04      	lsrs	r4, r0, #16
 8012d3e:	7888      	ldrb	r0, [r1, #2]
 8012d40:	121b      	asrs	r3, r3, #8
 8012d42:	fb10 f002 	smulbb	r0, r0, r2
 8012d46:	704b      	strb	r3, [r1, #1]
 8012d48:	fb04 0005 	mla	r0, r4, r5, r0
 8012d4c:	b280      	uxth	r0, r0
 8012d4e:	1c43      	adds	r3, r0, #1
 8012d50:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8012d54:	1200      	asrs	r0, r0, #8
 8012d56:	7088      	strb	r0, [r1, #2]
 8012d58:	b003      	add	sp, #12
 8012d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5e:	2600      	movs	r6, #0
 8012d60:	e6f3      	b.n	8012b4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8012d62:	2000      	movs	r0, #0
 8012d64:	4606      	mov	r6, r0
 8012d66:	e6fd      	b.n	8012b64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8012d68:	2000      	movs	r0, #0
 8012d6a:	e6fb      	b.n	8012b64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	e6f9      	b.n	8012b64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8012d70:	2500      	movs	r5, #0
 8012d72:	e70b      	b.n	8012b8c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8012d74:	2200      	movs	r2, #0
 8012d76:	4615      	mov	r5, r2
 8012d78:	e716      	b.n	8012ba8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8012d7a:	4672      	mov	r2, lr
 8012d7c:	4675      	mov	r5, lr
 8012d7e:	e713      	b.n	8012ba8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8012d80:	2200      	movs	r2, #0
 8012d82:	e711      	b.n	8012ba8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8012d84:	4622      	mov	r2, r4
 8012d86:	e70f      	b.n	8012ba8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08012d88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	b09f      	sub	sp, #124	; 0x7c
 8012d8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d90:	9309      	str	r3, [sp, #36]	; 0x24
 8012d92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8012d94:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8012d98:	901d      	str	r0, [sp, #116]	; 0x74
 8012d9a:	931c      	str	r3, [sp, #112]	; 0x70
 8012d9c:	6850      	ldr	r0, [r2, #4]
 8012d9e:	9119      	str	r1, [sp, #100]	; 0x64
 8012da0:	6812      	ldr	r2, [r2, #0]
 8012da2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012da4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8012da8:	fb00 1303 	mla	r3, r0, r3, r1
 8012dac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012db0:	18d3      	adds	r3, r2, r3
 8012db2:	930c      	str	r3, [sp, #48]	; 0x30
 8012db4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	9312      	str	r3, [sp, #72]	; 0x48
 8012dba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012dbc:	685e      	ldr	r6, [r3, #4]
 8012dbe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8012dc2:	3604      	adds	r6, #4
 8012dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8012dc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	dc03      	bgt.n	8012dd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8012dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f340 8378 	ble.w	80134c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8012dd4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012dd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8012dda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012dde:	1e48      	subs	r0, r1, #1
 8012de0:	1e57      	subs	r7, r2, #1
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f340 818c 	ble.w	8013102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8012dea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8012dec:	142b      	asrs	r3, r5, #16
 8012dee:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8012df2:	d406      	bmi.n	8012e02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8012df4:	4584      	cmp	ip, r0
 8012df6:	da04      	bge.n	8012e02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	db02      	blt.n	8012e02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8012dfc:	42bb      	cmp	r3, r7
 8012dfe:	f2c0 8181 	blt.w	8013104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8012e02:	f11c 0c01 	adds.w	ip, ip, #1
 8012e06:	f100 816f 	bmi.w	80130e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8012e0a:	4561      	cmp	r1, ip
 8012e0c:	f2c0 816c 	blt.w	80130e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8012e10:	3301      	adds	r3, #1
 8012e12:	f100 8169 	bmi.w	80130e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8012e16:	429a      	cmp	r2, r3
 8012e18:	f2c0 8166 	blt.w	80130e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8012e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012e20:	931a      	str	r3, [sp, #104]	; 0x68
 8012e22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	f340 818c 	ble.w	8013142 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8012e2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012e2c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8012e30:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8012e34:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8012e38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012e3a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8012e3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012e40:	141b      	asrs	r3, r3, #16
 8012e42:	f100 81d0 	bmi.w	80131e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8012e46:	f100 38ff 	add.w	r8, r0, #4294967295
 8012e4a:	4543      	cmp	r3, r8
 8012e4c:	f280 81cb 	bge.w	80131e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8012e50:	f1bc 0f00 	cmp.w	ip, #0
 8012e54:	f2c0 81c7 	blt.w	80131e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8012e58:	f10e 38ff 	add.w	r8, lr, #4294967295
 8012e5c:	45c4      	cmp	ip, r8
 8012e5e:	f280 81c2 	bge.w	80131e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8012e62:	b200      	sxth	r0, r0
 8012e64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012e66:	fb0c 3300 	mla	r3, ip, r0, r3
 8012e6a:	eb04 0803 	add.w	r8, r4, r3
 8012e6e:	5ce3      	ldrb	r3, [r4, r3]
 8012e70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012e74:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8012e78:	2a00      	cmp	r2, #0
 8012e7a:	f000 81a9 	beq.w	80131d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8012e7e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8012e82:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8012e86:	940e      	str	r4, [sp, #56]	; 0x38
 8012e88:	0e24      	lsrs	r4, r4, #24
 8012e8a:	9415      	str	r4, [sp, #84]	; 0x54
 8012e8c:	b179      	cbz	r1, 8012eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8012e8e:	eb08 0c00 	add.w	ip, r8, r0
 8012e92:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012e96:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8012e9a:	900a      	str	r0, [sp, #40]	; 0x28
 8012e9c:	0e00      	lsrs	r0, r0, #24
 8012e9e:	9013      	str	r0, [sp, #76]	; 0x4c
 8012ea0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8012ea4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8012ea8:	900f      	str	r0, [sp, #60]	; 0x3c
 8012eaa:	0e00      	lsrs	r0, r0, #24
 8012eac:	9016      	str	r0, [sp, #88]	; 0x58
 8012eae:	b292      	uxth	r2, r2
 8012eb0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012eb2:	b289      	uxth	r1, r1
 8012eb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012eb6:	fb02 f901 	mul.w	r9, r2, r1
 8012eba:	0112      	lsls	r2, r2, #4
 8012ebc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8012ec0:	eba2 0809 	sub.w	r8, r2, r9
 8012ec4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8012ec8:	b289      	uxth	r1, r1
 8012eca:	fa1f f888 	uxth.w	r8, r8
 8012ece:	1a52      	subs	r2, r2, r1
 8012ed0:	fb08 f000 	mul.w	r0, r8, r0
 8012ed4:	b292      	uxth	r2, r2
 8012ed6:	fb02 000e 	mla	r0, r2, lr, r0
 8012eda:	fb01 0004 	mla	r0, r1, r4, r0
 8012ede:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012ee0:	fb09 0004 	mla	r0, r9, r4, r0
 8012ee4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	f000 80f2 	beq.w	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8012eee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8012ef2:	d01b      	beq.n	8012f2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8012ef4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8012ef8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012efc:	fb0e fa0a 	mul.w	sl, lr, sl
 8012f00:	fb0e fe03 	mul.w	lr, lr, r3
 8012f04:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012f08:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8012f0c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8012f10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8012f14:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8012f18:	4453      	add	r3, sl
 8012f1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8012f1e:	0a1b      	lsrs	r3, r3, #8
 8012f20:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8012f24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8012f28:	ea43 030c 	orr.w	r3, r3, ip
 8012f2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012f2e:	2cff      	cmp	r4, #255	; 0xff
 8012f30:	d021      	beq.n	8012f76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8012f32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012f34:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8012f38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012f3a:	fb04 fb0b 	mul.w	fp, r4, fp
 8012f3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012f40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8012f44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012f46:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8012f4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8012f4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8012f52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8012f56:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8012f5a:	44de      	add	lr, fp
 8012f5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8012f60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8012f64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8012f68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8012f6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8012f70:	ea4e 040a 	orr.w	r4, lr, sl
 8012f74:	940e      	str	r4, [sp, #56]	; 0x38
 8012f76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012f78:	2cff      	cmp	r4, #255	; 0xff
 8012f7a:	d021      	beq.n	8012fc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8012f7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012f7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8012f82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012f84:	fb04 fb0b 	mul.w	fp, r4, fp
 8012f88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012f8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8012f8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012f90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8012f94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8012f98:	fb04 fa0a 	mul.w	sl, r4, sl
 8012f9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8012fa0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8012fa4:	44de      	add	lr, fp
 8012fa6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8012faa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8012fae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8012fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8012fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8012fba:	ea4e 040a 	orr.w	r4, lr, sl
 8012fbe:	940a      	str	r4, [sp, #40]	; 0x28
 8012fc0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012fc2:	2cff      	cmp	r4, #255	; 0xff
 8012fc4:	d021      	beq.n	801300a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8012fc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8012fc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8012fcc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012fce:	fb04 fb0b 	mul.w	fp, r4, fp
 8012fd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8012fd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8012fd8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012fda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8012fde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8012fe2:	fb04 fa0a 	mul.w	sl, r4, sl
 8012fe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8012fea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8012fee:	44de      	add	lr, fp
 8012ff0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8012ff4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8012ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8012ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013004:	ea4e 040a 	orr.w	r4, lr, sl
 8013008:	940f      	str	r4, [sp, #60]	; 0x3c
 801300a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801300c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8013010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013014:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8013018:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801301a:	fb08 fc0c 	mul.w	ip, r8, ip
 801301e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8013022:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8013026:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8013028:	fb01 cc0e 	mla	ip, r1, lr, ip
 801302c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8013030:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013032:	fb09 cc0e 	mla	ip, r9, lr, ip
 8013036:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801303a:	fb08 f80e 	mul.w	r8, r8, lr
 801303e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013042:	fb02 8303 	mla	r3, r2, r3, r8
 8013046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013048:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801304c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8013050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013052:	fb01 330a 	mla	r3, r1, sl, r3
 8013056:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801305a:	fb09 3901 	mla	r9, r9, r1, r3
 801305e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013060:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013062:	4343      	muls	r3, r0
 8013064:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8013068:	1c58      	adds	r0, r3, #1
 801306a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801306e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8013072:	ea4c 0c09 	orr.w	ip, ip, r9
 8013076:	783b      	ldrb	r3, [r7, #0]
 8013078:	fa5f f28c 	uxtb.w	r2, ip
 801307c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8013080:	fb12 f201 	smulbb	r2, r2, r1
 8013084:	b2c0      	uxtb	r0, r0
 8013086:	fb03 2300 	mla	r3, r3, r0, r2
 801308a:	b29b      	uxth	r3, r3
 801308c:	1c5a      	adds	r2, r3, #1
 801308e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8013092:	787a      	ldrb	r2, [r7, #1]
 8013094:	fb12 f200 	smulbb	r2, r2, r0
 8013098:	121b      	asrs	r3, r3, #8
 801309a:	703b      	strb	r3, [r7, #0]
 801309c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80130a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80130a4:	fb03 2301 	mla	r3, r3, r1, r2
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	1c5a      	adds	r2, r3, #1
 80130ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80130b0:	121b      	asrs	r3, r3, #8
 80130b2:	707b      	strb	r3, [r7, #1]
 80130b4:	78bb      	ldrb	r3, [r7, #2]
 80130b6:	fb13 f000 	smulbb	r0, r3, r0
 80130ba:	fb0c 0c01 	mla	ip, ip, r1, r0
 80130be:	fa1f fc8c 	uxth.w	ip, ip
 80130c2:	f10c 0301 	add.w	r3, ip, #1
 80130c6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80130ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80130ce:	f887 c002 	strb.w	ip, [r7, #2]
 80130d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80130d4:	3703      	adds	r7, #3
 80130d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80130d8:	441a      	add	r2, r3
 80130da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80130dc:	441d      	add	r5, r3
 80130de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80130e0:	9229      	str	r2, [sp, #164]	; 0xa4
 80130e2:	3b01      	subs	r3, #1
 80130e4:	931a      	str	r3, [sp, #104]	; 0x68
 80130e6:	e69c      	b.n	8012e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80130e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80130ea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80130ec:	441c      	add	r4, r3
 80130ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80130f0:	441d      	add	r5, r3
 80130f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f4:	9429      	str	r4, [sp, #164]	; 0xa4
 80130f6:	3b01      	subs	r3, #1
 80130f8:	9309      	str	r3, [sp, #36]	; 0x24
 80130fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130fc:	3303      	adds	r3, #3
 80130fe:	930c      	str	r3, [sp, #48]	; 0x30
 8013100:	e66f      	b.n	8012de2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013102:	d026      	beq.n	8013152 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8013104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013106:	982b      	ldr	r0, [sp, #172]	; 0xac
 8013108:	3b01      	subs	r3, #1
 801310a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801310c:	fb00 4003 	mla	r0, r0, r3, r4
 8013110:	1400      	asrs	r0, r0, #16
 8013112:	f53f ae83 	bmi.w	8012e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013116:	3901      	subs	r1, #1
 8013118:	4288      	cmp	r0, r1
 801311a:	f6bf ae7f 	bge.w	8012e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801311e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8013120:	fb01 5303 	mla	r3, r1, r3, r5
 8013124:	141b      	asrs	r3, r3, #16
 8013126:	f53f ae79 	bmi.w	8012e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801312a:	3a01      	subs	r2, #1
 801312c:	4293      	cmp	r3, r2
 801312e:	f6bf ae75 	bge.w	8012e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013134:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8013138:	f103 0e03 	add.w	lr, r3, #3
 801313c:	f1bb 0f00 	cmp.w	fp, #0
 8013140:	dc71      	bgt.n	8013226 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8013142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013144:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8013148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801314a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801314e:	4423      	add	r3, r4
 8013150:	930c      	str	r3, [sp, #48]	; 0x30
 8013152:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013154:	2b00      	cmp	r3, #0
 8013156:	f340 81b5 	ble.w	80134c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801315a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801315e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013160:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013164:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013168:	eef0 6a62 	vmov.f32	s13, s5
 801316c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013170:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013174:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013178:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801317c:	eef0 6a43 	vmov.f32	s13, s6
 8013180:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013184:	ee16 5a90 	vmov	r5, s13
 8013188:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801318c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013190:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013194:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013198:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801319c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80131a0:	ee12 2a90 	vmov	r2, s5
 80131a4:	eef0 2a47 	vmov.f32	s5, s14
 80131a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80131ac:	ee13 2a10 	vmov	r2, s6
 80131b0:	932b      	str	r3, [sp, #172]	; 0xac
 80131b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80131b4:	eeb0 3a67 	vmov.f32	s6, s15
 80131b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80131bc:	932c      	str	r3, [sp, #176]	; 0xb0
 80131be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80131c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80131c2:	3b01      	subs	r3, #1
 80131c4:	9319      	str	r3, [sp, #100]	; 0x64
 80131c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80131c8:	bf08      	it	eq
 80131ca:	4613      	moveq	r3, r2
 80131cc:	9309      	str	r3, [sp, #36]	; 0x24
 80131ce:	e5fa      	b.n	8012dc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80131d0:	2900      	cmp	r1, #0
 80131d2:	f43f ae6c 	beq.w	8012eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80131d6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80131da:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80131de:	900a      	str	r0, [sp, #40]	; 0x28
 80131e0:	0e00      	lsrs	r0, r0, #24
 80131e2:	9013      	str	r0, [sp, #76]	; 0x4c
 80131e4:	e663      	b.n	8012eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80131e6:	f113 0801 	adds.w	r8, r3, #1
 80131ea:	f53f af72 	bmi.w	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80131ee:	4540      	cmp	r0, r8
 80131f0:	f6ff af6f 	blt.w	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80131f4:	f11c 0801 	adds.w	r8, ip, #1
 80131f8:	f53f af6b 	bmi.w	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80131fc:	45c6      	cmp	lr, r8
 80131fe:	f6ff af68 	blt.w	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8013202:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013204:	b200      	sxth	r0, r0
 8013206:	9302      	str	r3, [sp, #8]
 8013208:	fa0f f38e 	sxth.w	r3, lr
 801320c:	9000      	str	r0, [sp, #0]
 801320e:	9301      	str	r3, [sp, #4]
 8013210:	4633      	mov	r3, r6
 8013212:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013214:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8013218:	e9cd c203 	strd	ip, r2, [sp, #12]
 801321c:	4639      	mov	r1, r7
 801321e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013220:	f7ff fc74 	bl	8012b0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8013224:	e755      	b.n	80130d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8013226:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013228:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801322c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801322e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013232:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013234:	1427      	asrs	r7, r4, #16
 8013236:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013238:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801323c:	142b      	asrs	r3, r5, #16
 801323e:	fb01 7303 	mla	r3, r1, r3, r7
 8013242:	18e7      	adds	r7, r4, r3
 8013244:	5ce3      	ldrb	r3, [r4, r3]
 8013246:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801324a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801324e:	2a00      	cmp	r2, #0
 8013250:	f000 812e 	beq.w	80134b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8013254:	f897 8001 	ldrb.w	r8, [r7, #1]
 8013258:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801325c:	9410      	str	r4, [sp, #64]	; 0x40
 801325e:	0e24      	lsrs	r4, r4, #24
 8013260:	9417      	str	r4, [sp, #92]	; 0x5c
 8013262:	b170      	cbz	r0, 8013282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8013264:	eb07 0801 	add.w	r8, r7, r1
 8013268:	5c79      	ldrb	r1, [r7, r1]
 801326a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801326e:	910b      	str	r1, [sp, #44]	; 0x2c
 8013270:	0e09      	lsrs	r1, r1, #24
 8013272:	9114      	str	r1, [sp, #80]	; 0x50
 8013274:	f898 1001 	ldrb.w	r1, [r8, #1]
 8013278:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801327c:	9111      	str	r1, [sp, #68]	; 0x44
 801327e:	0e09      	lsrs	r1, r1, #24
 8013280:	9118      	str	r1, [sp, #96]	; 0x60
 8013282:	b292      	uxth	r2, r2
 8013284:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013286:	b280      	uxth	r0, r0
 8013288:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801328a:	fb02 f900 	mul.w	r9, r2, r0
 801328e:	0112      	lsls	r2, r2, #4
 8013290:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8013294:	eba2 0809 	sub.w	r8, r2, r9
 8013298:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801329c:	b280      	uxth	r0, r0
 801329e:	fa1f f888 	uxth.w	r8, r8
 80132a2:	1a12      	subs	r2, r2, r0
 80132a4:	fb08 f101 	mul.w	r1, r8, r1
 80132a8:	b292      	uxth	r2, r2
 80132aa:	fb02 110c 	mla	r1, r2, ip, r1
 80132ae:	fb00 1104 	mla	r1, r0, r4, r1
 80132b2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80132b4:	fb09 1104 	mla	r1, r9, r4, r1
 80132b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80132bc:	2900      	cmp	r1, #0
 80132be:	f000 80ec 	beq.w	801349a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80132c2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80132c6:	d019      	beq.n	80132fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80132c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80132cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80132d0:	fb0c fa0a 	mul.w	sl, ip, sl
 80132d4:	fb0c fc03 	mul.w	ip, ip, r3
 80132d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80132dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80132e0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80132e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80132e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80132ec:	4453      	add	r3, sl
 80132ee:	0a3f      	lsrs	r7, r7, #8
 80132f0:	0a1b      	lsrs	r3, r3, #8
 80132f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80132f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80132fa:	433b      	orrs	r3, r7
 80132fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80132fe:	2cff      	cmp	r4, #255	; 0xff
 8013300:	d020      	beq.n	8013344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8013302:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013304:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013308:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801330a:	4367      	muls	r7, r4
 801330c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801330e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8013312:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013316:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8013318:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801331c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013320:	fb04 fa0a 	mul.w	sl, r4, sl
 8013324:	44bc      	add	ip, r7
 8013326:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801332a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801332e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013332:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013336:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801333a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801333e:	ea4c 040a 	orr.w	r4, ip, sl
 8013342:	9410      	str	r4, [sp, #64]	; 0x40
 8013344:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013346:	2cff      	cmp	r4, #255	; 0xff
 8013348:	d020      	beq.n	801338c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801334a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801334c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013350:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013352:	4367      	muls	r7, r4
 8013354:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013356:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801335a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801335e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013360:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8013364:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013368:	fb04 fa0a 	mul.w	sl, r4, sl
 801336c:	44bc      	add	ip, r7
 801336e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8013372:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013376:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801337a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801337e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013382:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013386:	ea4c 040a 	orr.w	r4, ip, sl
 801338a:	940b      	str	r4, [sp, #44]	; 0x2c
 801338c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801338e:	2cff      	cmp	r4, #255	; 0xff
 8013390:	d020      	beq.n	80133d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8013392:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013394:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013398:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801339a:	4367      	muls	r7, r4
 801339c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801339e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80133a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80133a6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80133a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80133ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80133b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80133b4:	44bc      	add	ip, r7
 80133b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80133ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80133be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80133c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80133c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80133ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80133ce:	ea4c 040a 	orr.w	r4, ip, sl
 80133d2:	9411      	str	r4, [sp, #68]	; 0x44
 80133d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80133d6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80133da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80133de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80133e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80133e4:	fb08 f707 	mul.w	r7, r8, r7
 80133e8:	fb02 770c 	mla	r7, r2, ip, r7
 80133ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80133f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80133f2:	fb00 770c 	mla	r7, r0, ip, r7
 80133f6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80133fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80133fc:	fb09 770c 	mla	r7, r9, ip, r7
 8013400:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8013404:	fb08 f80c 	mul.w	r8, r8, ip
 8013408:	0a3f      	lsrs	r7, r7, #8
 801340a:	fb02 8303 	mla	r3, r2, r3, r8
 801340e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013410:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8013414:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8013418:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801341a:	fb00 330a 	mla	r3, r0, sl, r3
 801341e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8013422:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013424:	fb09 3c0c 	mla	ip, r9, ip, r3
 8013428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801342a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801342e:	434b      	muls	r3, r1
 8013430:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013434:	1c59      	adds	r1, r3, #1
 8013436:	ea47 070c 	orr.w	r7, r7, ip
 801343a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801343e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8013442:	b2fa      	uxtb	r2, r7
 8013444:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8013448:	fb12 f200 	smulbb	r2, r2, r0
 801344c:	b2c9      	uxtb	r1, r1
 801344e:	fb03 2301 	mla	r3, r3, r1, r2
 8013452:	b29b      	uxth	r3, r3
 8013454:	1c5a      	adds	r2, r3, #1
 8013456:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801345a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801345e:	fb12 f201 	smulbb	r2, r2, r1
 8013462:	121b      	asrs	r3, r3, #8
 8013464:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8013468:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801346c:	0c3f      	lsrs	r7, r7, #16
 801346e:	fb03 2300 	mla	r3, r3, r0, r2
 8013472:	b29b      	uxth	r3, r3
 8013474:	1c5a      	adds	r2, r3, #1
 8013476:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801347a:	121b      	asrs	r3, r3, #8
 801347c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8013480:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8013484:	fb13 f101 	smulbb	r1, r3, r1
 8013488:	fb07 1700 	mla	r7, r7, r0, r1
 801348c:	b2bf      	uxth	r7, r7
 801348e:	1c7b      	adds	r3, r7, #1
 8013490:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8013494:	123f      	asrs	r7, r7, #8
 8013496:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801349a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801349c:	f10e 0e03 	add.w	lr, lr, #3
 80134a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80134a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134a6:	441a      	add	r2, r3
 80134a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80134aa:	9229      	str	r2, [sp, #164]	; 0xa4
 80134ac:	441d      	add	r5, r3
 80134ae:	e645      	b.n	801313c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	f43f aee6 	beq.w	8013282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80134b6:	5c79      	ldrb	r1, [r7, r1]
 80134b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80134bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80134be:	0e09      	lsrs	r1, r1, #24
 80134c0:	9114      	str	r1, [sp, #80]	; 0x50
 80134c2:	e6de      	b.n	8013282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80134c4:	b01f      	add	sp, #124	; 0x7c
 80134c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80134ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ce:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80134d2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80134dc:	fb05 700e 	mla	r0, r5, lr, r7
 80134e0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80134e4:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80134e8:	eb02 0800 	add.w	r8, r2, r0
 80134ec:	f2c0 8105 	blt.w	80136fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80134f0:	45a9      	cmp	r9, r5
 80134f2:	f340 8102 	ble.w	80136fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80134f6:	2f00      	cmp	r7, #0
 80134f8:	f2c0 80fd 	blt.w	80136f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80134fc:	45be      	cmp	lr, r7
 80134fe:	f340 80fa 	ble.w	80136f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8013502:	5c12      	ldrb	r2, [r2, r0]
 8013504:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013508:	1c7a      	adds	r2, r7, #1
 801350a:	f100 80f9 	bmi.w	8013700 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801350e:	4596      	cmp	lr, r2
 8013510:	f340 80f6 	ble.w	8013700 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8013514:	2c00      	cmp	r4, #0
 8013516:	f000 80f5 	beq.w	8013704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801351a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801351e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013522:	3501      	adds	r5, #1
 8013524:	f100 80f2 	bmi.w	801370c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8013528:	45a9      	cmp	r9, r5
 801352a:	f340 80ef 	ble.w	801370c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801352e:	f1bc 0f00 	cmp.w	ip, #0
 8013532:	f000 80ee 	beq.w	8013712 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8013536:	2f00      	cmp	r7, #0
 8013538:	f2c0 80e6 	blt.w	8013708 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801353c:	45be      	cmp	lr, r7
 801353e:	f340 80e3 	ble.w	8013708 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8013542:	f818 200e 	ldrb.w	r2, [r8, lr]
 8013546:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801354a:	3701      	adds	r7, #1
 801354c:	f100 80e4 	bmi.w	8013718 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8013550:	45be      	cmp	lr, r7
 8013552:	f340 80e1 	ble.w	8013718 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8013556:	2c00      	cmp	r4, #0
 8013558:	f000 80e0 	beq.w	801371c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801355c:	44c6      	add	lr, r8
 801355e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8013562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013566:	b2a3      	uxth	r3, r4
 8013568:	fa1f fc8c 	uxth.w	ip, ip
 801356c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8013570:	fb0c fe03 	mul.w	lr, ip, r3
 8013574:	011b      	lsls	r3, r3, #4
 8013576:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801357a:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801357e:	eba3 070e 	sub.w	r7, r3, lr
 8013582:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013586:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801358a:	fa1f f48c 	uxth.w	r4, ip
 801358e:	b2bf      	uxth	r7, r7
 8013590:	1b1b      	subs	r3, r3, r4
 8013592:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8013596:	fb07 fc0a 	mul.w	ip, r7, sl
 801359a:	b29b      	uxth	r3, r3
 801359c:	fb03 cc0b 	mla	ip, r3, fp, ip
 80135a0:	9300      	str	r3, [sp, #0]
 80135a2:	fb04 cc09 	mla	ip, r4, r9, ip
 80135a6:	fb0e cc08 	mla	ip, lr, r8, ip
 80135aa:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80135ae:	9301      	str	r3, [sp, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f000 809d 	beq.w	80136f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80135b6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80135ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80135be:	fb0b fc0c 	mul.w	ip, fp, ip
 80135c2:	fb0b f606 	mul.w	r6, fp, r6
 80135c6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80135ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80135ce:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80135d2:	44dc      	add	ip, fp
 80135d4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80135d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80135dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80135e0:	fb0a fb0b 	mul.w	fp, sl, fp
 80135e4:	fb0a fa00 	mul.w	sl, sl, r0
 80135e8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80135ec:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80135f0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80135f4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80135f8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80135fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013600:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8013604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013608:	0a36      	lsrs	r6, r6, #8
 801360a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801360e:	44dc      	add	ip, fp
 8013610:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8013614:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8013618:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801361c:	fb09 fb0b 	mul.w	fp, r9, fp
 8013620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013624:	fb09 f905 	mul.w	r9, r9, r5
 8013628:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801362c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013630:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8013634:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013638:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801363c:	fb0c fc07 	mul.w	ip, ip, r7
 8013640:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8013644:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8013648:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801364c:	4458      	add	r0, fp
 801364e:	fb08 f505 	mul.w	r5, r8, r5
 8013652:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8013656:	fb08 f802 	mul.w	r8, r8, r2
 801365a:	0a00      	lsrs	r0, r0, #8
 801365c:	0a2a      	lsrs	r2, r5, #8
 801365e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8013662:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013666:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801366a:	4415      	add	r5, r2
 801366c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8013670:	0a2d      	lsrs	r5, r5, #8
 8013672:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013676:	9a00      	ldr	r2, [sp, #0]
 8013678:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801367c:	fb03 cc02 	mla	ip, r3, r2, ip
 8013680:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8013684:	9b01      	ldr	r3, [sp, #4]
 8013686:	fb05 c50e 	mla	r5, r5, lr, ip
 801368a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801368e:	43db      	mvns	r3, r3
 8013690:	fb00 5004 	mla	r0, r0, r4, r5
 8013694:	b2db      	uxtb	r3, r3
 8013696:	0a00      	lsrs	r0, r0, #8
 8013698:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801369c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80136a0:	4378      	muls	r0, r7
 80136a2:	fb02 0006 	mla	r0, r2, r6, r0
 80136a6:	780a      	ldrb	r2, [r1, #0]
 80136a8:	fb0e 0e08 	mla	lr, lr, r8, r0
 80136ac:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80136b0:	fb04 e000 	mla	r0, r4, r0, lr
 80136b4:	fb02 f403 	mul.w	r4, r2, r3
 80136b8:	0a00      	lsrs	r0, r0, #8
 80136ba:	1c62      	adds	r2, r4, #1
 80136bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80136c0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80136c4:	4328      	orrs	r0, r5
 80136c6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80136ca:	700a      	strb	r2, [r1, #0]
 80136cc:	784a      	ldrb	r2, [r1, #1]
 80136ce:	435a      	muls	r2, r3
 80136d0:	1c54      	adds	r4, r2, #1
 80136d2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80136d6:	0a02      	lsrs	r2, r0, #8
 80136d8:	0c00      	lsrs	r0, r0, #16
 80136da:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80136de:	704a      	strb	r2, [r1, #1]
 80136e0:	788a      	ldrb	r2, [r1, #2]
 80136e2:	4353      	muls	r3, r2
 80136e4:	1c5a      	adds	r2, r3, #1
 80136e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80136ea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80136ee:	7088      	strb	r0, [r1, #2]
 80136f0:	b003      	add	sp, #12
 80136f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f6:	2600      	movs	r6, #0
 80136f8:	e706      	b.n	8013508 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80136fa:	2000      	movs	r0, #0
 80136fc:	4606      	mov	r6, r0
 80136fe:	e710      	b.n	8013522 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8013700:	2000      	movs	r0, #0
 8013702:	e70e      	b.n	8013522 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8013704:	4620      	mov	r0, r4
 8013706:	e70c      	b.n	8013522 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8013708:	2500      	movs	r5, #0
 801370a:	e71e      	b.n	801354a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801370c:	2200      	movs	r2, #0
 801370e:	4615      	mov	r5, r2
 8013710:	e729      	b.n	8013566 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8013712:	4662      	mov	r2, ip
 8013714:	4665      	mov	r5, ip
 8013716:	e726      	b.n	8013566 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8013718:	2200      	movs	r2, #0
 801371a:	e724      	b.n	8013566 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801371c:	4622      	mov	r2, r4
 801371e:	e722      	b.n	8013566 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08013720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013724:	b09b      	sub	sp, #108	; 0x6c
 8013726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801372a:	9218      	str	r2, [sp, #96]	; 0x60
 801372c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801372e:	9019      	str	r0, [sp, #100]	; 0x64
 8013730:	9116      	str	r1, [sp, #88]	; 0x58
 8013732:	6850      	ldr	r0, [r2, #4]
 8013734:	9307      	str	r3, [sp, #28]
 8013736:	6812      	ldr	r2, [r2, #0]
 8013738:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801373a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801373e:	fb00 1303 	mla	r3, r0, r3, r1
 8013742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013746:	18d3      	adds	r3, r2, r3
 8013748:	930a      	str	r3, [sp, #40]	; 0x28
 801374a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013750:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013752:	685e      	ldr	r6, [r3, #4]
 8013754:	3604      	adds	r6, #4
 8013756:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013758:	2b00      	cmp	r3, #0
 801375a:	dc03      	bgt.n	8013764 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801375c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801375e:	2b00      	cmp	r3, #0
 8013760:	f340 834f 	ble.w	8013e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8013764:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013766:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801376a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801376e:	1e48      	subs	r0, r1, #1
 8013770:	1e57      	subs	r7, r2, #1
 8013772:	9b07      	ldr	r3, [sp, #28]
 8013774:	2b00      	cmp	r3, #0
 8013776:	f340 8178 	ble.w	8013a6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801377a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801377c:	142b      	asrs	r3, r5, #16
 801377e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8013782:	d406      	bmi.n	8013792 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013784:	4584      	cmp	ip, r0
 8013786:	da04      	bge.n	8013792 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013788:	2b00      	cmp	r3, #0
 801378a:	db02      	blt.n	8013792 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801378c:	42bb      	cmp	r3, r7
 801378e:	f2c0 816d 	blt.w	8013a6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013792:	f11c 0c01 	adds.w	ip, ip, #1
 8013796:	f100 815b 	bmi.w	8013a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801379a:	4561      	cmp	r1, ip
 801379c:	f2c0 8158 	blt.w	8013a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80137a0:	3301      	adds	r3, #1
 80137a2:	f100 8155 	bmi.w	8013a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80137a6:	429a      	cmp	r2, r3
 80137a8:	f2c0 8152 	blt.w	8013a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80137ac:	9b07      	ldr	r3, [sp, #28]
 80137ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80137b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80137b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f340 8178 	ble.w	8013aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80137ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80137bc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80137c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80137c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80137c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80137ca:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80137ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80137d0:	141b      	asrs	r3, r3, #16
 80137d2:	f100 81ba 	bmi.w	8013b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80137d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80137da:	4543      	cmp	r3, r8
 80137dc:	f280 81b5 	bge.w	8013b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80137e0:	f1bc 0f00 	cmp.w	ip, #0
 80137e4:	f2c0 81b1 	blt.w	8013b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80137e8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80137ec:	45c4      	cmp	ip, r8
 80137ee:	f280 81ac 	bge.w	8013b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80137f2:	b209      	sxth	r1, r1
 80137f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80137f6:	fb0c 3301 	mla	r3, ip, r1, r3
 80137fa:	eb04 0803 	add.w	r8, r4, r3
 80137fe:	5ce3      	ldrb	r3, [r4, r3]
 8013800:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013804:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8013808:	2a00      	cmp	r2, #0
 801380a:	f000 8193 	beq.w	8013b34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801380e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8013812:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8013816:	940b      	str	r4, [sp, #44]	; 0x2c
 8013818:	0e24      	lsrs	r4, r4, #24
 801381a:	9412      	str	r4, [sp, #72]	; 0x48
 801381c:	b178      	cbz	r0, 801383e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801381e:	eb08 0c01 	add.w	ip, r8, r1
 8013822:	f818 1001 	ldrb.w	r1, [r8, r1]
 8013826:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801382a:	9108      	str	r1, [sp, #32]
 801382c:	0e09      	lsrs	r1, r1, #24
 801382e:	9110      	str	r1, [sp, #64]	; 0x40
 8013830:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8013834:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013838:	910c      	str	r1, [sp, #48]	; 0x30
 801383a:	0e09      	lsrs	r1, r1, #24
 801383c:	9113      	str	r1, [sp, #76]	; 0x4c
 801383e:	b292      	uxth	r2, r2
 8013840:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013842:	b280      	uxth	r0, r0
 8013844:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013846:	fb02 f900 	mul.w	r9, r2, r0
 801384a:	0112      	lsls	r2, r2, #4
 801384c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8013850:	eba2 0809 	sub.w	r8, r2, r9
 8013854:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8013858:	b280      	uxth	r0, r0
 801385a:	fa1f f888 	uxth.w	r8, r8
 801385e:	1a12      	subs	r2, r2, r0
 8013860:	fb08 f101 	mul.w	r1, r8, r1
 8013864:	b292      	uxth	r2, r2
 8013866:	fb02 110e 	mla	r1, r2, lr, r1
 801386a:	fb00 1104 	mla	r1, r0, r4, r1
 801386e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013870:	fb09 1104 	mla	r1, r9, r4, r1
 8013874:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013878:	2900      	cmp	r1, #0
 801387a:	f000 80de 	beq.w	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801387e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013882:	d01b      	beq.n	80138bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8013884:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8013888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801388c:	fb0e fa0a 	mul.w	sl, lr, sl
 8013890:	fb0e fe03 	mul.w	lr, lr, r3
 8013894:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013898:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801389c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80138a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80138a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80138a8:	4453      	add	r3, sl
 80138aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80138ae:	0a1b      	lsrs	r3, r3, #8
 80138b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80138b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80138b8:	ea43 030c 	orr.w	r3, r3, ip
 80138bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80138be:	2cff      	cmp	r4, #255	; 0xff
 80138c0:	d021      	beq.n	8013906 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80138c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80138c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80138c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80138ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80138ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80138d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80138d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80138d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80138da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80138de:	fb04 fa0a 	mul.w	sl, r4, sl
 80138e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80138e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80138ea:	44de      	add	lr, fp
 80138ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80138f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80138f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80138f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80138fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013900:	ea4e 040a 	orr.w	r4, lr, sl
 8013904:	940b      	str	r4, [sp, #44]	; 0x2c
 8013906:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013908:	2cff      	cmp	r4, #255	; 0xff
 801390a:	d021      	beq.n	8013950 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801390c:	9c08      	ldr	r4, [sp, #32]
 801390e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013912:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013914:	fb04 fb0b 	mul.w	fp, r4, fp
 8013918:	9c08      	ldr	r4, [sp, #32]
 801391a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801391e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013920:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8013924:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013928:	fb04 fa0a 	mul.w	sl, r4, sl
 801392c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013930:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8013934:	44de      	add	lr, fp
 8013936:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801393a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801393e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013942:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013946:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801394a:	ea4e 040a 	orr.w	r4, lr, sl
 801394e:	9408      	str	r4, [sp, #32]
 8013950:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013952:	2cff      	cmp	r4, #255	; 0xff
 8013954:	d021      	beq.n	801399a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8013956:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013958:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801395c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801395e:	fb04 fb0b 	mul.w	fp, r4, fp
 8013962:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013964:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013968:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801396a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801396e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013972:	fb04 fa0a 	mul.w	sl, r4, sl
 8013976:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801397a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801397e:	44de      	add	lr, fp
 8013980:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8013984:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8013988:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801398c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013990:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013994:	ea4e 040a 	orr.w	r4, lr, sl
 8013998:	940c      	str	r4, [sp, #48]	; 0x30
 801399a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801399c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80139a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80139a4:	43c9      	mvns	r1, r1
 80139a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80139aa:	9c08      	ldr	r4, [sp, #32]
 80139ac:	b2c9      	uxtb	r1, r1
 80139ae:	fb08 fc0c 	mul.w	ip, r8, ip
 80139b2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80139b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80139ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80139bc:	fb00 cc0e 	mla	ip, r0, lr, ip
 80139c0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80139c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80139c6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80139ca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80139ce:	fb08 f80e 	mul.w	r8, r8, lr
 80139d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80139d6:	fb02 8303 	mla	r3, r2, r3, r8
 80139da:	9a08      	ldr	r2, [sp, #32]
 80139dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80139e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80139e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139e6:	fb00 330a 	mla	r3, r0, sl, r3
 80139ea:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80139ee:	fb09 3900 	mla	r9, r9, r0, r3
 80139f2:	783b      	ldrb	r3, [r7, #0]
 80139f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80139f8:	fb03 f201 	mul.w	r2, r3, r1
 80139fc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8013a00:	1c53      	adds	r3, r2, #1
 8013a02:	ea4c 0c09 	orr.w	ip, ip, r9
 8013a06:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8013a0a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8013a0e:	703b      	strb	r3, [r7, #0]
 8013a10:	787b      	ldrb	r3, [r7, #1]
 8013a12:	434b      	muls	r3, r1
 8013a14:	1c5a      	adds	r2, r3, #1
 8013a16:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8013a1a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8013a1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013a22:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8013a26:	707b      	strb	r3, [r7, #1]
 8013a28:	78bb      	ldrb	r3, [r7, #2]
 8013a2a:	4359      	muls	r1, r3
 8013a2c:	1c4b      	adds	r3, r1, #1
 8013a2e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8013a32:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8013a36:	f887 c002 	strb.w	ip, [r7, #2]
 8013a3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013a3c:	3703      	adds	r7, #3
 8013a3e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013a40:	441a      	add	r2, r3
 8013a42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013a44:	441d      	add	r5, r3
 8013a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a48:	9225      	str	r2, [sp, #148]	; 0x94
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a4e:	e6b0      	b.n	80137b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8013a50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013a52:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8013a54:	441c      	add	r4, r3
 8013a56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013a58:	441d      	add	r5, r3
 8013a5a:	9b07      	ldr	r3, [sp, #28]
 8013a5c:	9425      	str	r4, [sp, #148]	; 0x94
 8013a5e:	3b01      	subs	r3, #1
 8013a60:	9307      	str	r3, [sp, #28]
 8013a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a64:	3303      	adds	r3, #3
 8013a66:	930a      	str	r3, [sp, #40]	; 0x28
 8013a68:	e683      	b.n	8013772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8013a6a:	d026      	beq.n	8013aba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8013a6c:	9b07      	ldr	r3, [sp, #28]
 8013a6e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8013a70:	3b01      	subs	r3, #1
 8013a72:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8013a74:	fb00 4003 	mla	r0, r0, r3, r4
 8013a78:	1400      	asrs	r0, r0, #16
 8013a7a:	f53f ae97 	bmi.w	80137ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8013a7e:	3901      	subs	r1, #1
 8013a80:	4288      	cmp	r0, r1
 8013a82:	f6bf ae93 	bge.w	80137ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8013a86:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013a88:	fb01 5303 	mla	r3, r1, r3, r5
 8013a8c:	141b      	asrs	r3, r3, #16
 8013a8e:	f53f ae8d 	bmi.w	80137ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8013a92:	3a01      	subs	r2, #1
 8013a94:	4293      	cmp	r3, r2
 8013a96:	f6bf ae89 	bge.w	80137ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8013a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a9c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8013aa0:	f103 0e03 	add.w	lr, r3, #3
 8013aa4:	f1bb 0f00 	cmp.w	fp, #0
 8013aa8:	dc6d      	bgt.n	8013b86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8013aaa:	9b07      	ldr	r3, [sp, #28]
 8013aac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8013ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013ab6:	4423      	add	r3, r4
 8013ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8013aba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	f340 81a0 	ble.w	8013e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8013ac2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ac6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ac8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013acc:	eeb0 6a62 	vmov.f32	s12, s5
 8013ad0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ad4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013ad8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013adc:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8013ae0:	eeb0 6a43 	vmov.f32	s12, s6
 8013ae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013ae8:	ee16 5a10 	vmov	r5, s12
 8013aec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013af0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013af4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013af8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013afc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b04:	ee12 2a90 	vmov	r2, s5
 8013b08:	eef0 2a47 	vmov.f32	s5, s14
 8013b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b10:	ee13 2a10 	vmov	r2, s6
 8013b14:	9327      	str	r3, [sp, #156]	; 0x9c
 8013b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013b18:	eeb0 3a67 	vmov.f32	s6, s15
 8013b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b20:	9328      	str	r3, [sp, #160]	; 0xa0
 8013b22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013b26:	3b01      	subs	r3, #1
 8013b28:	9316      	str	r3, [sp, #88]	; 0x58
 8013b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013b2c:	bf08      	it	eq
 8013b2e:	4613      	moveq	r3, r2
 8013b30:	9307      	str	r3, [sp, #28]
 8013b32:	e610      	b.n	8013756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	f43f ae82 	beq.w	801383e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8013b3a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8013b3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013b42:	9108      	str	r1, [sp, #32]
 8013b44:	0e09      	lsrs	r1, r1, #24
 8013b46:	9110      	str	r1, [sp, #64]	; 0x40
 8013b48:	e679      	b.n	801383e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8013b4a:	f113 0801 	adds.w	r8, r3, #1
 8013b4e:	f53f af74 	bmi.w	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8013b52:	4541      	cmp	r1, r8
 8013b54:	f6ff af71 	blt.w	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8013b58:	f11c 0801 	adds.w	r8, ip, #1
 8013b5c:	f53f af6d 	bmi.w	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8013b60:	45c6      	cmp	lr, r8
 8013b62:	f6ff af6a 	blt.w	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8013b66:	b209      	sxth	r1, r1
 8013b68:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013b6c:	fa0f f38e 	sxth.w	r3, lr
 8013b70:	9100      	str	r1, [sp, #0]
 8013b72:	4639      	mov	r1, r7
 8013b74:	9301      	str	r3, [sp, #4]
 8013b76:	4633      	mov	r3, r6
 8013b78:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8013b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013b80:	f7ff fca3 	bl	80134ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8013b84:	e759      	b.n	8013a3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8013b86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013b88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8013b8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8013b8e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013b92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013b94:	1427      	asrs	r7, r4, #16
 8013b96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8013b98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013b9c:	142b      	asrs	r3, r5, #16
 8013b9e:	fb01 7303 	mla	r3, r1, r3, r7
 8013ba2:	18e7      	adds	r7, r4, r3
 8013ba4:	5ce3      	ldrb	r3, [r4, r3]
 8013ba6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013baa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8013bae:	2a00      	cmp	r2, #0
 8013bb0:	f000 811d 	beq.w	8013dee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8013bb4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8013bb8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8013bbc:	940d      	str	r4, [sp, #52]	; 0x34
 8013bbe:	0e24      	lsrs	r4, r4, #24
 8013bc0:	9414      	str	r4, [sp, #80]	; 0x50
 8013bc2:	b170      	cbz	r0, 8013be2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8013bc4:	eb07 0801 	add.w	r8, r7, r1
 8013bc8:	5c79      	ldrb	r1, [r7, r1]
 8013bca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013bce:	9109      	str	r1, [sp, #36]	; 0x24
 8013bd0:	0e09      	lsrs	r1, r1, #24
 8013bd2:	9111      	str	r1, [sp, #68]	; 0x44
 8013bd4:	f898 1001 	ldrb.w	r1, [r8, #1]
 8013bd8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013bdc:	910e      	str	r1, [sp, #56]	; 0x38
 8013bde:	0e09      	lsrs	r1, r1, #24
 8013be0:	9115      	str	r1, [sp, #84]	; 0x54
 8013be2:	b292      	uxth	r2, r2
 8013be4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013be6:	b280      	uxth	r0, r0
 8013be8:	fb02 f900 	mul.w	r9, r2, r0
 8013bec:	0112      	lsls	r2, r2, #4
 8013bee:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8013bf2:	eba2 0809 	sub.w	r8, r2, r9
 8013bf6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8013bfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bfc:	b280      	uxth	r0, r0
 8013bfe:	fa1f f888 	uxth.w	r8, r8
 8013c02:	1a09      	subs	r1, r1, r0
 8013c04:	fb08 f202 	mul.w	r2, r8, r2
 8013c08:	b289      	uxth	r1, r1
 8013c0a:	fb01 220c 	mla	r2, r1, ip, r2
 8013c0e:	fb00 2204 	mla	r2, r0, r4, r2
 8013c12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013c14:	fb09 2204 	mla	r2, r9, r4, r2
 8013c18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013c1c:	2a00      	cmp	r2, #0
 8013c1e:	f000 80db 	beq.w	8013dd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8013c22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8013c26:	d019      	beq.n	8013c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8013c28:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8013c2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013c30:	fb0c fa0a 	mul.w	sl, ip, sl
 8013c34:	fb0c fc03 	mul.w	ip, ip, r3
 8013c38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013c3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8013c40:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8013c44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013c48:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8013c4c:	4453      	add	r3, sl
 8013c4e:	0a3f      	lsrs	r7, r7, #8
 8013c50:	0a1b      	lsrs	r3, r3, #8
 8013c52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8013c56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013c5a:	433b      	orrs	r3, r7
 8013c5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013c5e:	2cff      	cmp	r4, #255	; 0xff
 8013c60:	d020      	beq.n	8013ca4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8013c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013c64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013c68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013c6a:	4367      	muls	r7, r4
 8013c6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013c6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8013c72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013c76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013c78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8013c7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013c80:	fb04 fa0a 	mul.w	sl, r4, sl
 8013c84:	44bc      	add	ip, r7
 8013c86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8013c8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013c8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013c92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013c96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013c9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013c9e:	ea4c 040a 	orr.w	r4, ip, sl
 8013ca2:	940d      	str	r4, [sp, #52]	; 0x34
 8013ca4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013ca6:	2cff      	cmp	r4, #255	; 0xff
 8013ca8:	d020      	beq.n	8013cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8013caa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013cac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013cb0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013cb2:	4367      	muls	r7, r4
 8013cb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013cb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8013cba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013cbe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013cc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8013cc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cc8:	fb04 fa0a 	mul.w	sl, r4, sl
 8013ccc:	44bc      	add	ip, r7
 8013cce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8013cd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013cd6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013cda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013ce2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013ce6:	ea4c 040a 	orr.w	r4, ip, sl
 8013cea:	9409      	str	r4, [sp, #36]	; 0x24
 8013cec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013cee:	2cff      	cmp	r4, #255	; 0xff
 8013cf0:	d020      	beq.n	8013d34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8013cf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013cf4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013cf8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013cfa:	4367      	muls	r7, r4
 8013cfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013cfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8013d02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013d06:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013d08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8013d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013d10:	fb04 fa0a 	mul.w	sl, r4, sl
 8013d14:	44bc      	add	ip, r7
 8013d16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8013d1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013d1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013d22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013d26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013d2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013d2e:	ea4c 040a 	orr.w	r4, ip, sl
 8013d32:	940e      	str	r4, [sp, #56]	; 0x38
 8013d34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013d36:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8013d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013d3e:	43d2      	mvns	r2, r2
 8013d40:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8013d44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013d46:	b2d2      	uxtb	r2, r2
 8013d48:	fb08 f707 	mul.w	r7, r8, r7
 8013d4c:	fb01 770c 	mla	r7, r1, ip, r7
 8013d50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8013d54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013d56:	fb00 770c 	mla	r7, r0, ip, r7
 8013d5a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8013d5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013d60:	fb09 770c 	mla	r7, r9, ip, r7
 8013d64:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8013d68:	fb08 f80c 	mul.w	r8, r8, ip
 8013d6c:	0a3f      	lsrs	r7, r7, #8
 8013d6e:	fb01 8303 	mla	r3, r1, r3, r8
 8013d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d74:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8013d78:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8013d7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013d7e:	fb00 330a 	mla	r3, r0, sl, r3
 8013d82:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8013d86:	fb09 3c0c 	mla	ip, r9, ip, r3
 8013d8a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8013d8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013d92:	fb03 f102 	mul.w	r1, r3, r2
 8013d96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013d9a:	1c4b      	adds	r3, r1, #1
 8013d9c:	ea47 070c 	orr.w	r7, r7, ip
 8013da0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8013da4:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8013da8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8013dac:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8013db0:	4353      	muls	r3, r2
 8013db2:	1c59      	adds	r1, r3, #1
 8013db4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8013db8:	0a3b      	lsrs	r3, r7, #8
 8013dba:	0c3f      	lsrs	r7, r7, #16
 8013dbc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8013dc0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8013dc4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8013dc8:	435a      	muls	r2, r3
 8013dca:	1c53      	adds	r3, r2, #1
 8013dcc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8013dd0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8013dd4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8013dd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013dda:	f10e 0e03 	add.w	lr, lr, #3
 8013dde:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013de0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013de4:	441a      	add	r2, r3
 8013de6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013de8:	9225      	str	r2, [sp, #148]	; 0x94
 8013dea:	441d      	add	r5, r3
 8013dec:	e65a      	b.n	8013aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f43f aef7 	beq.w	8013be2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8013df4:	5c79      	ldrb	r1, [r7, r1]
 8013df6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013dfa:	9109      	str	r1, [sp, #36]	; 0x24
 8013dfc:	0e09      	lsrs	r1, r1, #24
 8013dfe:	9111      	str	r1, [sp, #68]	; 0x44
 8013e00:	e6ef      	b.n	8013be2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8013e02:	b01b      	add	sp, #108	; 0x6c
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e08 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8013e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e0c:	b08d      	sub	sp, #52	; 0x34
 8013e0e:	468b      	mov	fp, r1
 8013e10:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8013e14:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8013e18:	fb0c 5703 	mla	r7, ip, r3, r5
 8013e1c:	f1bc 0f00 	cmp.w	ip, #0
 8013e20:	910b      	str	r1, [sp, #44]	; 0x2c
 8013e22:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013e26:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8013e2a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8013e2e:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8013e32:	eb02 0607 	add.w	r6, r2, r7
 8013e36:	f89b 4000 	ldrb.w	r4, [fp]
 8013e3a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8013e3e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8013e42:	f2c0 80c1 	blt.w	8013fc8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8013e46:	45e6      	cmp	lr, ip
 8013e48:	f340 80be 	ble.w	8013fc8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8013e4c:	2d00      	cmp	r5, #0
 8013e4e:	f2c0 80b7 	blt.w	8013fc0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8013e52:	42ab      	cmp	r3, r5
 8013e54:	f340 80b4 	ble.w	8013fc0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8013e58:	5dd2      	ldrb	r2, [r2, r7]
 8013e5a:	9205      	str	r2, [sp, #20]
 8013e5c:	7872      	ldrb	r2, [r6, #1]
 8013e5e:	9206      	str	r2, [sp, #24]
 8013e60:	78b2      	ldrb	r2, [r6, #2]
 8013e62:	9207      	str	r2, [sp, #28]
 8013e64:	1c6a      	adds	r2, r5, #1
 8013e66:	f100 80b6 	bmi.w	8013fd6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	f340 80b3 	ble.w	8013fd6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8013e70:	f1b8 0f00 	cmp.w	r8, #0
 8013e74:	f000 80af 	beq.w	8013fd6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8013e78:	78f2      	ldrb	r2, [r6, #3]
 8013e7a:	9201      	str	r2, [sp, #4]
 8013e7c:	7932      	ldrb	r2, [r6, #4]
 8013e7e:	9202      	str	r2, [sp, #8]
 8013e80:	7972      	ldrb	r2, [r6, #5]
 8013e82:	9203      	str	r2, [sp, #12]
 8013e84:	f11c 0c01 	adds.w	ip, ip, #1
 8013e88:	f100 80ad 	bmi.w	8013fe6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8013e8c:	45e6      	cmp	lr, ip
 8013e8e:	f340 80aa 	ble.w	8013fe6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8013e92:	f1ba 0f00 	cmp.w	sl, #0
 8013e96:	f000 80a6 	beq.w	8013fe6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8013e9a:	2d00      	cmp	r5, #0
 8013e9c:	f2c0 809f 	blt.w	8013fde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8013ea0:	42ab      	cmp	r3, r5
 8013ea2:	f340 809c 	ble.w	8013fde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8013ea6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013eaa:	f816 9002 	ldrb.w	r9, [r6, r2]
 8013eae:	2203      	movs	r2, #3
 8013eb0:	fb03 6c02 	mla	ip, r3, r2, r6
 8013eb4:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8013eb8:	f89c e002 	ldrb.w	lr, [ip, #2]
 8013ebc:	9704      	str	r7, [sp, #16]
 8013ebe:	3501      	adds	r5, #1
 8013ec0:	f100 8098 	bmi.w	8013ff4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8013ec4:	42ab      	cmp	r3, r5
 8013ec6:	f340 8095 	ble.w	8013ff4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8013eca:	f1b8 0f00 	cmp.w	r8, #0
 8013ece:	f000 8091 	beq.w	8013ff4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8013ed2:	f04f 0c03 	mov.w	ip, #3
 8013ed6:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8013eda:	5cb5      	ldrb	r5, [r6, r2]
 8013edc:	fb03 620c 	mla	r2, r3, ip, r6
 8013ee0:	fb03 630c 	mla	r3, r3, ip, r6
 8013ee4:	7912      	ldrb	r2, [r2, #4]
 8013ee6:	795e      	ldrb	r6, [r3, #5]
 8013ee8:	fa1f f388 	uxth.w	r3, r8
 8013eec:	fa1f fc8a 	uxth.w	ip, sl
 8013ef0:	fb03 f70c 	mul.w	r7, r3, ip
 8013ef4:	011b      	lsls	r3, r3, #4
 8013ef6:	9708      	str	r7, [sp, #32]
 8013ef8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8013efc:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8013f00:	1bdb      	subs	r3, r3, r7
 8013f02:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8013f06:	fa1f fc8c 	uxth.w	ip, ip
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	9709      	str	r7, [sp, #36]	; 0x24
 8013f0e:	ebaa 0a0c 	sub.w	sl, sl, ip
 8013f12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013f14:	930a      	str	r3, [sp, #40]	; 0x28
 8013f16:	fa1f fa8a 	uxth.w	sl, sl
 8013f1a:	ea6f 0807 	mvn.w	r8, r7
 8013f1e:	9f01      	ldr	r7, [sp, #4]
 8013f20:	435f      	muls	r7, r3
 8013f22:	9b05      	ldr	r3, [sp, #20]
 8013f24:	fa5f f888 	uxtb.w	r8, r8
 8013f28:	fb0a 7703 	mla	r7, sl, r3, r7
 8013f2c:	9b08      	ldr	r3, [sp, #32]
 8013f2e:	fb14 f408 	smulbb	r4, r4, r8
 8013f32:	fb0c 7709 	mla	r7, ip, r9, r7
 8013f36:	fb10 f008 	smulbb	r0, r0, r8
 8013f3a:	fb11 f108 	smulbb	r1, r1, r8
 8013f3e:	fb03 7705 	mla	r7, r3, r5, r7
 8013f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f44:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8013f48:	fb07 4703 	mla	r7, r7, r3, r4
 8013f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f4e:	b2bf      	uxth	r7, r7
 8013f50:	1c7c      	adds	r4, r7, #1
 8013f52:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8013f56:	1224      	asrs	r4, r4, #8
 8013f58:	f88b 4000 	strb.w	r4, [fp]
 8013f5c:	9c02      	ldr	r4, [sp, #8]
 8013f5e:	435c      	muls	r4, r3
 8013f60:	9b06      	ldr	r3, [sp, #24]
 8013f62:	fb0a 4403 	mla	r4, sl, r3, r4
 8013f66:	9b04      	ldr	r3, [sp, #16]
 8013f68:	fb0c 4403 	mla	r4, ip, r3, r4
 8013f6c:	9b08      	ldr	r3, [sp, #32]
 8013f6e:	fb03 4402 	mla	r4, r3, r2, r4
 8013f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013f7a:	fb04 0403 	mla	r4, r4, r3, r0
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	435a      	muls	r2, r3
 8013f82:	b2a4      	uxth	r4, r4
 8013f84:	4613      	mov	r3, r2
 8013f86:	9a07      	ldr	r2, [sp, #28]
 8013f88:	1c60      	adds	r0, r4, #1
 8013f8a:	fb0a 3a02 	mla	sl, sl, r2, r3
 8013f8e:	9b08      	ldr	r3, [sp, #32]
 8013f90:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8013f94:	fb0c ac0e 	mla	ip, ip, lr, sl
 8013f98:	1224      	asrs	r4, r4, #8
 8013f9a:	fb03 c606 	mla	r6, r3, r6, ip
 8013f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa0:	f88b 4001 	strb.w	r4, [fp, #1]
 8013fa4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8013fa8:	fb06 1103 	mla	r1, r6, r3, r1
 8013fac:	b289      	uxth	r1, r1
 8013fae:	1c4e      	adds	r6, r1, #1
 8013fb0:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8013fb4:	1209      	asrs	r1, r1, #8
 8013fb6:	f88b 1002 	strb.w	r1, [fp, #2]
 8013fba:	b00d      	add	sp, #52	; 0x34
 8013fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013fc4:	9405      	str	r4, [sp, #20]
 8013fc6:	e74d      	b.n	8013e64 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8013fc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fcc:	9401      	str	r4, [sp, #4]
 8013fce:	9405      	str	r4, [sp, #20]
 8013fd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013fd4:	e756      	b.n	8013e84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8013fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fda:	9401      	str	r4, [sp, #4]
 8013fdc:	e752      	b.n	8013e84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8013fde:	468e      	mov	lr, r1
 8013fe0:	9004      	str	r0, [sp, #16]
 8013fe2:	46a1      	mov	r9, r4
 8013fe4:	e76b      	b.n	8013ebe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8013fe6:	460e      	mov	r6, r1
 8013fe8:	4602      	mov	r2, r0
 8013fea:	4625      	mov	r5, r4
 8013fec:	468e      	mov	lr, r1
 8013fee:	9004      	str	r0, [sp, #16]
 8013ff0:	46a1      	mov	r9, r4
 8013ff2:	e779      	b.n	8013ee8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8013ff4:	460e      	mov	r6, r1
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	4625      	mov	r5, r4
 8013ffa:	e775      	b.n	8013ee8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08013ffc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014000:	b09f      	sub	sp, #124	; 0x7c
 8014002:	920e      	str	r2, [sp, #56]	; 0x38
 8014004:	9307      	str	r3, [sp, #28]
 8014006:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014008:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801400c:	901d      	str	r0, [sp, #116]	; 0x74
 801400e:	930c      	str	r3, [sp, #48]	; 0x30
 8014010:	6850      	ldr	r0, [r2, #4]
 8014012:	910b      	str	r1, [sp, #44]	; 0x2c
 8014014:	6812      	ldr	r2, [r2, #0]
 8014016:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801401a:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801401e:	fb00 1303 	mla	r3, r0, r3, r1
 8014022:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014026:	18d3      	adds	r3, r2, r3
 8014028:	9308      	str	r3, [sp, #32]
 801402a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	930a      	str	r3, [sp, #40]	; 0x28
 8014030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014032:	43db      	mvns	r3, r3
 8014034:	b2db      	uxtb	r3, r3
 8014036:	9309      	str	r3, [sp, #36]	; 0x24
 8014038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801403a:	2b00      	cmp	r3, #0
 801403c:	dc03      	bgt.n	8014046 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801403e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014040:	2b00      	cmp	r3, #0
 8014042:	f340 81f5 	ble.w	8014430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8014046:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014048:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801404c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014050:	1e48      	subs	r0, r1, #1
 8014052:	1e54      	subs	r4, r2, #1
 8014054:	9b07      	ldr	r3, [sp, #28]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f340 80d5 	ble.w	8014206 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801405c:	ea5f 452a 	movs.w	r5, sl, asr #16
 8014060:	ea4f 4328 	mov.w	r3, r8, asr #16
 8014064:	d406      	bmi.n	8014074 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014066:	4285      	cmp	r5, r0
 8014068:	da04      	bge.n	8014074 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801406a:	2b00      	cmp	r3, #0
 801406c:	db02      	blt.n	8014074 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801406e:	42a3      	cmp	r3, r4
 8014070:	f2c0 80ca 	blt.w	8014208 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8014074:	3501      	adds	r5, #1
 8014076:	f100 80bb 	bmi.w	80141f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801407a:	42a9      	cmp	r1, r5
 801407c:	f2c0 80b8 	blt.w	80141f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8014080:	3301      	adds	r3, #1
 8014082:	f100 80b5 	bmi.w	80141f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8014086:	429a      	cmp	r2, r3
 8014088:	f2c0 80b2 	blt.w	80141f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801408c:	9b07      	ldr	r3, [sp, #28]
 801408e:	9d08      	ldr	r5, [sp, #32]
 8014090:	930d      	str	r3, [sp, #52]	; 0x34
 8014092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014094:	2b00      	cmp	r3, #0
 8014096:	f340 80d6 	ble.w	8014246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801409a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801409c:	ea4f 4428 	mov.w	r4, r8, asr #16
 80140a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80140a2:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80140a6:	68c6      	ldr	r6, [r0, #12]
 80140a8:	ea5f 402a 	movs.w	r0, sl, asr #16
 80140ac:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80140b0:	689b      	ldr	r3, [r3, #8]
 80140b2:	f100 810f 	bmi.w	80142d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80140b6:	1e5f      	subs	r7, r3, #1
 80140b8:	42b8      	cmp	r0, r7
 80140ba:	f280 810b 	bge.w	80142d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80140be:	2c00      	cmp	r4, #0
 80140c0:	f2c0 8108 	blt.w	80142d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80140c4:	1e77      	subs	r7, r6, #1
 80140c6:	42bc      	cmp	r4, r7
 80140c8:	f280 8104 	bge.w	80142d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80140cc:	b21b      	sxth	r3, r3
 80140ce:	fb04 0003 	mla	r0, r4, r3, r0
 80140d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80140d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80140d8:	1826      	adds	r6, r4, r0
 80140da:	5c24      	ldrb	r4, [r4, r0]
 80140dc:	78b7      	ldrb	r7, [r6, #2]
 80140de:	7870      	ldrb	r0, [r6, #1]
 80140e0:	970f      	str	r7, [sp, #60]	; 0x3c
 80140e2:	7977      	ldrb	r7, [r6, #5]
 80140e4:	f896 e003 	ldrb.w	lr, [r6, #3]
 80140e8:	f896 c004 	ldrb.w	ip, [r6, #4]
 80140ec:	9710      	str	r7, [sp, #64]	; 0x40
 80140ee:	b1c9      	cbz	r1, 8014124 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80140f0:	f04f 0b03 	mov.w	fp, #3
 80140f4:	f06f 0904 	mvn.w	r9, #4
 80140f8:	3605      	adds	r6, #5
 80140fa:	fb13 930b 	smlabb	r3, r3, fp, r9
 80140fe:	eb06 0b03 	add.w	fp, r6, r3
 8014102:	5cf3      	ldrb	r3, [r6, r3]
 8014104:	9311      	str	r3, [sp, #68]	; 0x44
 8014106:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801410a:	9313      	str	r3, [sp, #76]	; 0x4c
 801410c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8014110:	9315      	str	r3, [sp, #84]	; 0x54
 8014112:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8014116:	9312      	str	r3, [sp, #72]	; 0x48
 8014118:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801411c:	9314      	str	r3, [sp, #80]	; 0x50
 801411e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8014122:	9316      	str	r3, [sp, #88]	; 0x58
 8014124:	b292      	uxth	r2, r2
 8014126:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014128:	b289      	uxth	r1, r1
 801412a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801412e:	fb02 f601 	mul.w	r6, r2, r1
 8014132:	0112      	lsls	r2, r2, #4
 8014134:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8014138:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801413c:	1b92      	subs	r2, r2, r6
 801413e:	b289      	uxth	r1, r1
 8014140:	b292      	uxth	r2, r2
 8014142:	eba9 0901 	sub.w	r9, r9, r1
 8014146:	fb02 fe0e 	mul.w	lr, r2, lr
 801414a:	fa1f f989 	uxth.w	r9, r9
 801414e:	fb02 fc0c 	mul.w	ip, r2, ip
 8014152:	fb09 e404 	mla	r4, r9, r4, lr
 8014156:	f895 e000 	ldrb.w	lr, [r5]
 801415a:	fb09 c000 	mla	r0, r9, r0, ip
 801415e:	fb01 4407 	mla	r4, r1, r7, r4
 8014162:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014164:	fb06 4407 	mla	r4, r6, r7, r4
 8014168:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801416a:	fb1e fe07 	smulbb	lr, lr, r7
 801416e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014172:	fb04 e403 	mla	r4, r4, r3, lr
 8014176:	b2a4      	uxth	r4, r4
 8014178:	f104 0e01 	add.w	lr, r4, #1
 801417c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8014180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014182:	fb01 0004 	mla	r0, r1, r4, r0
 8014186:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014188:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801418c:	fb06 0004 	mla	r0, r6, r4, r0
 8014190:	786c      	ldrb	r4, [r5, #1]
 8014192:	f885 e000 	strb.w	lr, [r5]
 8014196:	fb14 f407 	smulbb	r4, r4, r7
 801419a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801419e:	fb00 4003 	mla	r0, r0, r3, r4
 80141a2:	b280      	uxth	r0, r0
 80141a4:	1c44      	adds	r4, r0, #1
 80141a6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80141aa:	1200      	asrs	r0, r0, #8
 80141ac:	7068      	strb	r0, [r5, #1]
 80141ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80141b0:	4342      	muls	r2, r0
 80141b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80141b4:	fb09 2200 	mla	r2, r9, r0, r2
 80141b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80141ba:	fb01 2100 	mla	r1, r1, r0, r2
 80141be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80141c0:	fb06 1602 	mla	r6, r6, r2, r1
 80141c4:	78a9      	ldrb	r1, [r5, #2]
 80141c6:	fb11 f107 	smulbb	r1, r1, r7
 80141ca:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80141ce:	fb06 1303 	mla	r3, r6, r3, r1
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	1c5e      	adds	r6, r3, #1
 80141d6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80141da:	121b      	asrs	r3, r3, #8
 80141dc:	70ab      	strb	r3, [r5, #2]
 80141de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80141e0:	3503      	adds	r5, #3
 80141e2:	449a      	add	sl, r3
 80141e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80141e6:	4498      	add	r8, r3
 80141e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141ea:	3b01      	subs	r3, #1
 80141ec:	930d      	str	r3, [sp, #52]	; 0x34
 80141ee:	e750      	b.n	8014092 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80141f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80141f2:	449a      	add	sl, r3
 80141f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80141f6:	4498      	add	r8, r3
 80141f8:	9b07      	ldr	r3, [sp, #28]
 80141fa:	3b01      	subs	r3, #1
 80141fc:	9307      	str	r3, [sp, #28]
 80141fe:	9b08      	ldr	r3, [sp, #32]
 8014200:	3303      	adds	r3, #3
 8014202:	9308      	str	r3, [sp, #32]
 8014204:	e726      	b.n	8014054 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8014206:	d026      	beq.n	8014256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8014208:	9b07      	ldr	r3, [sp, #28]
 801420a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801420c:	3b01      	subs	r3, #1
 801420e:	fb00 a003 	mla	r0, r0, r3, sl
 8014212:	1400      	asrs	r0, r0, #16
 8014214:	f53f af3a 	bmi.w	801408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014218:	3901      	subs	r1, #1
 801421a:	4288      	cmp	r0, r1
 801421c:	f6bf af36 	bge.w	801408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014220:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8014222:	fb01 8303 	mla	r3, r1, r3, r8
 8014226:	141b      	asrs	r3, r3, #16
 8014228:	f53f af30 	bmi.w	801408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801422c:	3a01      	subs	r2, #1
 801422e:	4293      	cmp	r3, r2
 8014230:	f6bf af2c 	bge.w	801408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014234:	9b08      	ldr	r3, [sp, #32]
 8014236:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801423a:	1cdd      	adds	r5, r3, #3
 801423c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8014240:	f1bc 0f00 	cmp.w	ip, #0
 8014244:	dc5f      	bgt.n	8014306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8014246:	9b07      	ldr	r3, [sp, #28]
 8014248:	9a08      	ldr	r2, [sp, #32]
 801424a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801424e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014252:	441a      	add	r2, r3
 8014254:	9208      	str	r2, [sp, #32]
 8014256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014258:	2b00      	cmp	r3, #0
 801425a:	f340 80e9 	ble.w	8014430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801425e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014262:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014264:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014268:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801426c:	eef0 6a62 	vmov.f32	s13, s5
 8014270:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014274:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014278:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801427c:	ee16 aa90 	vmov	sl, s13
 8014280:	eef0 6a43 	vmov.f32	s13, s6
 8014284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014288:	ee16 8a90 	vmov	r8, s13
 801428c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014290:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014294:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014298:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801429c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80142a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80142a4:	ee12 2a90 	vmov	r2, s5
 80142a8:	eef0 2a47 	vmov.f32	s5, s14
 80142ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80142b0:	ee13 2a10 	vmov	r2, s6
 80142b4:	932b      	str	r3, [sp, #172]	; 0xac
 80142b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80142b8:	eeb0 3a67 	vmov.f32	s6, s15
 80142bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80142c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80142c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142c6:	3b01      	subs	r3, #1
 80142c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80142ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80142cc:	bf08      	it	eq
 80142ce:	4613      	moveq	r3, r2
 80142d0:	9307      	str	r3, [sp, #28]
 80142d2:	e6b1      	b.n	8014038 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80142d4:	1c47      	adds	r7, r0, #1
 80142d6:	d482      	bmi.n	80141de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80142d8:	42bb      	cmp	r3, r7
 80142da:	db80      	blt.n	80141de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80142dc:	1c67      	adds	r7, r4, #1
 80142de:	f53f af7e 	bmi.w	80141de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80142e2:	42be      	cmp	r6, r7
 80142e4:	f6ff af7b 	blt.w	80141de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80142e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80142ea:	b236      	sxth	r6, r6
 80142ec:	9001      	str	r0, [sp, #4]
 80142ee:	b21b      	sxth	r3, r3
 80142f0:	9600      	str	r6, [sp, #0]
 80142f2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80142f4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80142f8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80142fc:	4629      	mov	r1, r5
 80142fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014300:	f7ff fd82 	bl	8013e08 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8014304:	e76b      	b.n	80141de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8014306:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8014308:	ea4f 402a 	mov.w	r0, sl, asr #16
 801430c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8014310:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8014314:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8014318:	ea4f 4128 	mov.w	r1, r8, asr #16
 801431c:	fb07 0101 	mla	r1, r7, r1, r0
 8014320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014322:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014326:	1844      	adds	r4, r0, r1
 8014328:	5c40      	ldrb	r0, [r0, r1]
 801432a:	78a6      	ldrb	r6, [r4, #2]
 801432c:	7861      	ldrb	r1, [r4, #1]
 801432e:	960f      	str	r6, [sp, #60]	; 0x3c
 8014330:	78e6      	ldrb	r6, [r4, #3]
 8014332:	910d      	str	r1, [sp, #52]	; 0x34
 8014334:	9610      	str	r6, [sp, #64]	; 0x40
 8014336:	f894 9004 	ldrb.w	r9, [r4, #4]
 801433a:	f894 b005 	ldrb.w	fp, [r4, #5]
 801433e:	b192      	cbz	r2, 8014366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8014340:	f06f 0604 	mvn.w	r6, #4
 8014344:	2103      	movs	r1, #3
 8014346:	3405      	adds	r4, #5
 8014348:	fb17 6701 	smlabb	r7, r7, r1, r6
 801434c:	19e6      	adds	r6, r4, r7
 801434e:	5de4      	ldrb	r4, [r4, r7]
 8014350:	9417      	str	r4, [sp, #92]	; 0x5c
 8014352:	7874      	ldrb	r4, [r6, #1]
 8014354:	9419      	str	r4, [sp, #100]	; 0x64
 8014356:	78b4      	ldrb	r4, [r6, #2]
 8014358:	941b      	str	r4, [sp, #108]	; 0x6c
 801435a:	78f4      	ldrb	r4, [r6, #3]
 801435c:	9418      	str	r4, [sp, #96]	; 0x60
 801435e:	7934      	ldrb	r4, [r6, #4]
 8014360:	941a      	str	r4, [sp, #104]	; 0x68
 8014362:	7974      	ldrb	r4, [r6, #5]
 8014364:	941c      	str	r4, [sp, #112]	; 0x70
 8014366:	b29b      	uxth	r3, r3
 8014368:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801436a:	b292      	uxth	r2, r2
 801436c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801436e:	3503      	adds	r5, #3
 8014370:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014374:	fb03 f402 	mul.w	r4, r3, r2
 8014378:	011b      	lsls	r3, r3, #4
 801437a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801437e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8014382:	1b1b      	subs	r3, r3, r4
 8014384:	b292      	uxth	r2, r2
 8014386:	b29b      	uxth	r3, r3
 8014388:	1ab6      	subs	r6, r6, r2
 801438a:	435f      	muls	r7, r3
 801438c:	b2b6      	uxth	r6, r6
 801438e:	fb03 f909 	mul.w	r9, r3, r9
 8014392:	fb03 fb0b 	mul.w	fp, r3, fp
 8014396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014398:	fb06 7000 	mla	r0, r6, r0, r7
 801439c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801439e:	fb06 bb03 	mla	fp, r6, r3, fp
 80143a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143a4:	fb02 0007 	mla	r0, r2, r7, r0
 80143a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80143aa:	fb02 bb03 	mla	fp, r2, r3, fp
 80143ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80143b0:	fb04 0007 	mla	r0, r4, r7, r0
 80143b4:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80143b8:	fb17 f701 	smulbb	r7, r7, r1
 80143bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80143c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80143c2:	fb00 700e 	mla	r0, r0, lr, r7
 80143c6:	fb06 9101 	mla	r1, r6, r1, r9
 80143ca:	b280      	uxth	r0, r0
 80143cc:	1c47      	adds	r7, r0, #1
 80143ce:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80143d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80143d4:	1200      	asrs	r0, r0, #8
 80143d6:	f805 0c06 	strb.w	r0, [r5, #-6]
 80143da:	9819      	ldr	r0, [sp, #100]	; 0x64
 80143dc:	fb02 1100 	mla	r1, r2, r0, r1
 80143e0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80143e2:	fb04 1100 	mla	r1, r4, r0, r1
 80143e6:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80143ea:	fb04 b403 	mla	r4, r4, r3, fp
 80143ee:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80143f2:	fb10 f007 	smulbb	r0, r0, r7
 80143f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80143fa:	fb13 f307 	smulbb	r3, r3, r7
 80143fe:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014402:	fb01 010e 	mla	r1, r1, lr, r0
 8014406:	fb04 340e 	mla	r4, r4, lr, r3
 801440a:	b289      	uxth	r1, r1
 801440c:	b2a4      	uxth	r4, r4
 801440e:	1c48      	adds	r0, r1, #1
 8014410:	1c63      	adds	r3, r4, #1
 8014412:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8014416:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801441a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801441c:	1209      	asrs	r1, r1, #8
 801441e:	1224      	asrs	r4, r4, #8
 8014420:	449a      	add	sl, r3
 8014422:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014424:	f805 1c05 	strb.w	r1, [r5, #-5]
 8014428:	f805 4c04 	strb.w	r4, [r5, #-4]
 801442c:	4498      	add	r8, r3
 801442e:	e707      	b.n	8014240 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014430:	b01f      	add	sp, #124	; 0x7c
 8014432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014436 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8014436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443a:	b087      	sub	sp, #28
 801443c:	780d      	ldrb	r5, [r1, #0]
 801443e:	784c      	ldrb	r4, [r1, #1]
 8014440:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8014444:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8014448:	9004      	str	r0, [sp, #16]
 801444a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801444e:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8014452:	9005      	str	r0, [sp, #20]
 8014454:	fb06 bc03 	mla	ip, r6, r3, fp
 8014458:	2e00      	cmp	r6, #0
 801445a:	7888      	ldrb	r0, [r1, #2]
 801445c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014460:	eb02 090c 	add.w	r9, r2, ip
 8014464:	f2c0 8084 	blt.w	8014570 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8014468:	42b7      	cmp	r7, r6
 801446a:	f340 8081 	ble.w	8014570 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801446e:	f1bb 0f00 	cmp.w	fp, #0
 8014472:	db79      	blt.n	8014568 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8014474:	455b      	cmp	r3, fp
 8014476:	dd77      	ble.n	8014568 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8014478:	f812 200c 	ldrb.w	r2, [r2, ip]
 801447c:	9201      	str	r2, [sp, #4]
 801447e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8014482:	9202      	str	r2, [sp, #8]
 8014484:	f899 2002 	ldrb.w	r2, [r9, #2]
 8014488:	9203      	str	r2, [sp, #12]
 801448a:	f11b 0201 	adds.w	r2, fp, #1
 801448e:	d476      	bmi.n	801457e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8014490:	4293      	cmp	r3, r2
 8014492:	dd74      	ble.n	801457e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8014494:	9a04      	ldr	r2, [sp, #16]
 8014496:	2a00      	cmp	r2, #0
 8014498:	d071      	beq.n	801457e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801449a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801449e:	f899 c004 	ldrb.w	ip, [r9, #4]
 80144a2:	f899 a005 	ldrb.w	sl, [r9, #5]
 80144a6:	3601      	adds	r6, #1
 80144a8:	d471      	bmi.n	801458e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80144aa:	42b7      	cmp	r7, r6
 80144ac:	dd6f      	ble.n	801458e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80144ae:	9a05      	ldr	r2, [sp, #20]
 80144b0:	2a00      	cmp	r2, #0
 80144b2:	d06c      	beq.n	801458e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80144b4:	f1bb 0f00 	cmp.w	fp, #0
 80144b8:	db65      	blt.n	8014586 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80144ba:	455b      	cmp	r3, fp
 80144bc:	dd63      	ble.n	8014586 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80144be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80144c2:	f819 e002 	ldrb.w	lr, [r9, r2]
 80144c6:	2203      	movs	r2, #3
 80144c8:	fb03 9602 	mla	r6, r3, r2, r9
 80144cc:	7877      	ldrb	r7, [r6, #1]
 80144ce:	78b6      	ldrb	r6, [r6, #2]
 80144d0:	f11b 0b01 	adds.w	fp, fp, #1
 80144d4:	d40c      	bmi.n	80144f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80144d6:	455b      	cmp	r3, fp
 80144d8:	dd0a      	ble.n	80144f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80144da:	9a04      	ldr	r2, [sp, #16]
 80144dc:	b142      	cbz	r2, 80144f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80144de:	2203      	movs	r2, #3
 80144e0:	fb13 2002 	smlabb	r0, r3, r2, r2
 80144e4:	f819 5000 	ldrb.w	r5, [r9, r0]
 80144e8:	fb03 9002 	mla	r0, r3, r2, r9
 80144ec:	7904      	ldrb	r4, [r0, #4]
 80144ee:	7940      	ldrb	r0, [r0, #5]
 80144f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80144f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80144f8:	fb03 fb02 	mul.w	fp, r3, r2
 80144fc:	011b      	lsls	r3, r3, #4
 80144fe:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8014502:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8014506:	eba3 030b 	sub.w	r3, r3, fp
 801450a:	b292      	uxth	r2, r2
 801450c:	b29b      	uxth	r3, r3
 801450e:	eba9 0902 	sub.w	r9, r9, r2
 8014512:	9304      	str	r3, [sp, #16]
 8014514:	fa1f f989 	uxth.w	r9, r9
 8014518:	fb03 f808 	mul.w	r8, r3, r8
 801451c:	9b01      	ldr	r3, [sp, #4]
 801451e:	fb09 8803 	mla	r8, r9, r3, r8
 8014522:	9b04      	ldr	r3, [sp, #16]
 8014524:	fb03 fc0c 	mul.w	ip, r3, ip
 8014528:	9b02      	ldr	r3, [sp, #8]
 801452a:	fb02 880e 	mla	r8, r2, lr, r8
 801452e:	fb09 cc03 	mla	ip, r9, r3, ip
 8014532:	9b04      	ldr	r3, [sp, #16]
 8014534:	fb0b 8805 	mla	r8, fp, r5, r8
 8014538:	fb02 c707 	mla	r7, r2, r7, ip
 801453c:	fb03 f30a 	mul.w	r3, r3, sl
 8014540:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014544:	fb0b 7404 	mla	r4, fp, r4, r7
 8014548:	f881 8000 	strb.w	r8, [r1]
 801454c:	1224      	asrs	r4, r4, #8
 801454e:	704c      	strb	r4, [r1, #1]
 8014550:	9c03      	ldr	r4, [sp, #12]
 8014552:	fb09 3904 	mla	r9, r9, r4, r3
 8014556:	fb02 9206 	mla	r2, r2, r6, r9
 801455a:	fb0b 2000 	mla	r0, fp, r0, r2
 801455e:	1200      	asrs	r0, r0, #8
 8014560:	7088      	strb	r0, [r1, #2]
 8014562:	b007      	add	sp, #28
 8014564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014568:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801456c:	9501      	str	r5, [sp, #4]
 801456e:	e78c      	b.n	801448a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8014570:	4682      	mov	sl, r0
 8014572:	46a4      	mov	ip, r4
 8014574:	46a8      	mov	r8, r5
 8014576:	9501      	str	r5, [sp, #4]
 8014578:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801457c:	e793      	b.n	80144a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801457e:	4682      	mov	sl, r0
 8014580:	46a4      	mov	ip, r4
 8014582:	46a8      	mov	r8, r5
 8014584:	e78f      	b.n	80144a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8014586:	4606      	mov	r6, r0
 8014588:	4627      	mov	r7, r4
 801458a:	46ae      	mov	lr, r5
 801458c:	e7a0      	b.n	80144d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801458e:	4606      	mov	r6, r0
 8014590:	4627      	mov	r7, r4
 8014592:	46ae      	mov	lr, r5
 8014594:	e7ac      	b.n	80144f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08014596 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459a:	b09b      	sub	sp, #108	; 0x6c
 801459c:	920b      	str	r2, [sp, #44]	; 0x2c
 801459e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80145a0:	9019      	str	r0, [sp, #100]	; 0x64
 80145a2:	9109      	str	r1, [sp, #36]	; 0x24
 80145a4:	6850      	ldr	r0, [r2, #4]
 80145a6:	9306      	str	r3, [sp, #24]
 80145a8:	6812      	ldr	r2, [r2, #0]
 80145aa:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80145ae:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80145b2:	fb00 1303 	mla	r3, r0, r3, r1
 80145b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80145ba:	18d3      	adds	r3, r2, r3
 80145bc:	9307      	str	r3, [sp, #28]
 80145be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	9308      	str	r3, [sp, #32]
 80145c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	dc03      	bgt.n	80145d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80145ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	f340 81ab 	ble.w	8014928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80145d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80145d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80145d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80145dc:	1e48      	subs	r0, r1, #1
 80145de:	1e55      	subs	r5, r2, #1
 80145e0:	9b06      	ldr	r3, [sp, #24]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f340 80b1 	ble.w	801474a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80145e8:	ea5f 462b 	movs.w	r6, fp, asr #16
 80145ec:	ea4f 4324 	mov.w	r3, r4, asr #16
 80145f0:	d406      	bmi.n	8014600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145f2:	4286      	cmp	r6, r0
 80145f4:	da04      	bge.n	8014600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	db02      	blt.n	8014600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145fa:	42ab      	cmp	r3, r5
 80145fc:	f2c0 80a6 	blt.w	801474c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8014600:	3601      	adds	r6, #1
 8014602:	f100 8097 	bmi.w	8014734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8014606:	42b1      	cmp	r1, r6
 8014608:	f2c0 8094 	blt.w	8014734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801460c:	3301      	adds	r3, #1
 801460e:	f100 8091 	bmi.w	8014734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8014612:	429a      	cmp	r2, r3
 8014614:	f2c0 808e 	blt.w	8014734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8014618:	9b06      	ldr	r3, [sp, #24]
 801461a:	9e07      	ldr	r6, [sp, #28]
 801461c:	930a      	str	r3, [sp, #40]	; 0x28
 801461e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014620:	2b00      	cmp	r3, #0
 8014622:	f340 80b0 	ble.w	8014786 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014626:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014628:	1425      	asrs	r5, r4, #16
 801462a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801462c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8014630:	68c7      	ldr	r7, [r0, #12]
 8014632:	ea5f 402b 	movs.w	r0, fp, asr #16
 8014636:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801463a:	689b      	ldr	r3, [r3, #8]
 801463c:	f100 80ea 	bmi.w	8014814 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014640:	f103 3cff 	add.w	ip, r3, #4294967295
 8014644:	4560      	cmp	r0, ip
 8014646:	f280 80e5 	bge.w	8014814 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801464a:	2d00      	cmp	r5, #0
 801464c:	f2c0 80e2 	blt.w	8014814 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014650:	f107 3cff 	add.w	ip, r7, #4294967295
 8014654:	4565      	cmp	r5, ip
 8014656:	f280 80dd 	bge.w	8014814 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801465a:	b21b      	sxth	r3, r3
 801465c:	fb05 0003 	mla	r0, r5, r3, r0
 8014660:	9d08      	ldr	r5, [sp, #32]
 8014662:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014666:	182f      	adds	r7, r5, r0
 8014668:	5c2d      	ldrb	r5, [r5, r0]
 801466a:	7878      	ldrb	r0, [r7, #1]
 801466c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8014670:	900c      	str	r0, [sp, #48]	; 0x30
 8014672:	f897 9003 	ldrb.w	r9, [r7, #3]
 8014676:	f897 8004 	ldrb.w	r8, [r7, #4]
 801467a:	f897 a005 	ldrb.w	sl, [r7, #5]
 801467e:	b1c9      	cbz	r1, 80146b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014680:	f04f 0c03 	mov.w	ip, #3
 8014684:	f06f 0004 	mvn.w	r0, #4
 8014688:	3705      	adds	r7, #5
 801468a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801468e:	eb07 0c03 	add.w	ip, r7, r3
 8014692:	5cfb      	ldrb	r3, [r7, r3]
 8014694:	930d      	str	r3, [sp, #52]	; 0x34
 8014696:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801469a:	930f      	str	r3, [sp, #60]	; 0x3c
 801469c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80146a0:	9311      	str	r3, [sp, #68]	; 0x44
 80146a2:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80146a6:	930e      	str	r3, [sp, #56]	; 0x38
 80146a8:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80146ac:	9310      	str	r3, [sp, #64]	; 0x40
 80146ae:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80146b2:	9312      	str	r3, [sp, #72]	; 0x48
 80146b4:	b292      	uxth	r2, r2
 80146b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80146b8:	b289      	uxth	r1, r1
 80146ba:	fb02 f301 	mul.w	r3, r2, r1
 80146be:	0112      	lsls	r2, r2, #4
 80146c0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80146c4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80146c8:	1ad2      	subs	r2, r2, r3
 80146ca:	b289      	uxth	r1, r1
 80146cc:	b292      	uxth	r2, r2
 80146ce:	1a7f      	subs	r7, r7, r1
 80146d0:	fb02 f909 	mul.w	r9, r2, r9
 80146d4:	b2bf      	uxth	r7, r7
 80146d6:	fb02 f808 	mul.w	r8, r2, r8
 80146da:	fb02 fa0a 	mul.w	sl, r2, sl
 80146de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80146e0:	fb07 9905 	mla	r9, r7, r5, r9
 80146e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80146e6:	fb07 8800 	mla	r8, r7, r0, r8
 80146ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80146ec:	fb07 aa0e 	mla	sl, r7, lr, sl
 80146f0:	fb01 9905 	mla	r9, r1, r5, r9
 80146f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80146f6:	fb01 8800 	mla	r8, r1, r0, r8
 80146fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80146fc:	fb01 a102 	mla	r1, r1, r2, sl
 8014700:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014702:	fb03 9905 	mla	r9, r3, r5, r9
 8014706:	fb03 8800 	mla	r8, r3, r0, r8
 801470a:	fb03 1302 	mla	r3, r3, r2, r1
 801470e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014712:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014716:	121b      	asrs	r3, r3, #8
 8014718:	f886 9000 	strb.w	r9, [r6]
 801471c:	f886 8001 	strb.w	r8, [r6, #1]
 8014720:	70b3      	strb	r3, [r6, #2]
 8014722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014724:	3603      	adds	r6, #3
 8014726:	449b      	add	fp, r3
 8014728:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801472a:	441c      	add	r4, r3
 801472c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801472e:	3b01      	subs	r3, #1
 8014730:	930a      	str	r3, [sp, #40]	; 0x28
 8014732:	e774      	b.n	801461e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8014734:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014736:	449b      	add	fp, r3
 8014738:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801473a:	441c      	add	r4, r3
 801473c:	9b06      	ldr	r3, [sp, #24]
 801473e:	3b01      	subs	r3, #1
 8014740:	9306      	str	r3, [sp, #24]
 8014742:	9b07      	ldr	r3, [sp, #28]
 8014744:	3303      	adds	r3, #3
 8014746:	9307      	str	r3, [sp, #28]
 8014748:	e74a      	b.n	80145e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801474a:	d024      	beq.n	8014796 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801474c:	9b06      	ldr	r3, [sp, #24]
 801474e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014750:	3b01      	subs	r3, #1
 8014752:	fb00 b003 	mla	r0, r0, r3, fp
 8014756:	1400      	asrs	r0, r0, #16
 8014758:	f53f af5e 	bmi.w	8014618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801475c:	3901      	subs	r1, #1
 801475e:	4288      	cmp	r0, r1
 8014760:	f6bf af5a 	bge.w	8014618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8014764:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014766:	fb01 4303 	mla	r3, r1, r3, r4
 801476a:	141b      	asrs	r3, r3, #16
 801476c:	f53f af54 	bmi.w	8014618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8014770:	3a01      	subs	r2, #1
 8014772:	4293      	cmp	r3, r2
 8014774:	f6bf af50 	bge.w	8014618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8014778:	9b07      	ldr	r3, [sp, #28]
 801477a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801477e:	1cde      	adds	r6, r3, #3
 8014780:	f1be 0f00 	cmp.w	lr, #0
 8014784:	dc5f      	bgt.n	8014846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014786:	9b06      	ldr	r3, [sp, #24]
 8014788:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801478c:	9b07      	ldr	r3, [sp, #28]
 801478e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014792:	4423      	add	r3, r4
 8014794:	9307      	str	r3, [sp, #28]
 8014796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014798:	2b00      	cmp	r3, #0
 801479a:	f340 80c5 	ble.w	8014928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801479e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80147a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80147a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80147ac:	eef0 6a62 	vmov.f32	s13, s5
 80147b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80147b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80147b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80147bc:	ee16 ba90 	vmov	fp, s13
 80147c0:	eef0 6a43 	vmov.f32	s13, s6
 80147c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80147c8:	ee16 4a90 	vmov	r4, s13
 80147cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80147d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80147d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80147d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80147dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80147e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80147e4:	ee12 2a90 	vmov	r2, s5
 80147e8:	eef0 2a47 	vmov.f32	s5, s14
 80147ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80147f0:	ee13 2a10 	vmov	r2, s6
 80147f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80147f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80147f8:	eeb0 3a67 	vmov.f32	s6, s15
 80147fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8014800:	9328      	str	r3, [sp, #160]	; 0xa0
 8014802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014806:	3b01      	subs	r3, #1
 8014808:	9309      	str	r3, [sp, #36]	; 0x24
 801480a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801480c:	bf08      	it	eq
 801480e:	4613      	moveq	r3, r2
 8014810:	9306      	str	r3, [sp, #24]
 8014812:	e6d7      	b.n	80145c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014814:	f110 0c01 	adds.w	ip, r0, #1
 8014818:	d483      	bmi.n	8014722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801481a:	4563      	cmp	r3, ip
 801481c:	db81      	blt.n	8014722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801481e:	f115 0c01 	adds.w	ip, r5, #1
 8014822:	f53f af7e 	bmi.w	8014722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8014826:	4567      	cmp	r7, ip
 8014828:	f6ff af7b 	blt.w	8014722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801482c:	b23f      	sxth	r7, r7
 801482e:	b21b      	sxth	r3, r3
 8014830:	9700      	str	r7, [sp, #0]
 8014832:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8014836:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801483a:	9a08      	ldr	r2, [sp, #32]
 801483c:	4631      	mov	r1, r6
 801483e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014840:	f7ff fdf9 	bl	8014436 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8014844:	e76d      	b.n	8014722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8014846:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8014848:	ea4f 402b 	mov.w	r0, fp, asr #16
 801484c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8014850:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8014854:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8014858:	1421      	asrs	r1, r4, #16
 801485a:	930a      	str	r3, [sp, #40]	; 0x28
 801485c:	fb0c 0101 	mla	r1, ip, r1, r0
 8014860:	9808      	ldr	r0, [sp, #32]
 8014862:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014866:	1845      	adds	r5, r0, r1
 8014868:	5c40      	ldrb	r0, [r0, r1]
 801486a:	796f      	ldrb	r7, [r5, #5]
 801486c:	7869      	ldrb	r1, [r5, #1]
 801486e:	f895 8002 	ldrb.w	r8, [r5, #2]
 8014872:	f895 a003 	ldrb.w	sl, [r5, #3]
 8014876:	f895 9004 	ldrb.w	r9, [r5, #4]
 801487a:	970c      	str	r7, [sp, #48]	; 0x30
 801487c:	b1a2      	cbz	r2, 80148a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801487e:	2703      	movs	r7, #3
 8014880:	f06f 0304 	mvn.w	r3, #4
 8014884:	3505      	adds	r5, #5
 8014886:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801488a:	eb05 070c 	add.w	r7, r5, ip
 801488e:	f815 500c 	ldrb.w	r5, [r5, ip]
 8014892:	9513      	str	r5, [sp, #76]	; 0x4c
 8014894:	787d      	ldrb	r5, [r7, #1]
 8014896:	9515      	str	r5, [sp, #84]	; 0x54
 8014898:	78bd      	ldrb	r5, [r7, #2]
 801489a:	9517      	str	r5, [sp, #92]	; 0x5c
 801489c:	78fd      	ldrb	r5, [r7, #3]
 801489e:	9514      	str	r5, [sp, #80]	; 0x50
 80148a0:	793d      	ldrb	r5, [r7, #4]
 80148a2:	9516      	str	r5, [sp, #88]	; 0x58
 80148a4:	797d      	ldrb	r5, [r7, #5]
 80148a6:	9518      	str	r5, [sp, #96]	; 0x60
 80148a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80148ac:	b292      	uxth	r2, r2
 80148ae:	3603      	adds	r6, #3
 80148b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80148b4:	fb03 f502 	mul.w	r5, r3, r2
 80148b8:	011b      	lsls	r3, r3, #4
 80148ba:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80148be:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80148c2:	1b5b      	subs	r3, r3, r5
 80148c4:	b292      	uxth	r2, r2
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	1abf      	subs	r7, r7, r2
 80148ca:	fb03 f909 	mul.w	r9, r3, r9
 80148ce:	b2bf      	uxth	r7, r7
 80148d0:	fb03 fa0a 	mul.w	sl, r3, sl
 80148d4:	fb07 9901 	mla	r9, r7, r1, r9
 80148d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80148da:	fb07 aa00 	mla	sl, r7, r0, sl
 80148de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80148e0:	fb02 9901 	mla	r9, r2, r1, r9
 80148e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80148e6:	fb02 aa00 	mla	sl, r2, r0, sl
 80148ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 80148ec:	fb05 9901 	mla	r9, r5, r1, r9
 80148f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148f2:	fb05 aa00 	mla	sl, r5, r0, sl
 80148f6:	434b      	muls	r3, r1
 80148f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80148fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80148fe:	fb07 3308 	mla	r3, r7, r8, r3
 8014902:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014906:	f806 ac06 	strb.w	sl, [r6, #-6]
 801490a:	fb02 3201 	mla	r2, r2, r1, r3
 801490e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014910:	f806 9c05 	strb.w	r9, [r6, #-5]
 8014914:	fb05 2503 	mla	r5, r5, r3, r2
 8014918:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801491a:	122d      	asrs	r5, r5, #8
 801491c:	449b      	add	fp, r3
 801491e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014920:	f806 5c04 	strb.w	r5, [r6, #-4]
 8014924:	441c      	add	r4, r3
 8014926:	e72b      	b.n	8014780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8014928:	b01b      	add	sp, #108	; 0x6c
 801492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801492e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801492e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014932:	b087      	sub	sp, #28
 8014934:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8014938:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801493c:	fb05 7003 	mla	r0, r5, r3, r7
 8014940:	2d00      	cmp	r5, #0
 8014942:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8014946:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801494a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801494e:	f2c0 811f 	blt.w	8014b90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8014952:	45a8      	cmp	r8, r5
 8014954:	f340 811c 	ble.w	8014b90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8014958:	2f00      	cmp	r7, #0
 801495a:	f2c0 8117 	blt.w	8014b8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801495e:	42bb      	cmp	r3, r7
 8014960:	f340 8114 	ble.w	8014b8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8014964:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8014968:	1c7a      	adds	r2, r7, #1
 801496a:	f100 8114 	bmi.w	8014b96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801496e:	4293      	cmp	r3, r2
 8014970:	f340 8111 	ble.w	8014b96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8014974:	2c00      	cmp	r4, #0
 8014976:	f000 8110 	beq.w	8014b9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801497a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801497e:	3501      	adds	r5, #1
 8014980:	f100 810f 	bmi.w	8014ba2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8014984:	45a8      	cmp	r8, r5
 8014986:	f340 810c 	ble.w	8014ba2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801498a:	f1be 0f00 	cmp.w	lr, #0
 801498e:	f000 810b 	beq.w	8014ba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8014992:	2f00      	cmp	r7, #0
 8014994:	f2c0 8103 	blt.w	8014b9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8014998:	42bb      	cmp	r3, r7
 801499a:	f340 8100 	ble.w	8014b9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801499e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80149a2:	3701      	adds	r7, #1
 80149a4:	f100 8103 	bmi.w	8014bae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80149a8:	42bb      	cmp	r3, r7
 80149aa:	f340 8100 	ble.w	8014bae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80149ae:	2c00      	cmp	r4, #0
 80149b0:	f000 80ff 	beq.w	8014bb2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80149b4:	3301      	adds	r3, #1
 80149b6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149ba:	fa1f fc84 	uxth.w	ip, r4
 80149be:	fa1f fe8e 	uxth.w	lr, lr
 80149c2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80149c6:	fb0c f90e 	mul.w	r9, ip, lr
 80149ca:	0e13      	lsrs	r3, r2, #24
 80149cc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80149d0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80149d4:	9302      	str	r3, [sp, #8]
 80149d6:	ebac 0709 	sub.w	r7, ip, r9
 80149da:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80149de:	fa1f f48e 	uxth.w	r4, lr
 80149e2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80149e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80149ea:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80149ee:	fb0a fe0e 	mul.w	lr, sl, lr
 80149f2:	1b1b      	subs	r3, r3, r4
 80149f4:	fb0a f606 	mul.w	r6, sl, r6
 80149f8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80149fc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8014a00:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a0a:	b2bf      	uxth	r7, r7
 8014a0c:	9301      	str	r3, [sp, #4]
 8014a0e:	44e6      	add	lr, ip
 8014a10:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8014a14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014a18:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014a1c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8014a20:	9303      	str	r3, [sp, #12]
 8014a22:	0a33      	lsrs	r3, r6, #8
 8014a24:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8014a28:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014a2c:	9304      	str	r3, [sp, #16]
 8014a2e:	fb0b f606 	mul.w	r6, fp, r6
 8014a32:	fb0b f000 	mul.w	r0, fp, r0
 8014a36:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8014a3a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8014a3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014a42:	44b6      	add	lr, r6
 8014a44:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8014a48:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8014a4c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8014a50:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014a54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014a58:	fb08 f606 	mul.w	r6, r8, r6
 8014a5c:	0a03      	lsrs	r3, r0, #8
 8014a5e:	fb08 f505 	mul.w	r5, r8, r5
 8014a62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014a66:	0a30      	lsrs	r0, r6, #8
 8014a68:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8014a6c:	9305      	str	r3, [sp, #20]
 8014a6e:	0e13      	lsrs	r3, r2, #24
 8014a70:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014a74:	fb0e fe07 	mul.w	lr, lr, r7
 8014a78:	4430      	add	r0, r6
 8014a7a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8014a7e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8014a82:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8014a86:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014a8a:	0a00      	lsrs	r0, r0, #8
 8014a8c:	435e      	muls	r6, r3
 8014a8e:	0a2d      	lsrs	r5, r5, #8
 8014a90:	435a      	muls	r2, r3
 8014a92:	9b03      	ldr	r3, [sp, #12]
 8014a94:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8014a98:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8014a9c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014aa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014aa4:	44b4      	add	ip, r6
 8014aa6:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8014aaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014aae:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8014ab2:	9e01      	ldr	r6, [sp, #4]
 8014ab4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ab8:	fb03 ee06 	mla	lr, r3, r6, lr
 8014abc:	9b04      	ldr	r3, [sp, #16]
 8014abe:	0a12      	lsrs	r2, r2, #8
 8014ac0:	fb0c ee09 	mla	lr, ip, r9, lr
 8014ac4:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8014ac8:	9b05      	ldr	r3, [sp, #20]
 8014aca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014ace:	fb00 ee04 	mla	lr, r0, r4, lr
 8014ad2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014ad6:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8014ada:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8014ade:	9b01      	ldr	r3, [sp, #4]
 8014ae0:	fb07 fe0e 	mul.w	lr, r7, lr
 8014ae4:	fb07 f70b 	mul.w	r7, r7, fp
 8014ae8:	fb03 ee06 	mla	lr, r3, r6, lr
 8014aec:	fb03 730a 	mla	r3, r3, sl, r7
 8014af0:	fb09 e202 	mla	r2, r9, r2, lr
 8014af4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8014af8:	fb04 2e0e 	mla	lr, r4, lr, r2
 8014afc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8014b00:	fb04 3408 	mla	r4, r4, r8, r3
 8014b04:	9b02      	ldr	r3, [sp, #8]
 8014b06:	b292      	uxth	r2, r2
 8014b08:	fb09 4903 	mla	r9, r9, r3, r4
 8014b0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014b10:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8014b14:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8014b18:	fb09 f902 	mul.w	r9, r9, r2
 8014b1c:	ea40 0e0e 	orr.w	lr, r0, lr
 8014b20:	f109 0301 	add.w	r3, r9, #1
 8014b24:	fa5f f08e 	uxtb.w	r0, lr
 8014b28:	fb10 f002 	smulbb	r0, r0, r2
 8014b2c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8014b30:	780b      	ldrb	r3, [r1, #0]
 8014b32:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8014b36:	fa5f f989 	uxtb.w	r9, r9
 8014b3a:	fb03 0309 	mla	r3, r3, r9, r0
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	1c58      	adds	r0, r3, #1
 8014b42:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8014b46:	7848      	ldrb	r0, [r1, #1]
 8014b48:	fb10 f009 	smulbb	r0, r0, r9
 8014b4c:	121b      	asrs	r3, r3, #8
 8014b4e:	700b      	strb	r3, [r1, #0]
 8014b50:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8014b54:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8014b58:	fb03 0302 	mla	r3, r3, r2, r0
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	1c58      	adds	r0, r3, #1
 8014b60:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8014b64:	121b      	asrs	r3, r3, #8
 8014b66:	704b      	strb	r3, [r1, #1]
 8014b68:	788b      	ldrb	r3, [r1, #2]
 8014b6a:	fb13 f909 	smulbb	r9, r3, r9
 8014b6e:	fb0e 9e02 	mla	lr, lr, r2, r9
 8014b72:	fa1f fe8e 	uxth.w	lr, lr
 8014b76:	f10e 0301 	add.w	r3, lr, #1
 8014b7a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8014b7e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014b82:	f881 e002 	strb.w	lr, [r1, #2]
 8014b86:	b007      	add	sp, #28
 8014b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8c:	2600      	movs	r6, #0
 8014b8e:	e6eb      	b.n	8014968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8014b90:	2000      	movs	r0, #0
 8014b92:	4606      	mov	r6, r0
 8014b94:	e6f3      	b.n	801497e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8014b96:	2000      	movs	r0, #0
 8014b98:	e6f1      	b.n	801497e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	e6ef      	b.n	801497e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8014b9e:	2500      	movs	r5, #0
 8014ba0:	e6ff      	b.n	80149a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	4615      	mov	r5, r2
 8014ba6:	e708      	b.n	80149ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8014ba8:	4672      	mov	r2, lr
 8014baa:	4675      	mov	r5, lr
 8014bac:	e705      	b.n	80149ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8014bae:	2200      	movs	r2, #0
 8014bb0:	e703      	b.n	80149ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8014bb2:	4622      	mov	r2, r4
 8014bb4:	e701      	b.n	80149ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08014bb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bba:	b09d      	sub	sp, #116	; 0x74
 8014bbc:	9219      	str	r2, [sp, #100]	; 0x64
 8014bbe:	9307      	str	r3, [sp, #28]
 8014bc0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8014bc2:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8014bc6:	901b      	str	r0, [sp, #108]	; 0x6c
 8014bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8014bca:	6850      	ldr	r0, [r2, #4]
 8014bcc:	9117      	str	r1, [sp, #92]	; 0x5c
 8014bce:	6812      	ldr	r2, [r2, #0]
 8014bd0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8014bd4:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8014bd8:	fb00 1303 	mla	r3, r0, r3, r1
 8014bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014be0:	18d3      	adds	r3, r2, r3
 8014be2:	930a      	str	r3, [sp, #40]	; 0x28
 8014be4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	9310      	str	r3, [sp, #64]	; 0x40
 8014bea:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8014bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	dc03      	bgt.n	8014bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014bf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f340 8368 	ble.w	80152ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8014bfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014c04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014c08:	1e48      	subs	r0, r1, #1
 8014c0a:	1e57      	subs	r7, r2, #1
 8014c0c:	9b07      	ldr	r3, [sp, #28]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	f340 8187 	ble.w	8014f22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8014c14:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8014c18:	ea4f 4326 	mov.w	r3, r6, asr #16
 8014c1c:	d406      	bmi.n	8014c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c1e:	4584      	cmp	ip, r0
 8014c20:	da04      	bge.n	8014c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	db02      	blt.n	8014c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c26:	42bb      	cmp	r3, r7
 8014c28:	f2c0 817c 	blt.w	8014f24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8014c2c:	f11c 0c01 	adds.w	ip, ip, #1
 8014c30:	f100 816c 	bmi.w	8014f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8014c34:	4561      	cmp	r1, ip
 8014c36:	f2c0 8169 	blt.w	8014f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	f100 8166 	bmi.w	8014f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8014c40:	429a      	cmp	r2, r3
 8014c42:	f2c0 8163 	blt.w	8014f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8014c46:	9b07      	ldr	r3, [sp, #28]
 8014c48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014c4a:	9318      	str	r3, [sp, #96]	; 0x60
 8014c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	f340 8186 	ble.w	8014f60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8014c54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c56:	142a      	asrs	r2, r5, #16
 8014c58:	ea4f 4026 	mov.w	r0, r6, asr #16
 8014c5c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8014c60:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8014c64:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8014c68:	f100 81cb 	bmi.w	8015002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8014c6c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014c70:	4542      	cmp	r2, r8
 8014c72:	f280 81c6 	bge.w	8015002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8014c76:	2800      	cmp	r0, #0
 8014c78:	f2c0 81c3 	blt.w	8015002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8014c7c:	f103 38ff 	add.w	r8, r3, #4294967295
 8014c80:	4540      	cmp	r0, r8
 8014c82:	f280 81be 	bge.w	8015002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8014c86:	fa0f f38e 	sxth.w	r3, lr
 8014c8a:	fb00 2203 	mla	r2, r0, r3, r2
 8014c8e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014c90:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8014c94:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8014c98:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	f000 81a6 	beq.w	8014fee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8014ca2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014ca6:	900c      	str	r0, [sp, #48]	; 0x30
 8014ca8:	0e00      	lsrs	r0, r0, #24
 8014caa:	9013      	str	r0, [sp, #76]	; 0x4c
 8014cac:	f1bc 0f00 	cmp.w	ip, #0
 8014cb0:	d00f      	beq.n	8014cd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8014cb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	009b      	lsls	r3, r3, #2
 8014cba:	3304      	adds	r3, #4
 8014cbc:	eb08 0003 	add.w	r0, r8, r3
 8014cc0:	f858 3003 	ldr.w	r3, [r8, r3]
 8014cc4:	9308      	str	r3, [sp, #32]
 8014cc6:	0e1b      	lsrs	r3, r3, #24
 8014cc8:	9311      	str	r3, [sp, #68]	; 0x44
 8014cca:	6843      	ldr	r3, [r0, #4]
 8014ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8014cce:	0e1b      	lsrs	r3, r3, #24
 8014cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8014cd2:	b289      	uxth	r1, r1
 8014cd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014cd6:	fa1f fc8c 	uxth.w	ip, ip
 8014cda:	0108      	lsls	r0, r1, #4
 8014cdc:	fb01 f90c 	mul.w	r9, r1, ip
 8014ce0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8014ce4:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8014ce8:	eba0 0809 	sub.w	r8, r0, r9
 8014cec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014cee:	fa1f f18c 	uxth.w	r1, ip
 8014cf2:	fa1f f888 	uxth.w	r8, r8
 8014cf6:	1a5b      	subs	r3, r3, r1
 8014cf8:	fb08 f000 	mul.w	r0, r8, r0
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	fb03 000e 	mla	r0, r3, lr, r0
 8014d02:	fb01 0004 	mla	r0, r1, r4, r0
 8014d06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014d08:	fb09 0004 	mla	r0, r9, r4, r0
 8014d0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014d10:	2800      	cmp	r0, #0
 8014d12:	f000 80f2 	beq.w	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8014d16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014d1a:	d01b      	beq.n	8014d54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8014d1c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8014d20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014d24:	fb0e fa0a 	mul.w	sl, lr, sl
 8014d28:	fb0e fe02 	mul.w	lr, lr, r2
 8014d2c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8014d30:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014d34:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8014d38:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014d3c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014d40:	4452      	add	r2, sl
 8014d42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d46:	0a12      	lsrs	r2, r2, #8
 8014d48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014d4c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014d50:	ea42 020c 	orr.w	r2, r2, ip
 8014d54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d56:	2cff      	cmp	r4, #255	; 0xff
 8014d58:	d021      	beq.n	8014d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8014d5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014d5c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014d60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d62:	fb04 fb0b 	mul.w	fp, r4, fp
 8014d66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014d68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014d72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014d76:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014d82:	44de      	add	lr, fp
 8014d84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014d88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014d8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d98:	ea4e 040a 	orr.w	r4, lr, sl
 8014d9c:	940c      	str	r4, [sp, #48]	; 0x30
 8014d9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014da0:	2cff      	cmp	r4, #255	; 0xff
 8014da2:	d021      	beq.n	8014de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8014da4:	9c08      	ldr	r4, [sp, #32]
 8014da6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014daa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014dac:	fb04 fb0b 	mul.w	fp, r4, fp
 8014db0:	9c08      	ldr	r4, [sp, #32]
 8014db2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014db6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014db8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014dbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014dc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8014dc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014dc8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014dcc:	44de      	add	lr, fp
 8014dce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014dd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014dd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014dda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014dde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014de2:	ea4e 040a 	orr.w	r4, lr, sl
 8014de6:	9408      	str	r4, [sp, #32]
 8014de8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014dea:	2cff      	cmp	r4, #255	; 0xff
 8014dec:	d021      	beq.n	8014e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014dee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014df0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014df4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014df6:	fb04 fb0b 	mul.w	fp, r4, fp
 8014dfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014dfc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014e00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014e02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014e06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014e0a:	fb04 fa0a 	mul.w	sl, r4, sl
 8014e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e12:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014e16:	44de      	add	lr, fp
 8014e18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014e1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014e20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014e24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014e2c:	ea4e 040a 	orr.w	r4, lr, sl
 8014e30:	940d      	str	r4, [sp, #52]	; 0x34
 8014e32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014e34:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8014e38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014e3c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014e40:	9c08      	ldr	r4, [sp, #32]
 8014e42:	fb08 fc0c 	mul.w	ip, r8, ip
 8014e46:	fb03 cc0e 	mla	ip, r3, lr, ip
 8014e4a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014e4e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014e50:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014e54:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014e58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014e5a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014e5e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014e62:	fb08 f80e 	mul.w	r8, r8, lr
 8014e66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014e6a:	fb03 8202 	mla	r2, r3, r2, r8
 8014e6e:	9b08      	ldr	r3, [sp, #32]
 8014e70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014e74:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8014e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e7a:	fb01 220a 	mla	r2, r1, sl, r2
 8014e7e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8014e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e84:	fb09 2901 	mla	r9, r9, r1, r2
 8014e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e8a:	4343      	muls	r3, r0
 8014e8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014e90:	1c58      	adds	r0, r3, #1
 8014e92:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014e96:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014e9a:	783b      	ldrb	r3, [r7, #0]
 8014e9c:	ea4c 0c09 	orr.w	ip, ip, r9
 8014ea0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8014ea4:	fa5f f28c 	uxtb.w	r2, ip
 8014ea8:	b2c0      	uxtb	r0, r0
 8014eaa:	fb12 f201 	smulbb	r2, r2, r1
 8014eae:	fb03 2300 	mla	r3, r3, r0, r2
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	1c5a      	adds	r2, r3, #1
 8014eb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014eba:	787a      	ldrb	r2, [r7, #1]
 8014ebc:	fb12 f200 	smulbb	r2, r2, r0
 8014ec0:	121b      	asrs	r3, r3, #8
 8014ec2:	703b      	strb	r3, [r7, #0]
 8014ec4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014ec8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014ecc:	fb03 2301 	mla	r3, r3, r1, r2
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	1c5a      	adds	r2, r3, #1
 8014ed4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014ed8:	121b      	asrs	r3, r3, #8
 8014eda:	707b      	strb	r3, [r7, #1]
 8014edc:	78bb      	ldrb	r3, [r7, #2]
 8014ede:	fb13 f000 	smulbb	r0, r3, r0
 8014ee2:	fb0c 0c01 	mla	ip, ip, r1, r0
 8014ee6:	fa1f fc8c 	uxth.w	ip, ip
 8014eea:	f10c 0301 	add.w	r3, ip, #1
 8014eee:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014ef2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014ef6:	f887 c002 	strb.w	ip, [r7, #2]
 8014efa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014efc:	3703      	adds	r7, #3
 8014efe:	441d      	add	r5, r3
 8014f00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014f02:	441e      	add	r6, r3
 8014f04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014f06:	3b01      	subs	r3, #1
 8014f08:	9318      	str	r3, [sp, #96]	; 0x60
 8014f0a:	e69f      	b.n	8014c4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014f0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014f0e:	441d      	add	r5, r3
 8014f10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014f12:	441e      	add	r6, r3
 8014f14:	9b07      	ldr	r3, [sp, #28]
 8014f16:	3b01      	subs	r3, #1
 8014f18:	9307      	str	r3, [sp, #28]
 8014f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f1c:	3303      	adds	r3, #3
 8014f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f20:	e674      	b.n	8014c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014f22:	d025      	beq.n	8014f70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8014f24:	9b07      	ldr	r3, [sp, #28]
 8014f26:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	fb00 5003 	mla	r0, r0, r3, r5
 8014f2e:	1400      	asrs	r0, r0, #16
 8014f30:	f53f ae89 	bmi.w	8014c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014f34:	3901      	subs	r1, #1
 8014f36:	4288      	cmp	r0, r1
 8014f38:	f6bf ae85 	bge.w	8014c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014f3c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014f3e:	fb01 6303 	mla	r3, r1, r3, r6
 8014f42:	141b      	asrs	r3, r3, #16
 8014f44:	f53f ae7f 	bmi.w	8014c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014f48:	3a01      	subs	r2, #1
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	f6bf ae7b 	bge.w	8014c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f52:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014f56:	f103 0e03 	add.w	lr, r3, #3
 8014f5a:	f1bb 0f00 	cmp.w	fp, #0
 8014f5e:	dc6e      	bgt.n	801503e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8014f60:	9b07      	ldr	r3, [sp, #28]
 8014f62:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014f6c:	4423      	add	r3, r4
 8014f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f340 81ab 	ble.w	80152ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8014f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014f82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014f86:	eef0 6a62 	vmov.f32	s13, s5
 8014f8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014f92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014f96:	ee16 5a90 	vmov	r5, s13
 8014f9a:	eef0 6a43 	vmov.f32	s13, s6
 8014f9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014fa2:	ee16 6a90 	vmov	r6, s13
 8014fa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014faa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014fae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014fb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014fb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014fba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014fbe:	ee12 2a90 	vmov	r2, s5
 8014fc2:	eef0 2a47 	vmov.f32	s5, s14
 8014fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fca:	ee13 2a10 	vmov	r2, s6
 8014fce:	9329      	str	r3, [sp, #164]	; 0xa4
 8014fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014fd2:	eeb0 3a67 	vmov.f32	s6, s15
 8014fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fda:	932a      	str	r3, [sp, #168]	; 0xa8
 8014fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014fe0:	3b01      	subs	r3, #1
 8014fe2:	9317      	str	r3, [sp, #92]	; 0x5c
 8014fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014fe6:	bf08      	it	eq
 8014fe8:	4613      	moveq	r3, r2
 8014fea:	9307      	str	r3, [sp, #28]
 8014fec:	e600      	b.n	8014bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8014fee:	f1bc 0f00 	cmp.w	ip, #0
 8014ff2:	f43f ae6e 	beq.w	8014cd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8014ff6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8014ffa:	9308      	str	r3, [sp, #32]
 8014ffc:	0e1b      	lsrs	r3, r3, #24
 8014ffe:	9311      	str	r3, [sp, #68]	; 0x44
 8015000:	e667      	b.n	8014cd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015002:	f112 0801 	adds.w	r8, r2, #1
 8015006:	f53f af78 	bmi.w	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801500a:	45c6      	cmp	lr, r8
 801500c:	f6ff af75 	blt.w	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015010:	f110 0801 	adds.w	r8, r0, #1
 8015014:	f53f af71 	bmi.w	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015018:	4543      	cmp	r3, r8
 801501a:	f6ff af6e 	blt.w	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801501e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015020:	b21b      	sxth	r3, r3
 8015022:	9201      	str	r2, [sp, #4]
 8015024:	9300      	str	r3, [sp, #0]
 8015026:	fa0f f38e 	sxth.w	r3, lr
 801502a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801502c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015030:	e9cd c404 	strd	ip, r4, [sp, #16]
 8015034:	4639      	mov	r1, r7
 8015036:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015038:	f7ff fc79 	bl	801492e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801503c:	e75d      	b.n	8014efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801503e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015040:	142f      	asrs	r7, r5, #16
 8015042:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015044:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015048:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801504c:	1433      	asrs	r3, r6, #16
 801504e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8015052:	fb02 7303 	mla	r3, r2, r3, r7
 8015056:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801505a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801505e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8015062:	2900      	cmp	r1, #0
 8015064:	f000 812a 	beq.w	80152bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8015068:	687c      	ldr	r4, [r7, #4]
 801506a:	940e      	str	r4, [sp, #56]	; 0x38
 801506c:	0e24      	lsrs	r4, r4, #24
 801506e:	9415      	str	r4, [sp, #84]	; 0x54
 8015070:	b178      	cbz	r0, 8015092 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8015072:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8015076:	3a01      	subs	r2, #1
 8015078:	0092      	lsls	r2, r2, #2
 801507a:	3204      	adds	r2, #4
 801507c:	eb07 0802 	add.w	r8, r7, r2
 8015080:	58ba      	ldr	r2, [r7, r2]
 8015082:	9209      	str	r2, [sp, #36]	; 0x24
 8015084:	0e12      	lsrs	r2, r2, #24
 8015086:	9212      	str	r2, [sp, #72]	; 0x48
 8015088:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801508c:	920f      	str	r2, [sp, #60]	; 0x3c
 801508e:	0e12      	lsrs	r2, r2, #24
 8015090:	9216      	str	r2, [sp, #88]	; 0x58
 8015092:	b289      	uxth	r1, r1
 8015094:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015096:	b280      	uxth	r0, r0
 8015098:	fb01 f900 	mul.w	r9, r1, r0
 801509c:	0109      	lsls	r1, r1, #4
 801509e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80150a2:	eba1 0809 	sub.w	r8, r1, r9
 80150a6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80150aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80150ac:	b280      	uxth	r0, r0
 80150ae:	fa1f f888 	uxth.w	r8, r8
 80150b2:	1a12      	subs	r2, r2, r0
 80150b4:	fb08 f101 	mul.w	r1, r8, r1
 80150b8:	b292      	uxth	r2, r2
 80150ba:	fb02 110c 	mla	r1, r2, ip, r1
 80150be:	fb00 1104 	mla	r1, r0, r4, r1
 80150c2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80150c4:	fb09 1104 	mla	r1, r9, r4, r1
 80150c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80150cc:	2900      	cmp	r1, #0
 80150ce:	f000 80ec 	beq.w	80152aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80150d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80150d6:	d019      	beq.n	801510c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80150d8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80150dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80150e0:	fb0c fa0a 	mul.w	sl, ip, sl
 80150e4:	fb0c fc03 	mul.w	ip, ip, r3
 80150e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80150ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80150f0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80150f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80150f8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80150fc:	4453      	add	r3, sl
 80150fe:	0a3f      	lsrs	r7, r7, #8
 8015100:	0a1b      	lsrs	r3, r3, #8
 8015102:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015106:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801510a:	433b      	orrs	r3, r7
 801510c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801510e:	2cff      	cmp	r4, #255	; 0xff
 8015110:	d020      	beq.n	8015154 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8015112:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015114:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015118:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801511a:	4367      	muls	r7, r4
 801511c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801511e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015122:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015126:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015128:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801512c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015130:	fb04 fa0a 	mul.w	sl, r4, sl
 8015134:	44bc      	add	ip, r7
 8015136:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801513a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801513e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015142:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015146:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801514a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801514e:	ea4c 040a 	orr.w	r4, ip, sl
 8015152:	940e      	str	r4, [sp, #56]	; 0x38
 8015154:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015156:	2cff      	cmp	r4, #255	; 0xff
 8015158:	d020      	beq.n	801519c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801515a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801515c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015160:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015162:	4367      	muls	r7, r4
 8015164:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015166:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801516a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801516e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015170:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015174:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015178:	fb04 fa0a 	mul.w	sl, r4, sl
 801517c:	44bc      	add	ip, r7
 801517e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015182:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015186:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801518a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801518e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015192:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015196:	ea4c 040a 	orr.w	r4, ip, sl
 801519a:	9409      	str	r4, [sp, #36]	; 0x24
 801519c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801519e:	2cff      	cmp	r4, #255	; 0xff
 80151a0:	d020      	beq.n	80151e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80151a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80151a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80151a8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80151aa:	4367      	muls	r7, r4
 80151ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80151ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80151b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80151b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80151b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80151bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80151c4:	44bc      	add	ip, r7
 80151c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80151ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80151ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80151d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80151da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80151de:	ea4c 040a 	orr.w	r4, ip, sl
 80151e2:	940f      	str	r4, [sp, #60]	; 0x3c
 80151e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80151e6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80151ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80151ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80151f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80151f4:	fb08 f707 	mul.w	r7, r8, r7
 80151f8:	fb02 770c 	mla	r7, r2, ip, r7
 80151fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015202:	fb00 770c 	mla	r7, r0, ip, r7
 8015206:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801520a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801520c:	fb09 770c 	mla	r7, r9, ip, r7
 8015210:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8015214:	fb08 f80c 	mul.w	r8, r8, ip
 8015218:	0a3f      	lsrs	r7, r7, #8
 801521a:	fb02 8303 	mla	r3, r2, r3, r8
 801521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015220:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015224:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801522a:	fb00 330a 	mla	r3, r0, sl, r3
 801522e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8015232:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015234:	fb09 3c0c 	mla	ip, r9, ip, r3
 8015238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801523a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801523e:	434b      	muls	r3, r1
 8015240:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015244:	1c59      	adds	r1, r3, #1
 8015246:	ea47 070c 	orr.w	r7, r7, ip
 801524a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801524e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8015252:	b2fa      	uxtb	r2, r7
 8015254:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8015258:	fb12 f200 	smulbb	r2, r2, r0
 801525c:	b2c9      	uxtb	r1, r1
 801525e:	fb03 2301 	mla	r3, r3, r1, r2
 8015262:	b29b      	uxth	r3, r3
 8015264:	1c5a      	adds	r2, r3, #1
 8015266:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801526a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801526e:	fb12 f201 	smulbb	r2, r2, r1
 8015272:	121b      	asrs	r3, r3, #8
 8015274:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8015278:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801527c:	0c3f      	lsrs	r7, r7, #16
 801527e:	fb03 2300 	mla	r3, r3, r0, r2
 8015282:	b29b      	uxth	r3, r3
 8015284:	1c5a      	adds	r2, r3, #1
 8015286:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801528a:	121b      	asrs	r3, r3, #8
 801528c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8015290:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8015294:	fb13 f101 	smulbb	r1, r3, r1
 8015298:	fb07 1700 	mla	r7, r7, r0, r1
 801529c:	b2bf      	uxth	r7, r7
 801529e:	1c79      	adds	r1, r7, #1
 80152a0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80152a4:	123f      	asrs	r7, r7, #8
 80152a6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80152aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80152ac:	f10e 0e03 	add.w	lr, lr, #3
 80152b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152b4:	441d      	add	r5, r3
 80152b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80152b8:	441e      	add	r6, r3
 80152ba:	e64e      	b.n	8014f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80152bc:	2800      	cmp	r0, #0
 80152be:	f43f aee8 	beq.w	8015092 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80152c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80152c6:	9209      	str	r2, [sp, #36]	; 0x24
 80152c8:	0e12      	lsrs	r2, r2, #24
 80152ca:	9212      	str	r2, [sp, #72]	; 0x48
 80152cc:	e6e1      	b.n	8015092 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80152ce:	b01d      	add	sp, #116	; 0x74
 80152d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	b087      	sub	sp, #28
 80152da:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80152de:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80152e2:	fb05 7003 	mla	r0, r5, r3, r7
 80152e6:	2d00      	cmp	r5, #0
 80152e8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80152ec:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80152f0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80152f4:	f2c0 810a 	blt.w	801550c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80152f8:	45a8      	cmp	r8, r5
 80152fa:	f340 8107 	ble.w	801550c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80152fe:	2f00      	cmp	r7, #0
 8015300:	f2c0 8102 	blt.w	8015508 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8015304:	42bb      	cmp	r3, r7
 8015306:	f340 80ff 	ble.w	8015508 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801530a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801530e:	1c7a      	adds	r2, r7, #1
 8015310:	f100 80ff 	bmi.w	8015512 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8015314:	4293      	cmp	r3, r2
 8015316:	f340 80fc 	ble.w	8015512 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801531a:	2c00      	cmp	r4, #0
 801531c:	f000 80fb 	beq.w	8015516 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8015320:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015324:	3501      	adds	r5, #1
 8015326:	f100 80fa 	bmi.w	801551e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801532a:	45a8      	cmp	r8, r5
 801532c:	f340 80f7 	ble.w	801551e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8015330:	f1be 0f00 	cmp.w	lr, #0
 8015334:	f000 80f6 	beq.w	8015524 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8015338:	2f00      	cmp	r7, #0
 801533a:	f2c0 80ee 	blt.w	801551a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801533e:	42bb      	cmp	r3, r7
 8015340:	f340 80eb 	ble.w	801551a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8015344:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8015348:	3701      	adds	r7, #1
 801534a:	f100 80ee 	bmi.w	801552a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801534e:	42bb      	cmp	r3, r7
 8015350:	f340 80eb 	ble.w	801552a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8015354:	2c00      	cmp	r4, #0
 8015356:	f000 80ea 	beq.w	801552e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801535a:	3301      	adds	r3, #1
 801535c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015360:	fa1f fc84 	uxth.w	ip, r4
 8015364:	fa1f fe8e 	uxth.w	lr, lr
 8015368:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801536c:	fb0c f90e 	mul.w	r9, ip, lr
 8015370:	0e13      	lsrs	r3, r2, #24
 8015372:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015376:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801537a:	9302      	str	r3, [sp, #8]
 801537c:	ebac 0709 	sub.w	r7, ip, r9
 8015380:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8015384:	fa1f f48e 	uxth.w	r4, lr
 8015388:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801538c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015390:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8015394:	fb0a fe0e 	mul.w	lr, sl, lr
 8015398:	1b1b      	subs	r3, r3, r4
 801539a:	fb0a f606 	mul.w	r6, sl, r6
 801539e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80153a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80153a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80153aa:	b29b      	uxth	r3, r3
 80153ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80153b0:	b2bf      	uxth	r7, r7
 80153b2:	9301      	str	r3, [sp, #4]
 80153b4:	44e6      	add	lr, ip
 80153b6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80153ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80153be:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80153c2:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80153c6:	9303      	str	r3, [sp, #12]
 80153c8:	0a33      	lsrs	r3, r6, #8
 80153ca:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80153ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80153d2:	9304      	str	r3, [sp, #16]
 80153d4:	fb0b f606 	mul.w	r6, fp, r6
 80153d8:	fb0b f000 	mul.w	r0, fp, r0
 80153dc:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80153e0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80153e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80153e8:	44b6      	add	lr, r6
 80153ea:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80153ee:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80153f2:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80153f6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80153fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80153fe:	fb08 f606 	mul.w	r6, r8, r6
 8015402:	0a03      	lsrs	r3, r0, #8
 8015404:	fb08 f505 	mul.w	r5, r8, r5
 8015408:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801540c:	0a30      	lsrs	r0, r6, #8
 801540e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015412:	9305      	str	r3, [sp, #20]
 8015414:	0e13      	lsrs	r3, r2, #24
 8015416:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801541a:	fb0e fe07 	mul.w	lr, lr, r7
 801541e:	4430      	add	r0, r6
 8015420:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8015424:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015428:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801542c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015430:	0a00      	lsrs	r0, r0, #8
 8015432:	435e      	muls	r6, r3
 8015434:	0a2d      	lsrs	r5, r5, #8
 8015436:	435a      	muls	r2, r3
 8015438:	9b03      	ldr	r3, [sp, #12]
 801543a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801543e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015442:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015446:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801544a:	44b4      	add	ip, r6
 801544c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8015450:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015454:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8015458:	9e01      	ldr	r6, [sp, #4]
 801545a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801545e:	fb03 ee06 	mla	lr, r3, r6, lr
 8015462:	9b04      	ldr	r3, [sp, #16]
 8015464:	0a12      	lsrs	r2, r2, #8
 8015466:	fb0c ee09 	mla	lr, ip, r9, lr
 801546a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801546e:	9b05      	ldr	r3, [sp, #20]
 8015470:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015474:	fb00 ee04 	mla	lr, r0, r4, lr
 8015478:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801547c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8015480:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8015484:	9b01      	ldr	r3, [sp, #4]
 8015486:	fb07 fe0e 	mul.w	lr, r7, lr
 801548a:	fb07 f70b 	mul.w	r7, r7, fp
 801548e:	fb03 ee06 	mla	lr, r3, r6, lr
 8015492:	fb03 730a 	mla	r3, r3, sl, r7
 8015496:	fb09 e202 	mla	r2, r9, r2, lr
 801549a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801549e:	fb04 2e0e 	mla	lr, r4, lr, r2
 80154a2:	fb04 3408 	mla	r4, r4, r8, r3
 80154a6:	9b02      	ldr	r3, [sp, #8]
 80154a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80154ac:	fb09 4903 	mla	r9, r9, r3, r4
 80154b0:	780b      	ldrb	r3, [r1, #0]
 80154b2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80154b6:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80154ba:	ea40 0e0e 	orr.w	lr, r0, lr
 80154be:	fa5f f989 	uxtb.w	r9, r9
 80154c2:	fb03 f209 	mul.w	r2, r3, r9
 80154c6:	1c53      	adds	r3, r2, #1
 80154c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80154cc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80154d0:	700b      	strb	r3, [r1, #0]
 80154d2:	784b      	ldrb	r3, [r1, #1]
 80154d4:	fb03 f309 	mul.w	r3, r3, r9
 80154d8:	1c5a      	adds	r2, r3, #1
 80154da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80154de:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80154e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80154e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80154ea:	704b      	strb	r3, [r1, #1]
 80154ec:	788b      	ldrb	r3, [r1, #2]
 80154ee:	fb03 f909 	mul.w	r9, r3, r9
 80154f2:	f109 0301 	add.w	r3, r9, #1
 80154f6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80154fa:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80154fe:	f881 e002 	strb.w	lr, [r1, #2]
 8015502:	b007      	add	sp, #28
 8015504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015508:	2600      	movs	r6, #0
 801550a:	e700      	b.n	801530e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801550c:	2000      	movs	r0, #0
 801550e:	4606      	mov	r6, r0
 8015510:	e708      	b.n	8015324 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8015512:	2000      	movs	r0, #0
 8015514:	e706      	b.n	8015324 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8015516:	4620      	mov	r0, r4
 8015518:	e704      	b.n	8015324 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801551a:	2500      	movs	r5, #0
 801551c:	e714      	b.n	8015348 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801551e:	2200      	movs	r2, #0
 8015520:	4615      	mov	r5, r2
 8015522:	e71d      	b.n	8015360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8015524:	4672      	mov	r2, lr
 8015526:	4675      	mov	r5, lr
 8015528:	e71a      	b.n	8015360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801552a:	2200      	movs	r2, #0
 801552c:	e718      	b.n	8015360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801552e:	4622      	mov	r2, r4
 8015530:	e716      	b.n	8015360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08015532 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015536:	b099      	sub	sp, #100	; 0x64
 8015538:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801553c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801553e:	9017      	str	r0, [sp, #92]	; 0x5c
 8015540:	9306      	str	r3, [sp, #24]
 8015542:	6850      	ldr	r0, [r2, #4]
 8015544:	6812      	ldr	r2, [r2, #0]
 8015546:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801554a:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801554e:	fb00 1303 	mla	r3, r0, r3, r1
 8015552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015556:	18d3      	adds	r3, r2, r3
 8015558:	9309      	str	r3, [sp, #36]	; 0x24
 801555a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	930e      	str	r3, [sp, #56]	; 0x38
 8015560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015562:	2b00      	cmp	r3, #0
 8015564:	dc03      	bgt.n	801556e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015566:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015568:	2b00      	cmp	r3, #0
 801556a:	f340 8360 	ble.w	8015c2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801556e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015570:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015574:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015578:	1e48      	subs	r0, r1, #1
 801557a:	1e57      	subs	r7, r2, #1
 801557c:	9b06      	ldr	r3, [sp, #24]
 801557e:	2b00      	cmp	r3, #0
 8015580:	f340 817b 	ble.w	801587a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8015584:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8015588:	ea4f 4326 	mov.w	r3, r6, asr #16
 801558c:	d406      	bmi.n	801559c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801558e:	4584      	cmp	ip, r0
 8015590:	da04      	bge.n	801559c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015592:	2b00      	cmp	r3, #0
 8015594:	db02      	blt.n	801559c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015596:	42bb      	cmp	r3, r7
 8015598:	f2c0 8170 	blt.w	801587c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801559c:	f11c 0c01 	adds.w	ip, ip, #1
 80155a0:	f100 8160 	bmi.w	8015864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80155a4:	4561      	cmp	r1, ip
 80155a6:	f2c0 815d 	blt.w	8015864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80155aa:	3301      	adds	r3, #1
 80155ac:	f100 815a 	bmi.w	8015864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80155b0:	429a      	cmp	r2, r3
 80155b2:	f2c0 8157 	blt.w	8015864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80155b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80155ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80155bc:	f1b8 0f00 	cmp.w	r8, #0
 80155c0:	f340 8179 	ble.w	80158b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80155c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80155c6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80155ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80155cc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80155d0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80155d4:	142a      	asrs	r2, r5, #16
 80155d6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80155da:	689b      	ldr	r3, [r3, #8]
 80155dc:	f100 81be 	bmi.w	801595c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155e0:	f103 39ff 	add.w	r9, r3, #4294967295
 80155e4:	454a      	cmp	r2, r9
 80155e6:	f280 81b9 	bge.w	801595c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155ea:	f1bc 0f00 	cmp.w	ip, #0
 80155ee:	f2c0 81b5 	blt.w	801595c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155f2:	f10e 39ff 	add.w	r9, lr, #4294967295
 80155f6:	45cc      	cmp	ip, r9
 80155f8:	f280 81b0 	bge.w	801595c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155fc:	b21b      	sxth	r3, r3
 80155fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015600:	fb0c 2203 	mla	r2, ip, r3, r2
 8015604:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8015608:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801560c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8015610:	2900      	cmp	r1, #0
 8015612:	f000 8197 	beq.w	8015944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8015616:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801561a:	940a      	str	r4, [sp, #40]	; 0x28
 801561c:	0e24      	lsrs	r4, r4, #24
 801561e:	9411      	str	r4, [sp, #68]	; 0x44
 8015620:	b180      	cbz	r0, 8015644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8015622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015626:	3b01      	subs	r3, #1
 8015628:	009b      	lsls	r3, r3, #2
 801562a:	3304      	adds	r3, #4
 801562c:	eb09 0c03 	add.w	ip, r9, r3
 8015630:	f859 3003 	ldr.w	r3, [r9, r3]
 8015634:	9307      	str	r3, [sp, #28]
 8015636:	0e1b      	lsrs	r3, r3, #24
 8015638:	930f      	str	r3, [sp, #60]	; 0x3c
 801563a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801563e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015640:	0e1b      	lsrs	r3, r3, #24
 8015642:	9312      	str	r3, [sp, #72]	; 0x48
 8015644:	b289      	uxth	r1, r1
 8015646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015648:	b280      	uxth	r0, r0
 801564a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801564c:	fb01 fa00 	mul.w	sl, r1, r0
 8015650:	0109      	lsls	r1, r1, #4
 8015652:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8015656:	eba1 090a 	sub.w	r9, r1, sl
 801565a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801565e:	b280      	uxth	r0, r0
 8015660:	fa1f f989 	uxth.w	r9, r9
 8015664:	1a09      	subs	r1, r1, r0
 8015666:	fb09 f303 	mul.w	r3, r9, r3
 801566a:	b289      	uxth	r1, r1
 801566c:	fb01 330e 	mla	r3, r1, lr, r3
 8015670:	fb00 3304 	mla	r3, r0, r4, r3
 8015674:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015676:	fb0a 3304 	mla	r3, sl, r4, r3
 801567a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801567e:	2b00      	cmp	r3, #0
 8015680:	f000 80e8 	beq.w	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8015684:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015688:	d01b      	beq.n	80156c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801568a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801568e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015692:	fb0e fb0b 	mul.w	fp, lr, fp
 8015696:	fb0e fe02 	mul.w	lr, lr, r2
 801569a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801569e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80156a2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80156a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80156aa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80156ae:	445a      	add	r2, fp
 80156b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80156b4:	0a12      	lsrs	r2, r2, #8
 80156b6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80156ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80156be:	ea42 020c 	orr.w	r2, r2, ip
 80156c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80156c4:	2cff      	cmp	r4, #255	; 0xff
 80156c6:	d021      	beq.n	801570c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80156c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80156ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80156ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80156d0:	fb04 fc0c 	mul.w	ip, r4, ip
 80156d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80156d6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80156da:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80156de:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80156e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80156e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80156e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80156ec:	44e6      	add	lr, ip
 80156ee:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80156f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80156f6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80156fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80156fe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8015702:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8015706:	ea4e 040b 	orr.w	r4, lr, fp
 801570a:	940a      	str	r4, [sp, #40]	; 0x28
 801570c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801570e:	2cff      	cmp	r4, #255	; 0xff
 8015710:	d021      	beq.n	8015756 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8015712:	9c07      	ldr	r4, [sp, #28]
 8015714:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015718:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801571a:	fb04 fc0c 	mul.w	ip, r4, ip
 801571e:	9c07      	ldr	r4, [sp, #28]
 8015720:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8015724:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8015728:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801572a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801572e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015732:	fb04 fb0b 	mul.w	fp, r4, fp
 8015736:	44e6      	add	lr, ip
 8015738:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801573c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015740:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8015744:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015748:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801574c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8015750:	ea4e 040b 	orr.w	r4, lr, fp
 8015754:	9407      	str	r4, [sp, #28]
 8015756:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015758:	2cff      	cmp	r4, #255	; 0xff
 801575a:	d021      	beq.n	80157a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801575c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801575e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015762:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015764:	fb04 fc0c 	mul.w	ip, r4, ip
 8015768:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801576a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801576e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8015772:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015774:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015778:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801577c:	fb04 fb0b 	mul.w	fp, r4, fp
 8015780:	44e6      	add	lr, ip
 8015782:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8015786:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801578a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801578e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015792:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8015796:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801579a:	ea4e 040b 	orr.w	r4, lr, fp
 801579e:	940b      	str	r4, [sp, #44]	; 0x2c
 80157a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80157a2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80157a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80157aa:	2bff      	cmp	r3, #255	; 0xff
 80157ac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80157b0:	9c07      	ldr	r4, [sp, #28]
 80157b2:	fb09 fc0c 	mul.w	ip, r9, ip
 80157b6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80157ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80157be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80157c0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80157c4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80157c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80157ca:	fb0a cc0e 	mla	ip, sl, lr, ip
 80157ce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80157d2:	fb09 f90e 	mul.w	r9, r9, lr
 80157d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80157da:	fb01 9202 	mla	r2, r1, r2, r9
 80157de:	9907      	ldr	r1, [sp, #28]
 80157e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80157e4:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80157e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157ea:	fb00 220b 	mla	r2, r0, fp, r2
 80157ee:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80157f2:	fb0a 2a00 	mla	sl, sl, r0, r2
 80157f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80157fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80157fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015802:	fa5f f08c 	uxtb.w	r0, ip
 8015806:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801580a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801580e:	f000 80a2 	beq.w	8015956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8015812:	43db      	mvns	r3, r3
 8015814:	783a      	ldrb	r2, [r7, #0]
 8015816:	f897 a002 	ldrb.w	sl, [r7, #2]
 801581a:	b2db      	uxtb	r3, r3
 801581c:	fb02 fe03 	mul.w	lr, r2, r3
 8015820:	fb0a fa03 	mul.w	sl, sl, r3
 8015824:	f10e 0201 	add.w	r2, lr, #1
 8015828:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801582c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015830:	703a      	strb	r2, [r7, #0]
 8015832:	787a      	ldrb	r2, [r7, #1]
 8015834:	fb02 f003 	mul.w	r0, r2, r3
 8015838:	f10a 0301 	add.w	r3, sl, #1
 801583c:	1c42      	adds	r2, r0, #1
 801583e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8015842:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8015846:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801584a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801584e:	707a      	strb	r2, [r7, #1]
 8015850:	f887 c002 	strb.w	ip, [r7, #2]
 8015854:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015856:	3703      	adds	r7, #3
 8015858:	f108 38ff 	add.w	r8, r8, #4294967295
 801585c:	441d      	add	r5, r3
 801585e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015860:	441e      	add	r6, r3
 8015862:	e6ab      	b.n	80155bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8015864:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015866:	441d      	add	r5, r3
 8015868:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801586a:	441e      	add	r6, r3
 801586c:	9b06      	ldr	r3, [sp, #24]
 801586e:	3b01      	subs	r3, #1
 8015870:	9306      	str	r3, [sp, #24]
 8015872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015874:	3303      	adds	r3, #3
 8015876:	9309      	str	r3, [sp, #36]	; 0x24
 8015878:	e680      	b.n	801557c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801587a:	d024      	beq.n	80158c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801587c:	9b06      	ldr	r3, [sp, #24]
 801587e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8015880:	3b01      	subs	r3, #1
 8015882:	fb00 5003 	mla	r0, r0, r3, r5
 8015886:	1400      	asrs	r0, r0, #16
 8015888:	f53f ae95 	bmi.w	80155b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801588c:	3901      	subs	r1, #1
 801588e:	4288      	cmp	r0, r1
 8015890:	f6bf ae91 	bge.w	80155b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015894:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015896:	fb01 6303 	mla	r3, r1, r3, r6
 801589a:	141b      	asrs	r3, r3, #16
 801589c:	f53f ae8b 	bmi.w	80155b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80158a0:	3a01      	subs	r2, #1
 80158a2:	4293      	cmp	r3, r2
 80158a4:	f6bf ae87 	bge.w	80155b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80158a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158aa:	f8dd b018 	ldr.w	fp, [sp, #24]
 80158ae:	1cdf      	adds	r7, r3, #3
 80158b0:	f1bb 0f00 	cmp.w	fp, #0
 80158b4:	dc6e      	bgt.n	8015994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80158b6:	9b06      	ldr	r3, [sp, #24]
 80158b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80158bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80158c2:	4423      	add	r3, r4
 80158c4:	9309      	str	r3, [sp, #36]	; 0x24
 80158c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	f340 81b0 	ble.w	8015c2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80158ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80158d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80158d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80158d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80158dc:	eef0 6a62 	vmov.f32	s13, s5
 80158e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80158e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80158e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80158ec:	ee16 5a90 	vmov	r5, s13
 80158f0:	eef0 6a43 	vmov.f32	s13, s6
 80158f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80158f8:	ee16 6a90 	vmov	r6, s13
 80158fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015900:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015904:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015908:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801590c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015910:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015914:	ee12 2a90 	vmov	r2, s5
 8015918:	eef0 2a47 	vmov.f32	s5, s14
 801591c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015920:	ee13 2a10 	vmov	r2, s6
 8015924:	9325      	str	r3, [sp, #148]	; 0x94
 8015926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015928:	eeb0 3a67 	vmov.f32	s6, s15
 801592c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015930:	9326      	str	r3, [sp, #152]	; 0x98
 8015932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015934:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015936:	3b01      	subs	r3, #1
 8015938:	9315      	str	r3, [sp, #84]	; 0x54
 801593a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801593c:	bf08      	it	eq
 801593e:	4613      	moveq	r3, r2
 8015940:	9306      	str	r3, [sp, #24]
 8015942:	e60d      	b.n	8015560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015944:	2800      	cmp	r0, #0
 8015946:	f43f ae7d 	beq.w	8015644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801594a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801594e:	9307      	str	r3, [sp, #28]
 8015950:	0e1b      	lsrs	r3, r3, #24
 8015952:	930f      	str	r3, [sp, #60]	; 0x3c
 8015954:	e676      	b.n	8015644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8015956:	7038      	strb	r0, [r7, #0]
 8015958:	7079      	strb	r1, [r7, #1]
 801595a:	e779      	b.n	8015850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801595c:	f112 0901 	adds.w	r9, r2, #1
 8015960:	f53f af78 	bmi.w	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8015964:	454b      	cmp	r3, r9
 8015966:	f6ff af75 	blt.w	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801596a:	f11c 0901 	adds.w	r9, ip, #1
 801596e:	f53f af71 	bmi.w	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8015972:	45ce      	cmp	lr, r9
 8015974:	f6ff af6e 	blt.w	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8015978:	b21b      	sxth	r3, r3
 801597a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801597e:	fa0f f28e 	sxth.w	r2, lr
 8015982:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8015986:	9200      	str	r2, [sp, #0]
 8015988:	4639      	mov	r1, r7
 801598a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801598c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801598e:	f7ff fca1 	bl	80152d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8015992:	e75f      	b.n	8015854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8015994:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015996:	1429      	asrs	r1, r5, #16
 8015998:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801599a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801599e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80159a2:	1433      	asrs	r3, r6, #16
 80159a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80159a8:	fb0c 1303 	mla	r3, ip, r3, r1
 80159ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80159ae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80159b2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80159b6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80159ba:	2a00      	cmp	r2, #0
 80159bc:	f000 8129 	beq.w	8015c12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80159c0:	684c      	ldr	r4, [r1, #4]
 80159c2:	940c      	str	r4, [sp, #48]	; 0x30
 80159c4:	0e24      	lsrs	r4, r4, #24
 80159c6:	9413      	str	r4, [sp, #76]	; 0x4c
 80159c8:	b198      	cbz	r0, 80159f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80159ca:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80159ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80159d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80159d6:	f10c 0c04 	add.w	ip, ip, #4
 80159da:	eb01 080c 	add.w	r8, r1, ip
 80159de:	f851 100c 	ldr.w	r1, [r1, ip]
 80159e2:	9108      	str	r1, [sp, #32]
 80159e4:	0e09      	lsrs	r1, r1, #24
 80159e6:	9110      	str	r1, [sp, #64]	; 0x40
 80159e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80159ec:	910d      	str	r1, [sp, #52]	; 0x34
 80159ee:	0e09      	lsrs	r1, r1, #24
 80159f0:	9114      	str	r1, [sp, #80]	; 0x50
 80159f2:	b292      	uxth	r2, r2
 80159f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80159f6:	b280      	uxth	r0, r0
 80159f8:	fb02 f900 	mul.w	r9, r2, r0
 80159fc:	0112      	lsls	r2, r2, #4
 80159fe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015a02:	eba2 0809 	sub.w	r8, r2, r9
 8015a06:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8015a0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a0c:	b280      	uxth	r0, r0
 8015a0e:	fa1f f888 	uxth.w	r8, r8
 8015a12:	1a09      	subs	r1, r1, r0
 8015a14:	fb08 f202 	mul.w	r2, r8, r2
 8015a18:	b289      	uxth	r1, r1
 8015a1a:	fb01 220e 	mla	r2, r1, lr, r2
 8015a1e:	fb00 2204 	mla	r2, r0, r4, r2
 8015a22:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015a24:	fb09 2204 	mla	r2, r9, r4, r2
 8015a28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	f000 80e8 	beq.w	8015c02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8015a32:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015a36:	d01b      	beq.n	8015a70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8015a38:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015a3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015a40:	fb0e fa0a 	mul.w	sl, lr, sl
 8015a44:	fb0e fe03 	mul.w	lr, lr, r3
 8015a48:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015a4c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015a50:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015a54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a58:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015a5c:	4453      	add	r3, sl
 8015a5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015a62:	0a1b      	lsrs	r3, r3, #8
 8015a64:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015a68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a6c:	ea43 030c 	orr.w	r3, r3, ip
 8015a70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a72:	2cff      	cmp	r4, #255	; 0xff
 8015a74:	d021      	beq.n	8015aba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8015a76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015a78:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015a7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a7e:	fb04 fc0c 	mul.w	ip, r4, ip
 8015a82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015a84:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8015a88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015a8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015a92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015a96:	fb04 fa0a 	mul.w	sl, r4, sl
 8015a9a:	44e6      	add	lr, ip
 8015a9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015aa0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015aa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015aa8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015aac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ab0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015ab4:	ea4e 040a 	orr.w	r4, lr, sl
 8015ab8:	940c      	str	r4, [sp, #48]	; 0x30
 8015aba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015abc:	2cff      	cmp	r4, #255	; 0xff
 8015abe:	d021      	beq.n	8015b04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8015ac0:	9c08      	ldr	r4, [sp, #32]
 8015ac2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015ac6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015ac8:	fb04 fc0c 	mul.w	ip, r4, ip
 8015acc:	9c08      	ldr	r4, [sp, #32]
 8015ace:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015ad2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015ad4:	fb04 fa0e 	mul.w	sl, r4, lr
 8015ad8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8015adc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015ae0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015ae4:	44e6      	add	lr, ip
 8015ae6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015aea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015aee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015af2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015af6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015afa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015afe:	ea4e 040a 	orr.w	r4, lr, sl
 8015b02:	9408      	str	r4, [sp, #32]
 8015b04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b06:	2cff      	cmp	r4, #255	; 0xff
 8015b08:	d021      	beq.n	8015b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8015b0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b0c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015b10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b12:	fb04 fc0c 	mul.w	ip, r4, ip
 8015b16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b18:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8015b1c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015b20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015b26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015b2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8015b2e:	44e6      	add	lr, ip
 8015b30:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015b34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015b3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015b40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015b44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015b48:	ea4e 040a 	orr.w	r4, lr, sl
 8015b4c:	940d      	str	r4, [sp, #52]	; 0x34
 8015b4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015b50:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8015b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b58:	2aff      	cmp	r2, #255	; 0xff
 8015b5a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015b5e:	9c08      	ldr	r4, [sp, #32]
 8015b60:	fb08 fc0c 	mul.w	ip, r8, ip
 8015b64:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015b68:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015b6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b6e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8015b72:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015b76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015b78:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015b7c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015b80:	fb08 f80e 	mul.w	r8, r8, lr
 8015b84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b88:	fb01 8303 	mla	r3, r1, r3, r8
 8015b8c:	9908      	ldr	r1, [sp, #32]
 8015b8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b92:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8015b96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b98:	fb00 330a 	mla	r3, r0, sl, r3
 8015b9c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8015ba0:	fb09 3e0e 	mla	lr, r9, lr, r3
 8015ba4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015ba8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015bac:	ea4c 0c0e 	orr.w	ip, ip, lr
 8015bb0:	fa5f f08c 	uxtb.w	r0, ip
 8015bb4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8015bb8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015bbc:	d032      	beq.n	8015c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8015bbe:	43d2      	mvns	r2, r2
 8015bc0:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8015bc4:	b2d2      	uxtb	r2, r2
 8015bc6:	fb0e fe02 	mul.w	lr, lr, r2
 8015bca:	f10e 0301 	add.w	r3, lr, #1
 8015bce:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8015bd2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015bd6:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8015bda:	4350      	muls	r0, r2
 8015bdc:	f807 3c03 	strb.w	r3, [r7, #-3]
 8015be0:	1c43      	adds	r3, r0, #1
 8015be2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015be6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015bea:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8015bee:	4353      	muls	r3, r2
 8015bf0:	f807 1c02 	strb.w	r1, [r7, #-2]
 8015bf4:	1c5a      	adds	r2, r3, #1
 8015bf6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015bfa:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8015bfe:	f807 cc01 	strb.w	ip, [r7, #-1]
 8015c02:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015c04:	3703      	adds	r7, #3
 8015c06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015c0a:	441d      	add	r5, r3
 8015c0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015c0e:	441e      	add	r6, r3
 8015c10:	e64e      	b.n	80158b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8015c12:	2800      	cmp	r0, #0
 8015c14:	f43f aeed 	beq.w	80159f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8015c18:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8015c1c:	9108      	str	r1, [sp, #32]
 8015c1e:	0e09      	lsrs	r1, r1, #24
 8015c20:	9110      	str	r1, [sp, #64]	; 0x40
 8015c22:	e6e6      	b.n	80159f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8015c24:	f807 0c03 	strb.w	r0, [r7, #-3]
 8015c28:	f807 1c02 	strb.w	r1, [r7, #-2]
 8015c2c:	e7e7      	b.n	8015bfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8015c2e:	b019      	add	sp, #100	; 0x64
 8015c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8015c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c38:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8015c3c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8015c40:	2c00      	cmp	r4, #0
 8015c42:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8015c46:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8015c4a:	fb00 4e03 	mla	lr, r0, r3, r4
 8015c4e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8015c52:	f2c0 80b8 	blt.w	8015dc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8015c56:	45a1      	cmp	r9, r4
 8015c58:	f340 80b5 	ble.w	8015dc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	f2c0 80b2 	blt.w	8015dc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8015c62:	4580      	cmp	r8, r0
 8015c64:	f340 80af 	ble.w	8015dc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8015c68:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8015c6c:	f01e 0f01 	tst.w	lr, #1
 8015c70:	5d56      	ldrb	r6, [r2, r5]
 8015c72:	bf0c      	ite	eq
 8015c74:	f006 060f 	andeq.w	r6, r6, #15
 8015c78:	1136      	asrne	r6, r6, #4
 8015c7a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8015c7e:	b2f6      	uxtb	r6, r6
 8015c80:	f114 0a01 	adds.w	sl, r4, #1
 8015c84:	f100 80a1 	bmi.w	8015dca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8015c88:	45d1      	cmp	r9, sl
 8015c8a:	f340 809e 	ble.w	8015dca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8015c8e:	2800      	cmp	r0, #0
 8015c90:	f2c0 809b 	blt.w	8015dca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8015c94:	4580      	cmp	r8, r0
 8015c96:	f340 8098 	ble.w	8015dca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8015c9a:	2f00      	cmp	r7, #0
 8015c9c:	f000 8097 	beq.w	8015dce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8015ca0:	f10e 0b01 	add.w	fp, lr, #1
 8015ca4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8015ca8:	f01b 0f01 	tst.w	fp, #1
 8015cac:	5d55      	ldrb	r5, [r2, r5]
 8015cae:	bf0c      	ite	eq
 8015cb0:	f005 050f 	andeq.w	r5, r5, #15
 8015cb4:	112d      	asrne	r5, r5, #4
 8015cb6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8015cba:	b2ed      	uxtb	r5, r5
 8015cbc:	f1bc 0f00 	cmp.w	ip, #0
 8015cc0:	f000 8089 	beq.w	8015dd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8015cc4:	2c00      	cmp	r4, #0
 8015cc6:	f100 0001 	add.w	r0, r0, #1
 8015cca:	f2c0 8082 	blt.w	8015dd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8015cce:	45a1      	cmp	r9, r4
 8015cd0:	dd7f      	ble.n	8015dd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	db7d      	blt.n	8015dd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8015cd6:	4580      	cmp	r8, r0
 8015cd8:	dd7b      	ble.n	8015dd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8015cda:	eb03 0b0e 	add.w	fp, r3, lr
 8015cde:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8015ce2:	f01b 0f01 	tst.w	fp, #1
 8015ce6:	5d14      	ldrb	r4, [r2, r4]
 8015ce8:	bf0c      	ite	eq
 8015cea:	f004 040f 	andeq.w	r4, r4, #15
 8015cee:	1124      	asrne	r4, r4, #4
 8015cf0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8015cf4:	b2e4      	uxtb	r4, r4
 8015cf6:	f1ba 0f00 	cmp.w	sl, #0
 8015cfa:	db6f      	blt.n	8015ddc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8015cfc:	45d1      	cmp	r9, sl
 8015cfe:	dd6d      	ble.n	8015ddc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8015d00:	2800      	cmp	r0, #0
 8015d02:	db6b      	blt.n	8015ddc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8015d04:	4580      	cmp	r8, r0
 8015d06:	dd69      	ble.n	8015ddc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8015d08:	2f00      	cmp	r7, #0
 8015d0a:	d069      	beq.n	8015de0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	449e      	add	lr, r3
 8015d10:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8015d14:	f01e 0f01 	tst.w	lr, #1
 8015d18:	5cd0      	ldrb	r0, [r2, r3]
 8015d1a:	bf0c      	ite	eq
 8015d1c:	f000 000f 	andeq.w	r0, r0, #15
 8015d20:	1100      	asrne	r0, r0, #4
 8015d22:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015d26:	b2c3      	uxtb	r3, r0
 8015d28:	b2ba      	uxth	r2, r7
 8015d2a:	fa1f fc8c 	uxth.w	ip, ip
 8015d2e:	fb02 f00c 	mul.w	r0, r2, ip
 8015d32:	0112      	lsls	r2, r2, #4
 8015d34:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8015d38:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8015d3c:	1a12      	subs	r2, r2, r0
 8015d3e:	fa1f fc8c 	uxth.w	ip, ip
 8015d42:	b292      	uxth	r2, r2
 8015d44:	eba7 070c 	sub.w	r7, r7, ip
 8015d48:	436a      	muls	r2, r5
 8015d4a:	b2bf      	uxth	r7, r7
 8015d4c:	fb06 2207 	mla	r2, r6, r7, r2
 8015d50:	fb0c 2404 	mla	r4, ip, r4, r2
 8015d54:	fb00 4303 	mla	r3, r0, r3, r4
 8015d58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015d5c:	b38b      	cbz	r3, 8015dc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8015d5e:	4a21      	ldr	r2, [pc, #132]	; (8015de4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8015d60:	6814      	ldr	r4, [r2, #0]
 8015d62:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8015d66:	b2e5      	uxtb	r5, r4
 8015d68:	4353      	muls	r3, r2
 8015d6a:	1c5a      	adds	r2, r3, #1
 8015d6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015d70:	1212      	asrs	r2, r2, #8
 8015d72:	b290      	uxth	r0, r2
 8015d74:	43d2      	mvns	r2, r2
 8015d76:	fb15 f500 	smulbb	r5, r5, r0
 8015d7a:	b2d3      	uxtb	r3, r2
 8015d7c:	780a      	ldrb	r2, [r1, #0]
 8015d7e:	fb02 5203 	mla	r2, r2, r3, r5
 8015d82:	b292      	uxth	r2, r2
 8015d84:	1c55      	adds	r5, r2, #1
 8015d86:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8015d8a:	784d      	ldrb	r5, [r1, #1]
 8015d8c:	fb15 f503 	smulbb	r5, r5, r3
 8015d90:	1212      	asrs	r2, r2, #8
 8015d92:	700a      	strb	r2, [r1, #0]
 8015d94:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8015d98:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8015d9c:	fb02 5200 	mla	r2, r2, r0, r5
 8015da0:	b292      	uxth	r2, r2
 8015da2:	1c55      	adds	r5, r2, #1
 8015da4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8015da8:	1212      	asrs	r2, r2, #8
 8015daa:	704a      	strb	r2, [r1, #1]
 8015dac:	788a      	ldrb	r2, [r1, #2]
 8015dae:	fb12 f303 	smulbb	r3, r2, r3
 8015db2:	fb04 3300 	mla	r3, r4, r0, r3
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	1c5a      	adds	r2, r3, #1
 8015dba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015dbe:	121b      	asrs	r3, r3, #8
 8015dc0:	708b      	strb	r3, [r1, #2]
 8015dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc6:	2600      	movs	r6, #0
 8015dc8:	e75a      	b.n	8015c80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8015dca:	2500      	movs	r5, #0
 8015dcc:	e776      	b.n	8015cbc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8015dce:	463d      	mov	r5, r7
 8015dd0:	e774      	b.n	8015cbc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8015dd2:	2400      	movs	r4, #0
 8015dd4:	e78f      	b.n	8015cf6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8015dd6:	4663      	mov	r3, ip
 8015dd8:	4664      	mov	r4, ip
 8015dda:	e7a5      	b.n	8015d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e7a3      	b.n	8015d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8015de0:	463b      	mov	r3, r7
 8015de2:	e7a1      	b.n	8015d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8015de4:	24006a98 	.word	0x24006a98

08015de8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dec:	b097      	sub	sp, #92	; 0x5c
 8015dee:	9214      	str	r2, [sp, #80]	; 0x50
 8015df0:	9309      	str	r3, [sp, #36]	; 0x24
 8015df2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015df4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8015df8:	9015      	str	r0, [sp, #84]	; 0x54
 8015dfa:	910c      	str	r1, [sp, #48]	; 0x30
 8015dfc:	6850      	ldr	r0, [r2, #4]
 8015dfe:	930e      	str	r3, [sp, #56]	; 0x38
 8015e00:	6812      	ldr	r2, [r2, #0]
 8015e02:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8015e06:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8015e0a:	fb00 1303 	mla	r3, r0, r3, r1
 8015e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e12:	eb02 0a03 	add.w	sl, r2, r3
 8015e16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e18:	689b      	ldr	r3, [r3, #8]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	f023 0301 	bic.w	r3, r3, #1
 8015e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e24:	681f      	ldr	r7, [r3, #0]
 8015e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	dc03      	bgt.n	8015e34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8015e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	f340 8247 	ble.w	80162c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8015e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015e3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015e3e:	1e48      	subs	r0, r1, #1
 8015e40:	f102 3cff 	add.w	ip, r2, #4294967295
 8015e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	f340 80e5 	ble.w	8016016 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8015e4c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8015e50:	ea4f 4326 	mov.w	r3, r6, asr #16
 8015e54:	d406      	bmi.n	8015e64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015e56:	4586      	cmp	lr, r0
 8015e58:	da04      	bge.n	8015e64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	db02      	blt.n	8015e64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015e5e:	4563      	cmp	r3, ip
 8015e60:	f2c0 80da 	blt.w	8016018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8015e64:	f11e 0e01 	adds.w	lr, lr, #1
 8015e68:	f100 80cb 	bmi.w	8016002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8015e6c:	4571      	cmp	r1, lr
 8015e6e:	f2c0 80c8 	blt.w	8016002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8015e72:	3301      	adds	r3, #1
 8015e74:	f100 80c5 	bmi.w	8016002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	f2c0 80c2 	blt.w	8016002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8015e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e80:	46d0      	mov	r8, sl
 8015e82:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8015e86:	930d      	str	r3, [sp, #52]	; 0x34
 8015e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	f340 80e3 	ble.w	8016056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8015e90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e92:	1430      	asrs	r0, r6, #16
 8015e94:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8015e98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8015e9c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8015ea0:	142b      	asrs	r3, r5, #16
 8015ea2:	f100 812e 	bmi.w	8016102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015ea6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8015eaa:	455b      	cmp	r3, fp
 8015eac:	f280 8129 	bge.w	8016102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	f2c0 8126 	blt.w	8016102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015eb6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8015eba:	4558      	cmp	r0, fp
 8015ebc:	f280 8121 	bge.w	8016102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015ec0:	fb00 3309 	mla	r3, r0, r9, r3
 8015ec4:	0858      	lsrs	r0, r3, #1
 8015ec6:	07dc      	lsls	r4, r3, #31
 8015ec8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8015ecc:	bf54      	ite	pl
 8015ece:	f00c 0c0f 	andpl.w	ip, ip, #15
 8015ed2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8015ed6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8015eda:	fa5f fc8c 	uxtb.w	ip, ip
 8015ede:	2a00      	cmp	r2, #0
 8015ee0:	f000 80fe 	beq.w	80160e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8015ee4:	1c58      	adds	r0, r3, #1
 8015ee6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8015eea:	07c0      	lsls	r0, r0, #31
 8015eec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8015ef0:	bf54      	ite	pl
 8015ef2:	f00e 0e0f 	andpl.w	lr, lr, #15
 8015ef6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8015efa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8015efe:	fa5f f08e 	uxtb.w	r0, lr
 8015f02:	9010      	str	r0, [sp, #64]	; 0x40
 8015f04:	b1d9      	cbz	r1, 8015f3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015f06:	444b      	add	r3, r9
 8015f08:	0858      	lsrs	r0, r3, #1
 8015f0a:	07dc      	lsls	r4, r3, #31
 8015f0c:	f103 0301 	add.w	r3, r3, #1
 8015f10:	5c38      	ldrb	r0, [r7, r0]
 8015f12:	bf54      	ite	pl
 8015f14:	f000 000f 	andpl.w	r0, r0, #15
 8015f18:	1100      	asrmi	r0, r0, #4
 8015f1a:	07dc      	lsls	r4, r3, #31
 8015f1c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015f20:	b2c0      	uxtb	r0, r0
 8015f22:	900a      	str	r0, [sp, #40]	; 0x28
 8015f24:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015f28:	f817 e000 	ldrb.w	lr, [r7, r0]
 8015f2c:	bf54      	ite	pl
 8015f2e:	f00e 030f 	andpl.w	r3, lr, #15
 8015f32:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8015f36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8015f3e:	b292      	uxth	r2, r2
 8015f40:	b289      	uxth	r1, r1
 8015f42:	0113      	lsls	r3, r2, #4
 8015f44:	fb02 f001 	mul.w	r0, r2, r1
 8015f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f4a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8015f4e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8015f52:	1a1b      	subs	r3, r3, r0
 8015f54:	b289      	uxth	r1, r1
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	ebae 0e01 	sub.w	lr, lr, r1
 8015f5c:	4353      	muls	r3, r2
 8015f5e:	fa1f fe8e 	uxth.w	lr, lr
 8015f62:	fb0c 320e 	mla	r2, ip, lr, r3
 8015f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f68:	fb01 2203 	mla	r2, r1, r3, r2
 8015f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f6e:	fb00 2203 	mla	r2, r0, r3, r2
 8015f72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	d039      	beq.n	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8015f7a:	4bc7      	ldr	r3, [pc, #796]	; (8016298 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8015f7c:	6819      	ldr	r1, [r3, #0]
 8015f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f80:	fa5f fc81 	uxtb.w	ip, r1
 8015f84:	435a      	muls	r2, r3
 8015f86:	1c53      	adds	r3, r2, #1
 8015f88:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015f8c:	1212      	asrs	r2, r2, #8
 8015f8e:	b290      	uxth	r0, r2
 8015f90:	43d2      	mvns	r2, r2
 8015f92:	fb1c fc00 	smulbb	ip, ip, r0
 8015f96:	b2d3      	uxtb	r3, r2
 8015f98:	f898 2000 	ldrb.w	r2, [r8]
 8015f9c:	fb02 c203 	mla	r2, r2, r3, ip
 8015fa0:	b292      	uxth	r2, r2
 8015fa2:	f102 0c01 	add.w	ip, r2, #1
 8015fa6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015faa:	f898 c001 	ldrb.w	ip, [r8, #1]
 8015fae:	fb1c fc03 	smulbb	ip, ip, r3
 8015fb2:	1212      	asrs	r2, r2, #8
 8015fb4:	f888 2000 	strb.w	r2, [r8]
 8015fb8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015fbc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8015fc0:	fb02 c200 	mla	r2, r2, r0, ip
 8015fc4:	b292      	uxth	r2, r2
 8015fc6:	f102 0c01 	add.w	ip, r2, #1
 8015fca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015fce:	1212      	asrs	r2, r2, #8
 8015fd0:	f888 2001 	strb.w	r2, [r8, #1]
 8015fd4:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015fd8:	fb12 f303 	smulbb	r3, r2, r3
 8015fdc:	fb01 3300 	mla	r3, r1, r0, r3
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	1c5a      	adds	r2, r3, #1
 8015fe4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015fe8:	121b      	asrs	r3, r3, #8
 8015fea:	f888 3002 	strb.w	r3, [r8, #2]
 8015fee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ff0:	f108 0803 	add.w	r8, r8, #3
 8015ff4:	441d      	add	r5, r3
 8015ff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015ff8:	441e      	add	r6, r3
 8015ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	930d      	str	r3, [sp, #52]	; 0x34
 8016000:	e742      	b.n	8015e88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016004:	f10a 0a03 	add.w	sl, sl, #3
 8016008:	441d      	add	r5, r3
 801600a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801600c:	441e      	add	r6, r3
 801600e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016010:	3b01      	subs	r3, #1
 8016012:	9309      	str	r3, [sp, #36]	; 0x24
 8016014:	e716      	b.n	8015e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016016:	d024      	beq.n	8016062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801601a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801601c:	3b01      	subs	r3, #1
 801601e:	fb00 5003 	mla	r0, r0, r3, r5
 8016022:	1400      	asrs	r0, r0, #16
 8016024:	f53f af2b 	bmi.w	8015e7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016028:	3901      	subs	r1, #1
 801602a:	4288      	cmp	r0, r1
 801602c:	f6bf af27 	bge.w	8015e7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016030:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016032:	fb01 6303 	mla	r3, r1, r3, r6
 8016036:	141b      	asrs	r3, r3, #16
 8016038:	f53f af21 	bmi.w	8015e7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801603c:	3a01      	subs	r2, #1
 801603e:	4293      	cmp	r3, r2
 8016040:	f6bf af1d 	bge.w	8015e7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016044:	f10a 0e03 	add.w	lr, sl, #3
 8016048:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801604c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8016050:	f1b8 0f00 	cmp.w	r8, #0
 8016054:	dc76      	bgt.n	8016144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8016056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016058:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801605c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016060:	44a2      	add	sl, r4
 8016062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016064:	2b00      	cmp	r3, #0
 8016066:	f340 812c 	ble.w	80162c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801606a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801606e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016070:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016074:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016078:	eef0 6a62 	vmov.f32	s13, s5
 801607c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016080:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016088:	ee16 5a90 	vmov	r5, s13
 801608c:	eef0 6a43 	vmov.f32	s13, s6
 8016090:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016094:	ee16 6a90 	vmov	r6, s13
 8016098:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801609c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80160a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80160a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80160a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160b0:	ee12 2a90 	vmov	r2, s5
 80160b4:	eef0 2a47 	vmov.f32	s5, s14
 80160b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80160bc:	ee13 2a10 	vmov	r2, s6
 80160c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80160c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160c4:	eeb0 3a67 	vmov.f32	s6, s15
 80160c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80160cc:	9324      	str	r3, [sp, #144]	; 0x90
 80160ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160d2:	3b01      	subs	r3, #1
 80160d4:	930c      	str	r3, [sp, #48]	; 0x30
 80160d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160d8:	bf08      	it	eq
 80160da:	4613      	moveq	r3, r2
 80160dc:	9309      	str	r3, [sp, #36]	; 0x24
 80160de:	e6a2      	b.n	8015e26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80160e0:	2900      	cmp	r1, #0
 80160e2:	f43f af2c 	beq.w	8015f3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80160e6:	eb09 0003 	add.w	r0, r9, r3
 80160ea:	0843      	lsrs	r3, r0, #1
 80160ec:	07c0      	lsls	r0, r0, #31
 80160ee:	5cfb      	ldrb	r3, [r7, r3]
 80160f0:	bf54      	ite	pl
 80160f2:	f003 030f 	andpl.w	r3, r3, #15
 80160f6:	111b      	asrmi	r3, r3, #4
 80160f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016100:	e71d      	b.n	8015f3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016102:	f113 0b01 	adds.w	fp, r3, #1
 8016106:	f53f af72 	bmi.w	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801610a:	45dc      	cmp	ip, fp
 801610c:	f6ff af6f 	blt.w	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016110:	f110 0b01 	adds.w	fp, r0, #1
 8016114:	f53f af6b 	bmi.w	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016118:	45de      	cmp	lr, fp
 801611a:	f6ff af68 	blt.w	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801611e:	9302      	str	r3, [sp, #8]
 8016120:	fa0f f38e 	sxth.w	r3, lr
 8016124:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016126:	9301      	str	r3, [sp, #4]
 8016128:	fa0f f38c 	sxth.w	r3, ip
 801612c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8016130:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	463a      	mov	r2, r7
 8016138:	464b      	mov	r3, r9
 801613a:	4641      	mov	r1, r8
 801613c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801613e:	f7ff fd79 	bl	8015c34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8016142:	e754      	b.n	8015fee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016144:	142a      	asrs	r2, r5, #16
 8016146:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801614a:	1433      	asrs	r3, r6, #16
 801614c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016150:	fb09 2303 	mla	r3, r9, r3, r2
 8016154:	085a      	lsrs	r2, r3, #1
 8016156:	07dc      	lsls	r4, r3, #31
 8016158:	5cba      	ldrb	r2, [r7, r2]
 801615a:	bf54      	ite	pl
 801615c:	f002 020f 	andpl.w	r2, r2, #15
 8016160:	1112      	asrmi	r2, r2, #4
 8016162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016166:	b2d2      	uxtb	r2, r2
 8016168:	2900      	cmp	r1, #0
 801616a:	f000 8097 	beq.w	801629c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801616e:	f103 0b01 	add.w	fp, r3, #1
 8016172:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8016176:	f01b 0f01 	tst.w	fp, #1
 801617a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801617e:	bf0c      	ite	eq
 8016180:	f00c 0c0f 	andeq.w	ip, ip, #15
 8016184:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8016188:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801618c:	fa5f f48c 	uxtb.w	r4, ip
 8016190:	9412      	str	r4, [sp, #72]	; 0x48
 8016192:	b300      	cbz	r0, 80161d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8016194:	444b      	add	r3, r9
 8016196:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801619a:	07dc      	lsls	r4, r3, #31
 801619c:	f103 0301 	add.w	r3, r3, #1
 80161a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80161a4:	bf54      	ite	pl
 80161a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80161aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80161ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80161b2:	fa5f f48c 	uxtb.w	r4, ip
 80161b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80161ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80161bc:	07dc      	lsls	r4, r3, #31
 80161be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80161c2:	bf54      	ite	pl
 80161c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80161c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80161cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80161d0:	fa5f f38c 	uxtb.w	r3, ip
 80161d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80161d6:	b289      	uxth	r1, r1
 80161d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161da:	b280      	uxth	r0, r0
 80161dc:	fb01 f300 	mul.w	r3, r1, r0
 80161e0:	0109      	lsls	r1, r1, #4
 80161e2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80161e6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80161ea:	1ac9      	subs	r1, r1, r3
 80161ec:	b280      	uxth	r0, r0
 80161ee:	b289      	uxth	r1, r1
 80161f0:	ebac 0c00 	sub.w	ip, ip, r0
 80161f4:	4361      	muls	r1, r4
 80161f6:	fa1f fc8c 	uxth.w	ip, ip
 80161fa:	fb02 120c 	mla	r2, r2, ip, r1
 80161fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016200:	fb00 2001 	mla	r0, r0, r1, r2
 8016204:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016206:	fb03 0302 	mla	r3, r3, r2, r0
 801620a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801620e:	2b00      	cmp	r3, #0
 8016210:	d039      	beq.n	8016286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8016212:	4a21      	ldr	r2, [pc, #132]	; (8016298 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8016214:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8016218:	6810      	ldr	r0, [r2, #0]
 801621a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801621c:	fa5f fc80 	uxtb.w	ip, r0
 8016220:	4353      	muls	r3, r2
 8016222:	1c5a      	adds	r2, r3, #1
 8016224:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016228:	121b      	asrs	r3, r3, #8
 801622a:	b29a      	uxth	r2, r3
 801622c:	43db      	mvns	r3, r3
 801622e:	fb1c fc02 	smulbb	ip, ip, r2
 8016232:	b2db      	uxtb	r3, r3
 8016234:	fb01 c103 	mla	r1, r1, r3, ip
 8016238:	b289      	uxth	r1, r1
 801623a:	f101 0c01 	add.w	ip, r1, #1
 801623e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8016242:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8016246:	fb1c fc03 	smulbb	ip, ip, r3
 801624a:	1209      	asrs	r1, r1, #8
 801624c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8016250:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8016254:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8016258:	fb01 c102 	mla	r1, r1, r2, ip
 801625c:	b289      	uxth	r1, r1
 801625e:	f101 0c01 	add.w	ip, r1, #1
 8016262:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8016266:	1209      	asrs	r1, r1, #8
 8016268:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801626c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8016270:	fb11 f303 	smulbb	r3, r1, r3
 8016274:	fb00 3002 	mla	r0, r0, r2, r3
 8016278:	b280      	uxth	r0, r0
 801627a:	1c42      	adds	r2, r0, #1
 801627c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8016280:	1200      	asrs	r0, r0, #8
 8016282:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8016286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016288:	f10e 0e03 	add.w	lr, lr, #3
 801628c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016290:	441d      	add	r5, r3
 8016292:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016294:	441e      	add	r6, r3
 8016296:	e6db      	b.n	8016050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8016298:	24006a98 	.word	0x24006a98
 801629c:	2800      	cmp	r0, #0
 801629e:	d09a      	beq.n	80161d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80162a0:	444b      	add	r3, r9
 80162a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80162a6:	07db      	lsls	r3, r3, #31
 80162a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80162ac:	bf54      	ite	pl
 80162ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80162b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80162b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80162ba:	fa5f f38c 	uxtb.w	r3, ip
 80162be:	930b      	str	r3, [sp, #44]	; 0x2c
 80162c0:	e789      	b.n	80161d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80162c2:	b017      	add	sp, #92	; 0x5c
 80162c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80162d0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80162d4:	2d00      	cmp	r5, #0
 80162d6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80162da:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80162de:	fb04 5e03 	mla	lr, r4, r3, r5
 80162e2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80162e6:	f2c0 80b1 	blt.w	801644c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80162ea:	45a9      	cmp	r9, r5
 80162ec:	f340 80ae 	ble.w	801644c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80162f0:	2c00      	cmp	r4, #0
 80162f2:	f2c0 80ab 	blt.w	801644c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80162f6:	45a0      	cmp	r8, r4
 80162f8:	f340 80a8 	ble.w	801644c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80162fc:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8016300:	f01e 0f01 	tst.w	lr, #1
 8016304:	5d97      	ldrb	r7, [r2, r6]
 8016306:	bf0c      	ite	eq
 8016308:	f007 070f 	andeq.w	r7, r7, #15
 801630c:	113f      	asrne	r7, r7, #4
 801630e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8016312:	b2ff      	uxtb	r7, r7
 8016314:	f115 0a01 	adds.w	sl, r5, #1
 8016318:	f100 809a 	bmi.w	8016450 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801631c:	45d1      	cmp	r9, sl
 801631e:	f340 8097 	ble.w	8016450 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8016322:	2c00      	cmp	r4, #0
 8016324:	f2c0 8094 	blt.w	8016450 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8016328:	45a0      	cmp	r8, r4
 801632a:	f340 8091 	ble.w	8016450 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801632e:	2800      	cmp	r0, #0
 8016330:	f000 8090 	beq.w	8016454 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8016334:	f10e 0b01 	add.w	fp, lr, #1
 8016338:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801633c:	f01b 0f01 	tst.w	fp, #1
 8016340:	5d96      	ldrb	r6, [r2, r6]
 8016342:	bf0c      	ite	eq
 8016344:	f006 060f 	andeq.w	r6, r6, #15
 8016348:	1136      	asrne	r6, r6, #4
 801634a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801634e:	b2f6      	uxtb	r6, r6
 8016350:	f1bc 0f00 	cmp.w	ip, #0
 8016354:	f000 8082 	beq.w	801645c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8016358:	2d00      	cmp	r5, #0
 801635a:	f104 0401 	add.w	r4, r4, #1
 801635e:	db7b      	blt.n	8016458 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8016360:	45a9      	cmp	r9, r5
 8016362:	dd79      	ble.n	8016458 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8016364:	2c00      	cmp	r4, #0
 8016366:	db77      	blt.n	8016458 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8016368:	45a0      	cmp	r8, r4
 801636a:	dd75      	ble.n	8016458 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801636c:	eb03 0b0e 	add.w	fp, r3, lr
 8016370:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8016374:	f01b 0f01 	tst.w	fp, #1
 8016378:	5d55      	ldrb	r5, [r2, r5]
 801637a:	bf0c      	ite	eq
 801637c:	f005 050f 	andeq.w	r5, r5, #15
 8016380:	112d      	asrne	r5, r5, #4
 8016382:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8016386:	b2ed      	uxtb	r5, r5
 8016388:	f1ba 0f00 	cmp.w	sl, #0
 801638c:	db69      	blt.n	8016462 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801638e:	45d1      	cmp	r9, sl
 8016390:	dd67      	ble.n	8016462 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8016392:	2c00      	cmp	r4, #0
 8016394:	db65      	blt.n	8016462 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8016396:	45a0      	cmp	r8, r4
 8016398:	dd63      	ble.n	8016462 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801639a:	2800      	cmp	r0, #0
 801639c:	d063      	beq.n	8016466 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801639e:	3301      	adds	r3, #1
 80163a0:	449e      	add	lr, r3
 80163a2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80163a6:	f01e 0f01 	tst.w	lr, #1
 80163aa:	5cd4      	ldrb	r4, [r2, r3]
 80163ac:	bf0c      	ite	eq
 80163ae:	f004 040f 	andeq.w	r4, r4, #15
 80163b2:	1124      	asrne	r4, r4, #4
 80163b4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80163b8:	b2e3      	uxtb	r3, r4
 80163ba:	b282      	uxth	r2, r0
 80163bc:	fa1f fc8c 	uxth.w	ip, ip
 80163c0:	fb02 f40c 	mul.w	r4, r2, ip
 80163c4:	0112      	lsls	r2, r2, #4
 80163c6:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80163ca:	fa1f f08c 	uxth.w	r0, ip
 80163ce:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80163d2:	1b12      	subs	r2, r2, r4
 80163d4:	ebac 0c00 	sub.w	ip, ip, r0
 80163d8:	b292      	uxth	r2, r2
 80163da:	fa1f fc8c 	uxth.w	ip, ip
 80163de:	4372      	muls	r2, r6
 80163e0:	fb07 220c 	mla	r2, r7, ip, r2
 80163e4:	fb00 2005 	mla	r0, r0, r5, r2
 80163e8:	fb04 0303 	mla	r3, r4, r3, r0
 80163ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80163f0:	b353      	cbz	r3, 8016448 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80163f2:	4a1e      	ldr	r2, [pc, #120]	; (801646c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80163f4:	7808      	ldrb	r0, [r1, #0]
 80163f6:	6814      	ldr	r4, [r2, #0]
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	43db      	mvns	r3, r3
 80163fc:	b2e5      	uxtb	r5, r4
 80163fe:	b2db      	uxtb	r3, r3
 8016400:	fb15 f502 	smulbb	r5, r5, r2
 8016404:	fb00 5003 	mla	r0, r0, r3, r5
 8016408:	b280      	uxth	r0, r0
 801640a:	1c45      	adds	r5, r0, #1
 801640c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8016410:	784d      	ldrb	r5, [r1, #1]
 8016412:	fb15 f503 	smulbb	r5, r5, r3
 8016416:	1200      	asrs	r0, r0, #8
 8016418:	7008      	strb	r0, [r1, #0]
 801641a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801641e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8016422:	fb00 5002 	mla	r0, r0, r2, r5
 8016426:	b280      	uxth	r0, r0
 8016428:	1c45      	adds	r5, r0, #1
 801642a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801642e:	1200      	asrs	r0, r0, #8
 8016430:	7048      	strb	r0, [r1, #1]
 8016432:	7888      	ldrb	r0, [r1, #2]
 8016434:	fb10 f303 	smulbb	r3, r0, r3
 8016438:	fb04 3202 	mla	r2, r4, r2, r3
 801643c:	b292      	uxth	r2, r2
 801643e:	1c53      	adds	r3, r2, #1
 8016440:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016444:	1212      	asrs	r2, r2, #8
 8016446:	708a      	strb	r2, [r1, #2]
 8016448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644c:	2700      	movs	r7, #0
 801644e:	e761      	b.n	8016314 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8016450:	2600      	movs	r6, #0
 8016452:	e77d      	b.n	8016350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8016454:	4606      	mov	r6, r0
 8016456:	e77b      	b.n	8016350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8016458:	2500      	movs	r5, #0
 801645a:	e795      	b.n	8016388 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801645c:	4663      	mov	r3, ip
 801645e:	4665      	mov	r5, ip
 8016460:	e7ab      	b.n	80163ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8016462:	2300      	movs	r3, #0
 8016464:	e7a9      	b.n	80163ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8016466:	4603      	mov	r3, r0
 8016468:	e7a7      	b.n	80163ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801646a:	bf00      	nop
 801646c:	24006a98 	.word	0x24006a98

08016470 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016474:	b093      	sub	sp, #76	; 0x4c
 8016476:	461c      	mov	r4, r3
 8016478:	920c      	str	r2, [sp, #48]	; 0x30
 801647a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801647c:	9011      	str	r0, [sp, #68]	; 0x44
 801647e:	9107      	str	r1, [sp, #28]
 8016480:	6850      	ldr	r0, [r2, #4]
 8016482:	6812      	ldr	r2, [r2, #0]
 8016484:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8016488:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801648c:	fb00 1303 	mla	r3, r0, r3, r1
 8016490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016494:	eb02 0b03 	add.w	fp, r2, r3
 8016498:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	3301      	adds	r3, #1
 801649e:	f023 0301 	bic.w	r3, r3, #1
 80164a2:	9309      	str	r3, [sp, #36]	; 0x24
 80164a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164a6:	f8d3 8000 	ldr.w	r8, [r3]
 80164aa:	9b07      	ldr	r3, [sp, #28]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	dc03      	bgt.n	80164b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80164b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f340 822b 	ble.w	801690e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80164b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80164be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80164c2:	1e48      	subs	r0, r1, #1
 80164c4:	1e57      	subs	r7, r2, #1
 80164c6:	2c00      	cmp	r4, #0
 80164c8:	f340 80d7 	ble.w	801667a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80164cc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80164d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80164d4:	d406      	bmi.n	80164e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80164d6:	4584      	cmp	ip, r0
 80164d8:	da04      	bge.n	80164e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80164da:	2b00      	cmp	r3, #0
 80164dc:	db02      	blt.n	80164e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80164de:	42bb      	cmp	r3, r7
 80164e0:	f2c0 80cc 	blt.w	801667c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80164e4:	f11c 0c01 	adds.w	ip, ip, #1
 80164e8:	f100 80bf 	bmi.w	801666a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80164ec:	4561      	cmp	r1, ip
 80164ee:	f2c0 80bc 	blt.w	801666a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80164f2:	3301      	adds	r3, #1
 80164f4:	f100 80b9 	bmi.w	801666a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80164f8:	429a      	cmp	r2, r3
 80164fa:	f2c0 80b6 	blt.w	801666a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80164fe:	46a2      	mov	sl, r4
 8016500:	465f      	mov	r7, fp
 8016502:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016506:	f1ba 0f00 	cmp.w	sl, #0
 801650a:	f340 80d4 	ble.w	80166b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801650e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8016512:	1430      	asrs	r0, r6, #16
 8016514:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016518:	9308      	str	r3, [sp, #32]
 801651a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801651c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8016520:	142b      	asrs	r3, r5, #16
 8016522:	f100 8124 	bmi.w	801676e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8016526:	f10c 32ff 	add.w	r2, ip, #4294967295
 801652a:	4293      	cmp	r3, r2
 801652c:	f280 811f 	bge.w	801676e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8016530:	2800      	cmp	r0, #0
 8016532:	f2c0 811c 	blt.w	801676e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8016536:	f10e 32ff 	add.w	r2, lr, #4294967295
 801653a:	4290      	cmp	r0, r2
 801653c:	f280 8117 	bge.w	801676e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8016540:	fb00 3309 	mla	r3, r0, r9, r3
 8016544:	0858      	lsrs	r0, r3, #1
 8016546:	07da      	lsls	r2, r3, #31
 8016548:	9a08      	ldr	r2, [sp, #32]
 801654a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801654e:	bf54      	ite	pl
 8016550:	f00c 0c0f 	andpl.w	ip, ip, #15
 8016554:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8016558:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801655c:	fa5f fc8c 	uxtb.w	ip, ip
 8016560:	2a00      	cmp	r2, #0
 8016562:	f000 80ed 	beq.w	8016740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8016566:	1c58      	adds	r0, r3, #1
 8016568:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801656c:	07c0      	lsls	r0, r0, #31
 801656e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8016572:	bf54      	ite	pl
 8016574:	f00e 0e0f 	andpl.w	lr, lr, #15
 8016578:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801657c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8016580:	fa5f fe8e 	uxtb.w	lr, lr
 8016584:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8016588:	b1c9      	cbz	r1, 80165be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801658a:	444b      	add	r3, r9
 801658c:	0858      	lsrs	r0, r3, #1
 801658e:	07da      	lsls	r2, r3, #31
 8016590:	f818 0000 	ldrb.w	r0, [r8, r0]
 8016594:	bf54      	ite	pl
 8016596:	f000 000f 	andpl.w	r0, r0, #15
 801659a:	1100      	asrmi	r0, r0, #4
 801659c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80165a0:	b2c0      	uxtb	r0, r0
 80165a2:	900a      	str	r0, [sp, #40]	; 0x28
 80165a4:	1c58      	adds	r0, r3, #1
 80165a6:	0843      	lsrs	r3, r0, #1
 80165a8:	07c2      	lsls	r2, r0, #31
 80165aa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80165ae:	bf54      	ite	pl
 80165b0:	f003 030f 	andpl.w	r3, r3, #15
 80165b4:	111b      	asrmi	r3, r3, #4
 80165b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	930e      	str	r3, [sp, #56]	; 0x38
 80165be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80165c2:	b289      	uxth	r1, r1
 80165c4:	fb02 f301 	mul.w	r3, r2, r1
 80165c8:	0112      	lsls	r2, r2, #4
 80165ca:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80165ce:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80165d2:	1ad2      	subs	r2, r2, r3
 80165d4:	b289      	uxth	r1, r1
 80165d6:	b292      	uxth	r2, r2
 80165d8:	1a40      	subs	r0, r0, r1
 80165da:	fa1f fe80 	uxth.w	lr, r0
 80165de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80165e0:	4342      	muls	r2, r0
 80165e2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80165e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165e8:	fb01 c102 	mla	r1, r1, r2, ip
 80165ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165ee:	fb03 1302 	mla	r3, r3, r2, r1
 80165f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80165f6:	b383      	cbz	r3, 801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80165f8:	4ac6      	ldr	r2, [pc, #792]	; (8016914 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80165fa:	2bff      	cmp	r3, #255	; 0xff
 80165fc:	6812      	ldr	r2, [r2, #0]
 80165fe:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8016602:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8016606:	b2d2      	uxtb	r2, r2
 8016608:	f000 80ac 	beq.w	8016764 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801660c:	b299      	uxth	r1, r3
 801660e:	43db      	mvns	r3, r3
 8016610:	f897 c000 	ldrb.w	ip, [r7]
 8016614:	fb12 f201 	smulbb	r2, r2, r1
 8016618:	b2db      	uxtb	r3, r3
 801661a:	fb10 f001 	smulbb	r0, r0, r1
 801661e:	fb0c 2203 	mla	r2, ip, r3, r2
 8016622:	fb1e f101 	smulbb	r1, lr, r1
 8016626:	b292      	uxth	r2, r2
 8016628:	f102 0c01 	add.w	ip, r2, #1
 801662c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016630:	1212      	asrs	r2, r2, #8
 8016632:	703a      	strb	r2, [r7, #0]
 8016634:	787a      	ldrb	r2, [r7, #1]
 8016636:	fb02 0003 	mla	r0, r2, r3, r0
 801663a:	b280      	uxth	r0, r0
 801663c:	1c42      	adds	r2, r0, #1
 801663e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8016642:	78ba      	ldrb	r2, [r7, #2]
 8016644:	fb02 1303 	mla	r3, r2, r3, r1
 8016648:	1200      	asrs	r0, r0, #8
 801664a:	b29b      	uxth	r3, r3
 801664c:	7078      	strb	r0, [r7, #1]
 801664e:	f103 0e01 	add.w	lr, r3, #1
 8016652:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8016656:	121b      	asrs	r3, r3, #8
 8016658:	70bb      	strb	r3, [r7, #2]
 801665a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801665c:	3703      	adds	r7, #3
 801665e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016662:	441d      	add	r5, r3
 8016664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016666:	441e      	add	r6, r3
 8016668:	e74d      	b.n	8016506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801666a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801666c:	3c01      	subs	r4, #1
 801666e:	f10b 0b03 	add.w	fp, fp, #3
 8016672:	441d      	add	r5, r3
 8016674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016676:	441e      	add	r6, r3
 8016678:	e725      	b.n	80164c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801667a:	d021      	beq.n	80166c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801667c:	1e63      	subs	r3, r4, #1
 801667e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016680:	fb00 5003 	mla	r0, r0, r3, r5
 8016684:	1400      	asrs	r0, r0, #16
 8016686:	f53f af3a 	bmi.w	80164fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801668a:	3901      	subs	r1, #1
 801668c:	4288      	cmp	r0, r1
 801668e:	f6bf af36 	bge.w	80164fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016692:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016694:	fb01 6303 	mla	r3, r1, r3, r6
 8016698:	141b      	asrs	r3, r3, #16
 801669a:	f53f af30 	bmi.w	80164fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801669e:	3a01      	subs	r2, #1
 80166a0:	4293      	cmp	r3, r2
 80166a2:	f6bf af2c 	bge.w	80164fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80166a6:	f10b 0c03 	add.w	ip, fp, #3
 80166aa:	46a6      	mov	lr, r4
 80166ac:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80166b0:	f1be 0f00 	cmp.w	lr, #0
 80166b4:	dc79      	bgt.n	80167aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80166b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80166ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80166be:	44a3      	add	fp, r4
 80166c0:	9b07      	ldr	r3, [sp, #28]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	f340 8123 	ble.w	801690e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80166c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80166ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80166d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80166d6:	eef0 6a62 	vmov.f32	s13, s5
 80166da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80166e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166e6:	ee16 5a90 	vmov	r5, s13
 80166ea:	eef0 6a43 	vmov.f32	s13, s6
 80166ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166f2:	ee16 6a90 	vmov	r6, s13
 80166f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80166fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80166fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016702:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016706:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801670a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801670e:	ee12 2a90 	vmov	r2, s5
 8016712:	eef0 2a47 	vmov.f32	s5, s14
 8016716:	fb92 f3f3 	sdiv	r3, r2, r3
 801671a:	ee13 2a10 	vmov	r2, s6
 801671e:	931f      	str	r3, [sp, #124]	; 0x7c
 8016720:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016722:	eeb0 3a67 	vmov.f32	s6, s15
 8016726:	fb92 f3f3 	sdiv	r3, r2, r3
 801672a:	9320      	str	r3, [sp, #128]	; 0x80
 801672c:	9b07      	ldr	r3, [sp, #28]
 801672e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016730:	3b01      	subs	r3, #1
 8016732:	9307      	str	r3, [sp, #28]
 8016734:	bf08      	it	eq
 8016736:	4614      	moveq	r4, r2
 8016738:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801673a:	bf18      	it	ne
 801673c:	461c      	movne	r4, r3
 801673e:	e6b4      	b.n	80164aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016740:	2900      	cmp	r1, #0
 8016742:	f43f af3c 	beq.w	80165be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016746:	eb09 0003 	add.w	r0, r9, r3
 801674a:	0843      	lsrs	r3, r0, #1
 801674c:	07c0      	lsls	r0, r0, #31
 801674e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8016752:	bf54      	ite	pl
 8016754:	f003 030f 	andpl.w	r3, r3, #15
 8016758:	111b      	asrmi	r3, r3, #4
 801675a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801675e:	b2db      	uxtb	r3, r3
 8016760:	930a      	str	r3, [sp, #40]	; 0x28
 8016762:	e72c      	b.n	80165be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016764:	703a      	strb	r2, [r7, #0]
 8016766:	7078      	strb	r0, [r7, #1]
 8016768:	f887 e002 	strb.w	lr, [r7, #2]
 801676c:	e775      	b.n	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801676e:	1c5a      	adds	r2, r3, #1
 8016770:	f53f af73 	bmi.w	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016774:	4594      	cmp	ip, r2
 8016776:	f6ff af70 	blt.w	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801677a:	1c42      	adds	r2, r0, #1
 801677c:	f53f af6d 	bmi.w	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016780:	4596      	cmp	lr, r2
 8016782:	f6ff af6a 	blt.w	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016786:	9302      	str	r3, [sp, #8]
 8016788:	fa0f f38e 	sxth.w	r3, lr
 801678c:	9a08      	ldr	r2, [sp, #32]
 801678e:	9301      	str	r3, [sp, #4]
 8016790:	fa0f f38c 	sxth.w	r3, ip
 8016794:	9105      	str	r1, [sp, #20]
 8016796:	4639      	mov	r1, r7
 8016798:	9300      	str	r3, [sp, #0]
 801679a:	464b      	mov	r3, r9
 801679c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80167a0:	4642      	mov	r2, r8
 80167a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80167a4:	f7ff fd90 	bl	80162c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80167a8:	e757      	b.n	801665a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80167aa:	142a      	asrs	r2, r5, #16
 80167ac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80167b0:	1433      	asrs	r3, r6, #16
 80167b2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80167b6:	fb09 2303 	mla	r3, r9, r3, r2
 80167ba:	085a      	lsrs	r2, r3, #1
 80167bc:	07d9      	lsls	r1, r3, #31
 80167be:	f818 2002 	ldrb.w	r2, [r8, r2]
 80167c2:	bf54      	ite	pl
 80167c4:	f002 020f 	andpl.w	r2, r2, #15
 80167c8:	1112      	asrmi	r2, r2, #4
 80167ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80167ce:	b2d2      	uxtb	r2, r2
 80167d0:	2800      	cmp	r0, #0
 80167d2:	f000 8085 	beq.w	80168e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80167d6:	f103 0a01 	add.w	sl, r3, #1
 80167da:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80167de:	f01a 0f01 	tst.w	sl, #1
 80167e2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80167e6:	bf0c      	ite	eq
 80167e8:	f001 010f 	andeq.w	r1, r1, #15
 80167ec:	1109      	asrne	r1, r1, #4
 80167ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80167f2:	b2c9      	uxtb	r1, r1
 80167f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80167f6:	b1df      	cbz	r7, 8016830 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80167f8:	444b      	add	r3, r9
 80167fa:	0859      	lsrs	r1, r3, #1
 80167fc:	f013 0f01 	tst.w	r3, #1
 8016800:	f103 0301 	add.w	r3, r3, #1
 8016804:	f818 1001 	ldrb.w	r1, [r8, r1]
 8016808:	bf0c      	ite	eq
 801680a:	f001 010f 	andeq.w	r1, r1, #15
 801680e:	1109      	asrne	r1, r1, #4
 8016810:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8016814:	b2c9      	uxtb	r1, r1
 8016816:	910b      	str	r1, [sp, #44]	; 0x2c
 8016818:	0859      	lsrs	r1, r3, #1
 801681a:	07db      	lsls	r3, r3, #31
 801681c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8016820:	bf54      	ite	pl
 8016822:	f001 010f 	andpl.w	r1, r1, #15
 8016826:	1109      	asrmi	r1, r1, #4
 8016828:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801682c:	b2c9      	uxtb	r1, r1
 801682e:	9110      	str	r1, [sp, #64]	; 0x40
 8016830:	b280      	uxth	r0, r0
 8016832:	b2bf      	uxth	r7, r7
 8016834:	fb00 f307 	mul.w	r3, r0, r7
 8016838:	0100      	lsls	r0, r0, #4
 801683a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801683e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8016842:	1ac0      	subs	r0, r0, r3
 8016844:	b2bf      	uxth	r7, r7
 8016846:	b280      	uxth	r0, r0
 8016848:	1bc9      	subs	r1, r1, r7
 801684a:	fa1f fa81 	uxth.w	sl, r1
 801684e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016850:	4348      	muls	r0, r1
 8016852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016854:	fb02 020a 	mla	r2, r2, sl, r0
 8016858:	fb07 2701 	mla	r7, r7, r1, r2
 801685c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801685e:	fb03 7302 	mla	r3, r3, r2, r7
 8016862:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016866:	b393      	cbz	r3, 80168ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8016868:	4a2a      	ldr	r2, [pc, #168]	; (8016914 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801686a:	2bff      	cmp	r3, #255	; 0xff
 801686c:	6811      	ldr	r1, [r2, #0]
 801686e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8016872:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8016876:	b2c9      	uxtb	r1, r1
 8016878:	d042      	beq.n	8016900 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801687a:	b298      	uxth	r0, r3
 801687c:	43db      	mvns	r3, r3
 801687e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8016882:	fb11 f100 	smulbb	r1, r1, r0
 8016886:	b2db      	uxtb	r3, r3
 8016888:	fb17 f700 	smulbb	r7, r7, r0
 801688c:	fb02 1103 	mla	r1, r2, r3, r1
 8016890:	fb1a f000 	smulbb	r0, sl, r0
 8016894:	b289      	uxth	r1, r1
 8016896:	1c4a      	adds	r2, r1, #1
 8016898:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801689c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80168a0:	fb02 7703 	mla	r7, r2, r3, r7
 80168a4:	1209      	asrs	r1, r1, #8
 80168a6:	b2bf      	uxth	r7, r7
 80168a8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80168ac:	1c7a      	adds	r2, r7, #1
 80168ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80168b2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80168b6:	fb02 0303 	mla	r3, r2, r3, r0
 80168ba:	123f      	asrs	r7, r7, #8
 80168bc:	b29b      	uxth	r3, r3
 80168be:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80168c2:	1c5a      	adds	r2, r3, #1
 80168c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80168c8:	121b      	asrs	r3, r3, #8
 80168ca:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80168ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80168d0:	f10c 0c03 	add.w	ip, ip, #3
 80168d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80168d8:	441d      	add	r5, r3
 80168da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80168dc:	441e      	add	r6, r3
 80168de:	e6e7      	b.n	80166b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80168e0:	2f00      	cmp	r7, #0
 80168e2:	d0a5      	beq.n	8016830 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80168e4:	444b      	add	r3, r9
 80168e6:	0859      	lsrs	r1, r3, #1
 80168e8:	07db      	lsls	r3, r3, #31
 80168ea:	f818 1001 	ldrb.w	r1, [r8, r1]
 80168ee:	bf54      	ite	pl
 80168f0:	f001 010f 	andpl.w	r1, r1, #15
 80168f4:	1109      	asrmi	r1, r1, #4
 80168f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80168fa:	b2c9      	uxtb	r1, r1
 80168fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80168fe:	e797      	b.n	8016830 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8016900:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8016904:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8016908:	f80c ac01 	strb.w	sl, [ip, #-1]
 801690c:	e7df      	b.n	80168ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801690e:	b013      	add	sp, #76	; 0x4c
 8016910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016914:	24006a98 	.word	0x24006a98

08016918 <CRC_Lock>:
 8016918:	4a20      	ldr	r2, [pc, #128]	; (801699c <CRC_Lock+0x84>)
 801691a:	b530      	push	{r4, r5, lr}
 801691c:	6813      	ldr	r3, [r2, #0]
 801691e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8016922:	f24c 2540 	movw	r5, #49728	; 0xc240
 8016926:	f023 0301 	bic.w	r3, r3, #1
 801692a:	6013      	str	r3, [r2, #0]
 801692c:	4b1c      	ldr	r3, [pc, #112]	; (80169a0 <CRC_Lock+0x88>)
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	4022      	ands	r2, r4
 8016932:	42aa      	cmp	r2, r5
 8016934:	d005      	beq.n	8016942 <CRC_Lock+0x2a>
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f24c 2270 	movw	r2, #49776	; 0xc270
 801693c:	4023      	ands	r3, r4
 801693e:	4293      	cmp	r3, r2
 8016940:	d124      	bne.n	801698c <CRC_Lock+0x74>
 8016942:	4b18      	ldr	r3, [pc, #96]	; (80169a4 <CRC_Lock+0x8c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	bb0b      	cbnz	r3, 801698c <CRC_Lock+0x74>
 8016948:	4b17      	ldr	r3, [pc, #92]	; (80169a8 <CRC_Lock+0x90>)
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8016950:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8016954:	d00d      	beq.n	8016972 <CRC_Lock+0x5a>
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	f240 4483 	movw	r4, #1155	; 0x483
 801695c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8016960:	42a2      	cmp	r2, r4
 8016962:	d006      	beq.n	8016972 <CRC_Lock+0x5a>
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f240 4285 	movw	r2, #1157	; 0x485
 801696a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801696e:	4293      	cmp	r3, r2
 8016970:	d10c      	bne.n	801698c <CRC_Lock+0x74>
 8016972:	4b0e      	ldr	r3, [pc, #56]	; (80169ac <CRC_Lock+0x94>)
 8016974:	2201      	movs	r2, #1
 8016976:	601a      	str	r2, [r3, #0]
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	2a00      	cmp	r2, #0
 801697c:	d1fc      	bne.n	8016978 <CRC_Lock+0x60>
 801697e:	4b0c      	ldr	r3, [pc, #48]	; (80169b0 <CRC_Lock+0x98>)
 8016980:	6018      	str	r0, [r3, #0]
 8016982:	6818      	ldr	r0, [r3, #0]
 8016984:	1a43      	subs	r3, r0, r1
 8016986:	4258      	negs	r0, r3
 8016988:	4158      	adcs	r0, r3
 801698a:	bd30      	pop	{r4, r5, pc}
 801698c:	4b09      	ldr	r3, [pc, #36]	; (80169b4 <CRC_Lock+0x9c>)
 801698e:	2201      	movs	r2, #1
 8016990:	601a      	str	r2, [r3, #0]
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	2a00      	cmp	r2, #0
 8016996:	d1fc      	bne.n	8016992 <CRC_Lock+0x7a>
 8016998:	4b07      	ldr	r3, [pc, #28]	; (80169b8 <CRC_Lock+0xa0>)
 801699a:	e7f1      	b.n	8016980 <CRC_Lock+0x68>
 801699c:	e0002000 	.word	0xe0002000
 80169a0:	e000ed00 	.word	0xe000ed00
 80169a4:	e0042000 	.word	0xe0042000
 80169a8:	5c001000 	.word	0x5c001000
 80169ac:	58024c08 	.word	0x58024c08
 80169b0:	58024c00 	.word	0x58024c00
 80169b4:	40023008 	.word	0x40023008
 80169b8:	40023000 	.word	0x40023000

080169bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80169bc:	6101      	str	r1, [r0, #16]
 80169be:	4770      	bx	lr

080169c0 <_ZN8touchgfx8Gestures4tickEv>:
 80169c0:	7b83      	ldrb	r3, [r0, #14]
 80169c2:	b14b      	cbz	r3, 80169d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80169c4:	8903      	ldrh	r3, [r0, #8]
 80169c6:	3301      	adds	r3, #1
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	2b07      	cmp	r3, #7
 80169cc:	8103      	strh	r3, [r0, #8]
 80169ce:	bf81      	itttt	hi
 80169d0:	2300      	movhi	r3, #0
 80169d2:	8143      	strhhi	r3, [r0, #10]
 80169d4:	8183      	strhhi	r3, [r0, #12]
 80169d6:	7383      	strbhi	r3, [r0, #14]
 80169d8:	4770      	bx	lr
	...

080169dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80169dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80169e0:	4698      	mov	r8, r3
 80169e2:	8883      	ldrh	r3, [r0, #4]
 80169e4:	4604      	mov	r4, r0
 80169e6:	4617      	mov	r7, r2
 80169e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80169ec:	eba8 0303 	sub.w	r3, r8, r3
 80169f0:	4a19      	ldr	r2, [pc, #100]	; (8016a58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80169f2:	460e      	mov	r6, r1
 80169f4:	b21b      	sxth	r3, r3
 80169f6:	88c1      	ldrh	r1, [r0, #6]
 80169f8:	9200      	str	r2, [sp, #0]
 80169fa:	2000      	movs	r0, #0
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	8aa2      	ldrh	r2, [r4, #20]
 8016a00:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8016a04:	bfb8      	it	lt
 8016a06:	425b      	neglt	r3, r3
 8016a08:	f88d 0004 	strb.w	r0, [sp, #4]
 8016a0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016a10:	b21b      	sxth	r3, r3
 8016a12:	f8ad 800a 	strh.w	r8, [sp, #10]
 8016a16:	f8ad 500c 	strh.w	r5, [sp, #12]
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	dc07      	bgt.n	8016a2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8016a1e:	1a69      	subs	r1, r5, r1
 8016a20:	b209      	sxth	r1, r1
 8016a22:	2900      	cmp	r1, #0
 8016a24:	bfb8      	it	lt
 8016a26:	4249      	neglt	r1, r1
 8016a28:	b209      	sxth	r1, r1
 8016a2a:	428a      	cmp	r2, r1
 8016a2c:	da10      	bge.n	8016a50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8016a2e:	6920      	ldr	r0, [r4, #16]
 8016a30:	4669      	mov	r1, sp
 8016a32:	eba8 0606 	sub.w	r6, r8, r6
 8016a36:	1bef      	subs	r7, r5, r7
 8016a38:	6803      	ldr	r3, [r0, #0]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	4798      	blx	r3
 8016a3e:	2300      	movs	r3, #0
 8016a40:	2001      	movs	r0, #1
 8016a42:	8166      	strh	r6, [r4, #10]
 8016a44:	8123      	strh	r3, [r4, #8]
 8016a46:	81a7      	strh	r7, [r4, #12]
 8016a48:	f8a4 8004 	strh.w	r8, [r4, #4]
 8016a4c:	80e5      	strh	r5, [r4, #6]
 8016a4e:	73a0      	strb	r0, [r4, #14]
 8016a50:	b004      	add	sp, #16
 8016a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a56:	bf00      	nop
 8016a58:	0801902c 	.word	0x0801902c

08016a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8016a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a5e:	461e      	mov	r6, r3
 8016a60:	1e4b      	subs	r3, r1, #1
 8016a62:	b085      	sub	sp, #20
 8016a64:	4604      	mov	r4, r0
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	460d      	mov	r5, r1
 8016a6a:	4617      	mov	r7, r2
 8016a6c:	d84b      	bhi.n	8016b06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8016a6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016a72:	1cd3      	adds	r3, r2, #3
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	2b06      	cmp	r3, #6
 8016a78:	d916      	bls.n	8016aa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8016a7a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8016b1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8016a7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016a82:	f8cd c004 	str.w	ip, [sp, #4]
 8016a86:	f04f 0c00 	mov.w	ip, #0
 8016a8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016a8e:	6900      	ldr	r0, [r0, #16]
 8016a90:	f8ad 100c 	strh.w	r1, [sp, #12]
 8016a94:	a901      	add	r1, sp, #4
 8016a96:	f88d c008 	strb.w	ip, [sp, #8]
 8016a9a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8016a9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016aa2:	6803      	ldr	r3, [r0, #0]
 8016aa4:	689b      	ldr	r3, [r3, #8]
 8016aa6:	4798      	blx	r3
 8016aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016aac:	1cd3      	adds	r3, r2, #3
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	2b06      	cmp	r3, #6
 8016ab2:	d916      	bls.n	8016ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8016ab4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8016b1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8016ab8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016abc:	f8cd c004 	str.w	ip, [sp, #4]
 8016ac0:	f04f 0c01 	mov.w	ip, #1
 8016ac4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016ac8:	6920      	ldr	r0, [r4, #16]
 8016aca:	f8ad 100c 	strh.w	r1, [sp, #12]
 8016ace:	a901      	add	r1, sp, #4
 8016ad0:	f88d c008 	strb.w	ip, [sp, #8]
 8016ad4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8016ad8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016adc:	6803      	ldr	r3, [r0, #0]
 8016ade:	689b      	ldr	r3, [r3, #8]
 8016ae0:	4798      	blx	r3
 8016ae2:	4b0d      	ldr	r3, [pc, #52]	; (8016b18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8016ae4:	a901      	add	r1, sp, #4
 8016ae6:	6920      	ldr	r0, [r4, #16]
 8016ae8:	9301      	str	r3, [sp, #4]
 8016aea:	2300      	movs	r3, #0
 8016aec:	f88d 5008 	strb.w	r5, [sp, #8]
 8016af0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8016af4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016af8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016afc:	6803      	ldr	r3, [r0, #0]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4798      	blx	r3
 8016b02:	b005      	add	sp, #20
 8016b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b06:	2900      	cmp	r1, #0
 8016b08:	d1eb      	bne.n	8016ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8016b0a:	80a2      	strh	r2, [r4, #4]
 8016b0c:	80c6      	strh	r6, [r0, #6]
 8016b0e:	60a1      	str	r1, [r4, #8]
 8016b10:	81a1      	strh	r1, [r4, #12]
 8016b12:	73a1      	strb	r1, [r4, #14]
 8016b14:	e7e5      	b.n	8016ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8016b16:	bf00      	nop
 8016b18:	08019018 	.word	0x08019018
 8016b1c:	08019040 	.word	0x08019040

08016b20 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8016b20:	790b      	ldrb	r3, [r1, #4]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	bf0c      	ite	eq
 8016b26:	2301      	moveq	r3, #1
 8016b28:	2300      	movne	r3, #0
 8016b2a:	b570      	push	{r4, r5, r6, lr}
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016b32:	460e      	mov	r6, r1
 8016b34:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8016b38:	d109      	bne.n	8016b4e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8016b3a:	b14d      	cbz	r5, 8016b50 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8016b3c:	7933      	ldrb	r3, [r6, #4]
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	d10c      	bne.n	8016b5c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8016b42:	6823      	ldr	r3, [r4, #0]
 8016b44:	4620      	mov	r0, r4
 8016b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b4c:	4718      	bx	r3
 8016b4e:	b12d      	cbz	r5, 8016b5c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8016b50:	6823      	ldr	r3, [r4, #0]
 8016b52:	4620      	mov	r0, r4
 8016b54:	695b      	ldr	r3, [r3, #20]
 8016b56:	4798      	blx	r3
 8016b58:	2d00      	cmp	r5, #0
 8016b5a:	d1ef      	bne.n	8016b3c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8016b5c:	bd70      	pop	{r4, r5, r6, pc}

08016b5e <__aeabi_atexit>:
 8016b5e:	460b      	mov	r3, r1
 8016b60:	4601      	mov	r1, r0
 8016b62:	4618      	mov	r0, r3
 8016b64:	f000 b852 	b.w	8016c0c <__cxa_atexit>

08016b68 <_ZdlPvj>:
 8016b68:	f000 b812 	b.w	8016b90 <_ZdlPv>

08016b6c <__cxa_guard_acquire>:
 8016b6c:	6803      	ldr	r3, [r0, #0]
 8016b6e:	07db      	lsls	r3, r3, #31
 8016b70:	d406      	bmi.n	8016b80 <__cxa_guard_acquire+0x14>
 8016b72:	7843      	ldrb	r3, [r0, #1]
 8016b74:	b103      	cbz	r3, 8016b78 <__cxa_guard_acquire+0xc>
 8016b76:	deff      	udf	#255	; 0xff
 8016b78:	2301      	movs	r3, #1
 8016b7a:	7043      	strb	r3, [r0, #1]
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	4770      	bx	lr
 8016b80:	2000      	movs	r0, #0
 8016b82:	4770      	bx	lr

08016b84 <__cxa_guard_release>:
 8016b84:	2301      	movs	r3, #1
 8016b86:	6003      	str	r3, [r0, #0]
 8016b88:	4770      	bx	lr

08016b8a <__cxa_pure_virtual>:
 8016b8a:	b508      	push	{r3, lr}
 8016b8c:	f000 f80e 	bl	8016bac <_ZSt9terminatev>

08016b90 <_ZdlPv>:
 8016b90:	f000 b988 	b.w	8016ea4 <free>

08016b94 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016b94:	b508      	push	{r3, lr}
 8016b96:	4780      	blx	r0
 8016b98:	f000 f80d 	bl	8016bb6 <abort>

08016b9c <_ZSt13get_terminatev>:
 8016b9c:	4b02      	ldr	r3, [pc, #8]	; (8016ba8 <_ZSt13get_terminatev+0xc>)
 8016b9e:	6818      	ldr	r0, [r3, #0]
 8016ba0:	f3bf 8f5b 	dmb	ish
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	240000a4 	.word	0x240000a4

08016bac <_ZSt9terminatev>:
 8016bac:	b508      	push	{r3, lr}
 8016bae:	f7ff fff5 	bl	8016b9c <_ZSt13get_terminatev>
 8016bb2:	f7ff ffef 	bl	8016b94 <_ZN10__cxxabiv111__terminateEPFvvE>

08016bb6 <abort>:
 8016bb6:	b508      	push	{r3, lr}
 8016bb8:	2006      	movs	r0, #6
 8016bba:	f000 fe01 	bl	80177c0 <raise>
 8016bbe:	2001      	movs	r0, #1
 8016bc0:	f7ea fa78 	bl	80010b4 <_exit>

08016bc4 <__assert_func>:
 8016bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bc6:	4614      	mov	r4, r2
 8016bc8:	461a      	mov	r2, r3
 8016bca:	4b09      	ldr	r3, [pc, #36]	; (8016bf0 <__assert_func+0x2c>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	4605      	mov	r5, r0
 8016bd0:	68d8      	ldr	r0, [r3, #12]
 8016bd2:	b14c      	cbz	r4, 8016be8 <__assert_func+0x24>
 8016bd4:	4b07      	ldr	r3, [pc, #28]	; (8016bf4 <__assert_func+0x30>)
 8016bd6:	9100      	str	r1, [sp, #0]
 8016bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016bdc:	4906      	ldr	r1, [pc, #24]	; (8016bf8 <__assert_func+0x34>)
 8016bde:	462b      	mov	r3, r5
 8016be0:	f000 f8fe 	bl	8016de0 <fiprintf>
 8016be4:	f7ff ffe7 	bl	8016bb6 <abort>
 8016be8:	4b04      	ldr	r3, [pc, #16]	; (8016bfc <__assert_func+0x38>)
 8016bea:	461c      	mov	r4, r3
 8016bec:	e7f3      	b.n	8016bd6 <__assert_func+0x12>
 8016bee:	bf00      	nop
 8016bf0:	240000a8 	.word	0x240000a8
 8016bf4:	08019268 	.word	0x08019268
 8016bf8:	08019275 	.word	0x08019275
 8016bfc:	080192a3 	.word	0x080192a3

08016c00 <atexit>:
 8016c00:	2300      	movs	r3, #0
 8016c02:	4601      	mov	r1, r0
 8016c04:	461a      	mov	r2, r3
 8016c06:	4618      	mov	r0, r3
 8016c08:	f000 bf0c 	b.w	8017a24 <__register_exitproc>

08016c0c <__cxa_atexit>:
 8016c0c:	b510      	push	{r4, lr}
 8016c0e:	4c05      	ldr	r4, [pc, #20]	; (8016c24 <__cxa_atexit+0x18>)
 8016c10:	4613      	mov	r3, r2
 8016c12:	b12c      	cbz	r4, 8016c20 <__cxa_atexit+0x14>
 8016c14:	460a      	mov	r2, r1
 8016c16:	4601      	mov	r1, r0
 8016c18:	2002      	movs	r0, #2
 8016c1a:	f000 ff03 	bl	8017a24 <__register_exitproc>
 8016c1e:	bd10      	pop	{r4, pc}
 8016c20:	4620      	mov	r0, r4
 8016c22:	e7fc      	b.n	8016c1e <__cxa_atexit+0x12>
 8016c24:	08017a25 	.word	0x08017a25

08016c28 <__errno>:
 8016c28:	4b01      	ldr	r3, [pc, #4]	; (8016c30 <__errno+0x8>)
 8016c2a:	6818      	ldr	r0, [r3, #0]
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	240000a8 	.word	0x240000a8

08016c34 <std>:
 8016c34:	2300      	movs	r3, #0
 8016c36:	b510      	push	{r4, lr}
 8016c38:	4604      	mov	r4, r0
 8016c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8016c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c42:	6083      	str	r3, [r0, #8]
 8016c44:	8181      	strh	r1, [r0, #12]
 8016c46:	6643      	str	r3, [r0, #100]	; 0x64
 8016c48:	81c2      	strh	r2, [r0, #14]
 8016c4a:	6183      	str	r3, [r0, #24]
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	2208      	movs	r2, #8
 8016c50:	305c      	adds	r0, #92	; 0x5c
 8016c52:	f000 f93d 	bl	8016ed0 <memset>
 8016c56:	4b05      	ldr	r3, [pc, #20]	; (8016c6c <std+0x38>)
 8016c58:	6263      	str	r3, [r4, #36]	; 0x24
 8016c5a:	4b05      	ldr	r3, [pc, #20]	; (8016c70 <std+0x3c>)
 8016c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c5e:	4b05      	ldr	r3, [pc, #20]	; (8016c74 <std+0x40>)
 8016c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c62:	4b05      	ldr	r3, [pc, #20]	; (8016c78 <std+0x44>)
 8016c64:	6224      	str	r4, [r4, #32]
 8016c66:	6323      	str	r3, [r4, #48]	; 0x30
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	bf00      	nop
 8016c6c:	080177f9 	.word	0x080177f9
 8016c70:	0801781b 	.word	0x0801781b
 8016c74:	08017853 	.word	0x08017853
 8016c78:	08017877 	.word	0x08017877

08016c7c <_cleanup_r>:
 8016c7c:	4901      	ldr	r1, [pc, #4]	; (8016c84 <_cleanup_r+0x8>)
 8016c7e:	f000 b8c1 	b.w	8016e04 <_fwalk_reent>
 8016c82:	bf00      	nop
 8016c84:	08017c15 	.word	0x08017c15

08016c88 <__sfmoreglue>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	2268      	movs	r2, #104	; 0x68
 8016c8c:	1e4d      	subs	r5, r1, #1
 8016c8e:	4355      	muls	r5, r2
 8016c90:	460e      	mov	r6, r1
 8016c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016c96:	f000 f98f 	bl	8016fb8 <_malloc_r>
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	b140      	cbz	r0, 8016cb0 <__sfmoreglue+0x28>
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8016ca4:	300c      	adds	r0, #12
 8016ca6:	60a0      	str	r0, [r4, #8]
 8016ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016cac:	f000 f910 	bl	8016ed0 <memset>
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	bd70      	pop	{r4, r5, r6, pc}

08016cb4 <__sfp_lock_acquire>:
 8016cb4:	4801      	ldr	r0, [pc, #4]	; (8016cbc <__sfp_lock_acquire+0x8>)
 8016cb6:	f000 b8ea 	b.w	8016e8e <__retarget_lock_acquire_recursive>
 8016cba:	bf00      	nop
 8016cbc:	24006b6e 	.word	0x24006b6e

08016cc0 <__sfp_lock_release>:
 8016cc0:	4801      	ldr	r0, [pc, #4]	; (8016cc8 <__sfp_lock_release+0x8>)
 8016cc2:	f000 b8e6 	b.w	8016e92 <__retarget_lock_release_recursive>
 8016cc6:	bf00      	nop
 8016cc8:	24006b6e 	.word	0x24006b6e

08016ccc <__sinit_lock_acquire>:
 8016ccc:	4801      	ldr	r0, [pc, #4]	; (8016cd4 <__sinit_lock_acquire+0x8>)
 8016cce:	f000 b8de 	b.w	8016e8e <__retarget_lock_acquire_recursive>
 8016cd2:	bf00      	nop
 8016cd4:	24006b6f 	.word	0x24006b6f

08016cd8 <__sinit_lock_release>:
 8016cd8:	4801      	ldr	r0, [pc, #4]	; (8016ce0 <__sinit_lock_release+0x8>)
 8016cda:	f000 b8da 	b.w	8016e92 <__retarget_lock_release_recursive>
 8016cde:	bf00      	nop
 8016ce0:	24006b6f 	.word	0x24006b6f

08016ce4 <__sinit>:
 8016ce4:	b510      	push	{r4, lr}
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	f7ff fff0 	bl	8016ccc <__sinit_lock_acquire>
 8016cec:	69a3      	ldr	r3, [r4, #24]
 8016cee:	b11b      	cbz	r3, 8016cf8 <__sinit+0x14>
 8016cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cf4:	f7ff bff0 	b.w	8016cd8 <__sinit_lock_release>
 8016cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8016cfe:	4b13      	ldr	r3, [pc, #76]	; (8016d4c <__sinit+0x68>)
 8016d00:	4a13      	ldr	r2, [pc, #76]	; (8016d50 <__sinit+0x6c>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d06:	42a3      	cmp	r3, r4
 8016d08:	bf04      	itt	eq
 8016d0a:	2301      	moveq	r3, #1
 8016d0c:	61a3      	streq	r3, [r4, #24]
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f000 f820 	bl	8016d54 <__sfp>
 8016d14:	6060      	str	r0, [r4, #4]
 8016d16:	4620      	mov	r0, r4
 8016d18:	f000 f81c 	bl	8016d54 <__sfp>
 8016d1c:	60a0      	str	r0, [r4, #8]
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f000 f818 	bl	8016d54 <__sfp>
 8016d24:	2200      	movs	r2, #0
 8016d26:	60e0      	str	r0, [r4, #12]
 8016d28:	2104      	movs	r1, #4
 8016d2a:	6860      	ldr	r0, [r4, #4]
 8016d2c:	f7ff ff82 	bl	8016c34 <std>
 8016d30:	68a0      	ldr	r0, [r4, #8]
 8016d32:	2201      	movs	r2, #1
 8016d34:	2109      	movs	r1, #9
 8016d36:	f7ff ff7d 	bl	8016c34 <std>
 8016d3a:	68e0      	ldr	r0, [r4, #12]
 8016d3c:	2202      	movs	r2, #2
 8016d3e:	2112      	movs	r1, #18
 8016d40:	f7ff ff78 	bl	8016c34 <std>
 8016d44:	2301      	movs	r3, #1
 8016d46:	61a3      	str	r3, [r4, #24]
 8016d48:	e7d2      	b.n	8016cf0 <__sinit+0xc>
 8016d4a:	bf00      	nop
 8016d4c:	08019304 	.word	0x08019304
 8016d50:	08016c7d 	.word	0x08016c7d

08016d54 <__sfp>:
 8016d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d56:	4607      	mov	r7, r0
 8016d58:	f7ff ffac 	bl	8016cb4 <__sfp_lock_acquire>
 8016d5c:	4b1e      	ldr	r3, [pc, #120]	; (8016dd8 <__sfp+0x84>)
 8016d5e:	681e      	ldr	r6, [r3, #0]
 8016d60:	69b3      	ldr	r3, [r6, #24]
 8016d62:	b913      	cbnz	r3, 8016d6a <__sfp+0x16>
 8016d64:	4630      	mov	r0, r6
 8016d66:	f7ff ffbd 	bl	8016ce4 <__sinit>
 8016d6a:	3648      	adds	r6, #72	; 0x48
 8016d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016d70:	3b01      	subs	r3, #1
 8016d72:	d503      	bpl.n	8016d7c <__sfp+0x28>
 8016d74:	6833      	ldr	r3, [r6, #0]
 8016d76:	b30b      	cbz	r3, 8016dbc <__sfp+0x68>
 8016d78:	6836      	ldr	r6, [r6, #0]
 8016d7a:	e7f7      	b.n	8016d6c <__sfp+0x18>
 8016d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d80:	b9d5      	cbnz	r5, 8016db8 <__sfp+0x64>
 8016d82:	4b16      	ldr	r3, [pc, #88]	; (8016ddc <__sfp+0x88>)
 8016d84:	60e3      	str	r3, [r4, #12]
 8016d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8016d8c:	f000 f87e 	bl	8016e8c <__retarget_lock_init_recursive>
 8016d90:	f7ff ff96 	bl	8016cc0 <__sfp_lock_release>
 8016d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016d9c:	6025      	str	r5, [r4, #0]
 8016d9e:	61a5      	str	r5, [r4, #24]
 8016da0:	2208      	movs	r2, #8
 8016da2:	4629      	mov	r1, r5
 8016da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016da8:	f000 f892 	bl	8016ed0 <memset>
 8016dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016db4:	4620      	mov	r0, r4
 8016db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016db8:	3468      	adds	r4, #104	; 0x68
 8016dba:	e7d9      	b.n	8016d70 <__sfp+0x1c>
 8016dbc:	2104      	movs	r1, #4
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f7ff ff62 	bl	8016c88 <__sfmoreglue>
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	6030      	str	r0, [r6, #0]
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	d1d5      	bne.n	8016d78 <__sfp+0x24>
 8016dcc:	f7ff ff78 	bl	8016cc0 <__sfp_lock_release>
 8016dd0:	230c      	movs	r3, #12
 8016dd2:	603b      	str	r3, [r7, #0]
 8016dd4:	e7ee      	b.n	8016db4 <__sfp+0x60>
 8016dd6:	bf00      	nop
 8016dd8:	08019304 	.word	0x08019304
 8016ddc:	ffff0001 	.word	0xffff0001

08016de0 <fiprintf>:
 8016de0:	b40e      	push	{r1, r2, r3}
 8016de2:	b503      	push	{r0, r1, lr}
 8016de4:	4601      	mov	r1, r0
 8016de6:	ab03      	add	r3, sp, #12
 8016de8:	4805      	ldr	r0, [pc, #20]	; (8016e00 <fiprintf+0x20>)
 8016dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dee:	6800      	ldr	r0, [r0, #0]
 8016df0:	9301      	str	r3, [sp, #4]
 8016df2:	f000 f97f 	bl	80170f4 <_vfiprintf_r>
 8016df6:	b002      	add	sp, #8
 8016df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dfc:	b003      	add	sp, #12
 8016dfe:	4770      	bx	lr
 8016e00:	240000a8 	.word	0x240000a8

08016e04 <_fwalk_reent>:
 8016e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e08:	4606      	mov	r6, r0
 8016e0a:	4688      	mov	r8, r1
 8016e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e10:	2700      	movs	r7, #0
 8016e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e16:	f1b9 0901 	subs.w	r9, r9, #1
 8016e1a:	d505      	bpl.n	8016e28 <_fwalk_reent+0x24>
 8016e1c:	6824      	ldr	r4, [r4, #0]
 8016e1e:	2c00      	cmp	r4, #0
 8016e20:	d1f7      	bne.n	8016e12 <_fwalk_reent+0xe>
 8016e22:	4638      	mov	r0, r7
 8016e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e28:	89ab      	ldrh	r3, [r5, #12]
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	d907      	bls.n	8016e3e <_fwalk_reent+0x3a>
 8016e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e32:	3301      	adds	r3, #1
 8016e34:	d003      	beq.n	8016e3e <_fwalk_reent+0x3a>
 8016e36:	4629      	mov	r1, r5
 8016e38:	4630      	mov	r0, r6
 8016e3a:	47c0      	blx	r8
 8016e3c:	4307      	orrs	r7, r0
 8016e3e:	3568      	adds	r5, #104	; 0x68
 8016e40:	e7e9      	b.n	8016e16 <_fwalk_reent+0x12>
	...

08016e44 <__libc_init_array>:
 8016e44:	b570      	push	{r4, r5, r6, lr}
 8016e46:	4d0d      	ldr	r5, [pc, #52]	; (8016e7c <__libc_init_array+0x38>)
 8016e48:	4c0d      	ldr	r4, [pc, #52]	; (8016e80 <__libc_init_array+0x3c>)
 8016e4a:	1b64      	subs	r4, r4, r5
 8016e4c:	10a4      	asrs	r4, r4, #2
 8016e4e:	2600      	movs	r6, #0
 8016e50:	42a6      	cmp	r6, r4
 8016e52:	d109      	bne.n	8016e68 <__libc_init_array+0x24>
 8016e54:	4d0b      	ldr	r5, [pc, #44]	; (8016e84 <__libc_init_array+0x40>)
 8016e56:	4c0c      	ldr	r4, [pc, #48]	; (8016e88 <__libc_init_array+0x44>)
 8016e58:	f000 ffd0 	bl	8017dfc <_init>
 8016e5c:	1b64      	subs	r4, r4, r5
 8016e5e:	10a4      	asrs	r4, r4, #2
 8016e60:	2600      	movs	r6, #0
 8016e62:	42a6      	cmp	r6, r4
 8016e64:	d105      	bne.n	8016e72 <__libc_init_array+0x2e>
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e6c:	4798      	blx	r3
 8016e6e:	3601      	adds	r6, #1
 8016e70:	e7ee      	b.n	8016e50 <__libc_init_array+0xc>
 8016e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e76:	4798      	blx	r3
 8016e78:	3601      	adds	r6, #1
 8016e7a:	e7f2      	b.n	8016e62 <__libc_init_array+0x1e>
 8016e7c:	08019510 	.word	0x08019510
 8016e80:	08019510 	.word	0x08019510
 8016e84:	08019510 	.word	0x08019510
 8016e88:	08019524 	.word	0x08019524

08016e8c <__retarget_lock_init_recursive>:
 8016e8c:	4770      	bx	lr

08016e8e <__retarget_lock_acquire_recursive>:
 8016e8e:	4770      	bx	lr

08016e90 <__retarget_lock_release>:
 8016e90:	4770      	bx	lr

08016e92 <__retarget_lock_release_recursive>:
 8016e92:	4770      	bx	lr

08016e94 <malloc>:
 8016e94:	4b02      	ldr	r3, [pc, #8]	; (8016ea0 <malloc+0xc>)
 8016e96:	4601      	mov	r1, r0
 8016e98:	6818      	ldr	r0, [r3, #0]
 8016e9a:	f000 b88d 	b.w	8016fb8 <_malloc_r>
 8016e9e:	bf00      	nop
 8016ea0:	240000a8 	.word	0x240000a8

08016ea4 <free>:
 8016ea4:	4b02      	ldr	r3, [pc, #8]	; (8016eb0 <free+0xc>)
 8016ea6:	4601      	mov	r1, r0
 8016ea8:	6818      	ldr	r0, [r3, #0]
 8016eaa:	f000 b819 	b.w	8016ee0 <_free_r>
 8016eae:	bf00      	nop
 8016eb0:	240000a8 	.word	0x240000a8

08016eb4 <memcpy>:
 8016eb4:	440a      	add	r2, r1
 8016eb6:	4291      	cmp	r1, r2
 8016eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016ebc:	d100      	bne.n	8016ec0 <memcpy+0xc>
 8016ebe:	4770      	bx	lr
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eca:	4291      	cmp	r1, r2
 8016ecc:	d1f9      	bne.n	8016ec2 <memcpy+0xe>
 8016ece:	bd10      	pop	{r4, pc}

08016ed0 <memset>:
 8016ed0:	4402      	add	r2, r0
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	4293      	cmp	r3, r2
 8016ed6:	d100      	bne.n	8016eda <memset+0xa>
 8016ed8:	4770      	bx	lr
 8016eda:	f803 1b01 	strb.w	r1, [r3], #1
 8016ede:	e7f9      	b.n	8016ed4 <memset+0x4>

08016ee0 <_free_r>:
 8016ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ee2:	2900      	cmp	r1, #0
 8016ee4:	d044      	beq.n	8016f70 <_free_r+0x90>
 8016ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016eea:	9001      	str	r0, [sp, #4]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	f1a1 0404 	sub.w	r4, r1, #4
 8016ef2:	bfb8      	it	lt
 8016ef4:	18e4      	addlt	r4, r4, r3
 8016ef6:	f000 ff41 	bl	8017d7c <__malloc_lock>
 8016efa:	4a1e      	ldr	r2, [pc, #120]	; (8016f74 <_free_r+0x94>)
 8016efc:	9801      	ldr	r0, [sp, #4]
 8016efe:	6813      	ldr	r3, [r2, #0]
 8016f00:	b933      	cbnz	r3, 8016f10 <_free_r+0x30>
 8016f02:	6063      	str	r3, [r4, #4]
 8016f04:	6014      	str	r4, [r2, #0]
 8016f06:	b003      	add	sp, #12
 8016f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f0c:	f000 bf3c 	b.w	8017d88 <__malloc_unlock>
 8016f10:	42a3      	cmp	r3, r4
 8016f12:	d908      	bls.n	8016f26 <_free_r+0x46>
 8016f14:	6825      	ldr	r5, [r4, #0]
 8016f16:	1961      	adds	r1, r4, r5
 8016f18:	428b      	cmp	r3, r1
 8016f1a:	bf01      	itttt	eq
 8016f1c:	6819      	ldreq	r1, [r3, #0]
 8016f1e:	685b      	ldreq	r3, [r3, #4]
 8016f20:	1949      	addeq	r1, r1, r5
 8016f22:	6021      	streq	r1, [r4, #0]
 8016f24:	e7ed      	b.n	8016f02 <_free_r+0x22>
 8016f26:	461a      	mov	r2, r3
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	b10b      	cbz	r3, 8016f30 <_free_r+0x50>
 8016f2c:	42a3      	cmp	r3, r4
 8016f2e:	d9fa      	bls.n	8016f26 <_free_r+0x46>
 8016f30:	6811      	ldr	r1, [r2, #0]
 8016f32:	1855      	adds	r5, r2, r1
 8016f34:	42a5      	cmp	r5, r4
 8016f36:	d10b      	bne.n	8016f50 <_free_r+0x70>
 8016f38:	6824      	ldr	r4, [r4, #0]
 8016f3a:	4421      	add	r1, r4
 8016f3c:	1854      	adds	r4, r2, r1
 8016f3e:	42a3      	cmp	r3, r4
 8016f40:	6011      	str	r1, [r2, #0]
 8016f42:	d1e0      	bne.n	8016f06 <_free_r+0x26>
 8016f44:	681c      	ldr	r4, [r3, #0]
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	6053      	str	r3, [r2, #4]
 8016f4a:	4421      	add	r1, r4
 8016f4c:	6011      	str	r1, [r2, #0]
 8016f4e:	e7da      	b.n	8016f06 <_free_r+0x26>
 8016f50:	d902      	bls.n	8016f58 <_free_r+0x78>
 8016f52:	230c      	movs	r3, #12
 8016f54:	6003      	str	r3, [r0, #0]
 8016f56:	e7d6      	b.n	8016f06 <_free_r+0x26>
 8016f58:	6825      	ldr	r5, [r4, #0]
 8016f5a:	1961      	adds	r1, r4, r5
 8016f5c:	428b      	cmp	r3, r1
 8016f5e:	bf04      	itt	eq
 8016f60:	6819      	ldreq	r1, [r3, #0]
 8016f62:	685b      	ldreq	r3, [r3, #4]
 8016f64:	6063      	str	r3, [r4, #4]
 8016f66:	bf04      	itt	eq
 8016f68:	1949      	addeq	r1, r1, r5
 8016f6a:	6021      	streq	r1, [r4, #0]
 8016f6c:	6054      	str	r4, [r2, #4]
 8016f6e:	e7ca      	b.n	8016f06 <_free_r+0x26>
 8016f70:	b003      	add	sp, #12
 8016f72:	bd30      	pop	{r4, r5, pc}
 8016f74:	24006b70 	.word	0x24006b70

08016f78 <sbrk_aligned>:
 8016f78:	b570      	push	{r4, r5, r6, lr}
 8016f7a:	4e0e      	ldr	r6, [pc, #56]	; (8016fb4 <sbrk_aligned+0x3c>)
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	6831      	ldr	r1, [r6, #0]
 8016f80:	4605      	mov	r5, r0
 8016f82:	b911      	cbnz	r1, 8016f8a <sbrk_aligned+0x12>
 8016f84:	f000 fbe4 	bl	8017750 <_sbrk_r>
 8016f88:	6030      	str	r0, [r6, #0]
 8016f8a:	4621      	mov	r1, r4
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	f000 fbdf 	bl	8017750 <_sbrk_r>
 8016f92:	1c43      	adds	r3, r0, #1
 8016f94:	d00a      	beq.n	8016fac <sbrk_aligned+0x34>
 8016f96:	1cc4      	adds	r4, r0, #3
 8016f98:	f024 0403 	bic.w	r4, r4, #3
 8016f9c:	42a0      	cmp	r0, r4
 8016f9e:	d007      	beq.n	8016fb0 <sbrk_aligned+0x38>
 8016fa0:	1a21      	subs	r1, r4, r0
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	f000 fbd4 	bl	8017750 <_sbrk_r>
 8016fa8:	3001      	adds	r0, #1
 8016faa:	d101      	bne.n	8016fb0 <sbrk_aligned+0x38>
 8016fac:	f04f 34ff 	mov.w	r4, #4294967295
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	bd70      	pop	{r4, r5, r6, pc}
 8016fb4:	24006b74 	.word	0x24006b74

08016fb8 <_malloc_r>:
 8016fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fbc:	1ccd      	adds	r5, r1, #3
 8016fbe:	f025 0503 	bic.w	r5, r5, #3
 8016fc2:	3508      	adds	r5, #8
 8016fc4:	2d0c      	cmp	r5, #12
 8016fc6:	bf38      	it	cc
 8016fc8:	250c      	movcc	r5, #12
 8016fca:	2d00      	cmp	r5, #0
 8016fcc:	4607      	mov	r7, r0
 8016fce:	db01      	blt.n	8016fd4 <_malloc_r+0x1c>
 8016fd0:	42a9      	cmp	r1, r5
 8016fd2:	d905      	bls.n	8016fe0 <_malloc_r+0x28>
 8016fd4:	230c      	movs	r3, #12
 8016fd6:	603b      	str	r3, [r7, #0]
 8016fd8:	2600      	movs	r6, #0
 8016fda:	4630      	mov	r0, r6
 8016fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fe0:	4e2e      	ldr	r6, [pc, #184]	; (801709c <_malloc_r+0xe4>)
 8016fe2:	f000 fecb 	bl	8017d7c <__malloc_lock>
 8016fe6:	6833      	ldr	r3, [r6, #0]
 8016fe8:	461c      	mov	r4, r3
 8016fea:	bb34      	cbnz	r4, 801703a <_malloc_r+0x82>
 8016fec:	4629      	mov	r1, r5
 8016fee:	4638      	mov	r0, r7
 8016ff0:	f7ff ffc2 	bl	8016f78 <sbrk_aligned>
 8016ff4:	1c43      	adds	r3, r0, #1
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	d14d      	bne.n	8017096 <_malloc_r+0xde>
 8016ffa:	6834      	ldr	r4, [r6, #0]
 8016ffc:	4626      	mov	r6, r4
 8016ffe:	2e00      	cmp	r6, #0
 8017000:	d140      	bne.n	8017084 <_malloc_r+0xcc>
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	4631      	mov	r1, r6
 8017006:	4638      	mov	r0, r7
 8017008:	eb04 0803 	add.w	r8, r4, r3
 801700c:	f000 fba0 	bl	8017750 <_sbrk_r>
 8017010:	4580      	cmp	r8, r0
 8017012:	d13a      	bne.n	801708a <_malloc_r+0xd2>
 8017014:	6821      	ldr	r1, [r4, #0]
 8017016:	3503      	adds	r5, #3
 8017018:	1a6d      	subs	r5, r5, r1
 801701a:	f025 0503 	bic.w	r5, r5, #3
 801701e:	3508      	adds	r5, #8
 8017020:	2d0c      	cmp	r5, #12
 8017022:	bf38      	it	cc
 8017024:	250c      	movcc	r5, #12
 8017026:	4629      	mov	r1, r5
 8017028:	4638      	mov	r0, r7
 801702a:	f7ff ffa5 	bl	8016f78 <sbrk_aligned>
 801702e:	3001      	adds	r0, #1
 8017030:	d02b      	beq.n	801708a <_malloc_r+0xd2>
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	442b      	add	r3, r5
 8017036:	6023      	str	r3, [r4, #0]
 8017038:	e00e      	b.n	8017058 <_malloc_r+0xa0>
 801703a:	6822      	ldr	r2, [r4, #0]
 801703c:	1b52      	subs	r2, r2, r5
 801703e:	d41e      	bmi.n	801707e <_malloc_r+0xc6>
 8017040:	2a0b      	cmp	r2, #11
 8017042:	d916      	bls.n	8017072 <_malloc_r+0xba>
 8017044:	1961      	adds	r1, r4, r5
 8017046:	42a3      	cmp	r3, r4
 8017048:	6025      	str	r5, [r4, #0]
 801704a:	bf18      	it	ne
 801704c:	6059      	strne	r1, [r3, #4]
 801704e:	6863      	ldr	r3, [r4, #4]
 8017050:	bf08      	it	eq
 8017052:	6031      	streq	r1, [r6, #0]
 8017054:	5162      	str	r2, [r4, r5]
 8017056:	604b      	str	r3, [r1, #4]
 8017058:	4638      	mov	r0, r7
 801705a:	f104 060b 	add.w	r6, r4, #11
 801705e:	f000 fe93 	bl	8017d88 <__malloc_unlock>
 8017062:	f026 0607 	bic.w	r6, r6, #7
 8017066:	1d23      	adds	r3, r4, #4
 8017068:	1af2      	subs	r2, r6, r3
 801706a:	d0b6      	beq.n	8016fda <_malloc_r+0x22>
 801706c:	1b9b      	subs	r3, r3, r6
 801706e:	50a3      	str	r3, [r4, r2]
 8017070:	e7b3      	b.n	8016fda <_malloc_r+0x22>
 8017072:	6862      	ldr	r2, [r4, #4]
 8017074:	42a3      	cmp	r3, r4
 8017076:	bf0c      	ite	eq
 8017078:	6032      	streq	r2, [r6, #0]
 801707a:	605a      	strne	r2, [r3, #4]
 801707c:	e7ec      	b.n	8017058 <_malloc_r+0xa0>
 801707e:	4623      	mov	r3, r4
 8017080:	6864      	ldr	r4, [r4, #4]
 8017082:	e7b2      	b.n	8016fea <_malloc_r+0x32>
 8017084:	4634      	mov	r4, r6
 8017086:	6876      	ldr	r6, [r6, #4]
 8017088:	e7b9      	b.n	8016ffe <_malloc_r+0x46>
 801708a:	230c      	movs	r3, #12
 801708c:	603b      	str	r3, [r7, #0]
 801708e:	4638      	mov	r0, r7
 8017090:	f000 fe7a 	bl	8017d88 <__malloc_unlock>
 8017094:	e7a1      	b.n	8016fda <_malloc_r+0x22>
 8017096:	6025      	str	r5, [r4, #0]
 8017098:	e7de      	b.n	8017058 <_malloc_r+0xa0>
 801709a:	bf00      	nop
 801709c:	24006b70 	.word	0x24006b70

080170a0 <__sfputc_r>:
 80170a0:	6893      	ldr	r3, [r2, #8]
 80170a2:	3b01      	subs	r3, #1
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	b410      	push	{r4}
 80170a8:	6093      	str	r3, [r2, #8]
 80170aa:	da08      	bge.n	80170be <__sfputc_r+0x1e>
 80170ac:	6994      	ldr	r4, [r2, #24]
 80170ae:	42a3      	cmp	r3, r4
 80170b0:	db01      	blt.n	80170b6 <__sfputc_r+0x16>
 80170b2:	290a      	cmp	r1, #10
 80170b4:	d103      	bne.n	80170be <__sfputc_r+0x1e>
 80170b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170ba:	f000 bbe1 	b.w	8017880 <__swbuf_r>
 80170be:	6813      	ldr	r3, [r2, #0]
 80170c0:	1c58      	adds	r0, r3, #1
 80170c2:	6010      	str	r0, [r2, #0]
 80170c4:	7019      	strb	r1, [r3, #0]
 80170c6:	4608      	mov	r0, r1
 80170c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170cc:	4770      	bx	lr

080170ce <__sfputs_r>:
 80170ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d0:	4606      	mov	r6, r0
 80170d2:	460f      	mov	r7, r1
 80170d4:	4614      	mov	r4, r2
 80170d6:	18d5      	adds	r5, r2, r3
 80170d8:	42ac      	cmp	r4, r5
 80170da:	d101      	bne.n	80170e0 <__sfputs_r+0x12>
 80170dc:	2000      	movs	r0, #0
 80170de:	e007      	b.n	80170f0 <__sfputs_r+0x22>
 80170e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170e4:	463a      	mov	r2, r7
 80170e6:	4630      	mov	r0, r6
 80170e8:	f7ff ffda 	bl	80170a0 <__sfputc_r>
 80170ec:	1c43      	adds	r3, r0, #1
 80170ee:	d1f3      	bne.n	80170d8 <__sfputs_r+0xa>
 80170f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080170f4 <_vfiprintf_r>:
 80170f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f8:	460d      	mov	r5, r1
 80170fa:	b09d      	sub	sp, #116	; 0x74
 80170fc:	4614      	mov	r4, r2
 80170fe:	4698      	mov	r8, r3
 8017100:	4606      	mov	r6, r0
 8017102:	b118      	cbz	r0, 801710c <_vfiprintf_r+0x18>
 8017104:	6983      	ldr	r3, [r0, #24]
 8017106:	b90b      	cbnz	r3, 801710c <_vfiprintf_r+0x18>
 8017108:	f7ff fdec 	bl	8016ce4 <__sinit>
 801710c:	4b89      	ldr	r3, [pc, #548]	; (8017334 <_vfiprintf_r+0x240>)
 801710e:	429d      	cmp	r5, r3
 8017110:	d11b      	bne.n	801714a <_vfiprintf_r+0x56>
 8017112:	6875      	ldr	r5, [r6, #4]
 8017114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017116:	07d9      	lsls	r1, r3, #31
 8017118:	d405      	bmi.n	8017126 <_vfiprintf_r+0x32>
 801711a:	89ab      	ldrh	r3, [r5, #12]
 801711c:	059a      	lsls	r2, r3, #22
 801711e:	d402      	bmi.n	8017126 <_vfiprintf_r+0x32>
 8017120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017122:	f7ff feb4 	bl	8016e8e <__retarget_lock_acquire_recursive>
 8017126:	89ab      	ldrh	r3, [r5, #12]
 8017128:	071b      	lsls	r3, r3, #28
 801712a:	d501      	bpl.n	8017130 <_vfiprintf_r+0x3c>
 801712c:	692b      	ldr	r3, [r5, #16]
 801712e:	b9eb      	cbnz	r3, 801716c <_vfiprintf_r+0x78>
 8017130:	4629      	mov	r1, r5
 8017132:	4630      	mov	r0, r6
 8017134:	f000 fc08 	bl	8017948 <__swsetup_r>
 8017138:	b1c0      	cbz	r0, 801716c <_vfiprintf_r+0x78>
 801713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801713c:	07dc      	lsls	r4, r3, #31
 801713e:	d50e      	bpl.n	801715e <_vfiprintf_r+0x6a>
 8017140:	f04f 30ff 	mov.w	r0, #4294967295
 8017144:	b01d      	add	sp, #116	; 0x74
 8017146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801714a:	4b7b      	ldr	r3, [pc, #492]	; (8017338 <_vfiprintf_r+0x244>)
 801714c:	429d      	cmp	r5, r3
 801714e:	d101      	bne.n	8017154 <_vfiprintf_r+0x60>
 8017150:	68b5      	ldr	r5, [r6, #8]
 8017152:	e7df      	b.n	8017114 <_vfiprintf_r+0x20>
 8017154:	4b79      	ldr	r3, [pc, #484]	; (801733c <_vfiprintf_r+0x248>)
 8017156:	429d      	cmp	r5, r3
 8017158:	bf08      	it	eq
 801715a:	68f5      	ldreq	r5, [r6, #12]
 801715c:	e7da      	b.n	8017114 <_vfiprintf_r+0x20>
 801715e:	89ab      	ldrh	r3, [r5, #12]
 8017160:	0598      	lsls	r0, r3, #22
 8017162:	d4ed      	bmi.n	8017140 <_vfiprintf_r+0x4c>
 8017164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017166:	f7ff fe94 	bl	8016e92 <__retarget_lock_release_recursive>
 801716a:	e7e9      	b.n	8017140 <_vfiprintf_r+0x4c>
 801716c:	2300      	movs	r3, #0
 801716e:	9309      	str	r3, [sp, #36]	; 0x24
 8017170:	2320      	movs	r3, #32
 8017172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017176:	f8cd 800c 	str.w	r8, [sp, #12]
 801717a:	2330      	movs	r3, #48	; 0x30
 801717c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017340 <_vfiprintf_r+0x24c>
 8017180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017184:	f04f 0901 	mov.w	r9, #1
 8017188:	4623      	mov	r3, r4
 801718a:	469a      	mov	sl, r3
 801718c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017190:	b10a      	cbz	r2, 8017196 <_vfiprintf_r+0xa2>
 8017192:	2a25      	cmp	r2, #37	; 0x25
 8017194:	d1f9      	bne.n	801718a <_vfiprintf_r+0x96>
 8017196:	ebba 0b04 	subs.w	fp, sl, r4
 801719a:	d00b      	beq.n	80171b4 <_vfiprintf_r+0xc0>
 801719c:	465b      	mov	r3, fp
 801719e:	4622      	mov	r2, r4
 80171a0:	4629      	mov	r1, r5
 80171a2:	4630      	mov	r0, r6
 80171a4:	f7ff ff93 	bl	80170ce <__sfputs_r>
 80171a8:	3001      	adds	r0, #1
 80171aa:	f000 80aa 	beq.w	8017302 <_vfiprintf_r+0x20e>
 80171ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171b0:	445a      	add	r2, fp
 80171b2:	9209      	str	r2, [sp, #36]	; 0x24
 80171b4:	f89a 3000 	ldrb.w	r3, [sl]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	f000 80a2 	beq.w	8017302 <_vfiprintf_r+0x20e>
 80171be:	2300      	movs	r3, #0
 80171c0:	f04f 32ff 	mov.w	r2, #4294967295
 80171c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171c8:	f10a 0a01 	add.w	sl, sl, #1
 80171cc:	9304      	str	r3, [sp, #16]
 80171ce:	9307      	str	r3, [sp, #28]
 80171d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171d4:	931a      	str	r3, [sp, #104]	; 0x68
 80171d6:	4654      	mov	r4, sl
 80171d8:	2205      	movs	r2, #5
 80171da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171de:	4858      	ldr	r0, [pc, #352]	; (8017340 <_vfiprintf_r+0x24c>)
 80171e0:	f7e9 f896 	bl	8000310 <memchr>
 80171e4:	9a04      	ldr	r2, [sp, #16]
 80171e6:	b9d8      	cbnz	r0, 8017220 <_vfiprintf_r+0x12c>
 80171e8:	06d1      	lsls	r1, r2, #27
 80171ea:	bf44      	itt	mi
 80171ec:	2320      	movmi	r3, #32
 80171ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80171f2:	0713      	lsls	r3, r2, #28
 80171f4:	bf44      	itt	mi
 80171f6:	232b      	movmi	r3, #43	; 0x2b
 80171f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80171fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017200:	2b2a      	cmp	r3, #42	; 0x2a
 8017202:	d015      	beq.n	8017230 <_vfiprintf_r+0x13c>
 8017204:	9a07      	ldr	r2, [sp, #28]
 8017206:	4654      	mov	r4, sl
 8017208:	2000      	movs	r0, #0
 801720a:	f04f 0c0a 	mov.w	ip, #10
 801720e:	4621      	mov	r1, r4
 8017210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017214:	3b30      	subs	r3, #48	; 0x30
 8017216:	2b09      	cmp	r3, #9
 8017218:	d94e      	bls.n	80172b8 <_vfiprintf_r+0x1c4>
 801721a:	b1b0      	cbz	r0, 801724a <_vfiprintf_r+0x156>
 801721c:	9207      	str	r2, [sp, #28]
 801721e:	e014      	b.n	801724a <_vfiprintf_r+0x156>
 8017220:	eba0 0308 	sub.w	r3, r0, r8
 8017224:	fa09 f303 	lsl.w	r3, r9, r3
 8017228:	4313      	orrs	r3, r2
 801722a:	9304      	str	r3, [sp, #16]
 801722c:	46a2      	mov	sl, r4
 801722e:	e7d2      	b.n	80171d6 <_vfiprintf_r+0xe2>
 8017230:	9b03      	ldr	r3, [sp, #12]
 8017232:	1d19      	adds	r1, r3, #4
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	9103      	str	r1, [sp, #12]
 8017238:	2b00      	cmp	r3, #0
 801723a:	bfbb      	ittet	lt
 801723c:	425b      	neglt	r3, r3
 801723e:	f042 0202 	orrlt.w	r2, r2, #2
 8017242:	9307      	strge	r3, [sp, #28]
 8017244:	9307      	strlt	r3, [sp, #28]
 8017246:	bfb8      	it	lt
 8017248:	9204      	strlt	r2, [sp, #16]
 801724a:	7823      	ldrb	r3, [r4, #0]
 801724c:	2b2e      	cmp	r3, #46	; 0x2e
 801724e:	d10c      	bne.n	801726a <_vfiprintf_r+0x176>
 8017250:	7863      	ldrb	r3, [r4, #1]
 8017252:	2b2a      	cmp	r3, #42	; 0x2a
 8017254:	d135      	bne.n	80172c2 <_vfiprintf_r+0x1ce>
 8017256:	9b03      	ldr	r3, [sp, #12]
 8017258:	1d1a      	adds	r2, r3, #4
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	9203      	str	r2, [sp, #12]
 801725e:	2b00      	cmp	r3, #0
 8017260:	bfb8      	it	lt
 8017262:	f04f 33ff 	movlt.w	r3, #4294967295
 8017266:	3402      	adds	r4, #2
 8017268:	9305      	str	r3, [sp, #20]
 801726a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017350 <_vfiprintf_r+0x25c>
 801726e:	7821      	ldrb	r1, [r4, #0]
 8017270:	2203      	movs	r2, #3
 8017272:	4650      	mov	r0, sl
 8017274:	f7e9 f84c 	bl	8000310 <memchr>
 8017278:	b140      	cbz	r0, 801728c <_vfiprintf_r+0x198>
 801727a:	2340      	movs	r3, #64	; 0x40
 801727c:	eba0 000a 	sub.w	r0, r0, sl
 8017280:	fa03 f000 	lsl.w	r0, r3, r0
 8017284:	9b04      	ldr	r3, [sp, #16]
 8017286:	4303      	orrs	r3, r0
 8017288:	3401      	adds	r4, #1
 801728a:	9304      	str	r3, [sp, #16]
 801728c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017290:	482c      	ldr	r0, [pc, #176]	; (8017344 <_vfiprintf_r+0x250>)
 8017292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017296:	2206      	movs	r2, #6
 8017298:	f7e9 f83a 	bl	8000310 <memchr>
 801729c:	2800      	cmp	r0, #0
 801729e:	d03f      	beq.n	8017320 <_vfiprintf_r+0x22c>
 80172a0:	4b29      	ldr	r3, [pc, #164]	; (8017348 <_vfiprintf_r+0x254>)
 80172a2:	bb1b      	cbnz	r3, 80172ec <_vfiprintf_r+0x1f8>
 80172a4:	9b03      	ldr	r3, [sp, #12]
 80172a6:	3307      	adds	r3, #7
 80172a8:	f023 0307 	bic.w	r3, r3, #7
 80172ac:	3308      	adds	r3, #8
 80172ae:	9303      	str	r3, [sp, #12]
 80172b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b2:	443b      	add	r3, r7
 80172b4:	9309      	str	r3, [sp, #36]	; 0x24
 80172b6:	e767      	b.n	8017188 <_vfiprintf_r+0x94>
 80172b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80172bc:	460c      	mov	r4, r1
 80172be:	2001      	movs	r0, #1
 80172c0:	e7a5      	b.n	801720e <_vfiprintf_r+0x11a>
 80172c2:	2300      	movs	r3, #0
 80172c4:	3401      	adds	r4, #1
 80172c6:	9305      	str	r3, [sp, #20]
 80172c8:	4619      	mov	r1, r3
 80172ca:	f04f 0c0a 	mov.w	ip, #10
 80172ce:	4620      	mov	r0, r4
 80172d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172d4:	3a30      	subs	r2, #48	; 0x30
 80172d6:	2a09      	cmp	r2, #9
 80172d8:	d903      	bls.n	80172e2 <_vfiprintf_r+0x1ee>
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d0c5      	beq.n	801726a <_vfiprintf_r+0x176>
 80172de:	9105      	str	r1, [sp, #20]
 80172e0:	e7c3      	b.n	801726a <_vfiprintf_r+0x176>
 80172e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80172e6:	4604      	mov	r4, r0
 80172e8:	2301      	movs	r3, #1
 80172ea:	e7f0      	b.n	80172ce <_vfiprintf_r+0x1da>
 80172ec:	ab03      	add	r3, sp, #12
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	462a      	mov	r2, r5
 80172f2:	4b16      	ldr	r3, [pc, #88]	; (801734c <_vfiprintf_r+0x258>)
 80172f4:	a904      	add	r1, sp, #16
 80172f6:	4630      	mov	r0, r6
 80172f8:	f3af 8000 	nop.w
 80172fc:	4607      	mov	r7, r0
 80172fe:	1c78      	adds	r0, r7, #1
 8017300:	d1d6      	bne.n	80172b0 <_vfiprintf_r+0x1bc>
 8017302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017304:	07d9      	lsls	r1, r3, #31
 8017306:	d405      	bmi.n	8017314 <_vfiprintf_r+0x220>
 8017308:	89ab      	ldrh	r3, [r5, #12]
 801730a:	059a      	lsls	r2, r3, #22
 801730c:	d402      	bmi.n	8017314 <_vfiprintf_r+0x220>
 801730e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017310:	f7ff fdbf 	bl	8016e92 <__retarget_lock_release_recursive>
 8017314:	89ab      	ldrh	r3, [r5, #12]
 8017316:	065b      	lsls	r3, r3, #25
 8017318:	f53f af12 	bmi.w	8017140 <_vfiprintf_r+0x4c>
 801731c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801731e:	e711      	b.n	8017144 <_vfiprintf_r+0x50>
 8017320:	ab03      	add	r3, sp, #12
 8017322:	9300      	str	r3, [sp, #0]
 8017324:	462a      	mov	r2, r5
 8017326:	4b09      	ldr	r3, [pc, #36]	; (801734c <_vfiprintf_r+0x258>)
 8017328:	a904      	add	r1, sp, #16
 801732a:	4630      	mov	r0, r6
 801732c:	f000 f880 	bl	8017430 <_printf_i>
 8017330:	e7e4      	b.n	80172fc <_vfiprintf_r+0x208>
 8017332:	bf00      	nop
 8017334:	080192c4 	.word	0x080192c4
 8017338:	080192e4 	.word	0x080192e4
 801733c:	080192a4 	.word	0x080192a4
 8017340:	08019308 	.word	0x08019308
 8017344:	08019312 	.word	0x08019312
 8017348:	00000000 	.word	0x00000000
 801734c:	080170cf 	.word	0x080170cf
 8017350:	0801930e 	.word	0x0801930e

08017354 <_printf_common>:
 8017354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017358:	4616      	mov	r6, r2
 801735a:	4699      	mov	r9, r3
 801735c:	688a      	ldr	r2, [r1, #8]
 801735e:	690b      	ldr	r3, [r1, #16]
 8017360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017364:	4293      	cmp	r3, r2
 8017366:	bfb8      	it	lt
 8017368:	4613      	movlt	r3, r2
 801736a:	6033      	str	r3, [r6, #0]
 801736c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017370:	4607      	mov	r7, r0
 8017372:	460c      	mov	r4, r1
 8017374:	b10a      	cbz	r2, 801737a <_printf_common+0x26>
 8017376:	3301      	adds	r3, #1
 8017378:	6033      	str	r3, [r6, #0]
 801737a:	6823      	ldr	r3, [r4, #0]
 801737c:	0699      	lsls	r1, r3, #26
 801737e:	bf42      	ittt	mi
 8017380:	6833      	ldrmi	r3, [r6, #0]
 8017382:	3302      	addmi	r3, #2
 8017384:	6033      	strmi	r3, [r6, #0]
 8017386:	6825      	ldr	r5, [r4, #0]
 8017388:	f015 0506 	ands.w	r5, r5, #6
 801738c:	d106      	bne.n	801739c <_printf_common+0x48>
 801738e:	f104 0a19 	add.w	sl, r4, #25
 8017392:	68e3      	ldr	r3, [r4, #12]
 8017394:	6832      	ldr	r2, [r6, #0]
 8017396:	1a9b      	subs	r3, r3, r2
 8017398:	42ab      	cmp	r3, r5
 801739a:	dc26      	bgt.n	80173ea <_printf_common+0x96>
 801739c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80173a0:	1e13      	subs	r3, r2, #0
 80173a2:	6822      	ldr	r2, [r4, #0]
 80173a4:	bf18      	it	ne
 80173a6:	2301      	movne	r3, #1
 80173a8:	0692      	lsls	r2, r2, #26
 80173aa:	d42b      	bmi.n	8017404 <_printf_common+0xb0>
 80173ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80173b0:	4649      	mov	r1, r9
 80173b2:	4638      	mov	r0, r7
 80173b4:	47c0      	blx	r8
 80173b6:	3001      	adds	r0, #1
 80173b8:	d01e      	beq.n	80173f8 <_printf_common+0xa4>
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	68e5      	ldr	r5, [r4, #12]
 80173be:	6832      	ldr	r2, [r6, #0]
 80173c0:	f003 0306 	and.w	r3, r3, #6
 80173c4:	2b04      	cmp	r3, #4
 80173c6:	bf08      	it	eq
 80173c8:	1aad      	subeq	r5, r5, r2
 80173ca:	68a3      	ldr	r3, [r4, #8]
 80173cc:	6922      	ldr	r2, [r4, #16]
 80173ce:	bf0c      	ite	eq
 80173d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173d4:	2500      	movne	r5, #0
 80173d6:	4293      	cmp	r3, r2
 80173d8:	bfc4      	itt	gt
 80173da:	1a9b      	subgt	r3, r3, r2
 80173dc:	18ed      	addgt	r5, r5, r3
 80173de:	2600      	movs	r6, #0
 80173e0:	341a      	adds	r4, #26
 80173e2:	42b5      	cmp	r5, r6
 80173e4:	d11a      	bne.n	801741c <_printf_common+0xc8>
 80173e6:	2000      	movs	r0, #0
 80173e8:	e008      	b.n	80173fc <_printf_common+0xa8>
 80173ea:	2301      	movs	r3, #1
 80173ec:	4652      	mov	r2, sl
 80173ee:	4649      	mov	r1, r9
 80173f0:	4638      	mov	r0, r7
 80173f2:	47c0      	blx	r8
 80173f4:	3001      	adds	r0, #1
 80173f6:	d103      	bne.n	8017400 <_printf_common+0xac>
 80173f8:	f04f 30ff 	mov.w	r0, #4294967295
 80173fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017400:	3501      	adds	r5, #1
 8017402:	e7c6      	b.n	8017392 <_printf_common+0x3e>
 8017404:	18e1      	adds	r1, r4, r3
 8017406:	1c5a      	adds	r2, r3, #1
 8017408:	2030      	movs	r0, #48	; 0x30
 801740a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801740e:	4422      	add	r2, r4
 8017410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017418:	3302      	adds	r3, #2
 801741a:	e7c7      	b.n	80173ac <_printf_common+0x58>
 801741c:	2301      	movs	r3, #1
 801741e:	4622      	mov	r2, r4
 8017420:	4649      	mov	r1, r9
 8017422:	4638      	mov	r0, r7
 8017424:	47c0      	blx	r8
 8017426:	3001      	adds	r0, #1
 8017428:	d0e6      	beq.n	80173f8 <_printf_common+0xa4>
 801742a:	3601      	adds	r6, #1
 801742c:	e7d9      	b.n	80173e2 <_printf_common+0x8e>
	...

08017430 <_printf_i>:
 8017430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017434:	7e0f      	ldrb	r7, [r1, #24]
 8017436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017438:	2f78      	cmp	r7, #120	; 0x78
 801743a:	4691      	mov	r9, r2
 801743c:	4680      	mov	r8, r0
 801743e:	460c      	mov	r4, r1
 8017440:	469a      	mov	sl, r3
 8017442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017446:	d807      	bhi.n	8017458 <_printf_i+0x28>
 8017448:	2f62      	cmp	r7, #98	; 0x62
 801744a:	d80a      	bhi.n	8017462 <_printf_i+0x32>
 801744c:	2f00      	cmp	r7, #0
 801744e:	f000 80d8 	beq.w	8017602 <_printf_i+0x1d2>
 8017452:	2f58      	cmp	r7, #88	; 0x58
 8017454:	f000 80a3 	beq.w	801759e <_printf_i+0x16e>
 8017458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801745c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017460:	e03a      	b.n	80174d8 <_printf_i+0xa8>
 8017462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017466:	2b15      	cmp	r3, #21
 8017468:	d8f6      	bhi.n	8017458 <_printf_i+0x28>
 801746a:	a101      	add	r1, pc, #4	; (adr r1, 8017470 <_printf_i+0x40>)
 801746c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017470:	080174c9 	.word	0x080174c9
 8017474:	080174dd 	.word	0x080174dd
 8017478:	08017459 	.word	0x08017459
 801747c:	08017459 	.word	0x08017459
 8017480:	08017459 	.word	0x08017459
 8017484:	08017459 	.word	0x08017459
 8017488:	080174dd 	.word	0x080174dd
 801748c:	08017459 	.word	0x08017459
 8017490:	08017459 	.word	0x08017459
 8017494:	08017459 	.word	0x08017459
 8017498:	08017459 	.word	0x08017459
 801749c:	080175e9 	.word	0x080175e9
 80174a0:	0801750d 	.word	0x0801750d
 80174a4:	080175cb 	.word	0x080175cb
 80174a8:	08017459 	.word	0x08017459
 80174ac:	08017459 	.word	0x08017459
 80174b0:	0801760b 	.word	0x0801760b
 80174b4:	08017459 	.word	0x08017459
 80174b8:	0801750d 	.word	0x0801750d
 80174bc:	08017459 	.word	0x08017459
 80174c0:	08017459 	.word	0x08017459
 80174c4:	080175d3 	.word	0x080175d3
 80174c8:	682b      	ldr	r3, [r5, #0]
 80174ca:	1d1a      	adds	r2, r3, #4
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	602a      	str	r2, [r5, #0]
 80174d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80174d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80174d8:	2301      	movs	r3, #1
 80174da:	e0a3      	b.n	8017624 <_printf_i+0x1f4>
 80174dc:	6820      	ldr	r0, [r4, #0]
 80174de:	6829      	ldr	r1, [r5, #0]
 80174e0:	0606      	lsls	r6, r0, #24
 80174e2:	f101 0304 	add.w	r3, r1, #4
 80174e6:	d50a      	bpl.n	80174fe <_printf_i+0xce>
 80174e8:	680e      	ldr	r6, [r1, #0]
 80174ea:	602b      	str	r3, [r5, #0]
 80174ec:	2e00      	cmp	r6, #0
 80174ee:	da03      	bge.n	80174f8 <_printf_i+0xc8>
 80174f0:	232d      	movs	r3, #45	; 0x2d
 80174f2:	4276      	negs	r6, r6
 80174f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174f8:	485e      	ldr	r0, [pc, #376]	; (8017674 <_printf_i+0x244>)
 80174fa:	230a      	movs	r3, #10
 80174fc:	e019      	b.n	8017532 <_printf_i+0x102>
 80174fe:	680e      	ldr	r6, [r1, #0]
 8017500:	602b      	str	r3, [r5, #0]
 8017502:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017506:	bf18      	it	ne
 8017508:	b236      	sxthne	r6, r6
 801750a:	e7ef      	b.n	80174ec <_printf_i+0xbc>
 801750c:	682b      	ldr	r3, [r5, #0]
 801750e:	6820      	ldr	r0, [r4, #0]
 8017510:	1d19      	adds	r1, r3, #4
 8017512:	6029      	str	r1, [r5, #0]
 8017514:	0601      	lsls	r1, r0, #24
 8017516:	d501      	bpl.n	801751c <_printf_i+0xec>
 8017518:	681e      	ldr	r6, [r3, #0]
 801751a:	e002      	b.n	8017522 <_printf_i+0xf2>
 801751c:	0646      	lsls	r6, r0, #25
 801751e:	d5fb      	bpl.n	8017518 <_printf_i+0xe8>
 8017520:	881e      	ldrh	r6, [r3, #0]
 8017522:	4854      	ldr	r0, [pc, #336]	; (8017674 <_printf_i+0x244>)
 8017524:	2f6f      	cmp	r7, #111	; 0x6f
 8017526:	bf0c      	ite	eq
 8017528:	2308      	moveq	r3, #8
 801752a:	230a      	movne	r3, #10
 801752c:	2100      	movs	r1, #0
 801752e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017532:	6865      	ldr	r5, [r4, #4]
 8017534:	60a5      	str	r5, [r4, #8]
 8017536:	2d00      	cmp	r5, #0
 8017538:	bfa2      	ittt	ge
 801753a:	6821      	ldrge	r1, [r4, #0]
 801753c:	f021 0104 	bicge.w	r1, r1, #4
 8017540:	6021      	strge	r1, [r4, #0]
 8017542:	b90e      	cbnz	r6, 8017548 <_printf_i+0x118>
 8017544:	2d00      	cmp	r5, #0
 8017546:	d04d      	beq.n	80175e4 <_printf_i+0x1b4>
 8017548:	4615      	mov	r5, r2
 801754a:	fbb6 f1f3 	udiv	r1, r6, r3
 801754e:	fb03 6711 	mls	r7, r3, r1, r6
 8017552:	5dc7      	ldrb	r7, [r0, r7]
 8017554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017558:	4637      	mov	r7, r6
 801755a:	42bb      	cmp	r3, r7
 801755c:	460e      	mov	r6, r1
 801755e:	d9f4      	bls.n	801754a <_printf_i+0x11a>
 8017560:	2b08      	cmp	r3, #8
 8017562:	d10b      	bne.n	801757c <_printf_i+0x14c>
 8017564:	6823      	ldr	r3, [r4, #0]
 8017566:	07de      	lsls	r6, r3, #31
 8017568:	d508      	bpl.n	801757c <_printf_i+0x14c>
 801756a:	6923      	ldr	r3, [r4, #16]
 801756c:	6861      	ldr	r1, [r4, #4]
 801756e:	4299      	cmp	r1, r3
 8017570:	bfde      	ittt	le
 8017572:	2330      	movle	r3, #48	; 0x30
 8017574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017578:	f105 35ff 	addle.w	r5, r5, #4294967295
 801757c:	1b52      	subs	r2, r2, r5
 801757e:	6122      	str	r2, [r4, #16]
 8017580:	f8cd a000 	str.w	sl, [sp]
 8017584:	464b      	mov	r3, r9
 8017586:	aa03      	add	r2, sp, #12
 8017588:	4621      	mov	r1, r4
 801758a:	4640      	mov	r0, r8
 801758c:	f7ff fee2 	bl	8017354 <_printf_common>
 8017590:	3001      	adds	r0, #1
 8017592:	d14c      	bne.n	801762e <_printf_i+0x1fe>
 8017594:	f04f 30ff 	mov.w	r0, #4294967295
 8017598:	b004      	add	sp, #16
 801759a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801759e:	4835      	ldr	r0, [pc, #212]	; (8017674 <_printf_i+0x244>)
 80175a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80175a4:	6829      	ldr	r1, [r5, #0]
 80175a6:	6823      	ldr	r3, [r4, #0]
 80175a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80175ac:	6029      	str	r1, [r5, #0]
 80175ae:	061d      	lsls	r5, r3, #24
 80175b0:	d514      	bpl.n	80175dc <_printf_i+0x1ac>
 80175b2:	07df      	lsls	r7, r3, #31
 80175b4:	bf44      	itt	mi
 80175b6:	f043 0320 	orrmi.w	r3, r3, #32
 80175ba:	6023      	strmi	r3, [r4, #0]
 80175bc:	b91e      	cbnz	r6, 80175c6 <_printf_i+0x196>
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	f023 0320 	bic.w	r3, r3, #32
 80175c4:	6023      	str	r3, [r4, #0]
 80175c6:	2310      	movs	r3, #16
 80175c8:	e7b0      	b.n	801752c <_printf_i+0xfc>
 80175ca:	6823      	ldr	r3, [r4, #0]
 80175cc:	f043 0320 	orr.w	r3, r3, #32
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	2378      	movs	r3, #120	; 0x78
 80175d4:	4828      	ldr	r0, [pc, #160]	; (8017678 <_printf_i+0x248>)
 80175d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80175da:	e7e3      	b.n	80175a4 <_printf_i+0x174>
 80175dc:	0659      	lsls	r1, r3, #25
 80175de:	bf48      	it	mi
 80175e0:	b2b6      	uxthmi	r6, r6
 80175e2:	e7e6      	b.n	80175b2 <_printf_i+0x182>
 80175e4:	4615      	mov	r5, r2
 80175e6:	e7bb      	b.n	8017560 <_printf_i+0x130>
 80175e8:	682b      	ldr	r3, [r5, #0]
 80175ea:	6826      	ldr	r6, [r4, #0]
 80175ec:	6961      	ldr	r1, [r4, #20]
 80175ee:	1d18      	adds	r0, r3, #4
 80175f0:	6028      	str	r0, [r5, #0]
 80175f2:	0635      	lsls	r5, r6, #24
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	d501      	bpl.n	80175fc <_printf_i+0x1cc>
 80175f8:	6019      	str	r1, [r3, #0]
 80175fa:	e002      	b.n	8017602 <_printf_i+0x1d2>
 80175fc:	0670      	lsls	r0, r6, #25
 80175fe:	d5fb      	bpl.n	80175f8 <_printf_i+0x1c8>
 8017600:	8019      	strh	r1, [r3, #0]
 8017602:	2300      	movs	r3, #0
 8017604:	6123      	str	r3, [r4, #16]
 8017606:	4615      	mov	r5, r2
 8017608:	e7ba      	b.n	8017580 <_printf_i+0x150>
 801760a:	682b      	ldr	r3, [r5, #0]
 801760c:	1d1a      	adds	r2, r3, #4
 801760e:	602a      	str	r2, [r5, #0]
 8017610:	681d      	ldr	r5, [r3, #0]
 8017612:	6862      	ldr	r2, [r4, #4]
 8017614:	2100      	movs	r1, #0
 8017616:	4628      	mov	r0, r5
 8017618:	f7e8 fe7a 	bl	8000310 <memchr>
 801761c:	b108      	cbz	r0, 8017622 <_printf_i+0x1f2>
 801761e:	1b40      	subs	r0, r0, r5
 8017620:	6060      	str	r0, [r4, #4]
 8017622:	6863      	ldr	r3, [r4, #4]
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	2300      	movs	r3, #0
 8017628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801762c:	e7a8      	b.n	8017580 <_printf_i+0x150>
 801762e:	6923      	ldr	r3, [r4, #16]
 8017630:	462a      	mov	r2, r5
 8017632:	4649      	mov	r1, r9
 8017634:	4640      	mov	r0, r8
 8017636:	47d0      	blx	sl
 8017638:	3001      	adds	r0, #1
 801763a:	d0ab      	beq.n	8017594 <_printf_i+0x164>
 801763c:	6823      	ldr	r3, [r4, #0]
 801763e:	079b      	lsls	r3, r3, #30
 8017640:	d413      	bmi.n	801766a <_printf_i+0x23a>
 8017642:	68e0      	ldr	r0, [r4, #12]
 8017644:	9b03      	ldr	r3, [sp, #12]
 8017646:	4298      	cmp	r0, r3
 8017648:	bfb8      	it	lt
 801764a:	4618      	movlt	r0, r3
 801764c:	e7a4      	b.n	8017598 <_printf_i+0x168>
 801764e:	2301      	movs	r3, #1
 8017650:	4632      	mov	r2, r6
 8017652:	4649      	mov	r1, r9
 8017654:	4640      	mov	r0, r8
 8017656:	47d0      	blx	sl
 8017658:	3001      	adds	r0, #1
 801765a:	d09b      	beq.n	8017594 <_printf_i+0x164>
 801765c:	3501      	adds	r5, #1
 801765e:	68e3      	ldr	r3, [r4, #12]
 8017660:	9903      	ldr	r1, [sp, #12]
 8017662:	1a5b      	subs	r3, r3, r1
 8017664:	42ab      	cmp	r3, r5
 8017666:	dcf2      	bgt.n	801764e <_printf_i+0x21e>
 8017668:	e7eb      	b.n	8017642 <_printf_i+0x212>
 801766a:	2500      	movs	r5, #0
 801766c:	f104 0619 	add.w	r6, r4, #25
 8017670:	e7f5      	b.n	801765e <_printf_i+0x22e>
 8017672:	bf00      	nop
 8017674:	08019319 	.word	0x08019319
 8017678:	0801932a 	.word	0x0801932a

0801767c <cleanup_glue>:
 801767c:	b538      	push	{r3, r4, r5, lr}
 801767e:	460c      	mov	r4, r1
 8017680:	6809      	ldr	r1, [r1, #0]
 8017682:	4605      	mov	r5, r0
 8017684:	b109      	cbz	r1, 801768a <cleanup_glue+0xe>
 8017686:	f7ff fff9 	bl	801767c <cleanup_glue>
 801768a:	4621      	mov	r1, r4
 801768c:	4628      	mov	r0, r5
 801768e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017692:	f7ff bc25 	b.w	8016ee0 <_free_r>
	...

08017698 <_reclaim_reent>:
 8017698:	4b2c      	ldr	r3, [pc, #176]	; (801774c <_reclaim_reent+0xb4>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	4283      	cmp	r3, r0
 801769e:	b570      	push	{r4, r5, r6, lr}
 80176a0:	4604      	mov	r4, r0
 80176a2:	d051      	beq.n	8017748 <_reclaim_reent+0xb0>
 80176a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80176a6:	b143      	cbz	r3, 80176ba <_reclaim_reent+0x22>
 80176a8:	68db      	ldr	r3, [r3, #12]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d14a      	bne.n	8017744 <_reclaim_reent+0xac>
 80176ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176b0:	6819      	ldr	r1, [r3, #0]
 80176b2:	b111      	cbz	r1, 80176ba <_reclaim_reent+0x22>
 80176b4:	4620      	mov	r0, r4
 80176b6:	f7ff fc13 	bl	8016ee0 <_free_r>
 80176ba:	6961      	ldr	r1, [r4, #20]
 80176bc:	b111      	cbz	r1, 80176c4 <_reclaim_reent+0x2c>
 80176be:	4620      	mov	r0, r4
 80176c0:	f7ff fc0e 	bl	8016ee0 <_free_r>
 80176c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80176c6:	b111      	cbz	r1, 80176ce <_reclaim_reent+0x36>
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7ff fc09 	bl	8016ee0 <_free_r>
 80176ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80176d0:	b111      	cbz	r1, 80176d8 <_reclaim_reent+0x40>
 80176d2:	4620      	mov	r0, r4
 80176d4:	f7ff fc04 	bl	8016ee0 <_free_r>
 80176d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80176da:	b111      	cbz	r1, 80176e2 <_reclaim_reent+0x4a>
 80176dc:	4620      	mov	r0, r4
 80176de:	f7ff fbff 	bl	8016ee0 <_free_r>
 80176e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80176e4:	b111      	cbz	r1, 80176ec <_reclaim_reent+0x54>
 80176e6:	4620      	mov	r0, r4
 80176e8:	f7ff fbfa 	bl	8016ee0 <_free_r>
 80176ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80176ee:	b111      	cbz	r1, 80176f6 <_reclaim_reent+0x5e>
 80176f0:	4620      	mov	r0, r4
 80176f2:	f7ff fbf5 	bl	8016ee0 <_free_r>
 80176f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80176f8:	b111      	cbz	r1, 8017700 <_reclaim_reent+0x68>
 80176fa:	4620      	mov	r0, r4
 80176fc:	f7ff fbf0 	bl	8016ee0 <_free_r>
 8017700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017702:	b111      	cbz	r1, 801770a <_reclaim_reent+0x72>
 8017704:	4620      	mov	r0, r4
 8017706:	f7ff fbeb 	bl	8016ee0 <_free_r>
 801770a:	69a3      	ldr	r3, [r4, #24]
 801770c:	b1e3      	cbz	r3, 8017748 <_reclaim_reent+0xb0>
 801770e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017710:	4620      	mov	r0, r4
 8017712:	4798      	blx	r3
 8017714:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017716:	b1b9      	cbz	r1, 8017748 <_reclaim_reent+0xb0>
 8017718:	4620      	mov	r0, r4
 801771a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801771e:	f7ff bfad 	b.w	801767c <cleanup_glue>
 8017722:	5949      	ldr	r1, [r1, r5]
 8017724:	b941      	cbnz	r1, 8017738 <_reclaim_reent+0xa0>
 8017726:	3504      	adds	r5, #4
 8017728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801772a:	2d80      	cmp	r5, #128	; 0x80
 801772c:	68d9      	ldr	r1, [r3, #12]
 801772e:	d1f8      	bne.n	8017722 <_reclaim_reent+0x8a>
 8017730:	4620      	mov	r0, r4
 8017732:	f7ff fbd5 	bl	8016ee0 <_free_r>
 8017736:	e7ba      	b.n	80176ae <_reclaim_reent+0x16>
 8017738:	680e      	ldr	r6, [r1, #0]
 801773a:	4620      	mov	r0, r4
 801773c:	f7ff fbd0 	bl	8016ee0 <_free_r>
 8017740:	4631      	mov	r1, r6
 8017742:	e7ef      	b.n	8017724 <_reclaim_reent+0x8c>
 8017744:	2500      	movs	r5, #0
 8017746:	e7ef      	b.n	8017728 <_reclaim_reent+0x90>
 8017748:	bd70      	pop	{r4, r5, r6, pc}
 801774a:	bf00      	nop
 801774c:	240000a8 	.word	0x240000a8

08017750 <_sbrk_r>:
 8017750:	b538      	push	{r3, r4, r5, lr}
 8017752:	4d06      	ldr	r5, [pc, #24]	; (801776c <_sbrk_r+0x1c>)
 8017754:	2300      	movs	r3, #0
 8017756:	4604      	mov	r4, r0
 8017758:	4608      	mov	r0, r1
 801775a:	602b      	str	r3, [r5, #0]
 801775c:	f7e9 fcd8 	bl	8001110 <_sbrk>
 8017760:	1c43      	adds	r3, r0, #1
 8017762:	d102      	bne.n	801776a <_sbrk_r+0x1a>
 8017764:	682b      	ldr	r3, [r5, #0]
 8017766:	b103      	cbz	r3, 801776a <_sbrk_r+0x1a>
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	bd38      	pop	{r3, r4, r5, pc}
 801776c:	24006c80 	.word	0x24006c80

08017770 <_raise_r>:
 8017770:	291f      	cmp	r1, #31
 8017772:	b538      	push	{r3, r4, r5, lr}
 8017774:	4604      	mov	r4, r0
 8017776:	460d      	mov	r5, r1
 8017778:	d904      	bls.n	8017784 <_raise_r+0x14>
 801777a:	2316      	movs	r3, #22
 801777c:	6003      	str	r3, [r0, #0]
 801777e:	f04f 30ff 	mov.w	r0, #4294967295
 8017782:	bd38      	pop	{r3, r4, r5, pc}
 8017784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017786:	b112      	cbz	r2, 801778e <_raise_r+0x1e>
 8017788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801778c:	b94b      	cbnz	r3, 80177a2 <_raise_r+0x32>
 801778e:	4620      	mov	r0, r4
 8017790:	f000 f830 	bl	80177f4 <_getpid_r>
 8017794:	462a      	mov	r2, r5
 8017796:	4601      	mov	r1, r0
 8017798:	4620      	mov	r0, r4
 801779a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801779e:	f000 b817 	b.w	80177d0 <_kill_r>
 80177a2:	2b01      	cmp	r3, #1
 80177a4:	d00a      	beq.n	80177bc <_raise_r+0x4c>
 80177a6:	1c59      	adds	r1, r3, #1
 80177a8:	d103      	bne.n	80177b2 <_raise_r+0x42>
 80177aa:	2316      	movs	r3, #22
 80177ac:	6003      	str	r3, [r0, #0]
 80177ae:	2001      	movs	r0, #1
 80177b0:	e7e7      	b.n	8017782 <_raise_r+0x12>
 80177b2:	2400      	movs	r4, #0
 80177b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80177b8:	4628      	mov	r0, r5
 80177ba:	4798      	blx	r3
 80177bc:	2000      	movs	r0, #0
 80177be:	e7e0      	b.n	8017782 <_raise_r+0x12>

080177c0 <raise>:
 80177c0:	4b02      	ldr	r3, [pc, #8]	; (80177cc <raise+0xc>)
 80177c2:	4601      	mov	r1, r0
 80177c4:	6818      	ldr	r0, [r3, #0]
 80177c6:	f7ff bfd3 	b.w	8017770 <_raise_r>
 80177ca:	bf00      	nop
 80177cc:	240000a8 	.word	0x240000a8

080177d0 <_kill_r>:
 80177d0:	b538      	push	{r3, r4, r5, lr}
 80177d2:	4d07      	ldr	r5, [pc, #28]	; (80177f0 <_kill_r+0x20>)
 80177d4:	2300      	movs	r3, #0
 80177d6:	4604      	mov	r4, r0
 80177d8:	4608      	mov	r0, r1
 80177da:	4611      	mov	r1, r2
 80177dc:	602b      	str	r3, [r5, #0]
 80177de:	f7e9 fc61 	bl	80010a4 <_kill>
 80177e2:	1c43      	adds	r3, r0, #1
 80177e4:	d102      	bne.n	80177ec <_kill_r+0x1c>
 80177e6:	682b      	ldr	r3, [r5, #0]
 80177e8:	b103      	cbz	r3, 80177ec <_kill_r+0x1c>
 80177ea:	6023      	str	r3, [r4, #0]
 80177ec:	bd38      	pop	{r3, r4, r5, pc}
 80177ee:	bf00      	nop
 80177f0:	24006c80 	.word	0x24006c80

080177f4 <_getpid_r>:
 80177f4:	f7e9 bc54 	b.w	80010a0 <_getpid>

080177f8 <__sread>:
 80177f8:	b510      	push	{r4, lr}
 80177fa:	460c      	mov	r4, r1
 80177fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017800:	f000 fac8 	bl	8017d94 <_read_r>
 8017804:	2800      	cmp	r0, #0
 8017806:	bfab      	itete	ge
 8017808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801780a:	89a3      	ldrhlt	r3, [r4, #12]
 801780c:	181b      	addge	r3, r3, r0
 801780e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017812:	bfac      	ite	ge
 8017814:	6563      	strge	r3, [r4, #84]	; 0x54
 8017816:	81a3      	strhlt	r3, [r4, #12]
 8017818:	bd10      	pop	{r4, pc}

0801781a <__swrite>:
 801781a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801781e:	461f      	mov	r7, r3
 8017820:	898b      	ldrh	r3, [r1, #12]
 8017822:	05db      	lsls	r3, r3, #23
 8017824:	4605      	mov	r5, r0
 8017826:	460c      	mov	r4, r1
 8017828:	4616      	mov	r6, r2
 801782a:	d505      	bpl.n	8017838 <__swrite+0x1e>
 801782c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017830:	2302      	movs	r3, #2
 8017832:	2200      	movs	r2, #0
 8017834:	f000 fa2a 	bl	8017c8c <_lseek_r>
 8017838:	89a3      	ldrh	r3, [r4, #12]
 801783a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801783e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017842:	81a3      	strh	r3, [r4, #12]
 8017844:	4632      	mov	r2, r6
 8017846:	463b      	mov	r3, r7
 8017848:	4628      	mov	r0, r5
 801784a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801784e:	f000 b869 	b.w	8017924 <_write_r>

08017852 <__sseek>:
 8017852:	b510      	push	{r4, lr}
 8017854:	460c      	mov	r4, r1
 8017856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801785a:	f000 fa17 	bl	8017c8c <_lseek_r>
 801785e:	1c43      	adds	r3, r0, #1
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	bf15      	itete	ne
 8017864:	6560      	strne	r0, [r4, #84]	; 0x54
 8017866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801786a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801786e:	81a3      	strheq	r3, [r4, #12]
 8017870:	bf18      	it	ne
 8017872:	81a3      	strhne	r3, [r4, #12]
 8017874:	bd10      	pop	{r4, pc}

08017876 <__sclose>:
 8017876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801787a:	f000 b935 	b.w	8017ae8 <_close_r>
	...

08017880 <__swbuf_r>:
 8017880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017882:	460e      	mov	r6, r1
 8017884:	4614      	mov	r4, r2
 8017886:	4605      	mov	r5, r0
 8017888:	b118      	cbz	r0, 8017892 <__swbuf_r+0x12>
 801788a:	6983      	ldr	r3, [r0, #24]
 801788c:	b90b      	cbnz	r3, 8017892 <__swbuf_r+0x12>
 801788e:	f7ff fa29 	bl	8016ce4 <__sinit>
 8017892:	4b21      	ldr	r3, [pc, #132]	; (8017918 <__swbuf_r+0x98>)
 8017894:	429c      	cmp	r4, r3
 8017896:	d12b      	bne.n	80178f0 <__swbuf_r+0x70>
 8017898:	686c      	ldr	r4, [r5, #4]
 801789a:	69a3      	ldr	r3, [r4, #24]
 801789c:	60a3      	str	r3, [r4, #8]
 801789e:	89a3      	ldrh	r3, [r4, #12]
 80178a0:	071a      	lsls	r2, r3, #28
 80178a2:	d52f      	bpl.n	8017904 <__swbuf_r+0x84>
 80178a4:	6923      	ldr	r3, [r4, #16]
 80178a6:	b36b      	cbz	r3, 8017904 <__swbuf_r+0x84>
 80178a8:	6923      	ldr	r3, [r4, #16]
 80178aa:	6820      	ldr	r0, [r4, #0]
 80178ac:	1ac0      	subs	r0, r0, r3
 80178ae:	6963      	ldr	r3, [r4, #20]
 80178b0:	b2f6      	uxtb	r6, r6
 80178b2:	4283      	cmp	r3, r0
 80178b4:	4637      	mov	r7, r6
 80178b6:	dc04      	bgt.n	80178c2 <__swbuf_r+0x42>
 80178b8:	4621      	mov	r1, r4
 80178ba:	4628      	mov	r0, r5
 80178bc:	f000 f9aa 	bl	8017c14 <_fflush_r>
 80178c0:	bb30      	cbnz	r0, 8017910 <__swbuf_r+0x90>
 80178c2:	68a3      	ldr	r3, [r4, #8]
 80178c4:	3b01      	subs	r3, #1
 80178c6:	60a3      	str	r3, [r4, #8]
 80178c8:	6823      	ldr	r3, [r4, #0]
 80178ca:	1c5a      	adds	r2, r3, #1
 80178cc:	6022      	str	r2, [r4, #0]
 80178ce:	701e      	strb	r6, [r3, #0]
 80178d0:	6963      	ldr	r3, [r4, #20]
 80178d2:	3001      	adds	r0, #1
 80178d4:	4283      	cmp	r3, r0
 80178d6:	d004      	beq.n	80178e2 <__swbuf_r+0x62>
 80178d8:	89a3      	ldrh	r3, [r4, #12]
 80178da:	07db      	lsls	r3, r3, #31
 80178dc:	d506      	bpl.n	80178ec <__swbuf_r+0x6c>
 80178de:	2e0a      	cmp	r6, #10
 80178e0:	d104      	bne.n	80178ec <__swbuf_r+0x6c>
 80178e2:	4621      	mov	r1, r4
 80178e4:	4628      	mov	r0, r5
 80178e6:	f000 f995 	bl	8017c14 <_fflush_r>
 80178ea:	b988      	cbnz	r0, 8017910 <__swbuf_r+0x90>
 80178ec:	4638      	mov	r0, r7
 80178ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178f0:	4b0a      	ldr	r3, [pc, #40]	; (801791c <__swbuf_r+0x9c>)
 80178f2:	429c      	cmp	r4, r3
 80178f4:	d101      	bne.n	80178fa <__swbuf_r+0x7a>
 80178f6:	68ac      	ldr	r4, [r5, #8]
 80178f8:	e7cf      	b.n	801789a <__swbuf_r+0x1a>
 80178fa:	4b09      	ldr	r3, [pc, #36]	; (8017920 <__swbuf_r+0xa0>)
 80178fc:	429c      	cmp	r4, r3
 80178fe:	bf08      	it	eq
 8017900:	68ec      	ldreq	r4, [r5, #12]
 8017902:	e7ca      	b.n	801789a <__swbuf_r+0x1a>
 8017904:	4621      	mov	r1, r4
 8017906:	4628      	mov	r0, r5
 8017908:	f000 f81e 	bl	8017948 <__swsetup_r>
 801790c:	2800      	cmp	r0, #0
 801790e:	d0cb      	beq.n	80178a8 <__swbuf_r+0x28>
 8017910:	f04f 37ff 	mov.w	r7, #4294967295
 8017914:	e7ea      	b.n	80178ec <__swbuf_r+0x6c>
 8017916:	bf00      	nop
 8017918:	080192c4 	.word	0x080192c4
 801791c:	080192e4 	.word	0x080192e4
 8017920:	080192a4 	.word	0x080192a4

08017924 <_write_r>:
 8017924:	b538      	push	{r3, r4, r5, lr}
 8017926:	4d07      	ldr	r5, [pc, #28]	; (8017944 <_write_r+0x20>)
 8017928:	4604      	mov	r4, r0
 801792a:	4608      	mov	r0, r1
 801792c:	4611      	mov	r1, r2
 801792e:	2200      	movs	r2, #0
 8017930:	602a      	str	r2, [r5, #0]
 8017932:	461a      	mov	r2, r3
 8017934:	f7e9 fbd2 	bl	80010dc <_write>
 8017938:	1c43      	adds	r3, r0, #1
 801793a:	d102      	bne.n	8017942 <_write_r+0x1e>
 801793c:	682b      	ldr	r3, [r5, #0]
 801793e:	b103      	cbz	r3, 8017942 <_write_r+0x1e>
 8017940:	6023      	str	r3, [r4, #0]
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	24006c80 	.word	0x24006c80

08017948 <__swsetup_r>:
 8017948:	4b32      	ldr	r3, [pc, #200]	; (8017a14 <__swsetup_r+0xcc>)
 801794a:	b570      	push	{r4, r5, r6, lr}
 801794c:	681d      	ldr	r5, [r3, #0]
 801794e:	4606      	mov	r6, r0
 8017950:	460c      	mov	r4, r1
 8017952:	b125      	cbz	r5, 801795e <__swsetup_r+0x16>
 8017954:	69ab      	ldr	r3, [r5, #24]
 8017956:	b913      	cbnz	r3, 801795e <__swsetup_r+0x16>
 8017958:	4628      	mov	r0, r5
 801795a:	f7ff f9c3 	bl	8016ce4 <__sinit>
 801795e:	4b2e      	ldr	r3, [pc, #184]	; (8017a18 <__swsetup_r+0xd0>)
 8017960:	429c      	cmp	r4, r3
 8017962:	d10f      	bne.n	8017984 <__swsetup_r+0x3c>
 8017964:	686c      	ldr	r4, [r5, #4]
 8017966:	89a3      	ldrh	r3, [r4, #12]
 8017968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801796c:	0719      	lsls	r1, r3, #28
 801796e:	d42c      	bmi.n	80179ca <__swsetup_r+0x82>
 8017970:	06dd      	lsls	r5, r3, #27
 8017972:	d411      	bmi.n	8017998 <__swsetup_r+0x50>
 8017974:	2309      	movs	r3, #9
 8017976:	6033      	str	r3, [r6, #0]
 8017978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801797c:	81a3      	strh	r3, [r4, #12]
 801797e:	f04f 30ff 	mov.w	r0, #4294967295
 8017982:	e03e      	b.n	8017a02 <__swsetup_r+0xba>
 8017984:	4b25      	ldr	r3, [pc, #148]	; (8017a1c <__swsetup_r+0xd4>)
 8017986:	429c      	cmp	r4, r3
 8017988:	d101      	bne.n	801798e <__swsetup_r+0x46>
 801798a:	68ac      	ldr	r4, [r5, #8]
 801798c:	e7eb      	b.n	8017966 <__swsetup_r+0x1e>
 801798e:	4b24      	ldr	r3, [pc, #144]	; (8017a20 <__swsetup_r+0xd8>)
 8017990:	429c      	cmp	r4, r3
 8017992:	bf08      	it	eq
 8017994:	68ec      	ldreq	r4, [r5, #12]
 8017996:	e7e6      	b.n	8017966 <__swsetup_r+0x1e>
 8017998:	0758      	lsls	r0, r3, #29
 801799a:	d512      	bpl.n	80179c2 <__swsetup_r+0x7a>
 801799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801799e:	b141      	cbz	r1, 80179b2 <__swsetup_r+0x6a>
 80179a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179a4:	4299      	cmp	r1, r3
 80179a6:	d002      	beq.n	80179ae <__swsetup_r+0x66>
 80179a8:	4630      	mov	r0, r6
 80179aa:	f7ff fa99 	bl	8016ee0 <_free_r>
 80179ae:	2300      	movs	r3, #0
 80179b0:	6363      	str	r3, [r4, #52]	; 0x34
 80179b2:	89a3      	ldrh	r3, [r4, #12]
 80179b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80179b8:	81a3      	strh	r3, [r4, #12]
 80179ba:	2300      	movs	r3, #0
 80179bc:	6063      	str	r3, [r4, #4]
 80179be:	6923      	ldr	r3, [r4, #16]
 80179c0:	6023      	str	r3, [r4, #0]
 80179c2:	89a3      	ldrh	r3, [r4, #12]
 80179c4:	f043 0308 	orr.w	r3, r3, #8
 80179c8:	81a3      	strh	r3, [r4, #12]
 80179ca:	6923      	ldr	r3, [r4, #16]
 80179cc:	b94b      	cbnz	r3, 80179e2 <__swsetup_r+0x9a>
 80179ce:	89a3      	ldrh	r3, [r4, #12]
 80179d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80179d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179d8:	d003      	beq.n	80179e2 <__swsetup_r+0x9a>
 80179da:	4621      	mov	r1, r4
 80179dc:	4630      	mov	r0, r6
 80179de:	f000 f98d 	bl	8017cfc <__smakebuf_r>
 80179e2:	89a0      	ldrh	r0, [r4, #12]
 80179e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179e8:	f010 0301 	ands.w	r3, r0, #1
 80179ec:	d00a      	beq.n	8017a04 <__swsetup_r+0xbc>
 80179ee:	2300      	movs	r3, #0
 80179f0:	60a3      	str	r3, [r4, #8]
 80179f2:	6963      	ldr	r3, [r4, #20]
 80179f4:	425b      	negs	r3, r3
 80179f6:	61a3      	str	r3, [r4, #24]
 80179f8:	6923      	ldr	r3, [r4, #16]
 80179fa:	b943      	cbnz	r3, 8017a0e <__swsetup_r+0xc6>
 80179fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a00:	d1ba      	bne.n	8017978 <__swsetup_r+0x30>
 8017a02:	bd70      	pop	{r4, r5, r6, pc}
 8017a04:	0781      	lsls	r1, r0, #30
 8017a06:	bf58      	it	pl
 8017a08:	6963      	ldrpl	r3, [r4, #20]
 8017a0a:	60a3      	str	r3, [r4, #8]
 8017a0c:	e7f4      	b.n	80179f8 <__swsetup_r+0xb0>
 8017a0e:	2000      	movs	r0, #0
 8017a10:	e7f7      	b.n	8017a02 <__swsetup_r+0xba>
 8017a12:	bf00      	nop
 8017a14:	240000a8 	.word	0x240000a8
 8017a18:	080192c4 	.word	0x080192c4
 8017a1c:	080192e4 	.word	0x080192e4
 8017a20:	080192a4 	.word	0x080192a4

08017a24 <__register_exitproc>:
 8017a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8017ae4 <__register_exitproc+0xc0>
 8017a2c:	4606      	mov	r6, r0
 8017a2e:	f8d8 0000 	ldr.w	r0, [r8]
 8017a32:	461f      	mov	r7, r3
 8017a34:	460d      	mov	r5, r1
 8017a36:	4691      	mov	r9, r2
 8017a38:	f7ff fa29 	bl	8016e8e <__retarget_lock_acquire_recursive>
 8017a3c:	4b25      	ldr	r3, [pc, #148]	; (8017ad4 <__register_exitproc+0xb0>)
 8017a3e:	681c      	ldr	r4, [r3, #0]
 8017a40:	b934      	cbnz	r4, 8017a50 <__register_exitproc+0x2c>
 8017a42:	4c25      	ldr	r4, [pc, #148]	; (8017ad8 <__register_exitproc+0xb4>)
 8017a44:	601c      	str	r4, [r3, #0]
 8017a46:	4b25      	ldr	r3, [pc, #148]	; (8017adc <__register_exitproc+0xb8>)
 8017a48:	b113      	cbz	r3, 8017a50 <__register_exitproc+0x2c>
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8017a50:	6863      	ldr	r3, [r4, #4]
 8017a52:	2b1f      	cmp	r3, #31
 8017a54:	dd07      	ble.n	8017a66 <__register_exitproc+0x42>
 8017a56:	f8d8 0000 	ldr.w	r0, [r8]
 8017a5a:	f7ff fa1a 	bl	8016e92 <__retarget_lock_release_recursive>
 8017a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a66:	b34e      	cbz	r6, 8017abc <__register_exitproc+0x98>
 8017a68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8017a6c:	b988      	cbnz	r0, 8017a92 <__register_exitproc+0x6e>
 8017a6e:	4b1c      	ldr	r3, [pc, #112]	; (8017ae0 <__register_exitproc+0xbc>)
 8017a70:	b923      	cbnz	r3, 8017a7c <__register_exitproc+0x58>
 8017a72:	f8d8 0000 	ldr.w	r0, [r8]
 8017a76:	f7ff fa0b 	bl	8016e90 <__retarget_lock_release>
 8017a7a:	e7f0      	b.n	8017a5e <__register_exitproc+0x3a>
 8017a7c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8017a80:	f7ff fa08 	bl	8016e94 <malloc>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d0f4      	beq.n	8017a72 <__register_exitproc+0x4e>
 8017a88:	2300      	movs	r3, #0
 8017a8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8017a8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8017a92:	6863      	ldr	r3, [r4, #4]
 8017a94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8017a98:	2201      	movs	r2, #1
 8017a9a:	409a      	lsls	r2, r3
 8017a9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8017aa0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8017aa4:	4313      	orrs	r3, r2
 8017aa6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8017aaa:	2e02      	cmp	r6, #2
 8017aac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8017ab0:	bf02      	ittt	eq
 8017ab2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8017ab6:	4313      	orreq	r3, r2
 8017ab8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8017abc:	6863      	ldr	r3, [r4, #4]
 8017abe:	f8d8 0000 	ldr.w	r0, [r8]
 8017ac2:	1c5a      	adds	r2, r3, #1
 8017ac4:	3302      	adds	r3, #2
 8017ac6:	6062      	str	r2, [r4, #4]
 8017ac8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8017acc:	f7ff f9e1 	bl	8016e92 <__retarget_lock_release_recursive>
 8017ad0:	2000      	movs	r0, #0
 8017ad2:	e7c6      	b.n	8017a62 <__register_exitproc+0x3e>
 8017ad4:	24006d10 	.word	0x24006d10
 8017ad8:	24006c84 	.word	0x24006c84
 8017adc:	0801933c 	.word	0x0801933c
 8017ae0:	08016e95 	.word	0x08016e95
 8017ae4:	2400010c 	.word	0x2400010c

08017ae8 <_close_r>:
 8017ae8:	b538      	push	{r3, r4, r5, lr}
 8017aea:	4d06      	ldr	r5, [pc, #24]	; (8017b04 <_close_r+0x1c>)
 8017aec:	2300      	movs	r3, #0
 8017aee:	4604      	mov	r4, r0
 8017af0:	4608      	mov	r0, r1
 8017af2:	602b      	str	r3, [r5, #0]
 8017af4:	f7e9 fb00 	bl	80010f8 <_close>
 8017af8:	1c43      	adds	r3, r0, #1
 8017afa:	d102      	bne.n	8017b02 <_close_r+0x1a>
 8017afc:	682b      	ldr	r3, [r5, #0]
 8017afe:	b103      	cbz	r3, 8017b02 <_close_r+0x1a>
 8017b00:	6023      	str	r3, [r4, #0]
 8017b02:	bd38      	pop	{r3, r4, r5, pc}
 8017b04:	24006c80 	.word	0x24006c80

08017b08 <__sflush_r>:
 8017b08:	898a      	ldrh	r2, [r1, #12]
 8017b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0e:	4605      	mov	r5, r0
 8017b10:	0710      	lsls	r0, r2, #28
 8017b12:	460c      	mov	r4, r1
 8017b14:	d458      	bmi.n	8017bc8 <__sflush_r+0xc0>
 8017b16:	684b      	ldr	r3, [r1, #4]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	dc05      	bgt.n	8017b28 <__sflush_r+0x20>
 8017b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	dc02      	bgt.n	8017b28 <__sflush_r+0x20>
 8017b22:	2000      	movs	r0, #0
 8017b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b2a:	2e00      	cmp	r6, #0
 8017b2c:	d0f9      	beq.n	8017b22 <__sflush_r+0x1a>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b34:	682f      	ldr	r7, [r5, #0]
 8017b36:	602b      	str	r3, [r5, #0]
 8017b38:	d032      	beq.n	8017ba0 <__sflush_r+0x98>
 8017b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b3c:	89a3      	ldrh	r3, [r4, #12]
 8017b3e:	075a      	lsls	r2, r3, #29
 8017b40:	d505      	bpl.n	8017b4e <__sflush_r+0x46>
 8017b42:	6863      	ldr	r3, [r4, #4]
 8017b44:	1ac0      	subs	r0, r0, r3
 8017b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b48:	b10b      	cbz	r3, 8017b4e <__sflush_r+0x46>
 8017b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b4c:	1ac0      	subs	r0, r0, r3
 8017b4e:	2300      	movs	r3, #0
 8017b50:	4602      	mov	r2, r0
 8017b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b54:	6a21      	ldr	r1, [r4, #32]
 8017b56:	4628      	mov	r0, r5
 8017b58:	47b0      	blx	r6
 8017b5a:	1c43      	adds	r3, r0, #1
 8017b5c:	89a3      	ldrh	r3, [r4, #12]
 8017b5e:	d106      	bne.n	8017b6e <__sflush_r+0x66>
 8017b60:	6829      	ldr	r1, [r5, #0]
 8017b62:	291d      	cmp	r1, #29
 8017b64:	d82c      	bhi.n	8017bc0 <__sflush_r+0xb8>
 8017b66:	4a2a      	ldr	r2, [pc, #168]	; (8017c10 <__sflush_r+0x108>)
 8017b68:	40ca      	lsrs	r2, r1
 8017b6a:	07d6      	lsls	r6, r2, #31
 8017b6c:	d528      	bpl.n	8017bc0 <__sflush_r+0xb8>
 8017b6e:	2200      	movs	r2, #0
 8017b70:	6062      	str	r2, [r4, #4]
 8017b72:	04d9      	lsls	r1, r3, #19
 8017b74:	6922      	ldr	r2, [r4, #16]
 8017b76:	6022      	str	r2, [r4, #0]
 8017b78:	d504      	bpl.n	8017b84 <__sflush_r+0x7c>
 8017b7a:	1c42      	adds	r2, r0, #1
 8017b7c:	d101      	bne.n	8017b82 <__sflush_r+0x7a>
 8017b7e:	682b      	ldr	r3, [r5, #0]
 8017b80:	b903      	cbnz	r3, 8017b84 <__sflush_r+0x7c>
 8017b82:	6560      	str	r0, [r4, #84]	; 0x54
 8017b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b86:	602f      	str	r7, [r5, #0]
 8017b88:	2900      	cmp	r1, #0
 8017b8a:	d0ca      	beq.n	8017b22 <__sflush_r+0x1a>
 8017b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b90:	4299      	cmp	r1, r3
 8017b92:	d002      	beq.n	8017b9a <__sflush_r+0x92>
 8017b94:	4628      	mov	r0, r5
 8017b96:	f7ff f9a3 	bl	8016ee0 <_free_r>
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8017b9e:	e7c1      	b.n	8017b24 <__sflush_r+0x1c>
 8017ba0:	6a21      	ldr	r1, [r4, #32]
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	47b0      	blx	r6
 8017ba8:	1c41      	adds	r1, r0, #1
 8017baa:	d1c7      	bne.n	8017b3c <__sflush_r+0x34>
 8017bac:	682b      	ldr	r3, [r5, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d0c4      	beq.n	8017b3c <__sflush_r+0x34>
 8017bb2:	2b1d      	cmp	r3, #29
 8017bb4:	d001      	beq.n	8017bba <__sflush_r+0xb2>
 8017bb6:	2b16      	cmp	r3, #22
 8017bb8:	d101      	bne.n	8017bbe <__sflush_r+0xb6>
 8017bba:	602f      	str	r7, [r5, #0]
 8017bbc:	e7b1      	b.n	8017b22 <__sflush_r+0x1a>
 8017bbe:	89a3      	ldrh	r3, [r4, #12]
 8017bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	e7ad      	b.n	8017b24 <__sflush_r+0x1c>
 8017bc8:	690f      	ldr	r7, [r1, #16]
 8017bca:	2f00      	cmp	r7, #0
 8017bcc:	d0a9      	beq.n	8017b22 <__sflush_r+0x1a>
 8017bce:	0793      	lsls	r3, r2, #30
 8017bd0:	680e      	ldr	r6, [r1, #0]
 8017bd2:	bf08      	it	eq
 8017bd4:	694b      	ldreq	r3, [r1, #20]
 8017bd6:	600f      	str	r7, [r1, #0]
 8017bd8:	bf18      	it	ne
 8017bda:	2300      	movne	r3, #0
 8017bdc:	eba6 0807 	sub.w	r8, r6, r7
 8017be0:	608b      	str	r3, [r1, #8]
 8017be2:	f1b8 0f00 	cmp.w	r8, #0
 8017be6:	dd9c      	ble.n	8017b22 <__sflush_r+0x1a>
 8017be8:	6a21      	ldr	r1, [r4, #32]
 8017bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bec:	4643      	mov	r3, r8
 8017bee:	463a      	mov	r2, r7
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	47b0      	blx	r6
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	dc06      	bgt.n	8017c06 <__sflush_r+0xfe>
 8017bf8:	89a3      	ldrh	r3, [r4, #12]
 8017bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bfe:	81a3      	strh	r3, [r4, #12]
 8017c00:	f04f 30ff 	mov.w	r0, #4294967295
 8017c04:	e78e      	b.n	8017b24 <__sflush_r+0x1c>
 8017c06:	4407      	add	r7, r0
 8017c08:	eba8 0800 	sub.w	r8, r8, r0
 8017c0c:	e7e9      	b.n	8017be2 <__sflush_r+0xda>
 8017c0e:	bf00      	nop
 8017c10:	20400001 	.word	0x20400001

08017c14 <_fflush_r>:
 8017c14:	b538      	push	{r3, r4, r5, lr}
 8017c16:	690b      	ldr	r3, [r1, #16]
 8017c18:	4605      	mov	r5, r0
 8017c1a:	460c      	mov	r4, r1
 8017c1c:	b913      	cbnz	r3, 8017c24 <_fflush_r+0x10>
 8017c1e:	2500      	movs	r5, #0
 8017c20:	4628      	mov	r0, r5
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	b118      	cbz	r0, 8017c2e <_fflush_r+0x1a>
 8017c26:	6983      	ldr	r3, [r0, #24]
 8017c28:	b90b      	cbnz	r3, 8017c2e <_fflush_r+0x1a>
 8017c2a:	f7ff f85b 	bl	8016ce4 <__sinit>
 8017c2e:	4b14      	ldr	r3, [pc, #80]	; (8017c80 <_fflush_r+0x6c>)
 8017c30:	429c      	cmp	r4, r3
 8017c32:	d11b      	bne.n	8017c6c <_fflush_r+0x58>
 8017c34:	686c      	ldr	r4, [r5, #4]
 8017c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d0ef      	beq.n	8017c1e <_fflush_r+0xa>
 8017c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c40:	07d0      	lsls	r0, r2, #31
 8017c42:	d404      	bmi.n	8017c4e <_fflush_r+0x3a>
 8017c44:	0599      	lsls	r1, r3, #22
 8017c46:	d402      	bmi.n	8017c4e <_fflush_r+0x3a>
 8017c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c4a:	f7ff f920 	bl	8016e8e <__retarget_lock_acquire_recursive>
 8017c4e:	4628      	mov	r0, r5
 8017c50:	4621      	mov	r1, r4
 8017c52:	f7ff ff59 	bl	8017b08 <__sflush_r>
 8017c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c58:	07da      	lsls	r2, r3, #31
 8017c5a:	4605      	mov	r5, r0
 8017c5c:	d4e0      	bmi.n	8017c20 <_fflush_r+0xc>
 8017c5e:	89a3      	ldrh	r3, [r4, #12]
 8017c60:	059b      	lsls	r3, r3, #22
 8017c62:	d4dd      	bmi.n	8017c20 <_fflush_r+0xc>
 8017c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c66:	f7ff f914 	bl	8016e92 <__retarget_lock_release_recursive>
 8017c6a:	e7d9      	b.n	8017c20 <_fflush_r+0xc>
 8017c6c:	4b05      	ldr	r3, [pc, #20]	; (8017c84 <_fflush_r+0x70>)
 8017c6e:	429c      	cmp	r4, r3
 8017c70:	d101      	bne.n	8017c76 <_fflush_r+0x62>
 8017c72:	68ac      	ldr	r4, [r5, #8]
 8017c74:	e7df      	b.n	8017c36 <_fflush_r+0x22>
 8017c76:	4b04      	ldr	r3, [pc, #16]	; (8017c88 <_fflush_r+0x74>)
 8017c78:	429c      	cmp	r4, r3
 8017c7a:	bf08      	it	eq
 8017c7c:	68ec      	ldreq	r4, [r5, #12]
 8017c7e:	e7da      	b.n	8017c36 <_fflush_r+0x22>
 8017c80:	080192c4 	.word	0x080192c4
 8017c84:	080192e4 	.word	0x080192e4
 8017c88:	080192a4 	.word	0x080192a4

08017c8c <_lseek_r>:
 8017c8c:	b538      	push	{r3, r4, r5, lr}
 8017c8e:	4d07      	ldr	r5, [pc, #28]	; (8017cac <_lseek_r+0x20>)
 8017c90:	4604      	mov	r4, r0
 8017c92:	4608      	mov	r0, r1
 8017c94:	4611      	mov	r1, r2
 8017c96:	2200      	movs	r2, #0
 8017c98:	602a      	str	r2, [r5, #0]
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	f7e9 fa36 	bl	800110c <_lseek>
 8017ca0:	1c43      	adds	r3, r0, #1
 8017ca2:	d102      	bne.n	8017caa <_lseek_r+0x1e>
 8017ca4:	682b      	ldr	r3, [r5, #0]
 8017ca6:	b103      	cbz	r3, 8017caa <_lseek_r+0x1e>
 8017ca8:	6023      	str	r3, [r4, #0]
 8017caa:	bd38      	pop	{r3, r4, r5, pc}
 8017cac:	24006c80 	.word	0x24006c80

08017cb0 <__swhatbuf_r>:
 8017cb0:	b570      	push	{r4, r5, r6, lr}
 8017cb2:	460e      	mov	r6, r1
 8017cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb8:	2900      	cmp	r1, #0
 8017cba:	b096      	sub	sp, #88	; 0x58
 8017cbc:	4614      	mov	r4, r2
 8017cbe:	461d      	mov	r5, r3
 8017cc0:	da08      	bge.n	8017cd4 <__swhatbuf_r+0x24>
 8017cc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	602a      	str	r2, [r5, #0]
 8017cca:	061a      	lsls	r2, r3, #24
 8017ccc:	d410      	bmi.n	8017cf0 <__swhatbuf_r+0x40>
 8017cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cd2:	e00e      	b.n	8017cf2 <__swhatbuf_r+0x42>
 8017cd4:	466a      	mov	r2, sp
 8017cd6:	f000 f86f 	bl	8017db8 <_fstat_r>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	dbf1      	blt.n	8017cc2 <__swhatbuf_r+0x12>
 8017cde:	9a01      	ldr	r2, [sp, #4]
 8017ce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017ce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ce8:	425a      	negs	r2, r3
 8017cea:	415a      	adcs	r2, r3
 8017cec:	602a      	str	r2, [r5, #0]
 8017cee:	e7ee      	b.n	8017cce <__swhatbuf_r+0x1e>
 8017cf0:	2340      	movs	r3, #64	; 0x40
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	6023      	str	r3, [r4, #0]
 8017cf6:	b016      	add	sp, #88	; 0x58
 8017cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017cfc <__smakebuf_r>:
 8017cfc:	898b      	ldrh	r3, [r1, #12]
 8017cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d00:	079d      	lsls	r5, r3, #30
 8017d02:	4606      	mov	r6, r0
 8017d04:	460c      	mov	r4, r1
 8017d06:	d507      	bpl.n	8017d18 <__smakebuf_r+0x1c>
 8017d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d0c:	6023      	str	r3, [r4, #0]
 8017d0e:	6123      	str	r3, [r4, #16]
 8017d10:	2301      	movs	r3, #1
 8017d12:	6163      	str	r3, [r4, #20]
 8017d14:	b002      	add	sp, #8
 8017d16:	bd70      	pop	{r4, r5, r6, pc}
 8017d18:	ab01      	add	r3, sp, #4
 8017d1a:	466a      	mov	r2, sp
 8017d1c:	f7ff ffc8 	bl	8017cb0 <__swhatbuf_r>
 8017d20:	9900      	ldr	r1, [sp, #0]
 8017d22:	4605      	mov	r5, r0
 8017d24:	4630      	mov	r0, r6
 8017d26:	f7ff f947 	bl	8016fb8 <_malloc_r>
 8017d2a:	b948      	cbnz	r0, 8017d40 <__smakebuf_r+0x44>
 8017d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d30:	059a      	lsls	r2, r3, #22
 8017d32:	d4ef      	bmi.n	8017d14 <__smakebuf_r+0x18>
 8017d34:	f023 0303 	bic.w	r3, r3, #3
 8017d38:	f043 0302 	orr.w	r3, r3, #2
 8017d3c:	81a3      	strh	r3, [r4, #12]
 8017d3e:	e7e3      	b.n	8017d08 <__smakebuf_r+0xc>
 8017d40:	4b0d      	ldr	r3, [pc, #52]	; (8017d78 <__smakebuf_r+0x7c>)
 8017d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d44:	89a3      	ldrh	r3, [r4, #12]
 8017d46:	6020      	str	r0, [r4, #0]
 8017d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d4c:	81a3      	strh	r3, [r4, #12]
 8017d4e:	9b00      	ldr	r3, [sp, #0]
 8017d50:	6163      	str	r3, [r4, #20]
 8017d52:	9b01      	ldr	r3, [sp, #4]
 8017d54:	6120      	str	r0, [r4, #16]
 8017d56:	b15b      	cbz	r3, 8017d70 <__smakebuf_r+0x74>
 8017d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	f000 f83d 	bl	8017ddc <_isatty_r>
 8017d62:	b128      	cbz	r0, 8017d70 <__smakebuf_r+0x74>
 8017d64:	89a3      	ldrh	r3, [r4, #12]
 8017d66:	f023 0303 	bic.w	r3, r3, #3
 8017d6a:	f043 0301 	orr.w	r3, r3, #1
 8017d6e:	81a3      	strh	r3, [r4, #12]
 8017d70:	89a0      	ldrh	r0, [r4, #12]
 8017d72:	4305      	orrs	r5, r0
 8017d74:	81a5      	strh	r5, [r4, #12]
 8017d76:	e7cd      	b.n	8017d14 <__smakebuf_r+0x18>
 8017d78:	08016c7d 	.word	0x08016c7d

08017d7c <__malloc_lock>:
 8017d7c:	4801      	ldr	r0, [pc, #4]	; (8017d84 <__malloc_lock+0x8>)
 8017d7e:	f7ff b886 	b.w	8016e8e <__retarget_lock_acquire_recursive>
 8017d82:	bf00      	nop
 8017d84:	24006b6d 	.word	0x24006b6d

08017d88 <__malloc_unlock>:
 8017d88:	4801      	ldr	r0, [pc, #4]	; (8017d90 <__malloc_unlock+0x8>)
 8017d8a:	f7ff b882 	b.w	8016e92 <__retarget_lock_release_recursive>
 8017d8e:	bf00      	nop
 8017d90:	24006b6d 	.word	0x24006b6d

08017d94 <_read_r>:
 8017d94:	b538      	push	{r3, r4, r5, lr}
 8017d96:	4d07      	ldr	r5, [pc, #28]	; (8017db4 <_read_r+0x20>)
 8017d98:	4604      	mov	r4, r0
 8017d9a:	4608      	mov	r0, r1
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	2200      	movs	r2, #0
 8017da0:	602a      	str	r2, [r5, #0]
 8017da2:	461a      	mov	r2, r3
 8017da4:	f7e9 f98c 	bl	80010c0 <_read>
 8017da8:	1c43      	adds	r3, r0, #1
 8017daa:	d102      	bne.n	8017db2 <_read_r+0x1e>
 8017dac:	682b      	ldr	r3, [r5, #0]
 8017dae:	b103      	cbz	r3, 8017db2 <_read_r+0x1e>
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	24006c80 	.word	0x24006c80

08017db8 <_fstat_r>:
 8017db8:	b538      	push	{r3, r4, r5, lr}
 8017dba:	4d07      	ldr	r5, [pc, #28]	; (8017dd8 <_fstat_r+0x20>)
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	4608      	mov	r0, r1
 8017dc2:	4611      	mov	r1, r2
 8017dc4:	602b      	str	r3, [r5, #0]
 8017dc6:	f7e9 f99a 	bl	80010fe <_fstat>
 8017dca:	1c43      	adds	r3, r0, #1
 8017dcc:	d102      	bne.n	8017dd4 <_fstat_r+0x1c>
 8017dce:	682b      	ldr	r3, [r5, #0]
 8017dd0:	b103      	cbz	r3, 8017dd4 <_fstat_r+0x1c>
 8017dd2:	6023      	str	r3, [r4, #0]
 8017dd4:	bd38      	pop	{r3, r4, r5, pc}
 8017dd6:	bf00      	nop
 8017dd8:	24006c80 	.word	0x24006c80

08017ddc <_isatty_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4d06      	ldr	r5, [pc, #24]	; (8017df8 <_isatty_r+0x1c>)
 8017de0:	2300      	movs	r3, #0
 8017de2:	4604      	mov	r4, r0
 8017de4:	4608      	mov	r0, r1
 8017de6:	602b      	str	r3, [r5, #0]
 8017de8:	f7e9 f98e 	bl	8001108 <_isatty>
 8017dec:	1c43      	adds	r3, r0, #1
 8017dee:	d102      	bne.n	8017df6 <_isatty_r+0x1a>
 8017df0:	682b      	ldr	r3, [r5, #0]
 8017df2:	b103      	cbz	r3, 8017df6 <_isatty_r+0x1a>
 8017df4:	6023      	str	r3, [r4, #0]
 8017df6:	bd38      	pop	{r3, r4, r5, pc}
 8017df8:	24006c80 	.word	0x24006c80

08017dfc <_init>:
 8017dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfe:	bf00      	nop
 8017e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e02:	bc08      	pop	{r3}
 8017e04:	469e      	mov	lr, r3
 8017e06:	4770      	bx	lr

08017e08 <_fini>:
 8017e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e0a:	bf00      	nop
 8017e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e0e:	bc08      	pop	{r3}
 8017e10:	469e      	mov	lr, r3
 8017e12:	4770      	bx	lr
